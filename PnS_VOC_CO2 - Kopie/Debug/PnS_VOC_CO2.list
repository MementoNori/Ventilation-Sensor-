
PnS_VOC_CO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005094  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005224  08005224  00006224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052bc  080052bc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080052bc  080052bc  000062bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c4  080052c4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c4  080052c4  000062c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052c8  080052c8  000062c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080052cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08005334  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005334  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee49  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fc  00000000  00000000  00015ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000181e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac9  00000000  00000000  00018ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273fd  00000000  00000000  00019ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001191e  00000000  00000000  00040eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb9f2  00000000  00000000  000527d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e1c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d4  00000000  00000000  0013e20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001422e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800520c 	.word	0x0800520c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800520c 	.word	0x0800520c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f003 f9bd 	bl	80038f0 <HAL_UART_Transmit>
    return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000d8 	.word	0x200000d8

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fd1a 	bl	8000fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f825 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8e5 	bl	8000760 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f873 	bl	8000680 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f8b1 	bl	8000700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //start communication with sensor

  HAL_Delay(10);
 800059e:	200a      	movs	r0, #10
 80005a0:	f000 fd84 	bl	80010ac <HAL_Delay>

  //first I2C initialization
  sgp30_iaq_init();
 80005a4:	f000 fb0a 	bl	8000bbc <sgp30_iaq_init>
  HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f000 fd7e 	bl	80010ac <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //measurement of values
	  uint16_t co2, tvoc;
	  sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 80005b0:	1dba      	adds	r2, r7, #6
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fae3 	bl	8000b82 <sgp30_measure_iaq_blocking_read>
	  HAL_Delay(1000); //read every second
 80005bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c0:	f000 fd74 	bl	80010ac <HAL_Delay>
	  printf("CO2: %d ppm, TVOC: %d ppb\r\n", co2, tvoc);
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	4619      	mov	r1, r3
 80005c8:	88bb      	ldrh	r3, [r7, #4]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <main+0x54>)
 80005ce:	f003 ffaf 	bl	8004530 <iprintf>
  {
 80005d2:	bf00      	nop
 80005d4:	e7ec      	b.n	80005b0 <main+0x2c>
 80005d6:	bf00      	nop
 80005d8:	08005224 	.word	0x08005224

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	@ 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	@ 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fff5 	bl	80045da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f001 fe15 	bl	8002230 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f8d8 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000610:	2310      	movs	r3, #16
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	@ 0x60
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000624:	2301      	movs	r3, #1
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800062c:	2328      	movs	r3, #40	@ 0x28
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000630:	2307      	movs	r3, #7
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fe4b 	bl	80022dc <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800064c:	f000 f8b8 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2303      	movs	r3, #3
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2104      	movs	r1, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fa13 	bl	8002a94 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f8a4 	bl	80007c0 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3758      	adds	r7, #88	@ 0x58
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_I2C1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_I2C1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_I2C1_Init+0x74>)
 800068c:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <MX_I2C1_Init+0x7c>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_I2C1_Init+0x74>)
 8000698:	2201      	movs	r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	@ (80006f4 <MX_I2C1_Init+0x74>)
 80006bc:	f000 ffc2 	bl	8001644 <HAL_I2C_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006c6:	f000 f87b 	bl	80007c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <MX_I2C1_Init+0x74>)
 80006ce:	f001 fd09 	bl	80020e4 <HAL_I2CEx_ConfigAnalogFilter>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d8:	f000 f872 	bl	80007c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_I2C1_Init+0x74>)
 80006e0:	f001 fd4b 	bl	800217a <HAL_I2CEx_ConfigDigitalFilter>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f869 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000084 	.word	0x20000084
 80006f8:	40005400 	.word	0x40005400
 80006fc:	10d19ce4 	.word	0x10d19ce4

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	@ (800075c <MX_USART1_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_USART1_UART_Init+0x58>)
 8000744:	f003 f886 	bl	8003854 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f837 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000d8 	.word	0x200000d8
 800075c:	40013800 	.word	0x40013800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_GPIO_Init+0x58>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <MX_GPIO_Init+0x58>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000780:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <MX_GPIO_Init+0x58>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2104      	movs	r1, #4
 8000790:	480a      	ldr	r0, [pc, #40]	@ (80007bc <MX_GPIO_Init+0x5c>)
 8000792:	f000 ff3f 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000796:	2304      	movs	r3, #4
 8000798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_GPIO_Init+0x5c>)
 80007ac:	f000 fd88 	bl	80012c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80007d8:	23ff      	movs	r3, #255	@ 0xff
 80007da:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80007dc:	2300      	movs	r3, #0
 80007de:	81fb      	strh	r3, [r7, #14]
 80007e0:	e021      	b.n	8000826 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7b7b      	ldrb	r3, [r7, #13]
 80007ec:	4053      	eors	r3, r2
 80007ee:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80007f0:	2308      	movs	r3, #8
 80007f2:	733b      	strb	r3, [r7, #12]
 80007f4:	e011      	b.n	800081a <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 80007f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da07      	bge.n	800080e <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	b25b      	sxtb	r3, r3
 8000804:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8000808:	b25b      	sxtb	r3, r3
 800080a:	737b      	strb	r3, [r7, #13]
 800080c:	e002      	b.n	8000814 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 800080e:	7b7b      	ldrb	r3, [r7, #13]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000814:	7b3b      	ldrb	r3, [r7, #12]
 8000816:	3b01      	subs	r3, #1
 8000818:	733b      	strb	r3, [r7, #12]
 800081a:	7b3b      	ldrb	r3, [r7, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1ea      	bne.n	80007f6 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	3301      	adds	r3, #1
 8000824:	81fb      	strh	r3, [r7, #14]
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3d9      	bcc.n	80007e2 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 800082e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	807b      	strh	r3, [r7, #2]
 8000848:	4613      	mov	r3, r2
 800084a:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 800084c:	887b      	ldrh	r3, [r7, #2]
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ffbb 	bl	80007cc <sensirion_common_generate_crc>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	787b      	ldrb	r3, [r7, #1]
 800085c:	4293      	cmp	r3, r2
 800085e:	d002      	beq.n	8000866 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	e000      	b.n	8000868 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	817b      	strh	r3, [r7, #10]
 8000880:	4613      	mov	r3, r2
 8000882:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8000888:	897b      	ldrh	r3, [r7, #10]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	b29a      	uxth	r2, r3
 800088e:	8abb      	ldrh	r3, [r7, #20]
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	82b9      	strh	r1, [r7, #20]
 8000894:	4619      	mov	r1, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	440b      	add	r3, r1
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 800089e:	8abb      	ldrh	r3, [r7, #20]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	82ba      	strh	r2, [r7, #20]
 80008a4:	461a      	mov	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4413      	add	r3, r2
 80008aa:	897a      	ldrh	r2, [r7, #10]
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	75fb      	strb	r3, [r7, #23]
 80008b4:	e030      	b.n	8000918 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	8abb      	ldrh	r3, [r7, #20]
 80008c6:	1c59      	adds	r1, r3, #1
 80008c8:	82b9      	strh	r1, [r7, #20]
 80008ca:	4619      	mov	r1, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	440b      	add	r3, r1
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	8abb      	ldrh	r3, [r7, #20]
 80008e0:	1c59      	adds	r1, r3, #1
 80008e2:	82b9      	strh	r1, [r7, #20]
 80008e4:	4619      	mov	r1, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	440b      	add	r3, r1
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 80008ee:	8abb      	ldrh	r3, [r7, #20]
 80008f0:	3b02      	subs	r3, #2
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4413      	add	r3, r2
 80008f6:	2102      	movs	r1, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff67 	bl	80007cc <sensirion_common_generate_crc>
 80008fe:	4603      	mov	r3, r0
 8000900:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8000902:	8abb      	ldrh	r3, [r7, #20]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	82ba      	strh	r2, [r7, #20]
 8000908:	461a      	mov	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	7cfa      	ldrb	r2, [r7, #19]
 8000910:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	3301      	adds	r3, #1
 8000916:	75fb      	strb	r3, [r7, #23]
 8000918:	7dfa      	ldrb	r2, [r7, #23]
 800091a:	7a7b      	ldrb	r3, [r7, #9]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3ca      	bcc.n	80008b6 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8000920:	8abb      	ldrh	r3, [r7, #20]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 800092a:	b580      	push	{r7, lr}
 800092c:	b096      	sub	sp, #88	@ 0x58
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	6039      	str	r1, [r7, #0]
 8000934:	71fb      	strb	r3, [r7, #7]
 8000936:	4613      	mov	r3, r2
 8000938:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 800093a:	88bb      	ldrh	r3, [r7, #4]
 800093c:	461a      	mov	r2, r3
 800093e:	0052      	lsls	r2, r2, #1
 8000940:	4413      	add	r3, r2
 8000942:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800094c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f8ad 	bl	8000ab4 <sensirion_i2c_read>
 800095a:	4603      	mov	r3, r0
 800095c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    if (ret != NO_ERROR)
 8000960:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000968:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800096c:	e047      	b.n	80009fe <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800096e:	2300      	movs	r3, #0
 8000970:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000974:	2300      	movs	r3, #0
 8000976:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800097a:	e039      	b.n	80009f0 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800097c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000982:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000984:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000988:	3302      	adds	r3, #2
 800098a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800098c:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	2102      	movs	r1, #2
 8000994:	f7ff ff52 	bl	800083c <sensirion_common_check_crc>
 8000998:	4603      	mov	r3, r0
 800099a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (ret != NO_ERROR)
 800099e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 80009a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80009aa:	e028      	b.n	80009fe <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 80009ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009b2:	441a      	add	r2, r3
 80009b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80009b8:	1c59      	adds	r1, r3, #1
 80009ba:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 80009be:	4619      	mov	r1, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	440b      	add	r3, r1
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 80009c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009cc:	3301      	adds	r3, #1
 80009ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009d0:	441a      	add	r2, r3
 80009d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80009d6:	1c59      	adds	r1, r3, #1
 80009d8:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 80009dc:	4619      	mov	r1, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	440b      	add	r3, r1
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80009e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009ea:	3303      	adds	r3, #3
 80009ec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80009f0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80009f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d3bf      	bcc.n	800097c <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3758      	adds	r7, #88	@ 0x58
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b084      	sub	sp, #16
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	6039      	str	r1, [r7, #0]
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	4613      	mov	r3, r2
 8000a14:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8000a16:	88ba      	ldrh	r2, [r7, #4]
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	6839      	ldr	r1, [r7, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff84 	bl	800092a <sensirion_i2c_read_words_as_bytes>
 8000a22:	4603      	mov	r3, r0
 8000a24:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 8000a26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <sensirion_i2c_read_words+0x2e>
        return ret;
 8000a2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a32:	e020      	b.n	8000a76 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e017      	b.n	8000a6a <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b219      	sxth	r1, r3
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b28a      	uxth	r2, r1
 8000a62:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	3301      	adds	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	88ba      	ldrh	r2, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8e2      	bhi.n	8000a3a <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b084      	sub	sp, #16
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	460a      	mov	r2, r1
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8000a8e:	88b9      	ldrh	r1, [r7, #4]
 8000a90:	f107 000c 	add.w	r0, r7, #12
 8000a94:	2300      	movs	r3, #0
 8000a96:	2200      	movs	r2, #0
 8000a98:	f7ff feea 	bl	8000870 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f821 	bl	8000aec <sensirion_i2c_write>
 8000aaa:	4603      	mov	r3, r0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
    // IMPLEMENT
	return HAL_I2C_Master_Receive(&hi2c1, address << 1, data, count, HAL_MAX_DELAY);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	b299      	uxth	r1, r3
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad2:	9200      	str	r2, [sp, #0]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <sensirion_i2c_read+0x34>)
 8000ad8:	f000 ff68 	bl	80019ac <HAL_I2C_Master_Receive>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b25b      	sxtb	r3, r3

}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000084 	.word	0x20000084

08000aec <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80bb      	strh	r3, [r7, #4]
    // IMPLEMENT
    return HAL_I2C_Master_Transmit(&hi2c1, address << 1, data, count, HAL_MAX_DELAY);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	b299      	uxth	r1, r3
 8000b04:	88bb      	ldrh	r3, [r7, #4]
 8000b06:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0a:	9200      	str	r2, [sp, #0]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <sensirion_i2c_write+0x34>)
 8000b10:	f000 fe34 	bl	800177c <HAL_I2C_Master_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b25b      	sxtb	r3, r3

}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000084 	.word	0x20000084

08000b24 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    // IMPLEMENT
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8000b3c:	2358      	movs	r3, #88	@ 0x58
 8000b3e:	f242 0108 	movw	r1, #8200	@ 0x2008
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff9b 	bl	8000a7e <sensirion_i2c_write_cmd>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm) {
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8000b58:	2058      	movs	r0, #88	@ 0x58
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	2202      	movs	r2, #2
 8000b60:	4619      	mov	r1, r3
 8000b62:	f7ff ff50 	bl	8000a06 <sensirion_i2c_read_words>
 8000b66:	4603      	mov	r3, r0
 8000b68:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 8000b6a:	897a      	ldrh	r2, [r7, #10]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8000b70:	893a      	ldrh	r2, [r7, #8]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	801a      	strh	r2, [r3, #0]

    return ret;
 8000b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t* tvoc_ppb,
                                        uint16_t* co2_eq_ppm) {
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8000b8c:	f7ff ffd4 	bl	8000b38 <sgp30_measure_iaq>
 8000b90:	4603      	mov	r3, r0
 8000b92:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8000b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 8000b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba0:	e008      	b.n	8000bb4 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8000ba2:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8000ba6:	f7ff ffbd 	bl	8000b24 <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffce 	bl	8000b4e <sgp30_read_iaq>
 8000bb2:	4603      	mov	r3, r0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 8000bc2:	2358      	movs	r3, #88	@ 0x58
 8000bc4:	f242 0103 	movw	r1, #8195	@ 0x2003
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff58 	bl	8000a7e <sensirion_i2c_write_cmd>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 8000bd2:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000bd6:	f7ff ffa5 	bl	8000b24 <sensirion_sleep_usec>
    return ret;
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0ac      	sub	sp, #176	@ 0xb0
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2288      	movs	r2, #136	@ 0x88
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 fcc2 	bl	80045da <memset>
  if(hi2c->Instance==I2C1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <HAL_I2C_MspInit+0xb0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d13b      	bne.n	8000cd8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c60:	2340      	movs	r3, #64	@ 0x40
 8000c62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 f935 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c78:	f7ff fda2 	bl	80007c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = VOC_SCL_Pin|VOC_SDA_Pin;
 8000c94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <HAL_I2C_MspInit+0xb8>)
 8000cbc:	f000 fb00 	bl	80012c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000cc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cd8:	bf00      	nop
 8000cda:	37b0      	adds	r7, #176	@ 0xb0
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ac      	sub	sp, #176	@ 0xb0
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2288      	movs	r2, #136	@ 0x88
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fc64 	bl	80045da <memset>
  if(huart->Instance==USART1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a21      	ldr	r2, [pc, #132]	@ (8000d9c <HAL_UART_MspInit+0xb0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d13a      	bne.n	8000d92 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d20:	2300      	movs	r3, #0
 8000d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 f8d7 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d34:	f7ff fd44 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_UART_MspInit+0xb4>)
 8000d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3c:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <HAL_UART_MspInit+0xb4>)
 8000d3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d42:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <HAL_UART_MspInit+0xb4>)
 8000d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <HAL_UART_MspInit+0xb4>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d54:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <HAL_UART_MspInit+0xb4>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_UART_MspInit+0xb4>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d68:	23c0      	movs	r3, #192	@ 0xc0
 8000d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <HAL_UART_MspInit+0xb8>)
 8000d8e:	f000 fa97 	bl	80012c0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	37b0      	adds	r7, #176	@ 0xb0
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40013800 	.word	0x40013800
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000400 	.word	0x48000400

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <NMI_Handler+0x4>

08000db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <MemManage_Handler+0x4>

08000dc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfe:	f000 f935 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
  }

  return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb80 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
  }
  return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f003 fbb2 	bl	8004678 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20018000 	.word	0x20018000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000160 	.word	0x20000160
 8000f48:	200002b8 	.word	0x200002b8

08000f4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f74:	f7ff ffea 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f003 fb71 	bl	8004684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa2:	f7ff faef 	bl	8000584 <main>

08000fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fb4:	080052cc 	.word	0x080052cc
  ldr r2, =_sbss
 8000fb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fbc:	200002b4 	.word	0x200002b4

08000fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_2_IRQHandler>

08000fc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f943 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f80e 	bl	8000ff4 <HAL_InitTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	e001      	b.n	8000fe8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe4:	f7ff fe00 	bl	8000be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <HAL_InitTick+0x6c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d023      	beq.n	8001050 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <HAL_InitTick+0x70>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_InitTick+0x6c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f941 	bl	80012a6 <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10f      	bne.n	800104a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d809      	bhi.n	8001044 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f919 	bl	800126e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103c:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <HAL_InitTick+0x74>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e007      	b.n	8001054 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e004      	b.n	8001054 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e001      	b.n	8001054 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000000 	.word	0x20000000
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	20000164 	.word	0x20000164

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000164 	.word	0x20000164

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff47 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff5c 	bl	800113c <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff8e 	bl	80011ac <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffb0 	bl	8001214 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e17f      	b.n	80015d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8171 	beq.w	80015ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x40>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0201 	and.w	r2, r3, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b03      	cmp	r3, #3
 800136c:	d118      	bne.n	80013a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d017      	beq.n	80013dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	6939      	ldr	r1, [r7, #16]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80ac 	beq.w	80015ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b5f      	ldr	r3, [pc, #380]	@ (80015f0 <HAL_GPIO_Init+0x330>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001476:	4a5e      	ldr	r2, [pc, #376]	@ (80015f0 <HAL_GPIO_Init+0x330>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6613      	str	r3, [r2, #96]	@ 0x60
 800147e:	4b5c      	ldr	r3, [pc, #368]	@ (80015f0 <HAL_GPIO_Init+0x330>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800148a:	4a5a      	ldr	r2, [pc, #360]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014b4:	d025      	beq.n	8001502 <HAL_GPIO_Init+0x242>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4f      	ldr	r2, [pc, #316]	@ (80015f8 <HAL_GPIO_Init+0x338>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x23e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4e      	ldr	r2, [pc, #312]	@ (80015fc <HAL_GPIO_Init+0x33c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x23a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001600 <HAL_GPIO_Init+0x340>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x236>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001604 <HAL_GPIO_Init+0x344>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x232>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001608 <HAL_GPIO_Init+0x348>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x22e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4a      	ldr	r2, [pc, #296]	@ (800160c <HAL_GPIO_Init+0x34c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x22a>
 80014e6:	2306      	movs	r3, #6
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x244>
 8001502:	2300      	movs	r3, #0
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001514:	4937      	ldr	r1, [pc, #220]	@ (80015f4 <HAL_GPIO_Init+0x334>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001522:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <HAL_GPIO_Init+0x350>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001546:	4a32      	ldr	r2, [pc, #200]	@ (8001610 <HAL_GPIO_Init+0x350>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <HAL_GPIO_Init+0x350>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001570:	4a27      	ldr	r2, [pc, #156]	@ (8001610 <HAL_GPIO_Init+0x350>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001576:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <HAL_GPIO_Init+0x350>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800159a:	4a1d      	ldr	r2, [pc, #116]	@ (8001610 <HAL_GPIO_Init+0x350>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_GPIO_Init+0x350>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015c4:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <HAL_GPIO_Init+0x350>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f47f ae78 	bne.w	80012d0 <HAL_GPIO_Init+0x10>
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	48000400 	.word	0x48000400
 80015fc:	48000800 	.word	0x48000800
 8001600:	48000c00 	.word	0x48000c00
 8001604:	48001000 	.word	0x48001000
 8001608:	48001400 	.word	0x48001400
 800160c:	48001800 	.word	0x48001800
 8001610:	40010400 	.word	0x40010400

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001630:	e002      	b.n	8001638 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e08d      	b.n	8001772 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fae0 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	@ 0x24
 8001674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d107      	bne.n	80016be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	e006      	b.n	80016cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d108      	bne.n	80016e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	e007      	b.n	80016f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69d9      	ldr	r1, [r3, #28]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af02      	add	r7, sp, #8
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	461a      	mov	r2, r3
 8001788:	460b      	mov	r3, r1
 800178a:	817b      	strh	r3, [r7, #10]
 800178c:	4613      	mov	r3, r2
 800178e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b20      	cmp	r3, #32
 800179a:	f040 80fd 	bne.w	8001998 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_I2C_Master_Transmit+0x30>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e0f6      	b.n	800199a <HAL_I2C_Master_Transmit+0x21e>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b4:	f7ff fc6e 	bl	8001094 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2319      	movs	r3, #25
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fa0a 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0e1      	b.n	800199a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2221      	movs	r2, #33	@ 0x21
 80017da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2210      	movs	r2, #16
 80017e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	893a      	ldrh	r2, [r7, #8]
 80017f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	2bff      	cmp	r3, #255	@ 0xff
 8001806:	d906      	bls.n	8001816 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	22ff      	movs	r2, #255	@ 0xff
 800180c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800180e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e007      	b.n	8001826 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181a:	b29a      	uxth	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001820:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001824:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	d024      	beq.n	8001878 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3301      	adds	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	8979      	ldrh	r1, [r7, #10]
 800186a:	4b4e      	ldr	r3, [pc, #312]	@ (80019a4 <HAL_I2C_Master_Transmit+0x228>)
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 fc05 	bl	8002080 <I2C_TransferConfig>
 8001876:	e066      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187c:	b2da      	uxtb	r2, r3
 800187e:	8979      	ldrh	r1, [r7, #10]
 8001880:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_I2C_Master_Transmit+0x228>)
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fbfa 	bl	8002080 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800188c:	e05b      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f9fd 	bl	8001c92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07b      	b.n	800199a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d034      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x1ca>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d130      	bne.n	8001946 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	2200      	movs	r2, #0
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f976 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e04d      	b.n	800199a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001902:	b29b      	uxth	r3, r3
 8001904:	2bff      	cmp	r3, #255	@ 0xff
 8001906:	d90e      	bls.n	8001926 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	22ff      	movs	r2, #255	@ 0xff
 800190c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	b2da      	uxtb	r2, r3
 8001914:	8979      	ldrh	r1, [r7, #10]
 8001916:	2300      	movs	r3, #0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fbae 	bl	8002080 <I2C_TransferConfig>
 8001924:	e00f      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001934:	b2da      	uxtb	r2, r3
 8001936:	8979      	ldrh	r1, [r7, #10]
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fb9d 	bl	8002080 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d19e      	bne.n	800188e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	6a39      	ldr	r1, [r7, #32]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f9e3 	bl	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01a      	b.n	800199a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2220      	movs	r2, #32
 800196a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_I2C_Master_Transmit+0x22c>)
 8001978:	400b      	ands	r3, r1
 800197a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e000      	b.n	800199a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001998:	2302      	movs	r3, #2
  }
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	80002000 	.word	0x80002000
 80019a8:	fe00e800 	.word	0xfe00e800

080019ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	461a      	mov	r2, r3
 80019b8:	460b      	mov	r3, r1
 80019ba:	817b      	strh	r3, [r7, #10]
 80019bc:	4613      	mov	r3, r2
 80019be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b20      	cmp	r3, #32
 80019ca:	f040 80db 	bne.w	8001b84 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_I2C_Master_Receive+0x30>
 80019d8:	2302      	movs	r3, #2
 80019da:	e0d4      	b.n	8001b86 <HAL_I2C_Master_Receive+0x1da>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019e4:	f7ff fb56 	bl	8001094 <HAL_GetTick>
 80019e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2319      	movs	r3, #25
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f8f2 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0bf      	b.n	8001b86 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2222      	movs	r2, #34	@ 0x22
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2210      	movs	r2, #16
 8001a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	893a      	ldrh	r2, [r7, #8]
 8001a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2bff      	cmp	r3, #255	@ 0xff
 8001a36:	d90e      	bls.n	8001a56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	8979      	ldrh	r1, [r7, #10]
 8001a46:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <HAL_I2C_Master_Receive+0x1e4>)
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fb16 	bl	8002080 <I2C_TransferConfig>
 8001a54:	e06d      	b.n	8001b32 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	8979      	ldrh	r1, [r7, #10]
 8001a68:	4b49      	ldr	r3, [pc, #292]	@ (8001b90 <HAL_I2C_Master_Receive+0x1e4>)
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fb05 	bl	8002080 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a76:	e05c      	b.n	8001b32 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	6a39      	ldr	r1, [r7, #32]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f993 	bl	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e07c      	b.n	8001b86 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d034      	beq.n	8001b32 <HAL_I2C_Master_Receive+0x186>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d130      	bne.n	8001b32 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2180      	movs	r1, #128	@ 0x80
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f880 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e04d      	b.n	8001b86 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	2bff      	cmp	r3, #255	@ 0xff
 8001af2:	d90e      	bls.n	8001b12 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	22ff      	movs	r2, #255	@ 0xff
 8001af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	8979      	ldrh	r1, [r7, #10]
 8001b02:	2300      	movs	r3, #0
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fab8 	bl	8002080 <I2C_TransferConfig>
 8001b10:	e00f      	b.n	8001b32 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	8979      	ldrh	r1, [r7, #10]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 faa7 	bl	8002080 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d19d      	bne.n	8001a78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	6a39      	ldr	r1, [r7, #32]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f8ed 	bl	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e01a      	b.n	8001b86 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2220      	movs	r2, #32
 8001b56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_I2C_Master_Receive+0x1e8>)
 8001b64:	400b      	ands	r3, r1
 8001b66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	80002400 	.word	0x80002400
 8001b94:	fe00e800 	.word	0xfe00e800

08001b98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d103      	bne.n	8001bb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d007      	beq.n	8001bd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	619a      	str	r2, [r3, #24]
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf0:	e03b      	b.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f962 	bl	8001ec0 <I2C_IsErrorOccurred>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d02d      	beq.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0e:	f7ff fa41 	bl	8001094 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d122      	bne.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d113      	bne.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4013      	ands	r3, r2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d0b4      	beq.n	8001bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c9e:	e033      	b.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f90b 	bl	8001ec0 <I2C_IsErrorOccurred>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e031      	b.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d025      	beq.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbc:	f7ff f9ea 	bl	8001094 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d302      	bcc.n	8001cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11a      	bne.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d013      	beq.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e007      	b.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d1c4      	bne.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d2c:	e02f      	b.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f8c4 	bl	8001ec0 <I2C_IsErrorOccurred>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e02d      	b.n	8001d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7ff f9a7 	bl	8001094 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11a      	bne.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d013      	beq.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f043 0220 	orr.w	r2, r3, #32
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e007      	b.n	8001d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d1c8      	bne.n	8001d2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001db8:	e071      	b.n	8001e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f87e 	bl	8001ec0 <I2C_IsErrorOccurred>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d13b      	bne.n	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d138      	bne.n	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d105      	bne.n	8001dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d121      	bne.n	8001e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2204      	movs	r2, #4
 8001e16:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	e002      	b.n	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001e54:	f7ff f91e 	bl	8001094 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d302      	bcc.n	8001e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d116      	bne.n	8001e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00f      	beq.n	8001e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d002      	beq.n	8001eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d083      	beq.n	8001dba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	fe00e800 	.word	0xfe00e800

08001ec0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d068      	beq.n	8001fbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ef4:	e049      	b.n	8001f8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d045      	beq.n	8001f8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001efe:	f7ff f8c9 	bl	8001094 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <I2C_IsErrorOccurred+0x54>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d13a      	bne.n	8001f8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f36:	d121      	bne.n	8001f7c <I2C_IsErrorOccurred+0xbc>
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f3e:	d01d      	beq.n	8001f7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d01a      	beq.n	8001f7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f56:	f7ff f89d 	bl	8001094 <HAL_GetTick>
 8001f5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f5c:	e00e      	b.n	8001f7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f5e:	f7ff f899 	bl	8001094 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b19      	cmp	r3, #25
 8001f6a:	d907      	bls.n	8001f7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	f043 0320 	orr.w	r3, r3, #32
 8001f72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001f7a:	e006      	b.n	8001f8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d1e9      	bne.n	8001f5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d003      	beq.n	8001fa0 <I2C_IsErrorOccurred+0xe0>
 8001f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0aa      	beq.n	8001ef6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2220      	movs	r2, #32
 8001fae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002002:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800202c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f7ff fdaf 	bl	8001b98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <I2C_IsErrorOccurred+0x1bc>)
 8002046:	400b      	ands	r3, r1
 8002048:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	431a      	orrs	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800206e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002072:	4618      	mov	r0, r3
 8002074:	3728      	adds	r7, #40	@ 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	fe00e800 	.word	0xfe00e800

08002080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	817b      	strh	r3, [r7, #10]
 800208e:	4613      	mov	r3, r2
 8002090:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002092:	897b      	ldrh	r3, [r7, #10]
 8002094:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002098:	7a7b      	ldrb	r3, [r7, #9]
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	0d5b      	lsrs	r3, r3, #21
 80020ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <I2C_TransferConfig+0x60>)
 80020c0:	430b      	orrs	r3, r1
 80020c2:	43db      	mvns	r3, r3
 80020c4:	ea02 0103 	and.w	r1, r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	03ff63ff 	.word	0x03ff63ff

080020e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d138      	bne.n	800216c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002104:	2302      	movs	r3, #2
 8002106:	e032      	b.n	800216e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2224      	movs	r2, #36	@ 0x24
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e000      	b.n	800216e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b20      	cmp	r3, #32
 800218e:	d139      	bne.n	8002204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800219a:	2302      	movs	r3, #2
 800219c:	e033      	b.n	8002206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2224      	movs	r2, #36	@ 0x24
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	e000      	b.n	8002206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <HAL_PWREx_GetVoltageRange+0x18>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40007000 	.word	0x40007000

08002230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800223e:	d130      	bne.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002240:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800224c:	d038      	beq.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002256:	4a1e      	ldr	r2, [pc, #120]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2232      	movs	r2, #50	@ 0x32
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	4a1b      	ldr	r2, [pc, #108]	@ (80022d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0c9b      	lsrs	r3, r3, #18
 8002270:	3301      	adds	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002274:	e002      	b.n	800227c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3b01      	subs	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800227c:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002288:	d102      	bne.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x60>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f2      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229c:	d110      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e00f      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022a2:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ae:	d007      	beq.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022b8:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40007000 	.word	0x40007000
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83

080022dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e3ca      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ee:	4b97      	ldr	r3, [pc, #604]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f8:	4b94      	ldr	r3, [pc, #592]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80e4 	beq.w	80024d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_RCC_OscConfig+0x4a>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	f040 808b 	bne.w	8002434 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 8087 	bne.w	8002434 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002326:	4b89      	ldr	r3, [pc, #548]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x62>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e3a2      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	4b82      	ldr	r3, [pc, #520]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_RCC_OscConfig+0x7c>
 800234e:	4b7f      	ldr	r3, [pc, #508]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002356:	e005      	b.n	8002364 <HAL_RCC_OscConfig+0x88>
 8002358:	4b7c      	ldr	r3, [pc, #496]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002364:	4293      	cmp	r3, r2
 8002366:	d223      	bcs.n	80023b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fd55 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e383      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800237c:	4b73      	ldr	r3, [pc, #460]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a72      	ldr	r2, [pc, #456]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b70      	ldr	r3, [pc, #448]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	496d      	ldr	r1, [pc, #436]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239a:	4b6c      	ldr	r3, [pc, #432]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	4968      	ldr	r1, [pc, #416]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
 80023ae:	e025      	b.n	80023fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b0:	4b66      	ldr	r3, [pc, #408]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a65      	ldr	r2, [pc, #404]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b63      	ldr	r3, [pc, #396]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4960      	ldr	r1, [pc, #384]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	495b      	ldr	r1, [pc, #364]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fd15 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e343      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fc:	f000 fc4a 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b52      	ldr	r3, [pc, #328]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	4950      	ldr	r1, [pc, #320]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	4a4e      	ldr	r2, [pc, #312]	@ (8002554 <HAL_RCC_OscConfig+0x278>)
 800241a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800241c:	4b4e      	ldr	r3, [pc, #312]	@ (8002558 <HAL_RCC_OscConfig+0x27c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fde7 	bl	8000ff4 <HAL_InitTick>
 8002426:	4603      	mov	r3, r0
 8002428:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d052      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	e327      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d032      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800243c:	4b43      	ldr	r3, [pc, #268]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a42      	ldr	r2, [pc, #264]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002448:	f7fe fe24 	bl	8001094 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002450:	f7fe fe20 	bl	8001094 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e310      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002462:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246e:	4b37      	ldr	r3, [pc, #220]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a36      	ldr	r2, [pc, #216]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b34      	ldr	r3, [pc, #208]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4931      	ldr	r1, [pc, #196]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800248c:	4b2f      	ldr	r3, [pc, #188]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	492c      	ldr	r1, [pc, #176]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e01a      	b.n	80024d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024a2:	4b2a      	ldr	r3, [pc, #168]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a29      	ldr	r2, [pc, #164]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fdf1 	bl	8001094 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024b6:	f7fe fded 	bl	8001094 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e2dd      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c8:	4b20      	ldr	r3, [pc, #128]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x1da>
 80024d4:	e000      	b.n	80024d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d074      	beq.n	80025ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x21a>
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d10e      	bne.n	800250e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d10b      	bne.n	800250e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4b15      	ldr	r3, [pc, #84]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d064      	beq.n	80025cc <HAL_RCC_OscConfig+0x2f0>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d160      	bne.n	80025cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e2ba      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x24a>
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0b      	ldr	r2, [pc, #44]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e026      	b.n	8002574 <HAL_RCC_OscConfig+0x298>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800252e:	d115      	bne.n	800255c <HAL_RCC_OscConfig+0x280>
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a05      	ldr	r2, [pc, #20]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002536:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b03      	ldr	r3, [pc, #12]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a02      	ldr	r2, [pc, #8]	@ (800254c <HAL_RCC_OscConfig+0x270>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e014      	b.n	8002574 <HAL_RCC_OscConfig+0x298>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	08005240 	.word	0x08005240
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004
 800255c:	4ba0      	ldr	r3, [pc, #640]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a9f      	ldr	r2, [pc, #636]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b9d      	ldr	r3, [pc, #628]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a9c      	ldr	r2, [pc, #624]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 800256e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fd8a 	bl	8001094 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002584:	f7fe fd86 	bl	8001094 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	@ 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e276      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002596:	4b92      	ldr	r3, [pc, #584]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x2a8>
 80025a2:	e014      	b.n	80025ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fd76 	bl	8001094 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7fe fd72 	bl	8001094 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e262      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x2d0>
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d060      	beq.n	800269c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d005      	beq.n	80025ec <HAL_RCC_OscConfig+0x310>
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d119      	bne.n	800261a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d116      	bne.n	800261a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ec:	4b7c      	ldr	r3, [pc, #496]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_OscConfig+0x328>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e23f      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b76      	ldr	r3, [pc, #472]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	4973      	ldr	r1, [pc, #460]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	e040      	b.n	800269c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d023      	beq.n	800266a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002622:	4b6f      	ldr	r3, [pc, #444]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6e      	ldr	r2, [pc, #440]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fd31 	bl	8001094 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe fd2d 	bl	8001094 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e21d      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002648:	4b65      	ldr	r3, [pc, #404]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b62      	ldr	r3, [pc, #392]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	061b      	lsls	r3, r3, #24
 8002662:	495f      	ldr	r1, [pc, #380]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	e018      	b.n	800269c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266a:	4b5d      	ldr	r3, [pc, #372]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a5c      	ldr	r2, [pc, #368]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fd0d 	bl	8001094 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe fd09 	bl	8001094 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1f9      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002690:	4b53      	ldr	r3, [pc, #332]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d03c      	beq.n	8002722 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01c      	beq.n	80026ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b0:	4b4b      	ldr	r3, [pc, #300]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b6:	4a4a      	ldr	r2, [pc, #296]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fce8 	bl	8001094 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe fce4 	bl	8001094 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1d4      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026da:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ef      	beq.n	80026c8 <HAL_RCC_OscConfig+0x3ec>
 80026e8:	e01b      	b.n	8002722 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ea:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f0:	4a3b      	ldr	r2, [pc, #236]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe fccb 	bl	8001094 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe fcc7 	bl	8001094 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1b7      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ef      	bne.n	8002702 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80a6 	beq.w	800287c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002734:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10d      	bne.n	800275c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4a26      	ldr	r2, [pc, #152]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
 800274c:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002758:	2301      	movs	r3, #1
 800275a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275c:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <HAL_RCC_OscConfig+0x508>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d118      	bne.n	800279a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <HAL_RCC_OscConfig+0x508>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <HAL_RCC_OscConfig+0x508>)
 800276e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002774:	f7fe fc8e 	bl	8001094 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277c:	f7fe fc8a 	bl	8001094 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e17a      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <HAL_RCC_OscConfig+0x508>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d108      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4d8>
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b2:	e029      	b.n	8002808 <HAL_RCC_OscConfig+0x52c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d115      	bne.n	80027e8 <HAL_RCC_OscConfig+0x50c>
 80027bc:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	4a07      	ldr	r2, [pc, #28]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027cc:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	4a03      	ldr	r2, [pc, #12]	@ (80027e0 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0x52c>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
 80027e8:	4b9c      	ldr	r3, [pc, #624]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a9b      	ldr	r2, [pc, #620]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f8:	4b98      	ldr	r3, [pc, #608]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	4a97      	ldr	r2, [pc, #604]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d016      	beq.n	800283e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe fc40 	bl	8001094 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002818:	f7fe fc3c 	bl	8001094 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e12a      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ed      	beq.n	8002818 <HAL_RCC_OscConfig+0x53c>
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7fe fc29 	bl	8001094 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fc25 	bl	8001094 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e113      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800285c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ed      	bne.n	8002846 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002870:	4b7a      	ldr	r3, [pc, #488]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	4a79      	ldr	r2, [pc, #484]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80fe 	beq.w	8002a82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	2b02      	cmp	r3, #2
 800288c:	f040 80d0 	bne.w	8002a30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002890:	4b72      	ldr	r3, [pc, #456]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d130      	bne.n	8002906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	3b01      	subs	r3, #1
 80028b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d127      	bne.n	8002906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d11f      	bne.n	8002906 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028d0:	2a07      	cmp	r2, #7
 80028d2:	bf14      	ite	ne
 80028d4:	2201      	movne	r2, #1
 80028d6:	2200      	moveq	r2, #0
 80028d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	3b01      	subs	r3, #1
 8002900:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d06e      	beq.n	80029e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d069      	beq.n	80029e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800290c:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002918:	4b50      	ldr	r3, [pc, #320]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0ad      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002928:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 800292e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002934:	f7fe fbae 	bl	8001094 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe fbaa 	bl	8001094 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e09a      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294e:	4b43      	ldr	r3, [pc, #268]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295a:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	4b40      	ldr	r3, [pc, #256]	@ (8002a60 <HAL_RCC_OscConfig+0x784>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800296a:	3a01      	subs	r2, #1
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002974:	0212      	lsls	r2, r2, #8
 8002976:	4311      	orrs	r1, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800297c:	0852      	lsrs	r2, r2, #1
 800297e:	3a01      	subs	r2, #1
 8002980:	0552      	lsls	r2, r2, #21
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002988:	0852      	lsrs	r2, r2, #1
 800298a:	3a01      	subs	r2, #1
 800298c:	0652      	lsls	r2, r2, #25
 800298e:	4311      	orrs	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002994:	0912      	lsrs	r2, r2, #4
 8002996:	0452      	lsls	r2, r2, #17
 8002998:	430a      	orrs	r2, r1
 800299a:	4930      	ldr	r1, [pc, #192]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029a0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ac:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029b8:	f7fe fb6c 	bl	8001094 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe fb68 	bl	8001094 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e058      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029de:	e050      	b.n	8002a82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e04f      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d148      	bne.n	8002a82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a19      	ldr	r2, [pc, #100]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029fc:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a16      	ldr	r2, [pc, #88]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a08:	f7fe fb44 	bl	8001094 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fb40 	bl	8001094 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e030      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a22:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x734>
 8002a2e:	e028      	b.n	8002a82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d023      	beq.n	8002a7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <HAL_RCC_OscConfig+0x780>)
 8002a3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe fb27 	bl	8001094 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a48:	e00c      	b.n	8002a64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe fb23 	bl	8001094 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d905      	bls.n	8002a64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e013      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_OscConfig+0x7b0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ec      	bne.n	8002a4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_RCC_OscConfig+0x7b0>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4905      	ldr	r1, [pc, #20]	@ (8002a8c <HAL_RCC_OscConfig+0x7b0>)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_OscConfig+0x7b4>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
 8002a7c:	e001      	b.n	8002a82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	feeefffc 	.word	0xfeeefffc

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0e7      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b75      	ldr	r3, [pc, #468]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b72      	ldr	r3, [pc, #456]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4970      	ldr	r1, [pc, #448]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0cf      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	4b66      	ldr	r3, [pc, #408]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d908      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b63      	ldr	r3, [pc, #396]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4960      	ldr	r1, [pc, #384]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d04c      	beq.n	8002bac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d121      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0a6      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	4b54      	ldr	r3, [pc, #336]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d115      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e09a      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e08e      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e086      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b46      	ldr	r3, [pc, #280]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4943      	ldr	r1, [pc, #268]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fa8a 	bl	8001094 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fe fa86 	bl	8001094 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e06e      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d208      	bcs.n	8002bda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	492b      	ldr	r1, [pc, #172]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bda:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d210      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be8:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 0207 	bic.w	r2, r3, #7
 8002bf0:	4923      	ldr	r1, [pc, #140]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf8:	4b21      	ldr	r3, [pc, #132]	@ (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e036      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c16:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4918      	ldr	r1, [pc, #96]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c34:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4910      	ldr	r1, [pc, #64]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c48:	f000 f824 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	490b      	ldr	r1, [pc, #44]	@ (8002c88 <HAL_RCC_ClockConfig+0x1f4>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
 8002c64:	4a09      	ldr	r2, [pc, #36]	@ (8002c8c <HAL_RCC_ClockConfig+0x1f8>)
 8002c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c68:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <HAL_RCC_ClockConfig+0x1fc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f9c1 	bl	8000ff4 <HAL_InitTick>
 8002c72:	4603      	mov	r3, r0
 8002c74:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c76:	7afb      	ldrb	r3, [r7, #11]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08005240 	.word	0x08005240
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000004 	.word	0x20000004

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cac:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d121      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d11e      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc8:	4b34      	ldr	r3, [pc, #208]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cd4:	4b31      	ldr	r3, [pc, #196]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d0c:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e004      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d18:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d134      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d22:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0xac>
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	e005      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	617b      	str	r3, [r7, #20]
      break;
 8002d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d4c:	4b13      	ldr	r3, [pc, #76]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	3301      	adds	r3, #1
 8002d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d5a:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fb03 f202 	mul.w	r2, r3, r2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d72:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	0e5b      	lsrs	r3, r3, #25
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	@ 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08005258 	.word	0x08005258
 8002da4:	00f42400 	.word	0x00f42400
 8002da8:	007a1200 	.word	0x007a1200

08002dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dc8:	f7ff fff0 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4904      	ldr	r1, [pc, #16]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08005250 	.word	0x08005250

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002df4:	f7ff ffda 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0adb      	lsrs	r3, r3, #11
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08005250 	.word	0x08005250

08002e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e28:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e34:	f7ff f9ee 	bl	8002214 <HAL_PWREx_GetVoltageRange>
 8002e38:	6178      	str	r0, [r7, #20]
 8002e3a:	e014      	b.n	8002e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	4a24      	ldr	r2, [pc, #144]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e48:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e54:	f7ff f9de 	bl	8002214 <HAL_PWREx_GetVoltageRange>
 8002e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e6c:	d10b      	bne.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b80      	cmp	r3, #128	@ 0x80
 8002e72:	d919      	bls.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e78:	d902      	bls.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e013      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e80:	2301      	movs	r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e010      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b80      	cmp	r3, #128	@ 0x80
 8002e8a:	d902      	bls.n	8002e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	e00a      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b80      	cmp	r3, #128	@ 0x80
 8002e96:	d102      	bne.n	8002e9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e98:	2302      	movs	r3, #2
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	e004      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b70      	cmp	r3, #112	@ 0x70
 8002ea2:	d101      	bne.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 0207 	bic.w	r2, r3, #7
 8002eb0:	4909      	ldr	r1, [pc, #36]	@ (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40022000 	.word	0x40022000

08002edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee8:	2300      	movs	r3, #0
 8002eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d041      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002efc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f00:	d02a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f06:	d824      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f0c:	d008      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f12:	d81e      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f1c:	d010      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f1e:	e018      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f20:	4b86      	ldr	r3, [pc, #536]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a85      	ldr	r2, [pc, #532]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f2c:	e015      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fabb 	bl	80034b0 <RCCEx_PLLSAI1_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3e:	e00c      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3320      	adds	r3, #32
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fba6 	bl	8003698 <RCCEx_PLLSAI2_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	74fb      	strb	r3, [r7, #19]
      break;
 8002f56:	e000      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f5a:	7cfb      	ldrb	r3, [r7, #19]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f60:	4b76      	ldr	r3, [pc, #472]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f6e:	4973      	ldr	r1, [pc, #460]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f76:	e001      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d041      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f90:	d02a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f96:	d824      	bhi.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fa2:	d81e      	bhi.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fac:	d010      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fae:	e018      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fb0:	4b62      	ldr	r3, [pc, #392]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a61      	ldr	r2, [pc, #388]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fbc:	e015      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fa73 	bl	80034b0 <RCCEx_PLLSAI1_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fce:	e00c      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3320      	adds	r3, #32
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fb5e 	bl	8003698 <RCCEx_PLLSAI2_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fe0:	e003      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fe6:	e000      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ff0:	4b52      	ldr	r3, [pc, #328]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ffe:	494f      	ldr	r1, [pc, #316]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003006:	e001      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a0 	beq.w	800315a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800301e:	4b47      	ldr	r3, [pc, #284]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003034:	4b41      	ldr	r3, [pc, #260]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	4a40      	ldr	r2, [pc, #256]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003040:	4b3e      	ldr	r3, [pc, #248]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304c:	2301      	movs	r3, #1
 800304e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003050:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3a      	ldr	r2, [pc, #232]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800305c:	f7fe f81a 	bl	8001094 <HAL_GetTick>
 8003060:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003062:	e009      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003064:	f7fe f816 	bl	8001094 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d902      	bls.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	74fb      	strb	r3, [r7, #19]
        break;
 8003076:	e005      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003078:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ef      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d15c      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800308a:	4b2c      	ldr	r3, [pc, #176]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003094:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01f      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d019      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030a8:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	4a20      	ldr	r2, [pc, #128]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030c4:	4b1d      	ldr	r3, [pc, #116]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd ffd5 	bl	8001094 <HAL_GetTick>
 80030ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ec:	e00b      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fd ffd1 	bl	8001094 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d902      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	74fb      	strb	r3, [r7, #19]
            break;
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ec      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312a:	4904      	ldr	r1, [pc, #16]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003132:	e009      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
 8003138:	e006      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003148:	7c7b      	ldrb	r3, [r7, #17]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b9e      	ldr	r3, [pc, #632]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	4a9d      	ldr	r2, [pc, #628]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003158:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003166:	4b98      	ldr	r3, [pc, #608]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f023 0203 	bic.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	4994      	ldr	r1, [pc, #592]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003188:	4b8f      	ldr	r3, [pc, #572]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f023 020c 	bic.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003196:	498c      	ldr	r1, [pc, #560]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031aa:	4b87      	ldr	r3, [pc, #540]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	4983      	ldr	r1, [pc, #524]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031cc:	4b7e      	ldr	r3, [pc, #504]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	497b      	ldr	r1, [pc, #492]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ee:	4b76      	ldr	r3, [pc, #472]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fc:	4972      	ldr	r1, [pc, #456]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003210:	4b6d      	ldr	r3, [pc, #436]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	496a      	ldr	r1, [pc, #424]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b65      	ldr	r3, [pc, #404]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003240:	4961      	ldr	r1, [pc, #388]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003254:	4b5c      	ldr	r3, [pc, #368]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	4959      	ldr	r1, [pc, #356]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003276:	4b54      	ldr	r3, [pc, #336]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003284:	4950      	ldr	r1, [pc, #320]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003298:	4b4b      	ldr	r3, [pc, #300]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	4948      	ldr	r1, [pc, #288]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ba:	4b43      	ldr	r3, [pc, #268]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c8:	493f      	ldr	r1, [pc, #252]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d028      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032dc:	4b3a      	ldr	r3, [pc, #232]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ea:	4937      	ldr	r1, [pc, #220]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032fa:	d106      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fc:	4b32      	ldr	r3, [pc, #200]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a31      	ldr	r2, [pc, #196]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003306:	60d3      	str	r3, [r2, #12]
 8003308:	e011      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800330e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003312:	d10c      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f8c8 	bl	80034b0 <RCCEx_PLLSAI1_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d028      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800333a:	4b23      	ldr	r3, [pc, #140]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003340:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003348:	491f      	ldr	r1, [pc, #124]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003358:	d106      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800335a:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a1a      	ldr	r2, [pc, #104]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003364:	60d3      	str	r3, [r2, #12]
 8003366:	e011      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003370:	d10c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f899 	bl	80034b0 <RCCEx_PLLSAI1_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02b      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a6:	4908      	ldr	r1, [pc, #32]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033b6:	d109      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b8:	4b03      	ldr	r3, [pc, #12]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a02      	ldr	r2, [pc, #8]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033c2:	60d3      	str	r3, [r2, #12]
 80033c4:	e014      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2101      	movs	r1, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f867 	bl	80034b0 <RCCEx_PLLSAI1_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02f      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033fc:	4b2b      	ldr	r3, [pc, #172]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800340a:	4928      	ldr	r1, [pc, #160]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800341a:	d10d      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	2102      	movs	r1, #2
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f844 	bl	80034b0 <RCCEx_PLLSAI1_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d014      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	74bb      	strb	r3, [r7, #18]
 8003436:	e011      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003440:	d10c      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3320      	adds	r3, #32
 8003446:	2102      	movs	r1, #2
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f925 	bl	8003698 <RCCEx_PLLSAI2_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003468:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003476:	490d      	ldr	r1, [pc, #52]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003490:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800349a:	4904      	ldr	r1, [pc, #16]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000

080034b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034be:	4b75      	ldr	r3, [pc, #468]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ca:	4b72      	ldr	r3, [pc, #456]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0203 	and.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d10d      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
       ||
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
       ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d047      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
 80034fa:	e044      	b.n	8003586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d018      	beq.n	8003536 <RCCEx_PLLSAI1_Config+0x86>
 8003504:	2b03      	cmp	r3, #3
 8003506:	d825      	bhi.n	8003554 <RCCEx_PLLSAI1_Config+0xa4>
 8003508:	2b01      	cmp	r3, #1
 800350a:	d002      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0x62>
 800350c:	2b02      	cmp	r3, #2
 800350e:	d009      	beq.n	8003524 <RCCEx_PLLSAI1_Config+0x74>
 8003510:	e020      	b.n	8003554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003512:	4b60      	ldr	r3, [pc, #384]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11d      	bne.n	800355a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003522:	e01a      	b.n	800355a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003524:	4b5b      	ldr	r3, [pc, #364]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d116      	bne.n	800355e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003534:	e013      	b.n	800355e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003536:	4b57      	ldr	r3, [pc, #348]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003542:	4b54      	ldr	r3, [pc, #336]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003552:	e006      	b.n	8003562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      break;
 8003558:	e004      	b.n	8003564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003562:	bf00      	nop
    }

    if(status == HAL_OK)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800356a:	4b4a      	ldr	r3, [pc, #296]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	430b      	orrs	r3, r1
 8003580:	4944      	ldr	r1, [pc, #272]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d17d      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800358c:	4b41      	ldr	r3, [pc, #260]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a40      	ldr	r2, [pc, #256]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003592:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003598:	f7fd fd7c 	bl	8001094 <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800359e:	e009      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035a0:	f7fd fd78 	bl	8001094 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d902      	bls.n	80035b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	73fb      	strb	r3, [r7, #15]
        break;
 80035b2:	e005      	b.n	80035c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035b4:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ef      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d160      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d111      	bne.n	80035f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035cc:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80035d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6892      	ldr	r2, [r2, #8]
 80035dc:	0211      	lsls	r1, r2, #8
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68d2      	ldr	r2, [r2, #12]
 80035e2:	0912      	lsrs	r2, r2, #4
 80035e4:	0452      	lsls	r2, r2, #17
 80035e6:	430a      	orrs	r2, r1
 80035e8:	492a      	ldr	r1, [pc, #168]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	610b      	str	r3, [r1, #16]
 80035ee:	e027      	b.n	8003640 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d112      	bne.n	800361c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f6:	4b27      	ldr	r3, [pc, #156]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80035fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	0211      	lsls	r1, r2, #8
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6912      	ldr	r2, [r2, #16]
 800360c:	0852      	lsrs	r2, r2, #1
 800360e:	3a01      	subs	r2, #1
 8003610:	0552      	lsls	r2, r2, #21
 8003612:	430a      	orrs	r2, r1
 8003614:	491f      	ldr	r1, [pc, #124]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	610b      	str	r3, [r1, #16]
 800361a:	e011      	b.n	8003640 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003624:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	0211      	lsls	r1, r2, #8
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6952      	ldr	r2, [r2, #20]
 8003632:	0852      	lsrs	r2, r2, #1
 8003634:	3a01      	subs	r2, #1
 8003636:	0652      	lsls	r2, r2, #25
 8003638:	430a      	orrs	r2, r1
 800363a:	4916      	ldr	r1, [pc, #88]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003640:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800364a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fd22 	bl	8001094 <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003652:	e009      	b.n	8003668 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003654:	f7fd fd1e 	bl	8001094 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	73fb      	strb	r3, [r7, #15]
          break;
 8003666:	e005      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ef      	beq.n	8003654 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	4904      	ldr	r1, [pc, #16]	@ (8003694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	4313      	orrs	r3, r2
 8003686:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000

08003698 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d018      	beq.n	80036e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036b2:	4b67      	ldr	r3, [pc, #412]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0203 	and.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d10d      	bne.n	80036de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
       ||
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036ca:	4b61      	ldr	r3, [pc, #388]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
       ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d047      	beq.n	800376e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e044      	b.n	800376e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d018      	beq.n	800371e <RCCEx_PLLSAI2_Config+0x86>
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d825      	bhi.n	800373c <RCCEx_PLLSAI2_Config+0xa4>
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d002      	beq.n	80036fa <RCCEx_PLLSAI2_Config+0x62>
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d009      	beq.n	800370c <RCCEx_PLLSAI2_Config+0x74>
 80036f8:	e020      	b.n	800373c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036fa:	4b55      	ldr	r3, [pc, #340]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11d      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370a:	e01a      	b.n	8003742 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800370c:	4b50      	ldr	r3, [pc, #320]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371c:	e013      	b.n	8003746 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800371e:	4b4c      	ldr	r3, [pc, #304]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800372a:	4b49      	ldr	r3, [pc, #292]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800373a:	e006      	b.n	800374a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      break;
 8003740:	e004      	b.n	800374c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800374a:	bf00      	nop
    }

    if(status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003752:	4b3f      	ldr	r3, [pc, #252]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	430b      	orrs	r3, r1
 8003768:	4939      	ldr	r1, [pc, #228]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d167      	bne.n	8003844 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003774:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a35      	ldr	r2, [pc, #212]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fd fc88 	bl	8001094 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003786:	e009      	b.n	800379c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003788:	f7fd fc84 	bl	8001094 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	73fb      	strb	r3, [r7, #15]
        break;
 800379a:	e005      	b.n	80037a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800379c:	4b2c      	ldr	r3, [pc, #176]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ef      	bne.n	8003788 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d14a      	bne.n	8003844 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b4:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	0912      	lsrs	r2, r2, #4
 80037cc:	0452      	lsls	r2, r2, #17
 80037ce:	430a      	orrs	r2, r1
 80037d0:	491f      	ldr	r1, [pc, #124]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	614b      	str	r3, [r1, #20]
 80037d6:	e011      	b.n	80037fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6892      	ldr	r2, [r2, #8]
 80037e8:	0211      	lsls	r1, r2, #8
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6912      	ldr	r2, [r2, #16]
 80037ee:	0852      	lsrs	r2, r2, #1
 80037f0:	3a01      	subs	r2, #1
 80037f2:	0652      	lsls	r2, r2, #25
 80037f4:	430a      	orrs	r2, r1
 80037f6:	4916      	ldr	r1, [pc, #88]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037fc:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a13      	ldr	r2, [pc, #76]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003806:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fd fc44 	bl	8001094 <HAL_GetTick>
 800380c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800380e:	e009      	b.n	8003824 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003810:	f7fd fc40 	bl	8001094 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d902      	bls.n	8003824 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	73fb      	strb	r3, [r7, #15]
          break;
 8003822:	e005      	b.n	8003830 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ef      	beq.n	8003810 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4904      	ldr	r1, [pc, #16]	@ (8003850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	4313      	orrs	r3, r2
 8003842:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000

08003854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e040      	b.n	80038e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fa38 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	@ 0x24
 8003880:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fb6a 	bl	8003f74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8af 	bl	8003a04 <UART_SetConfig>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e01b      	b.n	80038e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fbe9 	bl	80040b8 <UART_CheckIdleState>
 80038e6:	4603      	mov	r3, r0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003904:	2b20      	cmp	r3, #32
 8003906:	d177      	bne.n	80039f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Transmit+0x24>
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e070      	b.n	80039fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2221      	movs	r2, #33	@ 0x21
 8003924:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003926:	f7fd fbb5 	bl	8001094 <HAL_GetTick>
 800392a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003944:	d108      	bne.n	8003958 <HAL_UART_Transmit+0x68>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e003      	b.n	8003960 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003960:	e02f      	b.n	80039c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	@ 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fc4b 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e03b      	b.n	80039fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003994:	b292      	uxth	r2, r2
 8003996:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	3302      	adds	r3, #2
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e007      	b.n	80039b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1c9      	bne.n	8003962 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	@ 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fc15 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e005      	b.n	80039fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b08a      	sub	sp, #40	@ 0x28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4ba4      	ldr	r3, [pc, #656]	@ (8003cc4 <UART_SetConfig+0x2c0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a99      	ldr	r2, [pc, #612]	@ (8003cc8 <UART_SetConfig+0x2c4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a90      	ldr	r2, [pc, #576]	@ (8003ccc <UART_SetConfig+0x2c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d126      	bne.n	8003adc <UART_SetConfig+0xd8>
 8003a8e:	4b90      	ldr	r3, [pc, #576]	@ (8003cd0 <UART_SetConfig+0x2cc>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d81b      	bhi.n	8003ad4 <UART_SetConfig+0xd0>
 8003a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <UART_SetConfig+0xa0>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003ac5 	.word	0x08003ac5
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003acd 	.word	0x08003acd
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aba:	e116      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003abc:	2302      	movs	r3, #2
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac2:	e112      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aca:	e10e      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003acc:	2308      	movs	r3, #8
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad2:	e10a      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ada:	e106      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7c      	ldr	r2, [pc, #496]	@ (8003cd4 <UART_SetConfig+0x2d0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d138      	bne.n	8003b58 <UART_SetConfig+0x154>
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd0 <UART_SetConfig+0x2cc>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d82d      	bhi.n	8003b50 <UART_SetConfig+0x14c>
 8003af4:	a201      	add	r2, pc, #4	@ (adr r2, 8003afc <UART_SetConfig+0xf8>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b31 	.word	0x08003b31
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b51 	.word	0x08003b51
 8003b08:	08003b51 	.word	0x08003b51
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b51 	.word	0x08003b51
 8003b18:	08003b51 	.word	0x08003b51
 8003b1c:	08003b39 	.word	0x08003b39
 8003b20:	08003b51 	.word	0x08003b51
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b49 	.word	0x08003b49
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b36:	e0d8      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e0d4      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b40:	2304      	movs	r3, #4
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e0d0      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e0cc      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b50:	2310      	movs	r3, #16
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e0c8      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd8 <UART_SetConfig+0x2d4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d125      	bne.n	8003bae <UART_SetConfig+0x1aa>
 8003b62:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd0 <UART_SetConfig+0x2cc>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b6c:	2b30      	cmp	r3, #48	@ 0x30
 8003b6e:	d016      	beq.n	8003b9e <UART_SetConfig+0x19a>
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d818      	bhi.n	8003ba6 <UART_SetConfig+0x1a2>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d00a      	beq.n	8003b8e <UART_SetConfig+0x18a>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d814      	bhi.n	8003ba6 <UART_SetConfig+0x1a2>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <UART_SetConfig+0x182>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d008      	beq.n	8003b96 <UART_SetConfig+0x192>
 8003b84:	e00f      	b.n	8003ba6 <UART_SetConfig+0x1a2>
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8c:	e0ad      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b94:	e0a9      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b96:	2304      	movs	r3, #4
 8003b98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9c:	e0a5      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba4:	e0a1      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bac:	e09d      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <UART_SetConfig+0x2d8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d125      	bne.n	8003c04 <UART_SetConfig+0x200>
 8003bb8:	4b45      	ldr	r3, [pc, #276]	@ (8003cd0 <UART_SetConfig+0x2cc>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bc4:	d016      	beq.n	8003bf4 <UART_SetConfig+0x1f0>
 8003bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bc8:	d818      	bhi.n	8003bfc <UART_SetConfig+0x1f8>
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d00a      	beq.n	8003be4 <UART_SetConfig+0x1e0>
 8003bce:	2b80      	cmp	r3, #128	@ 0x80
 8003bd0:	d814      	bhi.n	8003bfc <UART_SetConfig+0x1f8>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x1d8>
 8003bd6:	2b40      	cmp	r3, #64	@ 0x40
 8003bd8:	d008      	beq.n	8003bec <UART_SetConfig+0x1e8>
 8003bda:	e00f      	b.n	8003bfc <UART_SetConfig+0x1f8>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be2:	e082      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003be4:	2302      	movs	r3, #2
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e07e      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003bec:	2304      	movs	r3, #4
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e07a      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e076      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e072      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a35      	ldr	r2, [pc, #212]	@ (8003ce0 <UART_SetConfig+0x2dc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12a      	bne.n	8003c64 <UART_SetConfig+0x260>
 8003c0e:	4b30      	ldr	r3, [pc, #192]	@ (8003cd0 <UART_SetConfig+0x2cc>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c1c:	d01a      	beq.n	8003c54 <UART_SetConfig+0x250>
 8003c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c22:	d81b      	bhi.n	8003c5c <UART_SetConfig+0x258>
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c28:	d00c      	beq.n	8003c44 <UART_SetConfig+0x240>
 8003c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2e:	d815      	bhi.n	8003c5c <UART_SetConfig+0x258>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <UART_SetConfig+0x238>
 8003c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c38:	d008      	beq.n	8003c4c <UART_SetConfig+0x248>
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x258>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c42:	e052      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4a:	e04e      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c52:	e04a      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5a:	e046      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c62:	e042      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <UART_SetConfig+0x2c4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d13a      	bne.n	8003ce4 <UART_SetConfig+0x2e0>
 8003c6e:	4b18      	ldr	r3, [pc, #96]	@ (8003cd0 <UART_SetConfig+0x2cc>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c7c:	d01a      	beq.n	8003cb4 <UART_SetConfig+0x2b0>
 8003c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c82:	d81b      	bhi.n	8003cbc <UART_SetConfig+0x2b8>
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c88:	d00c      	beq.n	8003ca4 <UART_SetConfig+0x2a0>
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8e:	d815      	bhi.n	8003cbc <UART_SetConfig+0x2b8>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <UART_SetConfig+0x298>
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d008      	beq.n	8003cac <UART_SetConfig+0x2a8>
 8003c9a:	e00f      	b.n	8003cbc <UART_SetConfig+0x2b8>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca2:	e022      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e01e      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e01a      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e016      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e012      	b.n	8003cea <UART_SetConfig+0x2e6>
 8003cc4:	efff69f3 	.word	0xefff69f3
 8003cc8:	40008000 	.word	0x40008000
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004800 	.word	0x40004800
 8003cdc:	40004c00 	.word	0x40004c00
 8003ce0:	40005000 	.word	0x40005000
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a9f      	ldr	r2, [pc, #636]	@ (8003f6c <UART_SetConfig+0x568>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d17a      	bne.n	8003dea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d824      	bhi.n	8003d46 <UART_SetConfig+0x342>
 8003cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <UART_SetConfig+0x300>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d37 	.word	0x08003d37
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d47 	.word	0x08003d47
 8003d20:	08003d47 	.word	0x08003d47
 8003d24:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7ff f84c 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	61f8      	str	r0, [r7, #28]
        break;
 8003d2e:	e010      	b.n	8003d52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <UART_SetConfig+0x56c>)
 8003d32:	61fb      	str	r3, [r7, #28]
        break;
 8003d34:	e00d      	b.n	8003d52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe ffad 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8003d3a:	61f8      	str	r0, [r7, #28]
        break;
 8003d3c:	e009      	b.n	8003d52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d42:	61fb      	str	r3, [r7, #28]
        break;
 8003d44:	e005      	b.n	8003d52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80fb 	beq.w	8003f50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d305      	bcc.n	8003d76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d903      	bls.n	8003d7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d7c:	e0e8      	b.n	8003f50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2200      	movs	r2, #0
 8003d82:	461c      	mov	r4, r3
 8003d84:	4615      	mov	r5, r2
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	022b      	lsls	r3, r5, #8
 8003d90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d94:	0222      	lsls	r2, r4, #8
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	6849      	ldr	r1, [r1, #4]
 8003d9a:	0849      	lsrs	r1, r1, #1
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	4688      	mov	r8, r1
 8003da0:	4681      	mov	r9, r0
 8003da2:	eb12 0a08 	adds.w	sl, r2, r8
 8003da6:	eb43 0b09 	adc.w	fp, r3, r9
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003db8:	4650      	mov	r0, sl
 8003dba:	4659      	mov	r1, fp
 8003dbc:	f7fc fa58 	bl	8000270 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dce:	d308      	bcc.n	8003de2 <UART_SetConfig+0x3de>
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd6:	d204      	bcs.n	8003de2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	e0b6      	b.n	8003f50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003de8:	e0b2      	b.n	8003f50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df2:	d15e      	bne.n	8003eb2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003df4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d828      	bhi.n	8003e4e <UART_SetConfig+0x44a>
 8003dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <UART_SetConfig+0x400>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e31 	.word	0x08003e31
 8003e0c:	08003e39 	.word	0x08003e39
 8003e10:	08003e4f 	.word	0x08003e4f
 8003e14:	08003e3f 	.word	0x08003e3f
 8003e18:	08003e4f 	.word	0x08003e4f
 8003e1c:	08003e4f 	.word	0x08003e4f
 8003e20:	08003e4f 	.word	0x08003e4f
 8003e24:	08003e47 	.word	0x08003e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e28:	f7fe ffcc 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8003e2c:	61f8      	str	r0, [r7, #28]
        break;
 8003e2e:	e014      	b.n	8003e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e30:	f7fe ffde 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8003e34:	61f8      	str	r0, [r7, #28]
        break;
 8003e36:	e010      	b.n	8003e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b4d      	ldr	r3, [pc, #308]	@ (8003f70 <UART_SetConfig+0x56c>)
 8003e3a:	61fb      	str	r3, [r7, #28]
        break;
 8003e3c:	e00d      	b.n	8003e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7fe ff29 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8003e42:	61f8      	str	r0, [r7, #28]
        break;
 8003e44:	e009      	b.n	8003e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4a:	61fb      	str	r3, [r7, #28]
        break;
 8003e4c:	e005      	b.n	8003e5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d077      	beq.n	8003f50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005a      	lsls	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b0f      	cmp	r3, #15
 8003e7a:	d916      	bls.n	8003eaa <UART_SetConfig+0x4a6>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e82:	d212      	bcs.n	8003eaa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f023 030f 	bic.w	r3, r3, #15
 8003e8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	8afb      	ldrh	r3, [r7, #22]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	8afa      	ldrh	r2, [r7, #22]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e052      	b.n	8003f50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003eb0:	e04e      	b.n	8003f50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d827      	bhi.n	8003f0a <UART_SetConfig+0x506>
 8003eba:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <UART_SetConfig+0x4bc>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ef5 	.word	0x08003ef5
 8003ecc:	08003f0b 	.word	0x08003f0b
 8003ed0:	08003efb 	.word	0x08003efb
 8003ed4:	08003f0b 	.word	0x08003f0b
 8003ed8:	08003f0b 	.word	0x08003f0b
 8003edc:	08003f0b 	.word	0x08003f0b
 8003ee0:	08003f03 	.word	0x08003f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f7fe ff6e 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8003ee8:	61f8      	str	r0, [r7, #28]
        break;
 8003eea:	e014      	b.n	8003f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eec:	f7fe ff80 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8003ef0:	61f8      	str	r0, [r7, #28]
        break;
 8003ef2:	e010      	b.n	8003f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <UART_SetConfig+0x56c>)
 8003ef6:	61fb      	str	r3, [r7, #28]
        break;
 8003ef8:	e00d      	b.n	8003f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efa:	f7fe fecb 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8003efe:	61f8      	str	r0, [r7, #28]
        break;
 8003f00:	e009      	b.n	8003f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f06:	61fb      	str	r3, [r7, #28]
        break;
 8003f08:	e005      	b.n	8003f16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f14:	bf00      	nop
    }

    if (pclk != 0U)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d019      	beq.n	8003f50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	085a      	lsrs	r2, r3, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	441a      	add	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	d909      	bls.n	8003f4a <UART_SetConfig+0x546>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3c:	d205      	bcs.n	8003f4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e002      	b.n	8003f50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f5c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3728      	adds	r7, #40	@ 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40008000 	.word	0x40008000
 8003f70:	00f42400 	.word	0x00f42400

08003f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01a      	beq.n	800408a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004072:	d10a      	bne.n	800408a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b098      	sub	sp, #96	@ 0x60
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c8:	f7fc ffe4 	bl	8001094 <HAL_GetTick>
 80040cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d12e      	bne.n	800413a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	2200      	movs	r2, #0
 80040e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f88c 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d021      	beq.n	800413a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410a:	653b      	str	r3, [r7, #80]	@ 0x50
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004114:	647b      	str	r3, [r7, #68]	@ 0x44
 8004116:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800411a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e6      	bne.n	80040f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e062      	b.n	8004200 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d149      	bne.n	80041dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004148:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f856 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d03c      	beq.n	80041dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	623b      	str	r3, [r7, #32]
   return(result);
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
 8004182:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e6      	bne.n	8004162 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041b4:	61fa      	str	r2, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	69b9      	ldr	r1, [r7, #24]
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	617b      	str	r3, [r7, #20]
   return(result);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e011      	b.n	8004200 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3758      	adds	r7, #88	@ 0x58
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004218:	e04f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d04b      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fc ff37 	bl	8001094 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <UART_WaitOnFlagUntilTimeout+0x30>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e04e      	b.n	80042da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d037      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b80      	cmp	r3, #128	@ 0x80
 800424e:	d034      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b40      	cmp	r3, #64	@ 0x40
 8004254:	d031      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b08      	cmp	r3, #8
 8004262:	d110      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2208      	movs	r2, #8
 800426a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f838 	bl	80042e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2208      	movs	r2, #8
 8004276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e029      	b.n	80042da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004294:	d111      	bne.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800429e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f81e 	bl	80042e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e00f      	b.n	80042da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d0a0      	beq.n	800421a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b095      	sub	sp, #84	@ 0x54
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004308:	643b      	str	r3, [r7, #64]	@ 0x40
 800430a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800430e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e6      	bne.n	80042ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	61fb      	str	r3, [r7, #28]
   return(result);
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800433c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800433e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004354:	2b01      	cmp	r3, #1
 8004356:	d118      	bne.n	800438a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	60bb      	str	r3, [r7, #8]
   return(result);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f023 0310 	bic.w	r3, r3, #16
 800436c:	647b      	str	r3, [r7, #68]	@ 0x44
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6979      	ldr	r1, [r7, #20]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	613b      	str	r3, [r7, #16]
   return(result);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e6      	bne.n	8004358 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800439e:	bf00      	nop
 80043a0:	3754      	adds	r7, #84	@ 0x54
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <std>:
 80043ac:	2300      	movs	r3, #0
 80043ae:	b510      	push	{r4, lr}
 80043b0:	4604      	mov	r4, r0
 80043b2:	e9c0 3300 	strd	r3, r3, [r0]
 80043b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ba:	6083      	str	r3, [r0, #8]
 80043bc:	8181      	strh	r1, [r0, #12]
 80043be:	6643      	str	r3, [r0, #100]	@ 0x64
 80043c0:	81c2      	strh	r2, [r0, #14]
 80043c2:	6183      	str	r3, [r0, #24]
 80043c4:	4619      	mov	r1, r3
 80043c6:	2208      	movs	r2, #8
 80043c8:	305c      	adds	r0, #92	@ 0x5c
 80043ca:	f000 f906 	bl	80045da <memset>
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <std+0x58>)
 80043d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <std+0x5c>)
 80043d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043d6:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <std+0x60>)
 80043d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043da:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <std+0x64>)
 80043dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <std+0x68>)
 80043e0:	6224      	str	r4, [r4, #32]
 80043e2:	429c      	cmp	r4, r3
 80043e4:	d006      	beq.n	80043f4 <std+0x48>
 80043e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043ea:	4294      	cmp	r4, r2
 80043ec:	d002      	beq.n	80043f4 <std+0x48>
 80043ee:	33d0      	adds	r3, #208	@ 0xd0
 80043f0:	429c      	cmp	r4, r3
 80043f2:	d105      	bne.n	8004400 <std+0x54>
 80043f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043fc:	f000 b966 	b.w	80046cc <__retarget_lock_init_recursive>
 8004400:	bd10      	pop	{r4, pc}
 8004402:	bf00      	nop
 8004404:	08004555 	.word	0x08004555
 8004408:	08004577 	.word	0x08004577
 800440c:	080045af 	.word	0x080045af
 8004410:	080045d3 	.word	0x080045d3
 8004414:	20000168 	.word	0x20000168

08004418 <stdio_exit_handler>:
 8004418:	4a02      	ldr	r2, [pc, #8]	@ (8004424 <stdio_exit_handler+0xc>)
 800441a:	4903      	ldr	r1, [pc, #12]	@ (8004428 <stdio_exit_handler+0x10>)
 800441c:	4803      	ldr	r0, [pc, #12]	@ (800442c <stdio_exit_handler+0x14>)
 800441e:	f000 b869 	b.w	80044f4 <_fwalk_sglue>
 8004422:	bf00      	nop
 8004424:	2000000c 	.word	0x2000000c
 8004428:	08004f6d 	.word	0x08004f6d
 800442c:	2000001c 	.word	0x2000001c

08004430 <cleanup_stdio>:
 8004430:	6841      	ldr	r1, [r0, #4]
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <cleanup_stdio+0x34>)
 8004434:	4299      	cmp	r1, r3
 8004436:	b510      	push	{r4, lr}
 8004438:	4604      	mov	r4, r0
 800443a:	d001      	beq.n	8004440 <cleanup_stdio+0x10>
 800443c:	f000 fd96 	bl	8004f6c <_fflush_r>
 8004440:	68a1      	ldr	r1, [r4, #8]
 8004442:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <cleanup_stdio+0x38>)
 8004444:	4299      	cmp	r1, r3
 8004446:	d002      	beq.n	800444e <cleanup_stdio+0x1e>
 8004448:	4620      	mov	r0, r4
 800444a:	f000 fd8f 	bl	8004f6c <_fflush_r>
 800444e:	68e1      	ldr	r1, [r4, #12]
 8004450:	4b06      	ldr	r3, [pc, #24]	@ (800446c <cleanup_stdio+0x3c>)
 8004452:	4299      	cmp	r1, r3
 8004454:	d004      	beq.n	8004460 <cleanup_stdio+0x30>
 8004456:	4620      	mov	r0, r4
 8004458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800445c:	f000 bd86 	b.w	8004f6c <_fflush_r>
 8004460:	bd10      	pop	{r4, pc}
 8004462:	bf00      	nop
 8004464:	20000168 	.word	0x20000168
 8004468:	200001d0 	.word	0x200001d0
 800446c:	20000238 	.word	0x20000238

08004470 <global_stdio_init.part.0>:
 8004470:	b510      	push	{r4, lr}
 8004472:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <global_stdio_init.part.0+0x30>)
 8004474:	4c0b      	ldr	r4, [pc, #44]	@ (80044a4 <global_stdio_init.part.0+0x34>)
 8004476:	4a0c      	ldr	r2, [pc, #48]	@ (80044a8 <global_stdio_init.part.0+0x38>)
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	4620      	mov	r0, r4
 800447c:	2200      	movs	r2, #0
 800447e:	2104      	movs	r1, #4
 8004480:	f7ff ff94 	bl	80043ac <std>
 8004484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004488:	2201      	movs	r2, #1
 800448a:	2109      	movs	r1, #9
 800448c:	f7ff ff8e 	bl	80043ac <std>
 8004490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004494:	2202      	movs	r2, #2
 8004496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449a:	2112      	movs	r1, #18
 800449c:	f7ff bf86 	b.w	80043ac <std>
 80044a0:	200002a0 	.word	0x200002a0
 80044a4:	20000168 	.word	0x20000168
 80044a8:	08004419 	.word	0x08004419

080044ac <__sfp_lock_acquire>:
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <__sfp_lock_acquire+0x8>)
 80044ae:	f000 b90e 	b.w	80046ce <__retarget_lock_acquire_recursive>
 80044b2:	bf00      	nop
 80044b4:	200002a9 	.word	0x200002a9

080044b8 <__sfp_lock_release>:
 80044b8:	4801      	ldr	r0, [pc, #4]	@ (80044c0 <__sfp_lock_release+0x8>)
 80044ba:	f000 b909 	b.w	80046d0 <__retarget_lock_release_recursive>
 80044be:	bf00      	nop
 80044c0:	200002a9 	.word	0x200002a9

080044c4 <__sinit>:
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4604      	mov	r4, r0
 80044c8:	f7ff fff0 	bl	80044ac <__sfp_lock_acquire>
 80044cc:	6a23      	ldr	r3, [r4, #32]
 80044ce:	b11b      	cbz	r3, 80044d8 <__sinit+0x14>
 80044d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d4:	f7ff bff0 	b.w	80044b8 <__sfp_lock_release>
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <__sinit+0x28>)
 80044da:	6223      	str	r3, [r4, #32]
 80044dc:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <__sinit+0x2c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f5      	bne.n	80044d0 <__sinit+0xc>
 80044e4:	f7ff ffc4 	bl	8004470 <global_stdio_init.part.0>
 80044e8:	e7f2      	b.n	80044d0 <__sinit+0xc>
 80044ea:	bf00      	nop
 80044ec:	08004431 	.word	0x08004431
 80044f0:	200002a0 	.word	0x200002a0

080044f4 <_fwalk_sglue>:
 80044f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f8:	4607      	mov	r7, r0
 80044fa:	4688      	mov	r8, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	2600      	movs	r6, #0
 8004500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004504:	f1b9 0901 	subs.w	r9, r9, #1
 8004508:	d505      	bpl.n	8004516 <_fwalk_sglue+0x22>
 800450a:	6824      	ldr	r4, [r4, #0]
 800450c:	2c00      	cmp	r4, #0
 800450e:	d1f7      	bne.n	8004500 <_fwalk_sglue+0xc>
 8004510:	4630      	mov	r0, r6
 8004512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004516:	89ab      	ldrh	r3, [r5, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d907      	bls.n	800452c <_fwalk_sglue+0x38>
 800451c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004520:	3301      	adds	r3, #1
 8004522:	d003      	beq.n	800452c <_fwalk_sglue+0x38>
 8004524:	4629      	mov	r1, r5
 8004526:	4638      	mov	r0, r7
 8004528:	47c0      	blx	r8
 800452a:	4306      	orrs	r6, r0
 800452c:	3568      	adds	r5, #104	@ 0x68
 800452e:	e7e9      	b.n	8004504 <_fwalk_sglue+0x10>

08004530 <iprintf>:
 8004530:	b40f      	push	{r0, r1, r2, r3}
 8004532:	b507      	push	{r0, r1, r2, lr}
 8004534:	4906      	ldr	r1, [pc, #24]	@ (8004550 <iprintf+0x20>)
 8004536:	ab04      	add	r3, sp, #16
 8004538:	6808      	ldr	r0, [r1, #0]
 800453a:	f853 2b04 	ldr.w	r2, [r3], #4
 800453e:	6881      	ldr	r1, [r0, #8]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	f000 f9e9 	bl	8004918 <_vfiprintf_r>
 8004546:	b003      	add	sp, #12
 8004548:	f85d eb04 	ldr.w	lr, [sp], #4
 800454c:	b004      	add	sp, #16
 800454e:	4770      	bx	lr
 8004550:	20000018 	.word	0x20000018

08004554 <__sread>:
 8004554:	b510      	push	{r4, lr}
 8004556:	460c      	mov	r4, r1
 8004558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455c:	f000 f868 	bl	8004630 <_read_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	bfab      	itete	ge
 8004564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004566:	89a3      	ldrhlt	r3, [r4, #12]
 8004568:	181b      	addge	r3, r3, r0
 800456a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800456e:	bfac      	ite	ge
 8004570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004572:	81a3      	strhlt	r3, [r4, #12]
 8004574:	bd10      	pop	{r4, pc}

08004576 <__swrite>:
 8004576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	461f      	mov	r7, r3
 800457c:	898b      	ldrh	r3, [r1, #12]
 800457e:	05db      	lsls	r3, r3, #23
 8004580:	4605      	mov	r5, r0
 8004582:	460c      	mov	r4, r1
 8004584:	4616      	mov	r6, r2
 8004586:	d505      	bpl.n	8004594 <__swrite+0x1e>
 8004588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800458c:	2302      	movs	r3, #2
 800458e:	2200      	movs	r2, #0
 8004590:	f000 f83c 	bl	800460c <_lseek_r>
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	4632      	mov	r2, r6
 80045a2:	463b      	mov	r3, r7
 80045a4:	4628      	mov	r0, r5
 80045a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045aa:	f000 b853 	b.w	8004654 <_write_r>

080045ae <__sseek>:
 80045ae:	b510      	push	{r4, lr}
 80045b0:	460c      	mov	r4, r1
 80045b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b6:	f000 f829 	bl	800460c <_lseek_r>
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	bf15      	itete	ne
 80045c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045ca:	81a3      	strheq	r3, [r4, #12]
 80045cc:	bf18      	it	ne
 80045ce:	81a3      	strhne	r3, [r4, #12]
 80045d0:	bd10      	pop	{r4, pc}

080045d2 <__sclose>:
 80045d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d6:	f000 b809 	b.w	80045ec <_close_r>

080045da <memset>:
 80045da:	4402      	add	r2, r0
 80045dc:	4603      	mov	r3, r0
 80045de:	4293      	cmp	r3, r2
 80045e0:	d100      	bne.n	80045e4 <memset+0xa>
 80045e2:	4770      	bx	lr
 80045e4:	f803 1b01 	strb.w	r1, [r3], #1
 80045e8:	e7f9      	b.n	80045de <memset+0x4>
	...

080045ec <_close_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d06      	ldr	r5, [pc, #24]	@ (8004608 <_close_r+0x1c>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f7fc fc3e 	bl	8000e78 <_close>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_close_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_close_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	200002a4 	.word	0x200002a4

0800460c <_lseek_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d07      	ldr	r5, [pc, #28]	@ (800462c <_lseek_r+0x20>)
 8004610:	4604      	mov	r4, r0
 8004612:	4608      	mov	r0, r1
 8004614:	4611      	mov	r1, r2
 8004616:	2200      	movs	r2, #0
 8004618:	602a      	str	r2, [r5, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f7fc fc53 	bl	8000ec6 <_lseek>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_lseek_r+0x1e>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_lseek_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	200002a4 	.word	0x200002a4

08004630 <_read_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d07      	ldr	r5, [pc, #28]	@ (8004650 <_read_r+0x20>)
 8004634:	4604      	mov	r4, r0
 8004636:	4608      	mov	r0, r1
 8004638:	4611      	mov	r1, r2
 800463a:	2200      	movs	r2, #0
 800463c:	602a      	str	r2, [r5, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f7fc fbe1 	bl	8000e06 <_read>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_read_r+0x1e>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_read_r+0x1e>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	200002a4 	.word	0x200002a4

08004654 <_write_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d07      	ldr	r5, [pc, #28]	@ (8004674 <_write_r+0x20>)
 8004658:	4604      	mov	r4, r0
 800465a:	4608      	mov	r0, r1
 800465c:	4611      	mov	r1, r2
 800465e:	2200      	movs	r2, #0
 8004660:	602a      	str	r2, [r5, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	f7fc fbec 	bl	8000e40 <_write>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_write_r+0x1e>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	b103      	cbz	r3, 8004672 <_write_r+0x1e>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	200002a4 	.word	0x200002a4

08004678 <__errno>:
 8004678:	4b01      	ldr	r3, [pc, #4]	@ (8004680 <__errno+0x8>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000018 	.word	0x20000018

08004684 <__libc_init_array>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	4d0d      	ldr	r5, [pc, #52]	@ (80046bc <__libc_init_array+0x38>)
 8004688:	4c0d      	ldr	r4, [pc, #52]	@ (80046c0 <__libc_init_array+0x3c>)
 800468a:	1b64      	subs	r4, r4, r5
 800468c:	10a4      	asrs	r4, r4, #2
 800468e:	2600      	movs	r6, #0
 8004690:	42a6      	cmp	r6, r4
 8004692:	d109      	bne.n	80046a8 <__libc_init_array+0x24>
 8004694:	4d0b      	ldr	r5, [pc, #44]	@ (80046c4 <__libc_init_array+0x40>)
 8004696:	4c0c      	ldr	r4, [pc, #48]	@ (80046c8 <__libc_init_array+0x44>)
 8004698:	f000 fdb8 	bl	800520c <_init>
 800469c:	1b64      	subs	r4, r4, r5
 800469e:	10a4      	asrs	r4, r4, #2
 80046a0:	2600      	movs	r6, #0
 80046a2:	42a6      	cmp	r6, r4
 80046a4:	d105      	bne.n	80046b2 <__libc_init_array+0x2e>
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ac:	4798      	blx	r3
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7ee      	b.n	8004690 <__libc_init_array+0xc>
 80046b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b6:	4798      	blx	r3
 80046b8:	3601      	adds	r6, #1
 80046ba:	e7f2      	b.n	80046a2 <__libc_init_array+0x1e>
 80046bc:	080052c4 	.word	0x080052c4
 80046c0:	080052c4 	.word	0x080052c4
 80046c4:	080052c4 	.word	0x080052c4
 80046c8:	080052c8 	.word	0x080052c8

080046cc <__retarget_lock_init_recursive>:
 80046cc:	4770      	bx	lr

080046ce <__retarget_lock_acquire_recursive>:
 80046ce:	4770      	bx	lr

080046d0 <__retarget_lock_release_recursive>:
 80046d0:	4770      	bx	lr
	...

080046d4 <_free_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4605      	mov	r5, r0
 80046d8:	2900      	cmp	r1, #0
 80046da:	d041      	beq.n	8004760 <_free_r+0x8c>
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f0c      	subs	r4, r1, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfb8      	it	lt
 80046e6:	18e4      	addlt	r4, r4, r3
 80046e8:	f000 f8e0 	bl	80048ac <__malloc_lock>
 80046ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004764 <_free_r+0x90>)
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	b933      	cbnz	r3, 8004700 <_free_r+0x2c>
 80046f2:	6063      	str	r3, [r4, #4]
 80046f4:	6014      	str	r4, [r2, #0]
 80046f6:	4628      	mov	r0, r5
 80046f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046fc:	f000 b8dc 	b.w	80048b8 <__malloc_unlock>
 8004700:	42a3      	cmp	r3, r4
 8004702:	d908      	bls.n	8004716 <_free_r+0x42>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	1821      	adds	r1, r4, r0
 8004708:	428b      	cmp	r3, r1
 800470a:	bf01      	itttt	eq
 800470c:	6819      	ldreq	r1, [r3, #0]
 800470e:	685b      	ldreq	r3, [r3, #4]
 8004710:	1809      	addeq	r1, r1, r0
 8004712:	6021      	streq	r1, [r4, #0]
 8004714:	e7ed      	b.n	80046f2 <_free_r+0x1e>
 8004716:	461a      	mov	r2, r3
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	b10b      	cbz	r3, 8004720 <_free_r+0x4c>
 800471c:	42a3      	cmp	r3, r4
 800471e:	d9fa      	bls.n	8004716 <_free_r+0x42>
 8004720:	6811      	ldr	r1, [r2, #0]
 8004722:	1850      	adds	r0, r2, r1
 8004724:	42a0      	cmp	r0, r4
 8004726:	d10b      	bne.n	8004740 <_free_r+0x6c>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	4401      	add	r1, r0
 800472c:	1850      	adds	r0, r2, r1
 800472e:	4283      	cmp	r3, r0
 8004730:	6011      	str	r1, [r2, #0]
 8004732:	d1e0      	bne.n	80046f6 <_free_r+0x22>
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	6053      	str	r3, [r2, #4]
 800473a:	4408      	add	r0, r1
 800473c:	6010      	str	r0, [r2, #0]
 800473e:	e7da      	b.n	80046f6 <_free_r+0x22>
 8004740:	d902      	bls.n	8004748 <_free_r+0x74>
 8004742:	230c      	movs	r3, #12
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	e7d6      	b.n	80046f6 <_free_r+0x22>
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	1821      	adds	r1, r4, r0
 800474c:	428b      	cmp	r3, r1
 800474e:	bf04      	itt	eq
 8004750:	6819      	ldreq	r1, [r3, #0]
 8004752:	685b      	ldreq	r3, [r3, #4]
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	bf04      	itt	eq
 8004758:	1809      	addeq	r1, r1, r0
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	6054      	str	r4, [r2, #4]
 800475e:	e7ca      	b.n	80046f6 <_free_r+0x22>
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	200002b0 	.word	0x200002b0

08004768 <sbrk_aligned>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	4e0f      	ldr	r6, [pc, #60]	@ (80047a8 <sbrk_aligned+0x40>)
 800476c:	460c      	mov	r4, r1
 800476e:	6831      	ldr	r1, [r6, #0]
 8004770:	4605      	mov	r5, r0
 8004772:	b911      	cbnz	r1, 800477a <sbrk_aligned+0x12>
 8004774:	f000 fcb6 	bl	80050e4 <_sbrk_r>
 8004778:	6030      	str	r0, [r6, #0]
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f000 fcb1 	bl	80050e4 <_sbrk_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	d103      	bne.n	800478e <sbrk_aligned+0x26>
 8004786:	f04f 34ff 	mov.w	r4, #4294967295
 800478a:	4620      	mov	r0, r4
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	1cc4      	adds	r4, r0, #3
 8004790:	f024 0403 	bic.w	r4, r4, #3
 8004794:	42a0      	cmp	r0, r4
 8004796:	d0f8      	beq.n	800478a <sbrk_aligned+0x22>
 8004798:	1a21      	subs	r1, r4, r0
 800479a:	4628      	mov	r0, r5
 800479c:	f000 fca2 	bl	80050e4 <_sbrk_r>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d1f2      	bne.n	800478a <sbrk_aligned+0x22>
 80047a4:	e7ef      	b.n	8004786 <sbrk_aligned+0x1e>
 80047a6:	bf00      	nop
 80047a8:	200002ac 	.word	0x200002ac

080047ac <_malloc_r>:
 80047ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b0:	1ccd      	adds	r5, r1, #3
 80047b2:	f025 0503 	bic.w	r5, r5, #3
 80047b6:	3508      	adds	r5, #8
 80047b8:	2d0c      	cmp	r5, #12
 80047ba:	bf38      	it	cc
 80047bc:	250c      	movcc	r5, #12
 80047be:	2d00      	cmp	r5, #0
 80047c0:	4606      	mov	r6, r0
 80047c2:	db01      	blt.n	80047c8 <_malloc_r+0x1c>
 80047c4:	42a9      	cmp	r1, r5
 80047c6:	d904      	bls.n	80047d2 <_malloc_r+0x26>
 80047c8:	230c      	movs	r3, #12
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	2000      	movs	r0, #0
 80047ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a8 <_malloc_r+0xfc>
 80047d6:	f000 f869 	bl	80048ac <__malloc_lock>
 80047da:	f8d8 3000 	ldr.w	r3, [r8]
 80047de:	461c      	mov	r4, r3
 80047e0:	bb44      	cbnz	r4, 8004834 <_malloc_r+0x88>
 80047e2:	4629      	mov	r1, r5
 80047e4:	4630      	mov	r0, r6
 80047e6:	f7ff ffbf 	bl	8004768 <sbrk_aligned>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	4604      	mov	r4, r0
 80047ee:	d158      	bne.n	80048a2 <_malloc_r+0xf6>
 80047f0:	f8d8 4000 	ldr.w	r4, [r8]
 80047f4:	4627      	mov	r7, r4
 80047f6:	2f00      	cmp	r7, #0
 80047f8:	d143      	bne.n	8004882 <_malloc_r+0xd6>
 80047fa:	2c00      	cmp	r4, #0
 80047fc:	d04b      	beq.n	8004896 <_malloc_r+0xea>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	4639      	mov	r1, r7
 8004802:	4630      	mov	r0, r6
 8004804:	eb04 0903 	add.w	r9, r4, r3
 8004808:	f000 fc6c 	bl	80050e4 <_sbrk_r>
 800480c:	4581      	cmp	r9, r0
 800480e:	d142      	bne.n	8004896 <_malloc_r+0xea>
 8004810:	6821      	ldr	r1, [r4, #0]
 8004812:	1a6d      	subs	r5, r5, r1
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff ffa6 	bl	8004768 <sbrk_aligned>
 800481c:	3001      	adds	r0, #1
 800481e:	d03a      	beq.n	8004896 <_malloc_r+0xea>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	442b      	add	r3, r5
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	f8d8 3000 	ldr.w	r3, [r8]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	bb62      	cbnz	r2, 8004888 <_malloc_r+0xdc>
 800482e:	f8c8 7000 	str.w	r7, [r8]
 8004832:	e00f      	b.n	8004854 <_malloc_r+0xa8>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	1b52      	subs	r2, r2, r5
 8004838:	d420      	bmi.n	800487c <_malloc_r+0xd0>
 800483a:	2a0b      	cmp	r2, #11
 800483c:	d917      	bls.n	800486e <_malloc_r+0xc2>
 800483e:	1961      	adds	r1, r4, r5
 8004840:	42a3      	cmp	r3, r4
 8004842:	6025      	str	r5, [r4, #0]
 8004844:	bf18      	it	ne
 8004846:	6059      	strne	r1, [r3, #4]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	bf08      	it	eq
 800484c:	f8c8 1000 	streq.w	r1, [r8]
 8004850:	5162      	str	r2, [r4, r5]
 8004852:	604b      	str	r3, [r1, #4]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f82f 	bl	80048b8 <__malloc_unlock>
 800485a:	f104 000b 	add.w	r0, r4, #11
 800485e:	1d23      	adds	r3, r4, #4
 8004860:	f020 0007 	bic.w	r0, r0, #7
 8004864:	1ac2      	subs	r2, r0, r3
 8004866:	bf1c      	itt	ne
 8004868:	1a1b      	subne	r3, r3, r0
 800486a:	50a3      	strne	r3, [r4, r2]
 800486c:	e7af      	b.n	80047ce <_malloc_r+0x22>
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	42a3      	cmp	r3, r4
 8004872:	bf0c      	ite	eq
 8004874:	f8c8 2000 	streq.w	r2, [r8]
 8004878:	605a      	strne	r2, [r3, #4]
 800487a:	e7eb      	b.n	8004854 <_malloc_r+0xa8>
 800487c:	4623      	mov	r3, r4
 800487e:	6864      	ldr	r4, [r4, #4]
 8004880:	e7ae      	b.n	80047e0 <_malloc_r+0x34>
 8004882:	463c      	mov	r4, r7
 8004884:	687f      	ldr	r7, [r7, #4]
 8004886:	e7b6      	b.n	80047f6 <_malloc_r+0x4a>
 8004888:	461a      	mov	r2, r3
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	42a3      	cmp	r3, r4
 800488e:	d1fb      	bne.n	8004888 <_malloc_r+0xdc>
 8004890:	2300      	movs	r3, #0
 8004892:	6053      	str	r3, [r2, #4]
 8004894:	e7de      	b.n	8004854 <_malloc_r+0xa8>
 8004896:	230c      	movs	r3, #12
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f80c 	bl	80048b8 <__malloc_unlock>
 80048a0:	e794      	b.n	80047cc <_malloc_r+0x20>
 80048a2:	6005      	str	r5, [r0, #0]
 80048a4:	e7d6      	b.n	8004854 <_malloc_r+0xa8>
 80048a6:	bf00      	nop
 80048a8:	200002b0 	.word	0x200002b0

080048ac <__malloc_lock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	@ (80048b4 <__malloc_lock+0x8>)
 80048ae:	f7ff bf0e 	b.w	80046ce <__retarget_lock_acquire_recursive>
 80048b2:	bf00      	nop
 80048b4:	200002a8 	.word	0x200002a8

080048b8 <__malloc_unlock>:
 80048b8:	4801      	ldr	r0, [pc, #4]	@ (80048c0 <__malloc_unlock+0x8>)
 80048ba:	f7ff bf09 	b.w	80046d0 <__retarget_lock_release_recursive>
 80048be:	bf00      	nop
 80048c0:	200002a8 	.word	0x200002a8

080048c4 <__sfputc_r>:
 80048c4:	6893      	ldr	r3, [r2, #8]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	b410      	push	{r4}
 80048cc:	6093      	str	r3, [r2, #8]
 80048ce:	da08      	bge.n	80048e2 <__sfputc_r+0x1e>
 80048d0:	6994      	ldr	r4, [r2, #24]
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	db01      	blt.n	80048da <__sfputc_r+0x16>
 80048d6:	290a      	cmp	r1, #10
 80048d8:	d103      	bne.n	80048e2 <__sfputc_r+0x1e>
 80048da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048de:	f000 bb6d 	b.w	8004fbc <__swbuf_r>
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	1c58      	adds	r0, r3, #1
 80048e6:	6010      	str	r0, [r2, #0]
 80048e8:	7019      	strb	r1, [r3, #0]
 80048ea:	4608      	mov	r0, r1
 80048ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <__sfputs_r>:
 80048f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f4:	4606      	mov	r6, r0
 80048f6:	460f      	mov	r7, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	18d5      	adds	r5, r2, r3
 80048fc:	42ac      	cmp	r4, r5
 80048fe:	d101      	bne.n	8004904 <__sfputs_r+0x12>
 8004900:	2000      	movs	r0, #0
 8004902:	e007      	b.n	8004914 <__sfputs_r+0x22>
 8004904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004908:	463a      	mov	r2, r7
 800490a:	4630      	mov	r0, r6
 800490c:	f7ff ffda 	bl	80048c4 <__sfputc_r>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d1f3      	bne.n	80048fc <__sfputs_r+0xa>
 8004914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004918 <_vfiprintf_r>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	460d      	mov	r5, r1
 800491e:	b09d      	sub	sp, #116	@ 0x74
 8004920:	4614      	mov	r4, r2
 8004922:	4698      	mov	r8, r3
 8004924:	4606      	mov	r6, r0
 8004926:	b118      	cbz	r0, 8004930 <_vfiprintf_r+0x18>
 8004928:	6a03      	ldr	r3, [r0, #32]
 800492a:	b90b      	cbnz	r3, 8004930 <_vfiprintf_r+0x18>
 800492c:	f7ff fdca 	bl	80044c4 <__sinit>
 8004930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004932:	07d9      	lsls	r1, r3, #31
 8004934:	d405      	bmi.n	8004942 <_vfiprintf_r+0x2a>
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	059a      	lsls	r2, r3, #22
 800493a:	d402      	bmi.n	8004942 <_vfiprintf_r+0x2a>
 800493c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800493e:	f7ff fec6 	bl	80046ce <__retarget_lock_acquire_recursive>
 8004942:	89ab      	ldrh	r3, [r5, #12]
 8004944:	071b      	lsls	r3, r3, #28
 8004946:	d501      	bpl.n	800494c <_vfiprintf_r+0x34>
 8004948:	692b      	ldr	r3, [r5, #16]
 800494a:	b99b      	cbnz	r3, 8004974 <_vfiprintf_r+0x5c>
 800494c:	4629      	mov	r1, r5
 800494e:	4630      	mov	r0, r6
 8004950:	f000 fb72 	bl	8005038 <__swsetup_r>
 8004954:	b170      	cbz	r0, 8004974 <_vfiprintf_r+0x5c>
 8004956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004958:	07dc      	lsls	r4, r3, #31
 800495a:	d504      	bpl.n	8004966 <_vfiprintf_r+0x4e>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	b01d      	add	sp, #116	@ 0x74
 8004962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004966:	89ab      	ldrh	r3, [r5, #12]
 8004968:	0598      	lsls	r0, r3, #22
 800496a:	d4f7      	bmi.n	800495c <_vfiprintf_r+0x44>
 800496c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800496e:	f7ff feaf 	bl	80046d0 <__retarget_lock_release_recursive>
 8004972:	e7f3      	b.n	800495c <_vfiprintf_r+0x44>
 8004974:	2300      	movs	r3, #0
 8004976:	9309      	str	r3, [sp, #36]	@ 0x24
 8004978:	2320      	movs	r3, #32
 800497a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800497e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004982:	2330      	movs	r3, #48	@ 0x30
 8004984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b34 <_vfiprintf_r+0x21c>
 8004988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800498c:	f04f 0901 	mov.w	r9, #1
 8004990:	4623      	mov	r3, r4
 8004992:	469a      	mov	sl, r3
 8004994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004998:	b10a      	cbz	r2, 800499e <_vfiprintf_r+0x86>
 800499a:	2a25      	cmp	r2, #37	@ 0x25
 800499c:	d1f9      	bne.n	8004992 <_vfiprintf_r+0x7a>
 800499e:	ebba 0b04 	subs.w	fp, sl, r4
 80049a2:	d00b      	beq.n	80049bc <_vfiprintf_r+0xa4>
 80049a4:	465b      	mov	r3, fp
 80049a6:	4622      	mov	r2, r4
 80049a8:	4629      	mov	r1, r5
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff ffa1 	bl	80048f2 <__sfputs_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	f000 80a7 	beq.w	8004b04 <_vfiprintf_r+0x1ec>
 80049b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049b8:	445a      	add	r2, fp
 80049ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80049bc:	f89a 3000 	ldrb.w	r3, [sl]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 809f 	beq.w	8004b04 <_vfiprintf_r+0x1ec>
 80049c6:	2300      	movs	r3, #0
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049d0:	f10a 0a01 	add.w	sl, sl, #1
 80049d4:	9304      	str	r3, [sp, #16]
 80049d6:	9307      	str	r3, [sp, #28]
 80049d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80049de:	4654      	mov	r4, sl
 80049e0:	2205      	movs	r2, #5
 80049e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e6:	4853      	ldr	r0, [pc, #332]	@ (8004b34 <_vfiprintf_r+0x21c>)
 80049e8:	f7fb fbf2 	bl	80001d0 <memchr>
 80049ec:	9a04      	ldr	r2, [sp, #16]
 80049ee:	b9d8      	cbnz	r0, 8004a28 <_vfiprintf_r+0x110>
 80049f0:	06d1      	lsls	r1, r2, #27
 80049f2:	bf44      	itt	mi
 80049f4:	2320      	movmi	r3, #32
 80049f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049fa:	0713      	lsls	r3, r2, #28
 80049fc:	bf44      	itt	mi
 80049fe:	232b      	movmi	r3, #43	@ 0x2b
 8004a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a04:	f89a 3000 	ldrb.w	r3, [sl]
 8004a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a0a:	d015      	beq.n	8004a38 <_vfiprintf_r+0x120>
 8004a0c:	9a07      	ldr	r2, [sp, #28]
 8004a0e:	4654      	mov	r4, sl
 8004a10:	2000      	movs	r0, #0
 8004a12:	f04f 0c0a 	mov.w	ip, #10
 8004a16:	4621      	mov	r1, r4
 8004a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a1c:	3b30      	subs	r3, #48	@ 0x30
 8004a1e:	2b09      	cmp	r3, #9
 8004a20:	d94b      	bls.n	8004aba <_vfiprintf_r+0x1a2>
 8004a22:	b1b0      	cbz	r0, 8004a52 <_vfiprintf_r+0x13a>
 8004a24:	9207      	str	r2, [sp, #28]
 8004a26:	e014      	b.n	8004a52 <_vfiprintf_r+0x13a>
 8004a28:	eba0 0308 	sub.w	r3, r0, r8
 8004a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a30:	4313      	orrs	r3, r2
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	46a2      	mov	sl, r4
 8004a36:	e7d2      	b.n	80049de <_vfiprintf_r+0xc6>
 8004a38:	9b03      	ldr	r3, [sp, #12]
 8004a3a:	1d19      	adds	r1, r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	9103      	str	r1, [sp, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bfbb      	ittet	lt
 8004a44:	425b      	neglt	r3, r3
 8004a46:	f042 0202 	orrlt.w	r2, r2, #2
 8004a4a:	9307      	strge	r3, [sp, #28]
 8004a4c:	9307      	strlt	r3, [sp, #28]
 8004a4e:	bfb8      	it	lt
 8004a50:	9204      	strlt	r2, [sp, #16]
 8004a52:	7823      	ldrb	r3, [r4, #0]
 8004a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a56:	d10a      	bne.n	8004a6e <_vfiprintf_r+0x156>
 8004a58:	7863      	ldrb	r3, [r4, #1]
 8004a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a5c:	d132      	bne.n	8004ac4 <_vfiprintf_r+0x1ac>
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	9203      	str	r2, [sp, #12]
 8004a66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a6a:	3402      	adds	r4, #2
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b44 <_vfiprintf_r+0x22c>
 8004a72:	7821      	ldrb	r1, [r4, #0]
 8004a74:	2203      	movs	r2, #3
 8004a76:	4650      	mov	r0, sl
 8004a78:	f7fb fbaa 	bl	80001d0 <memchr>
 8004a7c:	b138      	cbz	r0, 8004a8e <_vfiprintf_r+0x176>
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	eba0 000a 	sub.w	r0, r0, sl
 8004a84:	2240      	movs	r2, #64	@ 0x40
 8004a86:	4082      	lsls	r2, r0
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	3401      	adds	r4, #1
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a92:	4829      	ldr	r0, [pc, #164]	@ (8004b38 <_vfiprintf_r+0x220>)
 8004a94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a98:	2206      	movs	r2, #6
 8004a9a:	f7fb fb99 	bl	80001d0 <memchr>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d03f      	beq.n	8004b22 <_vfiprintf_r+0x20a>
 8004aa2:	4b26      	ldr	r3, [pc, #152]	@ (8004b3c <_vfiprintf_r+0x224>)
 8004aa4:	bb1b      	cbnz	r3, 8004aee <_vfiprintf_r+0x1d6>
 8004aa6:	9b03      	ldr	r3, [sp, #12]
 8004aa8:	3307      	adds	r3, #7
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	3308      	adds	r3, #8
 8004ab0:	9303      	str	r3, [sp, #12]
 8004ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab4:	443b      	add	r3, r7
 8004ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ab8:	e76a      	b.n	8004990 <_vfiprintf_r+0x78>
 8004aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8004abe:	460c      	mov	r4, r1
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e7a8      	b.n	8004a16 <_vfiprintf_r+0xfe>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	3401      	adds	r4, #1
 8004ac8:	9305      	str	r3, [sp, #20]
 8004aca:	4619      	mov	r1, r3
 8004acc:	f04f 0c0a 	mov.w	ip, #10
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ad6:	3a30      	subs	r2, #48	@ 0x30
 8004ad8:	2a09      	cmp	r2, #9
 8004ada:	d903      	bls.n	8004ae4 <_vfiprintf_r+0x1cc>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0c6      	beq.n	8004a6e <_vfiprintf_r+0x156>
 8004ae0:	9105      	str	r1, [sp, #20]
 8004ae2:	e7c4      	b.n	8004a6e <_vfiprintf_r+0x156>
 8004ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ae8:	4604      	mov	r4, r0
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7f0      	b.n	8004ad0 <_vfiprintf_r+0x1b8>
 8004aee:	ab03      	add	r3, sp, #12
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	462a      	mov	r2, r5
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <_vfiprintf_r+0x228>)
 8004af6:	a904      	add	r1, sp, #16
 8004af8:	4630      	mov	r0, r6
 8004afa:	f3af 8000 	nop.w
 8004afe:	4607      	mov	r7, r0
 8004b00:	1c78      	adds	r0, r7, #1
 8004b02:	d1d6      	bne.n	8004ab2 <_vfiprintf_r+0x19a>
 8004b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b06:	07d9      	lsls	r1, r3, #31
 8004b08:	d405      	bmi.n	8004b16 <_vfiprintf_r+0x1fe>
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	059a      	lsls	r2, r3, #22
 8004b0e:	d402      	bmi.n	8004b16 <_vfiprintf_r+0x1fe>
 8004b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b12:	f7ff fddd 	bl	80046d0 <__retarget_lock_release_recursive>
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	065b      	lsls	r3, r3, #25
 8004b1a:	f53f af1f 	bmi.w	800495c <_vfiprintf_r+0x44>
 8004b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b20:	e71e      	b.n	8004960 <_vfiprintf_r+0x48>
 8004b22:	ab03      	add	r3, sp, #12
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	462a      	mov	r2, r5
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <_vfiprintf_r+0x228>)
 8004b2a:	a904      	add	r1, sp, #16
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 f879 	bl	8004c24 <_printf_i>
 8004b32:	e7e4      	b.n	8004afe <_vfiprintf_r+0x1e6>
 8004b34:	08005288 	.word	0x08005288
 8004b38:	08005292 	.word	0x08005292
 8004b3c:	00000000 	.word	0x00000000
 8004b40:	080048f3 	.word	0x080048f3
 8004b44:	0800528e 	.word	0x0800528e

08004b48 <_printf_common>:
 8004b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	4698      	mov	r8, r3
 8004b50:	688a      	ldr	r2, [r1, #8]
 8004b52:	690b      	ldr	r3, [r1, #16]
 8004b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bfb8      	it	lt
 8004b5c:	4613      	movlt	r3, r2
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b64:	4607      	mov	r7, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	b10a      	cbz	r2, 8004b6e <_printf_common+0x26>
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	0699      	lsls	r1, r3, #26
 8004b72:	bf42      	ittt	mi
 8004b74:	6833      	ldrmi	r3, [r6, #0]
 8004b76:	3302      	addmi	r3, #2
 8004b78:	6033      	strmi	r3, [r6, #0]
 8004b7a:	6825      	ldr	r5, [r4, #0]
 8004b7c:	f015 0506 	ands.w	r5, r5, #6
 8004b80:	d106      	bne.n	8004b90 <_printf_common+0x48>
 8004b82:	f104 0a19 	add.w	sl, r4, #25
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	6832      	ldr	r2, [r6, #0]
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	42ab      	cmp	r3, r5
 8004b8e:	dc26      	bgt.n	8004bde <_printf_common+0x96>
 8004b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	3b00      	subs	r3, #0
 8004b98:	bf18      	it	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	0692      	lsls	r2, r2, #26
 8004b9e:	d42b      	bmi.n	8004bf8 <_printf_common+0xb0>
 8004ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	47c8      	blx	r9
 8004baa:	3001      	adds	r0, #1
 8004bac:	d01e      	beq.n	8004bec <_printf_common+0xa4>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	6922      	ldr	r2, [r4, #16]
 8004bb2:	f003 0306 	and.w	r3, r3, #6
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	bf02      	ittt	eq
 8004bba:	68e5      	ldreq	r5, [r4, #12]
 8004bbc:	6833      	ldreq	r3, [r6, #0]
 8004bbe:	1aed      	subeq	r5, r5, r3
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	bf0c      	ite	eq
 8004bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc8:	2500      	movne	r5, #0
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	bfc4      	itt	gt
 8004bce:	1a9b      	subgt	r3, r3, r2
 8004bd0:	18ed      	addgt	r5, r5, r3
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	341a      	adds	r4, #26
 8004bd6:	42b5      	cmp	r5, r6
 8004bd8:	d11a      	bne.n	8004c10 <_printf_common+0xc8>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e008      	b.n	8004bf0 <_printf_common+0xa8>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4652      	mov	r2, sl
 8004be2:	4641      	mov	r1, r8
 8004be4:	4638      	mov	r0, r7
 8004be6:	47c8      	blx	r9
 8004be8:	3001      	adds	r0, #1
 8004bea:	d103      	bne.n	8004bf4 <_printf_common+0xac>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	e7c6      	b.n	8004b86 <_printf_common+0x3e>
 8004bf8:	18e1      	adds	r1, r4, r3
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	2030      	movs	r0, #48	@ 0x30
 8004bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c02:	4422      	add	r2, r4
 8004c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	e7c7      	b.n	8004ba0 <_printf_common+0x58>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4622      	mov	r2, r4
 8004c14:	4641      	mov	r1, r8
 8004c16:	4638      	mov	r0, r7
 8004c18:	47c8      	blx	r9
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d0e6      	beq.n	8004bec <_printf_common+0xa4>
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7d9      	b.n	8004bd6 <_printf_common+0x8e>
	...

08004c24 <_printf_i>:
 8004c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	7e0f      	ldrb	r7, [r1, #24]
 8004c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c2c:	2f78      	cmp	r7, #120	@ 0x78
 8004c2e:	4691      	mov	r9, r2
 8004c30:	4680      	mov	r8, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	469a      	mov	sl, r3
 8004c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c3a:	d807      	bhi.n	8004c4c <_printf_i+0x28>
 8004c3c:	2f62      	cmp	r7, #98	@ 0x62
 8004c3e:	d80a      	bhi.n	8004c56 <_printf_i+0x32>
 8004c40:	2f00      	cmp	r7, #0
 8004c42:	f000 80d2 	beq.w	8004dea <_printf_i+0x1c6>
 8004c46:	2f58      	cmp	r7, #88	@ 0x58
 8004c48:	f000 80b9 	beq.w	8004dbe <_printf_i+0x19a>
 8004c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c54:	e03a      	b.n	8004ccc <_printf_i+0xa8>
 8004c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c5a:	2b15      	cmp	r3, #21
 8004c5c:	d8f6      	bhi.n	8004c4c <_printf_i+0x28>
 8004c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c64 <_printf_i+0x40>)
 8004c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c64:	08004cbd 	.word	0x08004cbd
 8004c68:	08004cd1 	.word	0x08004cd1
 8004c6c:	08004c4d 	.word	0x08004c4d
 8004c70:	08004c4d 	.word	0x08004c4d
 8004c74:	08004c4d 	.word	0x08004c4d
 8004c78:	08004c4d 	.word	0x08004c4d
 8004c7c:	08004cd1 	.word	0x08004cd1
 8004c80:	08004c4d 	.word	0x08004c4d
 8004c84:	08004c4d 	.word	0x08004c4d
 8004c88:	08004c4d 	.word	0x08004c4d
 8004c8c:	08004c4d 	.word	0x08004c4d
 8004c90:	08004dd1 	.word	0x08004dd1
 8004c94:	08004cfb 	.word	0x08004cfb
 8004c98:	08004d8b 	.word	0x08004d8b
 8004c9c:	08004c4d 	.word	0x08004c4d
 8004ca0:	08004c4d 	.word	0x08004c4d
 8004ca4:	08004df3 	.word	0x08004df3
 8004ca8:	08004c4d 	.word	0x08004c4d
 8004cac:	08004cfb 	.word	0x08004cfb
 8004cb0:	08004c4d 	.word	0x08004c4d
 8004cb4:	08004c4d 	.word	0x08004c4d
 8004cb8:	08004d93 	.word	0x08004d93
 8004cbc:	6833      	ldr	r3, [r6, #0]
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6032      	str	r2, [r6, #0]
 8004cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e09d      	b.n	8004e0c <_printf_i+0x1e8>
 8004cd0:	6833      	ldr	r3, [r6, #0]
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	1d19      	adds	r1, r3, #4
 8004cd6:	6031      	str	r1, [r6, #0]
 8004cd8:	0606      	lsls	r6, r0, #24
 8004cda:	d501      	bpl.n	8004ce0 <_printf_i+0xbc>
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	e003      	b.n	8004ce8 <_printf_i+0xc4>
 8004ce0:	0645      	lsls	r5, r0, #25
 8004ce2:	d5fb      	bpl.n	8004cdc <_printf_i+0xb8>
 8004ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	da03      	bge.n	8004cf4 <_printf_i+0xd0>
 8004cec:	232d      	movs	r3, #45	@ 0x2d
 8004cee:	426d      	negs	r5, r5
 8004cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cf4:	4859      	ldr	r0, [pc, #356]	@ (8004e5c <_printf_i+0x238>)
 8004cf6:	230a      	movs	r3, #10
 8004cf8:	e011      	b.n	8004d1e <_printf_i+0xfa>
 8004cfa:	6821      	ldr	r1, [r4, #0]
 8004cfc:	6833      	ldr	r3, [r6, #0]
 8004cfe:	0608      	lsls	r0, r1, #24
 8004d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d04:	d402      	bmi.n	8004d0c <_printf_i+0xe8>
 8004d06:	0649      	lsls	r1, r1, #25
 8004d08:	bf48      	it	mi
 8004d0a:	b2ad      	uxthmi	r5, r5
 8004d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d0e:	4853      	ldr	r0, [pc, #332]	@ (8004e5c <_printf_i+0x238>)
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	bf14      	ite	ne
 8004d14:	230a      	movne	r3, #10
 8004d16:	2308      	moveq	r3, #8
 8004d18:	2100      	movs	r1, #0
 8004d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d1e:	6866      	ldr	r6, [r4, #4]
 8004d20:	60a6      	str	r6, [r4, #8]
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	bfa2      	ittt	ge
 8004d26:	6821      	ldrge	r1, [r4, #0]
 8004d28:	f021 0104 	bicge.w	r1, r1, #4
 8004d2c:	6021      	strge	r1, [r4, #0]
 8004d2e:	b90d      	cbnz	r5, 8004d34 <_printf_i+0x110>
 8004d30:	2e00      	cmp	r6, #0
 8004d32:	d04b      	beq.n	8004dcc <_printf_i+0x1a8>
 8004d34:	4616      	mov	r6, r2
 8004d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d3e:	5dc7      	ldrb	r7, [r0, r7]
 8004d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d44:	462f      	mov	r7, r5
 8004d46:	42bb      	cmp	r3, r7
 8004d48:	460d      	mov	r5, r1
 8004d4a:	d9f4      	bls.n	8004d36 <_printf_i+0x112>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d10b      	bne.n	8004d68 <_printf_i+0x144>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	07df      	lsls	r7, r3, #31
 8004d54:	d508      	bpl.n	8004d68 <_printf_i+0x144>
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	6861      	ldr	r1, [r4, #4]
 8004d5a:	4299      	cmp	r1, r3
 8004d5c:	bfde      	ittt	le
 8004d5e:	2330      	movle	r3, #48	@ 0x30
 8004d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d68:	1b92      	subs	r2, r2, r6
 8004d6a:	6122      	str	r2, [r4, #16]
 8004d6c:	f8cd a000 	str.w	sl, [sp]
 8004d70:	464b      	mov	r3, r9
 8004d72:	aa03      	add	r2, sp, #12
 8004d74:	4621      	mov	r1, r4
 8004d76:	4640      	mov	r0, r8
 8004d78:	f7ff fee6 	bl	8004b48 <_printf_common>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d14a      	bne.n	8004e16 <_printf_i+0x1f2>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	b004      	add	sp, #16
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f043 0320 	orr.w	r3, r3, #32
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	4833      	ldr	r0, [pc, #204]	@ (8004e60 <_printf_i+0x23c>)
 8004d94:	2778      	movs	r7, #120	@ 0x78
 8004d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6831      	ldr	r1, [r6, #0]
 8004d9e:	061f      	lsls	r7, r3, #24
 8004da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004da4:	d402      	bmi.n	8004dac <_printf_i+0x188>
 8004da6:	065f      	lsls	r7, r3, #25
 8004da8:	bf48      	it	mi
 8004daa:	b2ad      	uxthmi	r5, r5
 8004dac:	6031      	str	r1, [r6, #0]
 8004dae:	07d9      	lsls	r1, r3, #31
 8004db0:	bf44      	itt	mi
 8004db2:	f043 0320 	orrmi.w	r3, r3, #32
 8004db6:	6023      	strmi	r3, [r4, #0]
 8004db8:	b11d      	cbz	r5, 8004dc2 <_printf_i+0x19e>
 8004dba:	2310      	movs	r3, #16
 8004dbc:	e7ac      	b.n	8004d18 <_printf_i+0xf4>
 8004dbe:	4827      	ldr	r0, [pc, #156]	@ (8004e5c <_printf_i+0x238>)
 8004dc0:	e7e9      	b.n	8004d96 <_printf_i+0x172>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	f023 0320 	bic.w	r3, r3, #32
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	e7f6      	b.n	8004dba <_printf_i+0x196>
 8004dcc:	4616      	mov	r6, r2
 8004dce:	e7bd      	b.n	8004d4c <_printf_i+0x128>
 8004dd0:	6833      	ldr	r3, [r6, #0]
 8004dd2:	6825      	ldr	r5, [r4, #0]
 8004dd4:	6961      	ldr	r1, [r4, #20]
 8004dd6:	1d18      	adds	r0, r3, #4
 8004dd8:	6030      	str	r0, [r6, #0]
 8004dda:	062e      	lsls	r6, r5, #24
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	d501      	bpl.n	8004de4 <_printf_i+0x1c0>
 8004de0:	6019      	str	r1, [r3, #0]
 8004de2:	e002      	b.n	8004dea <_printf_i+0x1c6>
 8004de4:	0668      	lsls	r0, r5, #25
 8004de6:	d5fb      	bpl.n	8004de0 <_printf_i+0x1bc>
 8004de8:	8019      	strh	r1, [r3, #0]
 8004dea:	2300      	movs	r3, #0
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	4616      	mov	r6, r2
 8004df0:	e7bc      	b.n	8004d6c <_printf_i+0x148>
 8004df2:	6833      	ldr	r3, [r6, #0]
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	6032      	str	r2, [r6, #0]
 8004df8:	681e      	ldr	r6, [r3, #0]
 8004dfa:	6862      	ldr	r2, [r4, #4]
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7fb f9e6 	bl	80001d0 <memchr>
 8004e04:	b108      	cbz	r0, 8004e0a <_printf_i+0x1e6>
 8004e06:	1b80      	subs	r0, r0, r6
 8004e08:	6060      	str	r0, [r4, #4]
 8004e0a:	6863      	ldr	r3, [r4, #4]
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e14:	e7aa      	b.n	8004d6c <_printf_i+0x148>
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	4632      	mov	r2, r6
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	47d0      	blx	sl
 8004e20:	3001      	adds	r0, #1
 8004e22:	d0ad      	beq.n	8004d80 <_printf_i+0x15c>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	079b      	lsls	r3, r3, #30
 8004e28:	d413      	bmi.n	8004e52 <_printf_i+0x22e>
 8004e2a:	68e0      	ldr	r0, [r4, #12]
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	bfb8      	it	lt
 8004e32:	4618      	movlt	r0, r3
 8004e34:	e7a6      	b.n	8004d84 <_printf_i+0x160>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4632      	mov	r2, r6
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	47d0      	blx	sl
 8004e40:	3001      	adds	r0, #1
 8004e42:	d09d      	beq.n	8004d80 <_printf_i+0x15c>
 8004e44:	3501      	adds	r5, #1
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	9903      	ldr	r1, [sp, #12]
 8004e4a:	1a5b      	subs	r3, r3, r1
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	dcf2      	bgt.n	8004e36 <_printf_i+0x212>
 8004e50:	e7eb      	b.n	8004e2a <_printf_i+0x206>
 8004e52:	2500      	movs	r5, #0
 8004e54:	f104 0619 	add.w	r6, r4, #25
 8004e58:	e7f5      	b.n	8004e46 <_printf_i+0x222>
 8004e5a:	bf00      	nop
 8004e5c:	08005299 	.word	0x08005299
 8004e60:	080052aa 	.word	0x080052aa

08004e64 <__sflush_r>:
 8004e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	0716      	lsls	r6, r2, #28
 8004e6e:	4605      	mov	r5, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	d454      	bmi.n	8004f1e <__sflush_r+0xba>
 8004e74:	684b      	ldr	r3, [r1, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dc02      	bgt.n	8004e80 <__sflush_r+0x1c>
 8004e7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dd48      	ble.n	8004f12 <__sflush_r+0xae>
 8004e80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d045      	beq.n	8004f12 <__sflush_r+0xae>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e8c:	682f      	ldr	r7, [r5, #0]
 8004e8e:	6a21      	ldr	r1, [r4, #32]
 8004e90:	602b      	str	r3, [r5, #0]
 8004e92:	d030      	beq.n	8004ef6 <__sflush_r+0x92>
 8004e94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	0759      	lsls	r1, r3, #29
 8004e9a:	d505      	bpl.n	8004ea8 <__sflush_r+0x44>
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ea2:	b10b      	cbz	r3, 8004ea8 <__sflush_r+0x44>
 8004ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004eac:	6a21      	ldr	r1, [r4, #32]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b0      	blx	r6
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	d106      	bne.n	8004ec6 <__sflush_r+0x62>
 8004eb8:	6829      	ldr	r1, [r5, #0]
 8004eba:	291d      	cmp	r1, #29
 8004ebc:	d82b      	bhi.n	8004f16 <__sflush_r+0xb2>
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <__sflush_r+0x104>)
 8004ec0:	410a      	asrs	r2, r1
 8004ec2:	07d6      	lsls	r6, r2, #31
 8004ec4:	d427      	bmi.n	8004f16 <__sflush_r+0xb2>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	6062      	str	r2, [r4, #4]
 8004eca:	04d9      	lsls	r1, r3, #19
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	d504      	bpl.n	8004edc <__sflush_r+0x78>
 8004ed2:	1c42      	adds	r2, r0, #1
 8004ed4:	d101      	bne.n	8004eda <__sflush_r+0x76>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	b903      	cbnz	r3, 8004edc <__sflush_r+0x78>
 8004eda:	6560      	str	r0, [r4, #84]	@ 0x54
 8004edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ede:	602f      	str	r7, [r5, #0]
 8004ee0:	b1b9      	cbz	r1, 8004f12 <__sflush_r+0xae>
 8004ee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ee6:	4299      	cmp	r1, r3
 8004ee8:	d002      	beq.n	8004ef0 <__sflush_r+0x8c>
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7ff fbf2 	bl	80046d4 <_free_r>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ef4:	e00d      	b.n	8004f12 <__sflush_r+0xae>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b0      	blx	r6
 8004efc:	4602      	mov	r2, r0
 8004efe:	1c50      	adds	r0, r2, #1
 8004f00:	d1c9      	bne.n	8004e96 <__sflush_r+0x32>
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0c6      	beq.n	8004e96 <__sflush_r+0x32>
 8004f08:	2b1d      	cmp	r3, #29
 8004f0a:	d001      	beq.n	8004f10 <__sflush_r+0xac>
 8004f0c:	2b16      	cmp	r3, #22
 8004f0e:	d11e      	bne.n	8004f4e <__sflush_r+0xea>
 8004f10:	602f      	str	r7, [r5, #0]
 8004f12:	2000      	movs	r0, #0
 8004f14:	e022      	b.n	8004f5c <__sflush_r+0xf8>
 8004f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f1a:	b21b      	sxth	r3, r3
 8004f1c:	e01b      	b.n	8004f56 <__sflush_r+0xf2>
 8004f1e:	690f      	ldr	r7, [r1, #16]
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	d0f6      	beq.n	8004f12 <__sflush_r+0xae>
 8004f24:	0793      	lsls	r3, r2, #30
 8004f26:	680e      	ldr	r6, [r1, #0]
 8004f28:	bf08      	it	eq
 8004f2a:	694b      	ldreq	r3, [r1, #20]
 8004f2c:	600f      	str	r7, [r1, #0]
 8004f2e:	bf18      	it	ne
 8004f30:	2300      	movne	r3, #0
 8004f32:	eba6 0807 	sub.w	r8, r6, r7
 8004f36:	608b      	str	r3, [r1, #8]
 8004f38:	f1b8 0f00 	cmp.w	r8, #0
 8004f3c:	dde9      	ble.n	8004f12 <__sflush_r+0xae>
 8004f3e:	6a21      	ldr	r1, [r4, #32]
 8004f40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f42:	4643      	mov	r3, r8
 8004f44:	463a      	mov	r2, r7
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b0      	blx	r6
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	dc08      	bgt.n	8004f60 <__sflush_r+0xfc>
 8004f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	4407      	add	r7, r0
 8004f62:	eba8 0800 	sub.w	r8, r8, r0
 8004f66:	e7e7      	b.n	8004f38 <__sflush_r+0xd4>
 8004f68:	dfbffffe 	.word	0xdfbffffe

08004f6c <_fflush_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	4605      	mov	r5, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	b913      	cbnz	r3, 8004f7c <_fflush_r+0x10>
 8004f76:	2500      	movs	r5, #0
 8004f78:	4628      	mov	r0, r5
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	b118      	cbz	r0, 8004f86 <_fflush_r+0x1a>
 8004f7e:	6a03      	ldr	r3, [r0, #32]
 8004f80:	b90b      	cbnz	r3, 8004f86 <_fflush_r+0x1a>
 8004f82:	f7ff fa9f 	bl	80044c4 <__sinit>
 8004f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f3      	beq.n	8004f76 <_fflush_r+0xa>
 8004f8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f90:	07d0      	lsls	r0, r2, #31
 8004f92:	d404      	bmi.n	8004f9e <_fflush_r+0x32>
 8004f94:	0599      	lsls	r1, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_fflush_r+0x32>
 8004f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f9a:	f7ff fb98 	bl	80046ce <__retarget_lock_acquire_recursive>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	f7ff ff5f 	bl	8004e64 <__sflush_r>
 8004fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fa8:	07da      	lsls	r2, r3, #31
 8004faa:	4605      	mov	r5, r0
 8004fac:	d4e4      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	d4e1      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fb6:	f7ff fb8b 	bl	80046d0 <__retarget_lock_release_recursive>
 8004fba:	e7dd      	b.n	8004f78 <_fflush_r+0xc>

08004fbc <__swbuf_r>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	460e      	mov	r6, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	b118      	cbz	r0, 8004fce <__swbuf_r+0x12>
 8004fc6:	6a03      	ldr	r3, [r0, #32]
 8004fc8:	b90b      	cbnz	r3, 8004fce <__swbuf_r+0x12>
 8004fca:	f7ff fa7b 	bl	80044c4 <__sinit>
 8004fce:	69a3      	ldr	r3, [r4, #24]
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	071a      	lsls	r2, r3, #28
 8004fd6:	d501      	bpl.n	8004fdc <__swbuf_r+0x20>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	b943      	cbnz	r3, 8004fee <__swbuf_r+0x32>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f82a 	bl	8005038 <__swsetup_r>
 8004fe4:	b118      	cbz	r0, 8004fee <__swbuf_r+0x32>
 8004fe6:	f04f 37ff 	mov.w	r7, #4294967295
 8004fea:	4638      	mov	r0, r7
 8004fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	6922      	ldr	r2, [r4, #16]
 8004ff2:	1a98      	subs	r0, r3, r2
 8004ff4:	6963      	ldr	r3, [r4, #20]
 8004ff6:	b2f6      	uxtb	r6, r6
 8004ff8:	4283      	cmp	r3, r0
 8004ffa:	4637      	mov	r7, r6
 8004ffc:	dc05      	bgt.n	800500a <__swbuf_r+0x4e>
 8004ffe:	4621      	mov	r1, r4
 8005000:	4628      	mov	r0, r5
 8005002:	f7ff ffb3 	bl	8004f6c <_fflush_r>
 8005006:	2800      	cmp	r0, #0
 8005008:	d1ed      	bne.n	8004fe6 <__swbuf_r+0x2a>
 800500a:	68a3      	ldr	r3, [r4, #8]
 800500c:	3b01      	subs	r3, #1
 800500e:	60a3      	str	r3, [r4, #8]
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	6022      	str	r2, [r4, #0]
 8005016:	701e      	strb	r6, [r3, #0]
 8005018:	6962      	ldr	r2, [r4, #20]
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	429a      	cmp	r2, r3
 800501e:	d004      	beq.n	800502a <__swbuf_r+0x6e>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	07db      	lsls	r3, r3, #31
 8005024:	d5e1      	bpl.n	8004fea <__swbuf_r+0x2e>
 8005026:	2e0a      	cmp	r6, #10
 8005028:	d1df      	bne.n	8004fea <__swbuf_r+0x2e>
 800502a:	4621      	mov	r1, r4
 800502c:	4628      	mov	r0, r5
 800502e:	f7ff ff9d 	bl	8004f6c <_fflush_r>
 8005032:	2800      	cmp	r0, #0
 8005034:	d0d9      	beq.n	8004fea <__swbuf_r+0x2e>
 8005036:	e7d6      	b.n	8004fe6 <__swbuf_r+0x2a>

08005038 <__swsetup_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <__swsetup_r+0xa8>)
 800503c:	4605      	mov	r5, r0
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	460c      	mov	r4, r1
 8005042:	b118      	cbz	r0, 800504c <__swsetup_r+0x14>
 8005044:	6a03      	ldr	r3, [r0, #32]
 8005046:	b90b      	cbnz	r3, 800504c <__swsetup_r+0x14>
 8005048:	f7ff fa3c 	bl	80044c4 <__sinit>
 800504c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005050:	0719      	lsls	r1, r3, #28
 8005052:	d422      	bmi.n	800509a <__swsetup_r+0x62>
 8005054:	06da      	lsls	r2, r3, #27
 8005056:	d407      	bmi.n	8005068 <__swsetup_r+0x30>
 8005058:	2209      	movs	r2, #9
 800505a:	602a      	str	r2, [r5, #0]
 800505c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	f04f 30ff 	mov.w	r0, #4294967295
 8005066:	e033      	b.n	80050d0 <__swsetup_r+0x98>
 8005068:	0758      	lsls	r0, r3, #29
 800506a:	d512      	bpl.n	8005092 <__swsetup_r+0x5a>
 800506c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800506e:	b141      	cbz	r1, 8005082 <__swsetup_r+0x4a>
 8005070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005074:	4299      	cmp	r1, r3
 8005076:	d002      	beq.n	800507e <__swsetup_r+0x46>
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff fb2b 	bl	80046d4 <_free_r>
 800507e:	2300      	movs	r3, #0
 8005080:	6363      	str	r3, [r4, #52]	@ 0x34
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	6063      	str	r3, [r4, #4]
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f043 0308 	orr.w	r3, r3, #8
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	b94b      	cbnz	r3, 80050b2 <__swsetup_r+0x7a>
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a8:	d003      	beq.n	80050b2 <__swsetup_r+0x7a>
 80050aa:	4621      	mov	r1, r4
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 f84f 	bl	8005150 <__smakebuf_r>
 80050b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b6:	f013 0201 	ands.w	r2, r3, #1
 80050ba:	d00a      	beq.n	80050d2 <__swsetup_r+0x9a>
 80050bc:	2200      	movs	r2, #0
 80050be:	60a2      	str	r2, [r4, #8]
 80050c0:	6962      	ldr	r2, [r4, #20]
 80050c2:	4252      	negs	r2, r2
 80050c4:	61a2      	str	r2, [r4, #24]
 80050c6:	6922      	ldr	r2, [r4, #16]
 80050c8:	b942      	cbnz	r2, 80050dc <__swsetup_r+0xa4>
 80050ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050ce:	d1c5      	bne.n	800505c <__swsetup_r+0x24>
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
 80050d2:	0799      	lsls	r1, r3, #30
 80050d4:	bf58      	it	pl
 80050d6:	6962      	ldrpl	r2, [r4, #20]
 80050d8:	60a2      	str	r2, [r4, #8]
 80050da:	e7f4      	b.n	80050c6 <__swsetup_r+0x8e>
 80050dc:	2000      	movs	r0, #0
 80050de:	e7f7      	b.n	80050d0 <__swsetup_r+0x98>
 80050e0:	20000018 	.word	0x20000018

080050e4 <_sbrk_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d06      	ldr	r5, [pc, #24]	@ (8005100 <_sbrk_r+0x1c>)
 80050e8:	2300      	movs	r3, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fb fef6 	bl	8000ee0 <_sbrk>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_sbrk_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_sbrk_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	200002a4 	.word	0x200002a4

08005104 <__swhatbuf_r>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	460c      	mov	r4, r1
 8005108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510c:	2900      	cmp	r1, #0
 800510e:	b096      	sub	sp, #88	@ 0x58
 8005110:	4615      	mov	r5, r2
 8005112:	461e      	mov	r6, r3
 8005114:	da0d      	bge.n	8005132 <__swhatbuf_r+0x2e>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800511c:	f04f 0100 	mov.w	r1, #0
 8005120:	bf14      	ite	ne
 8005122:	2340      	movne	r3, #64	@ 0x40
 8005124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005128:	2000      	movs	r0, #0
 800512a:	6031      	str	r1, [r6, #0]
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	b016      	add	sp, #88	@ 0x58
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	466a      	mov	r2, sp
 8005134:	f000 f848 	bl	80051c8 <_fstat_r>
 8005138:	2800      	cmp	r0, #0
 800513a:	dbec      	blt.n	8005116 <__swhatbuf_r+0x12>
 800513c:	9901      	ldr	r1, [sp, #4]
 800513e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005146:	4259      	negs	r1, r3
 8005148:	4159      	adcs	r1, r3
 800514a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800514e:	e7eb      	b.n	8005128 <__swhatbuf_r+0x24>

08005150 <__smakebuf_r>:
 8005150:	898b      	ldrh	r3, [r1, #12]
 8005152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005154:	079d      	lsls	r5, r3, #30
 8005156:	4606      	mov	r6, r0
 8005158:	460c      	mov	r4, r1
 800515a:	d507      	bpl.n	800516c <__smakebuf_r+0x1c>
 800515c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	6123      	str	r3, [r4, #16]
 8005164:	2301      	movs	r3, #1
 8005166:	6163      	str	r3, [r4, #20]
 8005168:	b003      	add	sp, #12
 800516a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516c:	ab01      	add	r3, sp, #4
 800516e:	466a      	mov	r2, sp
 8005170:	f7ff ffc8 	bl	8005104 <__swhatbuf_r>
 8005174:	9f00      	ldr	r7, [sp, #0]
 8005176:	4605      	mov	r5, r0
 8005178:	4639      	mov	r1, r7
 800517a:	4630      	mov	r0, r6
 800517c:	f7ff fb16 	bl	80047ac <_malloc_r>
 8005180:	b948      	cbnz	r0, 8005196 <__smakebuf_r+0x46>
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	059a      	lsls	r2, r3, #22
 8005188:	d4ee      	bmi.n	8005168 <__smakebuf_r+0x18>
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	f043 0302 	orr.w	r3, r3, #2
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	e7e2      	b.n	800515c <__smakebuf_r+0xc>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	6020      	str	r0, [r4, #0]
 800519a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051a6:	b15b      	cbz	r3, 80051c0 <__smakebuf_r+0x70>
 80051a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 f81d 	bl	80051ec <_isatty_r>
 80051b2:	b128      	cbz	r0, 80051c0 <__smakebuf_r+0x70>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	431d      	orrs	r5, r3
 80051c4:	81a5      	strh	r5, [r4, #12]
 80051c6:	e7cf      	b.n	8005168 <__smakebuf_r+0x18>

080051c8 <_fstat_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4d07      	ldr	r5, [pc, #28]	@ (80051e8 <_fstat_r+0x20>)
 80051cc:	2300      	movs	r3, #0
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	f7fb fe5b 	bl	8000e90 <_fstat>
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	d102      	bne.n	80051e4 <_fstat_r+0x1c>
 80051de:	682b      	ldr	r3, [r5, #0]
 80051e0:	b103      	cbz	r3, 80051e4 <_fstat_r+0x1c>
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	bd38      	pop	{r3, r4, r5, pc}
 80051e6:	bf00      	nop
 80051e8:	200002a4 	.word	0x200002a4

080051ec <_isatty_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	@ (8005208 <_isatty_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fe5a 	bl	8000eb0 <_isatty>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_isatty_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_isatty_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200002a4 	.word	0x200002a4

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
