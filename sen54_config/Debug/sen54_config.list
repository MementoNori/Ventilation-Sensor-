
sen54_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08005d00  08005d00  00006d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed4  08005ed4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed4  08005ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005edc  08005edc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee0  08005ee0  00006ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ee4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08005f4c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005f4c  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a4a  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266b  00000000  00000000  00017ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b97  00000000  00000000  0001b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f58  00000000  00000000  0001bbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012aa9  00000000  00000000  00043b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eccc7  00000000  00000000  000565f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001432bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  00143304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00147818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ce8 	.word	0x08005ce8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005ce8 	.word	0x08005ce8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

PUTCHAR_PROTOTYPE
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f003 fecf 	bl	8004314 <HAL_UART_Transmit>
    return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000d8 	.word	0x200000d8

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b0b7      	sub	sp, #220	@ 0xdc
 8000588:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 f9de 	bl	800194a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 fa07 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fac7 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 fa55 	bl	8000a44 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 fa93 	bl	8000ac4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t sensor_data[60];  // Buffer large enough for full data

  uint8_t buffer[48];
  sen5x_get_product_name(buffer, 48);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	2130      	movs	r1, #48	@ 0x30
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fdb1 	bl	800110c <sen5x_get_product_name>
  int16_t error = sen5x_device_reset();
 80005aa:	f000 fdf3 	bl	8001194 <sen5x_device_reset>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
  error = sen5x_start_measurement();
 80005b4:	f000 fcfa 	bl	8000fac <sen5x_start_measurement>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  HAL_Delay(1000);
 80005be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c2:	f001 fa37 	bl	8001a34 <HAL_Delay>

  error = sen5x_read_measured_values(
 80005c6:	f107 0408 	add.w	r4, r7, #8
 80005ca:	f107 020a 	add.w	r2, r7, #10
 80005ce:	f107 010c 	add.w	r1, r7, #12
 80005d2:	f107 000e 	add.w	r0, r7, #14
 80005d6:	463b      	mov	r3, r7
 80005d8:	9303      	str	r3, [sp, #12]
 80005da:	1cbb      	adds	r3, r7, #2
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	1dbb      	adds	r3, r7, #6
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4623      	mov	r3, r4
 80005e8:	f000 fd05 	bl	8000ff6 <sen5x_read_measured_values>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
      &mass_concentration_pm1p0, &mass_concentration_pm2p5,
      &mass_concentration_pm4p0, &mass_concentration_pm10p0,
      &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);

  if (sen54_init(&hi2c1) == HAL_OK)
 80005f2:	480d      	ldr	r0, [pc, #52]	@ (8000628 <main+0xa4>)
 80005f4:	f000 fc94 	bl	8000f20 <sen54_init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d103      	bne.n	8000606 <main+0x82>
  {
      printf("Sensor initialized.\r\n");
 80005fe:	480b      	ldr	r0, [pc, #44]	@ (800062c <main+0xa8>)
 8000600:	f004 fd10 	bl	8005024 <puts>
 8000604:	e002      	b.n	800060c <main+0x88>
  } else {
      printf("Sensor init failed.\r\n");
 8000606:	480a      	ldr	r0, [pc, #40]	@ (8000630 <main+0xac>)
 8000608:	f004 fd0c 	bl	8005024 <puts>
  }


  if (sen54_read_measurements(&hi2c1, sensor_data, sizeof(sensor_data)) == HAL_OK) {
 800060c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000610:	223c      	movs	r2, #60	@ 0x3c
 8000612:	4619      	mov	r1, r3
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <main+0xa4>)
 8000616:	f000 fc9d 	bl	8000f54 <sen54_read_measurements>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d11f      	bne.n	8000660 <main+0xdc>
      /*printf("Measurement received:\r\n");*/

      for (int i = 0; i < sizeof(sensor_data); i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000626:	e014      	b.n	8000652 <main+0xce>
 8000628:	20000084 	.word	0x20000084
 800062c:	08005d00 	.word	0x08005d00
 8000630:	08005d18 	.word	0x08005d18
          printf("%02X ", sensor_data[i]);
 8000634:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	48cc      	ldr	r0, [pc, #816]	@ (8000974 <main+0x3f0>)
 8000644:	f004 fc86 	bl	8004f54 <iprintf>
      for (int i = 0; i < sizeof(sensor_data); i++) {
 8000648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800064c:	3301      	adds	r3, #1
 800064e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000656:	2b3b      	cmp	r3, #59	@ 0x3b
 8000658:	d9ec      	bls.n	8000634 <main+0xb0>
      }
      printf("\r\n");
 800065a:	48c7      	ldr	r0, [pc, #796]	@ (8000978 <main+0x3f4>)
 800065c:	f004 fce2 	bl	8005024 <puts>
  /*else {
      printf("Measurement read failed\r\n");
  }*/


  if (sen54_read_measurements(&hi2c1, sensor_data, sizeof(sensor_data)) == HAL_OK) {
 8000660:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000664:	223c      	movs	r2, #60	@ 0x3c
 8000666:	4619      	mov	r1, r3
 8000668:	48c4      	ldr	r0, [pc, #784]	@ (800097c <main+0x3f8>)
 800066a:	f000 fc73 	bl	8000f54 <sen54_read_measurements>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	f040 8123 	bne.w	80008bc <main+0x338>

	      /*printf("Mass Concentration PM1.0:\r\n");
	      for (int i = 0; i < 2; i++) {
	      	  printf("%02X ", sensor_data[i]);
	      }*/
	      printf("\r\n");
 8000676:	48c0      	ldr	r0, [pc, #768]	@ (8000978 <main+0x3f4>)
 8000678:	f004 fcd4 	bl	8005024 <puts>
	      uint16_t raw_mc_1 = ((uint16_t)sensor_data[0] << 8) | sensor_data[1];
 800067c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	b21a      	sxth	r2, r3
 8000684:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000688:	b21b      	sxth	r3, r3
 800068a:	4313      	orrs	r3, r2
 800068c:	b21b      	sxth	r3, r3
 800068e:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
	      mass_concentration_pm1p0 = raw_mc_1/10.0f;
 8000692:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8000696:	ee07 3a90 	vmov	s15, r3
 800069a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800069e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80006a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006aa:	ee17 3a90 	vmov	r3, s15
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	81fb      	strh	r3, [r7, #14]
	      int mc_1_int = (int)(mass_concentration_pm1p0 + 0.5f);
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80006c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006c8:	ee17 3a90 	vmov	r3, s15
 80006cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	      printf("\r\nMass Concentration PM1.0: %.d °C\r\n", mc_1_int);
 80006d0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80006d4:	48aa      	ldr	r0, [pc, #680]	@ (8000980 <main+0x3fc>)
 80006d6:	f004 fc3d 	bl	8004f54 <iprintf>

	      /*printf("Mass Concentration PM2.5:\r\n");
	      for (int i = 3; i < 5; i++) {
	    	  printf("%02X ", sensor_data[i]);
	      }*/
	      printf("\r\n");
 80006da:	48a7      	ldr	r0, [pc, #668]	@ (8000978 <main+0x3f4>)
 80006dc:	f004 fca2 	bl	8005024 <puts>
	      uint16_t raw_mc_25 = ((uint16_t)sensor_data[3] << 8) | sensor_data[4];
 80006e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
	      mass_concentration_pm2p5 = raw_mc_25/10.0f;
 80006f6:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80006fa:	ee07 3a90 	vmov	s15, r3
 80006fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000702:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800070a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800070e:	ee17 3a90 	vmov	r3, s15
 8000712:	b29b      	uxth	r3, r3
 8000714:	81bb      	strh	r3, [r7, #12]
	      int mc_25_int = (int)(mass_concentration_pm2p5 + 0.5f);
 8000716:	89bb      	ldrh	r3, [r7, #12]
 8000718:	ee07 3a90 	vmov	s15, r3
 800071c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000720:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800072c:	ee17 3a90 	vmov	r3, s15
 8000730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	      printf("\r\nMass Concentration PM2.5: %.d °C\r\n", mc_25_int);
 8000734:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000738:	4892      	ldr	r0, [pc, #584]	@ (8000984 <main+0x400>)
 800073a:	f004 fc0b 	bl	8004f54 <iprintf>

	      /*printf("Mass Concentration PM4.0:\r\n");
	      for (int i = 6; i < 8; i++) {
	    	  printf("%02X ", sensor_data[i]);
	      }*/
	      printf("\r\n");
 800073e:	488e      	ldr	r0, [pc, #568]	@ (8000978 <main+0x3f4>)
 8000740:	f004 fc70 	bl	8005024 <puts>
	      uint16_t raw_mc_4 = ((uint16_t)sensor_data[6] << 8) | sensor_data[7];
 8000744:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	      mass_concentration_pm4p0 = raw_mc_4/10.0f;
 800075a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000766:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800076a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000772:	ee17 3a90 	vmov	r3, s15
 8000776:	b29b      	uxth	r3, r3
 8000778:	817b      	strh	r3, [r7, #10]
	      int mc_4_int = (int)(mass_concentration_pm4p0 + 0.5f);
 800077a:	897b      	ldrh	r3, [r7, #10]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000784:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800078c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000790:	ee17 3a90 	vmov	r3, s15
 8000794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	      printf("\r\nMass Concentration PM4.0: %.d °C\r\n", mc_4_int);
 8000798:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800079c:	487a      	ldr	r0, [pc, #488]	@ (8000988 <main+0x404>)
 800079e:	f004 fbd9 	bl	8004f54 <iprintf>

	      /*printf("Mass Concentration PM10:\r\n");
	      for (int i = 9; i < 11; i++) {
	    	  printf("%02X ", sensor_data[i]);
	      }*/
	      printf("\r\n");
 80007a2:	4875      	ldr	r0, [pc, #468]	@ (8000978 <main+0x3f4>)
 80007a4:	f004 fc3e 	bl	8005024 <puts>
	      uint16_t raw_mc_10 = ((uint16_t)sensor_data[9] << 8) | sensor_data[10];
 80007a8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	      mass_concentration_pm10p0 = raw_mc_10/10.0f;
 80007be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ca:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80007ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d6:	ee17 3a90 	vmov	r3, s15
 80007da:	b29b      	uxth	r3, r3
 80007dc:	813b      	strh	r3, [r7, #8]
	      int mc_10_int = (int)(mass_concentration_pm10p0 + 0.5f);
 80007de:	893b      	ldrh	r3, [r7, #8]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80007ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007f4:	ee17 3a90 	vmov	r3, s15
 80007f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	      printf("\r\nMass Concentration PM10.0: %.d °C\r\n", mc_10_int);
 80007fc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000800:	4862      	ldr	r0, [pc, #392]	@ (800098c <main+0x408>)
 8000802:	f004 fba7 	bl	8004f54 <iprintf>

	      /*printf("Compensated Ambient Humidity:\r\n");
	      for (int i = 12; i < 14; i++) {
	    	  printf("%02X ", sensor_data[i]);
	      }*/
	      printf("\r\n");
 8000806:	485c      	ldr	r0, [pc, #368]	@ (8000978 <main+0x3f4>)
 8000808:	f004 fc0c 	bl	8005024 <puts>
	      uint16_t raw_hum = ((uint16_t)sensor_data[12] << 8) | sensor_data[13];
 800080c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21a      	sxth	r2, r3
 8000814:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21b      	sxth	r3, r3
 800081e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
	      ambient_humidity = raw_hum/100.0f;
 8000822:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800082e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8000990 <main+0x40c>
 8000832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083a:	ee17 3a90 	vmov	r3, s15
 800083e:	b21b      	sxth	r3, r3
 8000840:	80fb      	strh	r3, [r7, #6]
	      int hum_int = (int)(ambient_humidity + 0.5f);
 8000842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000846:	ee07 3a90 	vmov	s15, r3
 800084a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800084e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000852:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	ee17 3a90 	vmov	r3, s15
 800085e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	      printf("\r\nAmbient Humidity: %.d %\r\n", hum_int);
 8000862:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8000866:	484b      	ldr	r0, [pc, #300]	@ (8000994 <main+0x410>)
 8000868:	f004 fb74 	bl	8004f54 <iprintf>

	      //printf("Compensated Ambient Temperature:\r\n");
	      /*for (int i = 15; i < 17; i++) {
	          printf("%02X ", sensor_data[i]);
	      }*/
	      uint16_t raw_temp = ((uint16_t)sensor_data[15] << 8) | sensor_data[16];
 800086c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
	      float room_temperature = raw_temp / 200.0f;
 8000882:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8000886:	ee07 3a90 	vmov	s15, r3
 800088a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800088e:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8000998 <main+0x414>
 8000892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000896:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	      int temp_int = (int)(room_temperature + 0.5f);
 800089a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800089e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80008a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008aa:	ee17 3a90 	vmov	r3, s15
 80008ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	      printf("\r\nAmbient Temperature: %.d °C\r\n", temp_int);
 80008b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80008b6:	4839      	ldr	r0, [pc, #228]	@ (800099c <main+0x418>)
 80008b8:	f004 fb4c 	bl	8004f54 <iprintf>
	 /* printf("Compensated Ambient Temperature:\r\n");
	  for (int i = 15; i < 17; i++) {
		  printf("%02X ", sensor_data[i]);
	  }*/

	  uint16_t raw_temp = ((uint16_t)sensor_data[15] << 8) | sensor_data[16];
 80008bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	  float room_temperature = raw_temp / 200.0f;
 80008d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008de:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8000998 <main+0x414>
 80008e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	  int temp_int = (int)(room_temperature + 0.5f);
 80008ea:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80008ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80008f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fa:	ee17 3a90 	vmov	r3, s15
 80008fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  printf("\r\nAmbient Temperature: %.d °C\r\n", temp_int);
 8000902:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000906:	4825      	ldr	r0, [pc, #148]	@ (800099c <main+0x418>)
 8000908:	f004 fb24 	bl	8004f54 <iprintf>

	  printf("\r\n");
 800090c:	481a      	ldr	r0, [pc, #104]	@ (8000978 <main+0x3f4>)
 800090e:	f004 fb89 	bl	8005024 <puts>

	  uint16_t raw_hum = ((uint16_t)sensor_data[12] << 8) | sensor_data[13];
 8000912:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b21a      	sxth	r2, r3
 800091a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21b      	sxth	r3, r3
 8000924:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	  ambient_humidity = raw_hum/100.0f;
 8000928:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800092c:	ee07 3a90 	vmov	s15, r3
 8000930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000934:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000990 <main+0x40c>
 8000938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800093c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000940:	ee17 3a90 	vmov	r3, s15
 8000944:	b21b      	sxth	r3, r3
 8000946:	80fb      	strh	r3, [r7, #6]
	  int hum_int = (int)(ambient_humidity + 0.5f);
 8000948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094c:	ee07 3a90 	vmov	s15, r3
 8000950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000954:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800095c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000960:	ee17 3a90 	vmov	r3, s15
 8000964:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  printf("\r\nAmbient Humidity: %.d %\r\n", hum_int);
 8000966:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000968:	480a      	ldr	r0, [pc, #40]	@ (8000994 <main+0x410>)
 800096a:	f004 faf3 	bl	8004f54 <iprintf>
  {
 800096e:	bf00      	nop
 8000970:	e7a4      	b.n	80008bc <main+0x338>
 8000972:	bf00      	nop
 8000974:	08005d30 	.word	0x08005d30
 8000978:	08005d38 	.word	0x08005d38
 800097c:	20000084 	.word	0x20000084
 8000980:	08005d3c 	.word	0x08005d3c
 8000984:	08005d64 	.word	0x08005d64
 8000988:	08005d8c 	.word	0x08005d8c
 800098c:	08005db4 	.word	0x08005db4
 8000990:	42c80000 	.word	0x42c80000
 8000994:	08005ddc 	.word	0x08005ddc
 8000998:	43480000 	.word	0x43480000
 800099c:	08005df8 	.word	0x08005df8

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b096      	sub	sp, #88	@ 0x58
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2244      	movs	r2, #68	@ 0x44
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 fb40 	bl	8005034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009c6:	f002 f945 	bl	8002c54 <HAL_PWREx_ControlVoltageScaling>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009d0:	f000 faa0 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009d4:	2310      	movs	r3, #16
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009e0:	2360      	movs	r3, #96	@ 0x60
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009e8:	2301      	movs	r3, #1
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009f0:	2328      	movs	r3, #40	@ 0x28
 80009f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009f4:	2307      	movs	r3, #7
 80009f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 f97b 	bl	8002d00 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a10:	f000 fa80 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fd43 	bl	80034b8 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a38:	f000 fa6c 	bl	8000f14 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3758      	adds	r7, #88	@ 0x58
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000abc <MX_I2C1_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a50:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac0 <MX_I2C1_Init+0x7c>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a54:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a66:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7e:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a80:	f001 faf3 	bl	800206a <HAL_I2C_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a8a:	f000 fa43 	bl	8000f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a92:	f002 f839 	bl	8002b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a9c:	f000 fa3a 	bl	8000f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000aa4:	f002 f87b 	bl	8002b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 fa31 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000084 	.word	0x20000084
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	10d19ce4 	.word	0x10d19ce4

08000ac4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <MX_USART1_UART_Init+0x5c>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ace:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000b08:	f003 fbb6 	bl	8004278 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 f9ff 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000d8 	.word	0x200000d8
 8000b20:	40013800 	.word	0x40013800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4bbc      	ldr	r3, [pc, #752]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	4abb      	ldr	r2, [pc, #748]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b46:	4bb9      	ldr	r3, [pc, #740]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4bb6      	ldr	r3, [pc, #728]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	4ab5      	ldr	r2, [pc, #724]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5e:	4bb3      	ldr	r3, [pc, #716]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4bb0      	ldr	r3, [pc, #704]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4aaf      	ldr	r2, [pc, #700]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4bad      	ldr	r3, [pc, #692]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b82:	4baa      	ldr	r3, [pc, #680]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4aa9      	ldr	r2, [pc, #676]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4ba7      	ldr	r3, [pc, #668]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	4ba4      	ldr	r3, [pc, #656]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	4aa3      	ldr	r2, [pc, #652]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8000e2c <MX_GPIO_Init+0x308>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000bb8:	489d      	ldr	r0, [pc, #628]	@ (8000e30 <MX_GPIO_Init+0x30c>)
 8000bba:	f001 fa1b 	bl	8001ff4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_RST_GPIO_Port, ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bc4:	489b      	ldr	r0, [pc, #620]	@ (8000e34 <MX_GPIO_Init+0x310>)
 8000bc6:	f001 fa15 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000bd0:	4899      	ldr	r0, [pc, #612]	@ (8000e38 <MX_GPIO_Init+0x314>)
 8000bd2:	f001 fa0f 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bdc:	4896      	ldr	r0, [pc, #600]	@ (8000e38 <MX_GPIO_Init+0x314>)
 8000bde:	f001 fa09 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000be8:	4894      	ldr	r0, [pc, #592]	@ (8000e3c <MX_GPIO_Init+0x318>)
 8000bea:	f001 fa03 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f001 f9fc 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2120      	movs	r1, #32
 8000c00:	488b      	ldr	r0, [pc, #556]	@ (8000e30 <MX_GPIO_Init+0x30c>)
 8000c02:	f001 f9f7 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c06:	233f      	movs	r3, #63	@ 0x3f
 8000c08:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4888      	ldr	r0, [pc, #544]	@ (8000e3c <MX_GPIO_Init+0x318>)
 8000c1a:	f001 f841 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 f830 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c40:	230c      	movs	r3, #12
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c50:	2307      	movs	r3, #7
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5e:	f001 f81f 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c62:	2310      	movs	r3, #16
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c66:	230b      	movs	r3, #11
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c78:	f001 f812 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c7c:	23e0      	movs	r3, #224	@ 0xe0
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f001 f801 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	485f      	ldr	r0, [pc, #380]	@ (8000e30 <MX_GPIO_Init+0x30c>)
 8000cb4:	f000 fff4 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4859      	ldr	r0, [pc, #356]	@ (8000e30 <MX_GPIO_Init+0x30c>)
 8000ccc:	f000 ffe8 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cd0:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000cd4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4851      	ldr	r0, [pc, #324]	@ (8000e30 <MX_GPIO_Init+0x30c>)
 8000cea:	f000 ffd9 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cee:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d00:	2306      	movs	r3, #6
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	484a      	ldr	r0, [pc, #296]	@ (8000e34 <MX_GPIO_Init+0x310>)
 8000d0c:	f000 ffc8 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISM43362_RST_Pin */
  GPIO_InitStruct.Pin = ISM43362_RST_Pin;
 8000d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ISM43362_RST_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4842      	ldr	r0, [pc, #264]	@ (8000e34 <MX_GPIO_Init+0x310>)
 8000d2a:	f000 ffb9 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000d2e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000d32:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d40:	230a      	movs	r3, #10
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	483a      	ldr	r0, [pc, #232]	@ (8000e34 <MX_GPIO_Init+0x310>)
 8000d4c:	f000 ffa8 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d56:	2312      	movs	r3, #18
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d62:	2304      	movs	r3, #4
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4830      	ldr	r0, [pc, #192]	@ (8000e30 <MX_GPIO_Init+0x30c>)
 8000d6e:	f000 ff97 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000d72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d84:	2307      	movs	r3, #7
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	482a      	ldr	r0, [pc, #168]	@ (8000e38 <MX_GPIO_Init+0x314>)
 8000d90:	f000 ff86 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d94:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000d98:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4823      	ldr	r0, [pc, #140]	@ (8000e38 <MX_GPIO_Init+0x314>)
 8000dac:	f000 ff78 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000db0:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481b      	ldr	r0, [pc, #108]	@ (8000e38 <MX_GPIO_Init+0x314>)
 8000dca:	f000 ff69 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000dce:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4815      	ldr	r0, [pc, #84]	@ (8000e3c <MX_GPIO_Init+0x318>)
 8000de8:	f000 ff5a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000dec:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	480e      	ldr	r0, [pc, #56]	@ (8000e3c <MX_GPIO_Init+0x318>)
 8000e04:	f000 ff4c 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000e08:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f000 ff3c 	bl	8001ca0 <HAL_GPIO_Init>
 8000e28:	e00a      	b.n	8000e40 <MX_GPIO_Init+0x31c>
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	48001000 	.word	0x48001000
 8000e38:	48000c00 	.word	0x48000c00
 8000e3c:	48000800 	.word	0x48000800

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e58:	f000 ff22 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000e5c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e6e:	230a      	movs	r3, #10
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7c:	f000 ff10 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000e80:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e92:	2306      	movs	r3, #6
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481b      	ldr	r0, [pc, #108]	@ (8000f0c <MX_GPIO_Init+0x3e8>)
 8000e9e:	f000 feff 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4814      	ldr	r0, [pc, #80]	@ (8000f10 <MX_GPIO_Init+0x3ec>)
 8000ebe:	f000 feef 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin;
 8000ec2:	2318      	movs	r3, #24
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <MX_GPIO_Init+0x3ec>)
 8000ede:	f000 fedf 	bl	8001ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2017      	movs	r0, #23
 8000ee8:	f000 fea3 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eec:	2017      	movs	r0, #23
 8000eee:	f000 febc 	bl	8001c6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2028      	movs	r0, #40	@ 0x28
 8000ef8:	f000 fe9b 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000efc:	2028      	movs	r0, #40	@ 0x28
 8000efe:	f000 feb4 	bl	8001c6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	@ 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48000c00 	.word	0x48000c00

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <sen54_init>:
// SEN54 command to read measured values
static const uint8_t read_measurement_cmd[] = { 0x03, 0xC4 };

// Initialization function: sends command to start measurements
HAL_StatusTypeDef sen54_init(I2C_HandleTypeDef *hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(hi2c, SEN54_I2C_ADDR, (uint8_t*)start_measurement_cmd, sizeof(start_measurement_cmd), HAL_MAX_DELAY);
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <sen54_init+0x30>)
 8000f32:	21d2      	movs	r1, #210	@ 0xd2
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 f933 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);  // Give sensor time to start measuring
 8000f3e:	2064      	movs	r0, #100	@ 0x64
 8000f40:	f000 fd78 	bl	8001a34 <HAL_Delay>

    /*printf("Sending to I2C address 0x%02X\r\n", SEN54_I2C_ADDR);*/


    return status;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	08005e50 	.word	0x08005e50

08000f54 <sen54_read_measurements>:

// Read raw measurement data into buffer
HAL_StatusTypeDef sen54_read_measurements(I2C_HandleTypeDef *hi2c, uint8_t *buffer, uint16_t len)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    // Request data from sensor
    status = HAL_I2C_Master_Transmit(hi2c, SEN54_I2C_ADDR, (uint8_t*)read_measurement_cmd, sizeof(read_measurement_cmd), HAL_MAX_DELAY);
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa8 <sen54_read_measurements+0x54>)
 8000f6c:	21d2      	movs	r1, #210	@ 0xd2
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f001 f916 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000f74:	4603      	mov	r3, r0
 8000f76:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <sen54_read_measurements+0x2e>
        return status;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	e00e      	b.n	8000fa0 <sen54_read_measurements+0x4c>
    }

    // Wait briefly before reading
    HAL_Delay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f000 fd56 	bl	8001a34 <HAL_Delay>

    // Read sensor response into buffer
    status = HAL_I2C_Master_Receive(hi2c, SEN54_I2C_ADDR, buffer, len, HAL_MAX_DELAY);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	21d2      	movs	r1, #210	@ 0xd2
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f001 fa1b 	bl	80023d0 <HAL_I2C_Master_Receive>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	75fb      	strb	r3, [r7, #23]
    return status;
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08005e54 	.word	0x08005e54

08000fac <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8000fb6:	88f9      	ldrh	r1, [r7, #6]
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2221      	movs	r2, #33	@ 0x21
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f9a4 	bl	800130a <sensirion_i2c_add_command_to_buffer>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8000fc6:	88fa      	ldrh	r2, [r7, #6]
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2069      	movs	r0, #105	@ 0x69
 8000fce:	f000 f9bf 	bl	8001350 <sensirion_i2c_write_data>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8000fd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <sen5x_start_measurement+0x38>
        return error;
 8000fde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe2:	e004      	b.n	8000fee <sen5x_start_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8000fe4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000fe8:	f000 fa70 	bl	80014cc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b08c      	sub	sp, #48	@ 0x30
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8001008:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	f44f 7271 	mov.w	r2, #964	@ 0x3c4
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f979 	bl	800130a <sensirion_i2c_add_command_to_buffer>
 8001018:	4603      	mov	r3, r0
 800101a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800101c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	2069      	movs	r0, #105	@ 0x69
 8001026:	f000 f993 	bl	8001350 <sensirion_i2c_write_data>
 800102a:	4603      	mov	r3, r0
 800102c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (error) {
 800102e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <sen5x_read_measured_values+0x46>
        return error;
 8001036:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800103a:	e063      	b.n	8001104 <sen5x_read_measured_values+0x10e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800103c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001040:	f000 fa44 	bl	80014cc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2210      	movs	r2, #16
 800104a:	4619      	mov	r1, r3
 800104c:	2069      	movs	r0, #105	@ 0x69
 800104e:	f000 f992 	bl	8001376 <sensirion_i2c_read_data_inplace>
 8001052:	4603      	mov	r3, r0
 8001054:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (error) {
 8001056:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <sen5x_read_measured_values+0x6e>
        return error;
 800105e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001062:	e04f      	b.n	8001104 <sen5x_read_measured_values+0x10e>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f8bb 	bl	80011e4 <sensirion_common_bytes_to_uint16_t>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	3302      	adds	r3, #2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f8b1 	bl	80011e4 <sensirion_common_bytes_to_uint16_t>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	3304      	adds	r3, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f8a7 	bl	80011e4 <sensirion_common_bytes_to_uint16_t>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	3306      	adds	r3, #6
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f89d 	bl	80011e4 <sensirion_common_bytes_to_uint16_t>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	3308      	adds	r3, #8
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f8a8 	bl	800120e <sensirion_common_bytes_to_int16_t>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010c4:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	330a      	adds	r3, #10
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f89e 	bl	800120e <sensirion_common_bytes_to_int16_t>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010d8:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	330c      	adds	r3, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f894 	bl	800120e <sensirion_common_bytes_to_int16_t>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ec:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	330e      	adds	r3, #14
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f88a 	bl	800120e <sensirion_common_bytes_to_int16_t>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001100:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3730      	adds	r7, #48	@ 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b090      	sub	sp, #64	@ 0x40
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800111c:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	f24d 0214 	movw	r2, #53268	@ 0xd014
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f8ef 	bl	800130a <sensirion_i2c_add_command_to_buffer>
 800112c:	4603      	mov	r3, r0
 800112e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8001130:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4619      	mov	r1, r3
 8001138:	2069      	movs	r0, #105	@ 0x69
 800113a:	f000 f909 	bl	8001350 <sensirion_i2c_write_data>
 800113e:	4603      	mov	r3, r0
 8001140:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (error) {
 8001142:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <sen5x_get_product_name+0x44>
        return error;
 800114a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800114e:	e01c      	b.n	800118a <sen5x_get_product_name+0x7e>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8001150:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001154:	f000 f9ba 	bl	80014cc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2220      	movs	r2, #32
 800115e:	4619      	mov	r1, r3
 8001160:	2069      	movs	r0, #105	@ 0x69
 8001162:	f000 f908 	bl	8001376 <sensirion_i2c_read_data_inplace>
 8001166:	4603      	mov	r3, r0
 8001168:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (error) {
 800116a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <sen5x_get_product_name+0x6c>
        return error;
 8001172:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001176:	e008      	b.n	800118a <sen5x_get_product_name+0x7e>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	b29a      	uxth	r2, r3
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f850 	bl	8001228 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3740      	adds	r7, #64	@ 0x40
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800119e:	88f9      	ldrh	r1, [r7, #6]
 80011a0:	463b      	mov	r3, r7
 80011a2:	f24d 3204 	movw	r2, #54020	@ 0xd304
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f8af 	bl	800130a <sensirion_i2c_add_command_to_buffer>
 80011ac:	4603      	mov	r3, r0
 80011ae:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	2069      	movs	r0, #105	@ 0x69
 80011b8:	f000 f8ca 	bl	8001350 <sensirion_i2c_write_data>
 80011bc:	4603      	mov	r3, r0
 80011be:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80011c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <sen5x_device_reset+0x3a>
        return error;
 80011c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011cc:	e003      	b.n	80011d6 <sen5x_device_reset+0x42>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <sen5x_device_reset+0x4c>)
 80011d0:	f000 f97c 	bl	80014cc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	00030d40 	.word	0x00030d40

080011e4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	b29b      	uxth	r3, r3
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <sensirion_common_bytes_to_int16_t>:
uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
}

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffe4 	bl	80011e4 <sensirion_common_bytes_to_uint16_t>
 800121c:	4603      	mov	r3, r0
 800121e:	b21b      	sxth	r3, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	82fb      	strh	r3, [r7, #22]
 800123a:	e00a      	b.n	8001252 <sensirion_common_copy_bytes+0x2a>
        destination[i] = source[i];
 800123c:	8afb      	ldrh	r3, [r7, #22]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	441a      	add	r2, r3
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	440b      	add	r3, r1
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	3301      	adds	r3, #1
 8001250:	82fb      	strh	r3, [r7, #22]
 8001252:	8afa      	ldrh	r2, [r7, #22]
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3f0      	bcc.n	800123c <sensirion_common_copy_bytes+0x14>
    }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001274:	23ff      	movs	r3, #255	@ 0xff
 8001276:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001278:	2300      	movs	r3, #0
 800127a:	81fb      	strh	r3, [r7, #14]
 800127c:	e021      	b.n	80012c2 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	4053      	eors	r3, r2
 800128a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800128c:	2308      	movs	r3, #8
 800128e:	733b      	strb	r3, [r7, #12]
 8001290:	e011      	b.n	80012b6 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8001292:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001296:	2b00      	cmp	r3, #0
 8001298:	da07      	bge.n	80012aa <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	737b      	strb	r3, [r7, #13]
 80012a8:	e002      	b.n	80012b0 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 80012aa:	7b7b      	ldrb	r3, [r7, #13]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80012b0:	7b3b      	ldrb	r3, [r7, #12]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	733b      	strb	r3, [r7, #12]
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ea      	bne.n	8001292 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	3301      	adds	r3, #1
 80012c0:	81fb      	strh	r3, [r7, #14]
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3d9      	bcc.n	800127e <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 80012ca:	7b7b      	ldrb	r3, [r7, #13]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4619      	mov	r1, r3
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffbb 	bl	8001268 <sensirion_i2c_generate_crc>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	787b      	ldrb	r3, [r7, #1]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d001      	beq.n	8001300 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	807b      	strh	r3, [r7, #2]
 8001316:	4613      	mov	r3, r2
 8001318:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800131a:	883b      	ldrh	r3, [r7, #0]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29a      	uxth	r2, r3
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	1c59      	adds	r1, r3, #1
 8001324:	8079      	strh	r1, [r7, #2]
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	440b      	add	r3, r1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	807a      	strh	r2, [r7, #2]
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	883a      	ldrh	r2, [r7, #0]
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
    return offset;
 8001342:	887b      	ldrh	r3, [r7, #2]
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001360:	88ba      	ldrh	r2, [r7, #4]
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f88c 	bl	8001484 <sensirion_i2c_hal_write>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	6039      	str	r1, [r7, #0]
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	4613      	mov	r3, r2
 8001384:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	0052      	lsls	r2, r2, #1
 8001390:	4413      	add	r3, r2
 8001392:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001394:	88bb      	ldrh	r3, [r7, #4]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 80013a0:	2304      	movs	r3, #4
 80013a2:	e047      	b.n	8001434 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80013a4:	897a      	ldrh	r2, [r7, #10]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f846 	bl	800143c <sensirion_i2c_hal_read>
 80013b0:	4603      	mov	r3, r0
 80013b2:	813b      	strh	r3, [r7, #8]
    if (error) {
 80013b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 80013bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013c0:	e038      	b.n	8001434 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	81fb      	strh	r3, [r7, #14]
 80013c6:	2300      	movs	r3, #0
 80013c8:	81bb      	strh	r3, [r7, #12]
 80013ca:	e02e      	b.n	800142a <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	3302      	adds	r3, #2
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	2102      	movs	r1, #2
 80013e0:	f7ff ff7a 	bl	80012d8 <sensirion_i2c_check_crc>
 80013e4:	4603      	mov	r3, r0
 80013e6:	813b      	strh	r3, [r7, #8]
        if (error) {
 80013e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 80013f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013f4:	e01e      	b.n	8001434 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	441a      	add	r2, r3
 80013fc:	89bb      	ldrh	r3, [r7, #12]
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	81b9      	strh	r1, [r7, #12]
 8001402:	4619      	mov	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	440b      	add	r3, r1
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	3301      	adds	r3, #1
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	441a      	add	r2, r3
 8001414:	89bb      	ldrh	r3, [r7, #12]
 8001416:	1c59      	adds	r1, r3, #1
 8001418:	81b9      	strh	r1, [r7, #12]
 800141a:	4619      	mov	r1, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	440b      	add	r3, r1
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	3303      	adds	r3, #3
 8001428:	81fb      	strh	r3, [r7, #14]
 800142a:	89fa      	ldrh	r2, [r7, #14]
 800142c:	897b      	ldrh	r3, [r7, #10]
 800142e:	429a      	cmp	r2, r3
 8001430:	d3cc      	bcc.n	80013cc <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&hi2c1, (address << 1), data, count, HAL_MAX_DELAY);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	b29b      	uxth	r3, r3
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	b299      	uxth	r1, r3
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4808      	ldr	r0, [pc, #32]	@ (8001480 <sensirion_i2c_hal_read+0x44>)
 8001460:	f000 ffb6 	bl	80023d0 <HAL_I2C_Master_Receive>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
	if (hal_status == HAL_OK) {
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <sensirion_i2c_hal_read+0x36>
		return 0;
 800146e:	2300      	movs	r3, #0
 8001470:	e001      	b.n	8001476 <sensirion_i2c_hal_read+0x3a>
	}
	else {
		return -1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000084 	.word	0x20000084

08001484 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af02      	add	r7, sp, #8
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(&hi2c1, (address << 1), (uint8_t*)data, count, HAL_MAX_DELAY);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	b29b      	uxth	r3, r3
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	b299      	uxth	r1, r3
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4808      	ldr	r0, [pc, #32]	@ (80014c8 <sensirion_i2c_hal_write+0x44>)
 80014a8:	f000 fe7a 	bl	80021a0 <HAL_I2C_Master_Transmit>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
    if (hal_status == HAL_OK) {
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <sensirion_i2c_hal_write+0x36>
        return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e001      	b.n	80014be <sensirion_i2c_hal_write+0x3a>
    } else {
        return -1;  // Generic error
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000084 	.word	0x20000084

080014cc <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if (useconds < 1000) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014da:	d215      	bcs.n	8001508 <sensirion_i2c_hal_sleep_usec+0x3c>
		uint32_t ticks = (SystemCoreClock / 1000000) * useconds / 5;
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <sensirion_i2c_hal_sleep_usec+0x54>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <sensirion_i2c_hal_sleep_usec+0x58>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0c9b      	lsrs	r3, r3, #18
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <sensirion_i2c_hal_sleep_usec+0x5c>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
		while (ticks--) {
 80014f8:	e000      	b.n	80014fc <sensirion_i2c_hal_sleep_usec+0x30>
			__NOP();
 80014fa:	bf00      	nop
		while (ticks--) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e5a      	subs	r2, r3, #1
 8001500:	60fa      	str	r2, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f9      	bne.n	80014fa <sensirion_i2c_hal_sleep_usec+0x2e>
		}
	}
	else {
		HAL_Delay(useconds / 1000);
	}
}
 8001506:	e007      	b.n	8001518 <sensirion_i2c_hal_sleep_usec+0x4c>
		HAL_Delay(useconds / 1000);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <sensirion_i2c_hal_sleep_usec+0x60>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fa8e 	bl	8001a34 <HAL_Delay>
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	10624dd3 	.word	0x10624dd3

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_MspInit+0x44>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153a:	4a0e      	ldr	r2, [pc, #56]	@ (8001574 <HAL_MspInit+0x44>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6613      	str	r3, [r2, #96]	@ 0x60
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_MspInit+0x44>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_MspInit+0x44>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_MspInit+0x44>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_MspInit+0x44>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0ac      	sub	sp, #176	@ 0xb0
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2288      	movs	r2, #136	@ 0x88
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fd4b 	bl	8005034 <memset>
  if(hi2c->Instance==I2C1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <HAL_I2C_MspInit+0xb0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d13b      	bne.n	8001620 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015a8:	2340      	movs	r3, #64	@ 0x40
 80015aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 f9a3 	bl	8003900 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015c0:	f7ff fca8 	bl	8000f14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_I2C_MspInit+0xb4>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	4a18      	ldr	r2, [pc, #96]	@ (800162c <HAL_I2C_MspInit+0xb4>)
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_I2C_MspInit+0xb4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|ARD_D14_Pin;
 80015dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e4:	2312      	movs	r3, #18
 80015e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f6:	2304      	movs	r3, #4
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001600:	4619      	mov	r1, r3
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <HAL_I2C_MspInit+0xb8>)
 8001604:	f000 fb4c 	bl	8001ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <HAL_I2C_MspInit+0xb4>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <HAL_I2C_MspInit+0xb4>)
 800160e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001612:	6593      	str	r3, [r2, #88]	@ 0x58
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_I2C_MspInit+0xb4>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001620:	bf00      	nop
 8001622:	37b0      	adds	r7, #176	@ 0xb0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40005400 	.word	0x40005400
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0ac      	sub	sp, #176	@ 0xb0
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2288      	movs	r2, #136	@ 0x88
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fced 	bl	8005034 <memset>
  if(huart->Instance==USART1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <HAL_UART_MspInit+0xb0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d13a      	bne.n	80016da <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001664:	2301      	movs	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001668:	2300      	movs	r3, #0
 800166a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f002 f945 	bl	8003900 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff fc4a 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 8001682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001684:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 8001686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168a:	6613      	str	r3, [r2, #96]	@ 0x60
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 800168e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_UART_MspInit+0xb4>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b0:	23c0      	movs	r3, #192	@ 0xc0
 80016b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c8:	2307      	movs	r3, #7
 80016ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <HAL_UART_MspInit+0xb8>)
 80016d6:	f000 fae3 	bl	8001ca0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016da:	bf00      	nop
 80016dc:	37b0      	adds	r7, #176	@ 0xb0
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <NMI_Handler+0x4>

080016f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <MemManage_Handler+0x4>

08001708 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <UsageFault_Handler+0x4>

08001718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f000 f955 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001752:	2080      	movs	r0, #128	@ 0x80
 8001754:	f000 fc66 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001758:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800175c:	f000 fc62 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001768:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800176c:	f000 fc5a 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001770:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001774:	f000 fc56 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001778:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800177c:	f000 fc52 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001780:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001784:	f000 fc4e 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e00a      	b.n	80017b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800179e:	f3af 8000 	nop.w
 80017a2:	4601      	mov	r1, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbf0      	blt.n	800179e <_read+0x12>
  }

  return len;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e009      	b.n	80017ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe febd 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf1      	blt.n	80017d8 <_write+0x12>
  }
  return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_close>:

int _close(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001826:	605a      	str	r2, [r3, #4]
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_isatty>:

int _isatty(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f003 fbd4 	bl	8005044 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20018000 	.word	0x20018000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	20000160 	.word	0x20000160
 80018d0:	200002b8 	.word	0x200002b8

080018d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001930 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018fc:	f7ff ffea 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <LoopForever+0x6>)
  ldr r1, =_edata
 8001902:	490d      	ldr	r1, [pc, #52]	@ (8001938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <LoopForever+0xe>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001918:	4c0a      	ldr	r4, [pc, #40]	@ (8001944 <LoopForever+0x16>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001926:	f003 fb93 	bl	8005050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192a:	f7fe fe2b 	bl	8000584 <main>

0800192e <LoopForever>:

LoopForever:
    b LoopForever
 800192e:	e7fe      	b.n	800192e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001930:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800193c:	08005ee4 	.word	0x08005ee4
  ldr r2, =_sbss
 8001940:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001944:	200002b4 	.word	0x200002b4

08001948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_2_IRQHandler>

0800194a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 f961 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f80e 	bl	800197c <HAL_InitTick>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	e001      	b.n	8001970 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800196c:	f7ff fde0 	bl	8001530 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <HAL_InitTick+0x6c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d023      	beq.n	80019d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_InitTick+0x70>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <HAL_InitTick+0x6c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f96d 	bl	8001c86 <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d809      	bhi.n	80019cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019c0:	f000 f937 	bl	8001c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c4:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <HAL_InitTick+0x74>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e007      	b.n	80019dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e004      	b.n	80019dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e001      	b.n	80019dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000164 	.word	0x20000164

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000164 	.word	0x20000164

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	@ (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	@ (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	@ (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	@ 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	@ 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bfc:	f7ff ff8e 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff29 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff3e 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff8e 	bl	8001b70 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5d 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff31 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffa2 	bl	8001bd8 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cae:	e17f      	b.n	8001fb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8171 	beq.w	8001faa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d005      	beq.n	8001ce0 <HAL_GPIO_Init+0x40>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d130      	bne.n	8001d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d16:	2201      	movs	r2, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0201 	and.w	r2, r3, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d118      	bne.n	8001d80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	6939      	ldr	r1, [r7, #16]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80ac 	beq.w	8001faa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd0 <HAL_GPIO_Init+0x330>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd0 <HAL_GPIO_Init+0x330>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd0 <HAL_GPIO_Init+0x330>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8001fd4 <HAL_GPIO_Init+0x334>)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e94:	d025      	beq.n	8001ee2 <HAL_GPIO_Init+0x242>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd8 <HAL_GPIO_Init+0x338>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01f      	beq.n	8001ede <HAL_GPIO_Init+0x23e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8001fdc <HAL_GPIO_Init+0x33c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x23a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8001fe0 <HAL_GPIO_Init+0x340>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x236>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe4 <HAL_GPIO_Init+0x344>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x232>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001fe8 <HAL_GPIO_Init+0x348>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x22e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8001fec <HAL_GPIO_Init+0x34c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x22a>
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	e00c      	b.n	8001ee4 <HAL_GPIO_Init+0x244>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e00a      	b.n	8001ee4 <HAL_GPIO_Init+0x244>
 8001ece:	2305      	movs	r3, #5
 8001ed0:	e008      	b.n	8001ee4 <HAL_GPIO_Init+0x244>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x244>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e004      	b.n	8001ee4 <HAL_GPIO_Init+0x244>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_Init+0x244>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x244>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	f002 0203 	and.w	r2, r2, #3
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	4093      	lsls	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef4:	4937      	ldr	r1, [pc, #220]	@ (8001fd4 <HAL_GPIO_Init+0x334>)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f26:	4a32      	ldr	r2, [pc, #200]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f2c:	4b30      	ldr	r3, [pc, #192]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f50:	4a27      	ldr	r2, [pc, #156]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f56:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fa4:	4a12      	ldr	r2, [pc, #72]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f47f ae78 	bne.w	8001cb0 <HAL_GPIO_Init+0x10>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	48000400 	.word	0x48000400
 8001fdc:	48000800 	.word	0x48000800
 8001fe0:	48000c00 	.word	0x48000c00
 8001fe4:	48001000 	.word	0x48001000
 8001fe8:	48001400 	.word	0x48001400
 8001fec:	48001800 	.word	0x48001800
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002010:	e002      	b.n	8002018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f806 	bl	8002054 <HAL_GPIO_EXTI_Callback>
  }
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e08d      	b.n	8002198 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fa71 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2224      	movs	r2, #36	@ 0x24
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	e006      	b.n	80020f2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d108      	bne.n	800210c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	e007      	b.n	800211c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800211a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800212a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800212e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800213e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69d9      	ldr	r1, [r3, #28]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	817b      	strh	r3, [r7, #10]
 80021b0:	4613      	mov	r3, r2
 80021b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b20      	cmp	r3, #32
 80021be:	f040 80fd 	bne.w	80023bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_I2C_Master_Transmit+0x30>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0f6      	b.n	80023be <HAL_I2C_Master_Transmit+0x21e>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d8:	f7ff fc20 	bl	8001a1c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2319      	movs	r3, #25
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fa0a 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e1      	b.n	80023be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2221      	movs	r2, #33	@ 0x21
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2210      	movs	r2, #16
 8002206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	893a      	ldrh	r2, [r7, #8]
 800221a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2bff      	cmp	r3, #255	@ 0xff
 800222a:	d906      	bls.n	800223a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	22ff      	movs	r2, #255	@ 0xff
 8002230:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e007      	b.n	800224a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002248:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	d024      	beq.n	800229c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	8979      	ldrh	r1, [r7, #10]
 800228e:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <HAL_I2C_Master_Transmit+0x228>)
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fc05 	bl	8002aa4 <I2C_TransferConfig>
 800229a:	e066      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	8979      	ldrh	r1, [r7, #10]
 80022a4:	4b48      	ldr	r3, [pc, #288]	@ (80023c8 <HAL_I2C_Master_Transmit+0x228>)
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fbfa 	bl	8002aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022b0:	e05b      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	6a39      	ldr	r1, [r7, #32]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f9fd 	bl	80026b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07b      	b.n	80023be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d034      	beq.n	800236a <HAL_I2C_Master_Transmit+0x1ca>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d130      	bne.n	800236a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f976 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e04d      	b.n	80023be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	2bff      	cmp	r3, #255	@ 0xff
 800232a:	d90e      	bls.n	800234a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	22ff      	movs	r2, #255	@ 0xff
 8002330:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	b2da      	uxtb	r2, r3
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	2300      	movs	r3, #0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fbae 	bl	8002aa4 <I2C_TransferConfig>
 8002348:	e00f      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8979      	ldrh	r1, [r7, #10]
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fb9d 	bl	8002aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d19e      	bne.n	80022b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	6a39      	ldr	r1, [r7, #32]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f9e3 	bl	8002744 <I2C_WaitOnSTOPFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e01a      	b.n	80023be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2220      	movs	r2, #32
 800238e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <HAL_I2C_Master_Transmit+0x22c>)
 800239c:	400b      	ands	r3, r1
 800239e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	80002000 	.word	0x80002000
 80023cc:	fe00e800 	.word	0xfe00e800

080023d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	460b      	mov	r3, r1
 80023de:	817b      	strh	r3, [r7, #10]
 80023e0:	4613      	mov	r3, r2
 80023e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	f040 80db 	bne.w	80025a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_Master_Receive+0x30>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0d4      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002408:	f7ff fb08 	bl	8001a1c <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2319      	movs	r3, #25
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8f2 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0bf      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2222      	movs	r2, #34	@ 0x22
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2210      	movs	r2, #16
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	893a      	ldrh	r2, [r7, #8]
 800244a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2bff      	cmp	r3, #255	@ 0xff
 800245a:	d90e      	bls.n	800247a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002466:	b2da      	uxtb	r2, r3
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <HAL_I2C_Master_Receive+0x1e4>)
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fb16 	bl	8002aa4 <I2C_TransferConfig>
 8002478:	e06d      	b.n	8002556 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002488:	b2da      	uxtb	r2, r3
 800248a:	8979      	ldrh	r1, [r7, #10]
 800248c:	4b49      	ldr	r3, [pc, #292]	@ (80025b4 <HAL_I2C_Master_Receive+0x1e4>)
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fb05 	bl	8002aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800249a:	e05c      	b.n	8002556 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f993 	bl	80027cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e07c      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d034      	beq.n	8002556 <HAL_I2C_Master_Receive+0x186>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d130      	bne.n	8002556 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2180      	movs	r1, #128	@ 0x80
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f880 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04d      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2bff      	cmp	r3, #255	@ 0xff
 8002516:	d90e      	bls.n	8002536 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	22ff      	movs	r2, #255	@ 0xff
 800251c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002522:	b2da      	uxtb	r2, r3
 8002524:	8979      	ldrh	r1, [r7, #10]
 8002526:	2300      	movs	r3, #0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fab8 	bl	8002aa4 <I2C_TransferConfig>
 8002534:	e00f      	b.n	8002556 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	b2da      	uxtb	r2, r3
 8002546:	8979      	ldrh	r1, [r7, #10]
 8002548:	2300      	movs	r3, #0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 faa7 	bl	8002aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d19d      	bne.n	800249c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	6a39      	ldr	r1, [r7, #32]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f8ed 	bl	8002744 <I2C_WaitOnSTOPFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e01a      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2220      	movs	r2, #32
 800257a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <HAL_I2C_Master_Receive+0x1e8>)
 8002588:	400b      	ands	r3, r1
 800258a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e000      	b.n	80025aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
  }
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	80002400 	.word	0x80002400
 80025b8:	fe00e800 	.word	0xfe00e800

080025bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d103      	bne.n	80025da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d007      	beq.n	80025f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	619a      	str	r2, [r3, #24]
  }
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	e03b      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f962 	bl	80028e4 <I2C_IsErrorOccurred>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e041      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002630:	d02d      	beq.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7ff f9f3 	bl	8001a1c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d122      	bne.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4013      	ands	r3, r2
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	429a      	cmp	r2, r3
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	429a      	cmp	r2, r3
 8002664:	d113      	bne.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4013      	ands	r3, r2
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d0b4      	beq.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026c2:	e033      	b.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f90b 	bl	80028e4 <I2C_IsErrorOccurred>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e031      	b.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026de:	d025      	beq.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e0:	f7ff f99c 	bl	8001a1c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d302      	bcc.n	80026f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11a      	bne.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d013      	beq.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d1c4      	bne.n	80026c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002750:	e02f      	b.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f8c4 	bl	80028e4 <I2C_IsErrorOccurred>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e02d      	b.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002766:	f7ff f959 	bl	8001a1c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11a      	bne.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d013      	beq.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e007      	b.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d1c8      	bne.n	8002752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027dc:	e071      	b.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f87e 	bl	80028e4 <I2C_IsErrorOccurred>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d13b      	bne.n	8002878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d138      	bne.n	8002878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d105      	bne.n	8002820 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b10      	cmp	r3, #16
 800282c:	d121      	bne.n	8002872 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2210      	movs	r2, #16
 8002834:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2204      	movs	r2, #4
 800283a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2220      	movs	r2, #32
 8002842:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002850:	400b      	ands	r3, r1
 8002852:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
 8002870:	e002      	b.n	8002878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002878:	f7ff f8d0 	bl	8001a1c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d116      	bne.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d00f      	beq.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d002      	beq.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d083      	beq.n	80027de <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	fe00e800 	.word	0xfe00e800

080028e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d068      	beq.n	80029e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2210      	movs	r2, #16
 8002916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002918:	e049      	b.n	80029ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002920:	d045      	beq.n	80029ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7ff f87b 	bl	8001a1c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_IsErrorOccurred+0x54>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13a      	bne.n	80029ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800294a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800295a:	d121      	bne.n	80029a0 <I2C_IsErrorOccurred+0xbc>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002962:	d01d      	beq.n	80029a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	2b20      	cmp	r3, #32
 8002968:	d01a      	beq.n	80029a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002978:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800297a:	f7ff f84f 	bl	8001a1c <HAL_GetTick>
 800297e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002980:	e00e      	b.n	80029a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002982:	f7ff f84b 	bl	8001a1c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b19      	cmp	r3, #25
 800298e:	d907      	bls.n	80029a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f043 0320 	orr.w	r3, r3, #32
 8002996:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800299e:	e006      	b.n	80029ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d1e9      	bne.n	8002982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d003      	beq.n	80029c4 <I2C_IsErrorOccurred+0xe0>
 80029bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0aa      	beq.n	800291a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2220      	movs	r2, #32
 80029d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f043 0308 	orr.w	r3, r3, #8
 8002a1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01c      	beq.n	8002a92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff fdaf 	bl	80025bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <I2C_IsErrorOccurred+0x1bc>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3728      	adds	r7, #40	@ 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	fe00e800 	.word	0xfe00e800

08002aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002abc:	7a7b      	ldrb	r3, [r7, #9]
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ad2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <I2C_TransferConfig+0x60>)
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	ea02 0103 	and.w	r1, r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	03ff63ff 	.word	0x03ff63ff

08002b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d138      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e032      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d139      	bne.n	8002c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e033      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2224      	movs	r2, #36	@ 0x24
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40007000 	.word	0x40007000

08002c54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c62:	d130      	bne.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c70:	d038      	beq.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c82:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2232      	movs	r2, #50	@ 0x32
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c98:	e002      	b.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca0:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cac:	d102      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f2      	bne.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc0:	d110      	bne.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e00f      	b.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd2:	d007      	beq.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cd4:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cdc:	4a05      	ldr	r2, [pc, #20]	@ (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ce2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	431bde83 	.word	0x431bde83

08002d00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e3ca      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d12:	4b97      	ldr	r3, [pc, #604]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1c:	4b94      	ldr	r3, [pc, #592]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80e4 	beq.w	8002efc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4a>
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	f040 808b 	bne.w	8002e58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	f040 8087 	bne.w	8002e58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d4a:	4b89      	ldr	r3, [pc, #548]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x62>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e3a2      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	4b82      	ldr	r3, [pc, #520]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_RCC_OscConfig+0x7c>
 8002d72:	4b7f      	ldr	r3, [pc, #508]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d7a:	e005      	b.n	8002d88 <HAL_RCC_OscConfig+0x88>
 8002d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d223      	bcs.n	8002dd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd55 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e383      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da0:	4b73      	ldr	r3, [pc, #460]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a72      	ldr	r2, [pc, #456]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b70      	ldr	r3, [pc, #448]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	496d      	ldr	r1, [pc, #436]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	4968      	ldr	r1, [pc, #416]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
 8002dd2:	e025      	b.n	8002e20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd4:	4b66      	ldr	r3, [pc, #408]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a65      	ldr	r2, [pc, #404]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4960      	ldr	r1, [pc, #384]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	495b      	ldr	r1, [pc, #364]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fd15 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e343      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e20:	f000 fc4a 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b52      	ldr	r3, [pc, #328]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	4950      	ldr	r1, [pc, #320]	@ (8002f74 <HAL_RCC_OscConfig+0x274>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f78 <HAL_RCC_OscConfig+0x278>)
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e40:	4b4e      	ldr	r3, [pc, #312]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fd99 	bl	800197c <HAL_InitTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d052      	beq.n	8002efa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	e327      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d032      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e60:	4b43      	ldr	r3, [pc, #268]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a42      	ldr	r2, [pc, #264]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fdd6 	bl	8001a1c <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e74:	f7fe fdd2 	bl	8001a1c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e310      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e86:	4b3a      	ldr	r3, [pc, #232]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e92:	4b37      	ldr	r3, [pc, #220]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a36      	ldr	r2, [pc, #216]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e98:	f043 0308 	orr.w	r3, r3, #8
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4931      	ldr	r1, [pc, #196]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	492c      	ldr	r1, [pc, #176]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
 8002ec4:	e01a      	b.n	8002efc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a29      	ldr	r2, [pc, #164]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fda3 	bl	8001a1c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eda:	f7fe fd9f 	bl	8001a1c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e2dd      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eec:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x1da>
 8002ef8:	e000      	b.n	8002efc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002efa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d074      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x21a>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d10e      	bne.n	8002f32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1a:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d064      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d160      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e2ba      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x24a>
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0b      	ldr	r2, [pc, #44]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	e026      	b.n	8002f98 <HAL_RCC_OscConfig+0x298>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f52:	d115      	bne.n	8002f80 <HAL_RCC_OscConfig+0x280>
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a05      	ldr	r2, [pc, #20]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a02      	ldr	r2, [pc, #8]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	e014      	b.n	8002f98 <HAL_RCC_OscConfig+0x298>
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08005e58 	.word	0x08005e58
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	4ba0      	ldr	r3, [pc, #640]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a9f      	ldr	r2, [pc, #636]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b9d      	ldr	r3, [pc, #628]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a9c      	ldr	r2, [pc, #624]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fd3c 	bl	8001a1c <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fd38 	bl	8001a1c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e276      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fba:	4b92      	ldr	r3, [pc, #584]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2a8>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fd28 	bl	8001a1c <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fd24 	bl	8001a1c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	@ 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e262      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	4b88      	ldr	r3, [pc, #544]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d0>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d060      	beq.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d005      	beq.n	8003010 <HAL_RCC_OscConfig+0x310>
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d119      	bne.n	800303e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d116      	bne.n	800303e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003010:	4b7c      	ldr	r3, [pc, #496]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x328>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e23f      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b76      	ldr	r3, [pc, #472]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	4973      	ldr	r1, [pc, #460]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303c:	e040      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d023      	beq.n	800308e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003046:	4b6f      	ldr	r3, [pc, #444]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6e      	ldr	r2, [pc, #440]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fce3 	bl	8001a1c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305a:	f7fe fcdf 	bl	8001a1c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e21d      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800306c:	4b65      	ldr	r3, [pc, #404]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b62      	ldr	r3, [pc, #392]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	495f      	ldr	r1, [pc, #380]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
 800308c:	e018      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b5d      	ldr	r3, [pc, #372]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a5c      	ldr	r2, [pc, #368]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fcbf 	bl	8001a1c <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fcbb 	bl	8001a1c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1f9      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b4:	4b53      	ldr	r3, [pc, #332]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d03c      	beq.n	8003146 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01c      	beq.n	800310e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030da:	4a4a      	ldr	r2, [pc, #296]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe fc9a 	bl	8001a1c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ec:	f7fe fc96 	bl	8001a1c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1d4      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030fe:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ef      	beq.n	80030ec <HAL_RCC_OscConfig+0x3ec>
 800310c:	e01b      	b.n	8003146 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310e:	4b3d      	ldr	r3, [pc, #244]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003114:	4a3b      	ldr	r2, [pc, #236]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fe fc7d 	bl	8001a1c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003126:	f7fe fc79 	bl	8001a1c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e1b7      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003138:	4b32      	ldr	r3, [pc, #200]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ef      	bne.n	8003126 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80a6 	beq.w	80032a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003154:	2300      	movs	r3, #0
 8003156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003158:	4b2a      	ldr	r3, [pc, #168]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10d      	bne.n	8003180 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b27      	ldr	r3, [pc, #156]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	4a26      	ldr	r2, [pc, #152]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003170:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317c:	2301      	movs	r3, #1
 800317e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003180:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <HAL_RCC_OscConfig+0x508>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d118      	bne.n	80031be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318c:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <HAL_RCC_OscConfig+0x508>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <HAL_RCC_OscConfig+0x508>)
 8003192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003198:	f7fe fc40 	bl	8001a1c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a0:	f7fe fc3c 	bl	8001a1c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e17a      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <HAL_RCC_OscConfig+0x508>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d108      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4d8>
 80031c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d6:	e029      	b.n	800322c <HAL_RCC_OscConfig+0x52c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d115      	bne.n	800320c <HAL_RCC_OscConfig+0x50c>
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e6:	4a07      	ldr	r2, [pc, #28]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	4a03      	ldr	r2, [pc, #12]	@ (8003204 <HAL_RCC_OscConfig+0x504>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003200:	e014      	b.n	800322c <HAL_RCC_OscConfig+0x52c>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
 800320c:	4b9c      	ldr	r3, [pc, #624]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003212:	4a9b      	ldr	r2, [pc, #620]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800321c:	4b98      	ldr	r3, [pc, #608]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	4a97      	ldr	r2, [pc, #604]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe fbf2 	bl	8001a1c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe fbee 	bl	8001a1c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e12a      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003252:	4b8b      	ldr	r3, [pc, #556]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ed      	beq.n	800323c <HAL_RCC_OscConfig+0x53c>
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fbdb 	bl	8001a1c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe fbd7 	bl	8001a1c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e113      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003280:	4b7f      	ldr	r3, [pc, #508]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ed      	bne.n	800326a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328e:	7ffb      	ldrb	r3, [r7, #31]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b7a      	ldr	r3, [pc, #488]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	4a79      	ldr	r2, [pc, #484]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80fe 	beq.w	80034a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	f040 80d0 	bne.w	8003454 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032b4:	4b72      	ldr	r3, [pc, #456]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d130      	bne.n	800332a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	3b01      	subs	r3, #1
 80032d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d127      	bne.n	800332a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d11f      	bne.n	800332a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032f4:	2a07      	cmp	r2, #7
 80032f6:	bf14      	ite	ne
 80032f8:	2201      	movne	r2, #1
 80032fa:	2200      	moveq	r2, #0
 80032fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fe:	4293      	cmp	r3, r2
 8003300:	d113      	bne.n	800332a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d109      	bne.n	800332a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d06e      	beq.n	8003408 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d069      	beq.n	8003404 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003330:	4b53      	ldr	r3, [pc, #332]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800333c:	4b50      	ldr	r3, [pc, #320]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0ad      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800334c:	4b4c      	ldr	r3, [pc, #304]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a4b      	ldr	r2, [pc, #300]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003358:	f7fe fb60 	bl	8001a1c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe fb5c 	bl	8001a1c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e09a      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003372:	4b43      	ldr	r3, [pc, #268]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337e:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	4b40      	ldr	r3, [pc, #256]	@ (8003484 <HAL_RCC_OscConfig+0x784>)
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800338e:	3a01      	subs	r2, #1
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	4311      	orrs	r1, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003398:	0212      	lsls	r2, r2, #8
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033a0:	0852      	lsrs	r2, r2, #1
 80033a2:	3a01      	subs	r2, #1
 80033a4:	0552      	lsls	r2, r2, #21
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033ac:	0852      	lsrs	r2, r2, #1
 80033ae:	3a01      	subs	r2, #1
 80033b0:	0652      	lsls	r2, r2, #25
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033b8:	0912      	lsrs	r2, r2, #4
 80033ba:	0452      	lsls	r2, r2, #17
 80033bc:	430a      	orrs	r2, r1
 80033be:	4930      	ldr	r1, [pc, #192]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033dc:	f7fe fb1e 	bl	8001a1c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe fb1a 	bl	8001a1c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e058      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	4b22      	ldr	r3, [pc, #136]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003402:	e050      	b.n	80034a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04f      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003408:	4b1d      	ldr	r3, [pc, #116]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d148      	bne.n	80034a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003414:	4b1a      	ldr	r3, [pc, #104]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800341a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003420:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800342a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800342c:	f7fe faf6 	bl	8001a1c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe faf2 	bl	8001a1c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e030      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x734>
 8003452:	e028      	b.n	80034a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d023      	beq.n	80034a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345a:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <HAL_RCC_OscConfig+0x780>)
 8003460:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fe fad9 	bl	8001a1c <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	e00c      	b.n	8003488 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fad5 	bl	8001a1c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d905      	bls.n	8003488 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e013      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
 8003480:	40021000 	.word	0x40021000
 8003484:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_RCC_OscConfig+0x7b0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1ec      	bne.n	800346e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_RCC_OscConfig+0x7b0>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4905      	ldr	r1, [pc, #20]	@ (80034b0 <HAL_RCC_OscConfig+0x7b0>)
 800349a:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <HAL_RCC_OscConfig+0x7b4>)
 800349c:	4013      	ands	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
 80034a0:	e001      	b.n	80034a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	feeefffc 	.word	0xfeeefffc

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0e7      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b75      	ldr	r3, [pc, #468]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d910      	bls.n	80034fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b72      	ldr	r3, [pc, #456]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 0207 	bic.w	r2, r3, #7
 80034e2:	4970      	ldr	r1, [pc, #448]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b6e      	ldr	r3, [pc, #440]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0cf      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b66      	ldr	r3, [pc, #408]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003514:	429a      	cmp	r2, r3
 8003516:	d908      	bls.n	800352a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b63      	ldr	r3, [pc, #396]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4960      	ldr	r1, [pc, #384]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04c      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	4b5a      	ldr	r3, [pc, #360]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d121      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0a6      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003556:	4b54      	ldr	r3, [pc, #336]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e09a      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356e:	4b4e      	ldr	r3, [pc, #312]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e08e      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357e:	4b4a      	ldr	r3, [pc, #296]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e086      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b46      	ldr	r3, [pc, #280]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4943      	ldr	r1, [pc, #268]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe fa3c 	bl	8001a1c <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe fa38 	bl	8001a1c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e06e      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b3a      	ldr	r3, [pc, #232]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	4b31      	ldr	r3, [pc, #196]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d208      	bcs.n	80035fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b2e      	ldr	r3, [pc, #184]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	492b      	ldr	r1, [pc, #172]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fe:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d210      	bcs.n	800362e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360c:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 0207 	bic.w	r2, r3, #7
 8003614:	4923      	ldr	r1, [pc, #140]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361c:	4b21      	ldr	r3, [pc, #132]	@ (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e036      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363a:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4918      	ldr	r1, [pc, #96]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4910      	ldr	r1, [pc, #64]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366c:	f000 f824 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	490b      	ldr	r1, [pc, #44]	@ (80036ac <HAL_RCC_ClockConfig+0x1f4>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	4a09      	ldr	r2, [pc, #36]	@ (80036b0 <HAL_RCC_ClockConfig+0x1f8>)
 800368a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800368c:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <HAL_RCC_ClockConfig+0x1fc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe f973 	bl	800197c <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
 8003698:	72fb      	strb	r3, [r7, #11]

  return status;
 800369a:	7afb      	ldrb	r3, [r7, #11]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08005e58 	.word	0x08005e58
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c6:	4b3e      	ldr	r3, [pc, #248]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d0:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x34>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d121      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d11e      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036ec:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036f8:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e005      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003714:	4a2b      	ldr	r2, [pc, #172]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10d      	bne.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d102      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003730:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e004      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d101      	bne.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800373c:	4b23      	ldr	r3, [pc, #140]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x114>)
 800373e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d134      	bne.n	80037b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003746:	4b1e      	ldr	r3, [pc, #120]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0xa6>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d003      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0xac>
 800375c:	e005      	b.n	800376a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800375e:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003760:	617b      	str	r3, [r7, #20]
      break;
 8003762:	e005      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003766:	617b      	str	r3, [r7, #20]
      break;
 8003768:	e002      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	617b      	str	r3, [r7, #20]
      break;
 800376e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003770:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	fb03 f202 	mul.w	r2, r3, r2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003796:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	0e5b      	lsrs	r3, r3, #25
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	3301      	adds	r3, #1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037b0:	69bb      	ldr	r3, [r7, #24]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	@ 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	08005e70 	.word	0x08005e70
 80037c8:	00f42400 	.word	0x00f42400
 80037cc:	007a1200 	.word	0x007a1200

080037d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d4:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000000 	.word	0x20000000

080037e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037ec:	f7ff fff0 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4904      	ldr	r1, [pc, #16]	@ (8003810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	08005e68 	.word	0x08005e68

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003818:	f7ff ffda 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0adb      	lsrs	r3, r3, #11
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4904      	ldr	r1, [pc, #16]	@ (800383c <HAL_RCC_GetPCLK2Freq+0x28>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	08005e68 	.word	0x08005e68

08003840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800384c:	4b2a      	ldr	r3, [pc, #168]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003858:	f7ff f9ee 	bl	8002c38 <HAL_PWREx_GetVoltageRange>
 800385c:	6178      	str	r0, [r7, #20]
 800385e:	e014      	b.n	800388a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4b25      	ldr	r3, [pc, #148]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	4a24      	ldr	r2, [pc, #144]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800386a:	6593      	str	r3, [r2, #88]	@ 0x58
 800386c:	4b22      	ldr	r3, [pc, #136]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003878:	f7ff f9de 	bl	8002c38 <HAL_PWREx_GetVoltageRange>
 800387c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800387e:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003882:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003888:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003890:	d10b      	bne.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b80      	cmp	r3, #128	@ 0x80
 8003896:	d919      	bls.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2ba0      	cmp	r3, #160	@ 0xa0
 800389c:	d902      	bls.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389e:	2302      	movs	r3, #2
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	e013      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a4:	2301      	movs	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e010      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b80      	cmp	r3, #128	@ 0x80
 80038ae:	d902      	bls.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038b0:	2303      	movs	r3, #3
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e00a      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b80      	cmp	r3, #128	@ 0x80
 80038ba:	d102      	bne.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038bc:	2302      	movs	r3, #2
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	e004      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b70      	cmp	r3, #112	@ 0x70
 80038c6:	d101      	bne.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c8:	2301      	movs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 0207 	bic.w	r2, r3, #7
 80038d4:	4909      	ldr	r1, [pc, #36]	@ (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038dc:	4b07      	ldr	r3, [pc, #28]	@ (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40022000 	.word	0x40022000

08003900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003908:	2300      	movs	r3, #0
 800390a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800390c:	2300      	movs	r3, #0
 800390e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003918:	2b00      	cmp	r3, #0
 800391a:	d041      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003920:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003924:	d02a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003926:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800392a:	d824      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800392c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003930:	d008      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003932:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003936:	d81e      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800393c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003940:	d010      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003942:	e018      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003944:	4b86      	ldr	r3, [pc, #536]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a85      	ldr	r2, [pc, #532]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003950:	e015      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fabb 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003962:	e00c      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3320      	adds	r3, #32
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fba6 	bl	80040bc <RCCEx_PLLSAI2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	74fb      	strb	r3, [r7, #19]
      break;
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800397c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397e:	7cfb      	ldrb	r3, [r7, #19]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003984:	4b76      	ldr	r3, [pc, #472]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003992:	4973      	ldr	r1, [pc, #460]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800399a:	e001      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d041      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039b4:	d02a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039ba:	d824      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039c6:	d81e      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039d0:	d010      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039d2:	e018      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d4:	4b62      	ldr	r3, [pc, #392]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a61      	ldr	r2, [pc, #388]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e0:	e015      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fa73 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039f2:	e00c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3320      	adds	r3, #32
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fb5e 	bl	80040bc <RCCEx_PLLSAI2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	74fb      	strb	r3, [r7, #19]
      break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a14:	4b52      	ldr	r3, [pc, #328]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a22:	494f      	ldr	r1, [pc, #316]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a2a:	e001      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a0 	beq.w	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a42:	4b47      	ldr	r3, [pc, #284]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a58:	4b41      	ldr	r3, [pc, #260]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	4a40      	ldr	r2, [pc, #256]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a64:	4b3e      	ldr	r3, [pc, #248]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a70:	2301      	movs	r3, #1
 8003a72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a3a      	ldr	r2, [pc, #232]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a80:	f7fd ffcc 	bl	8001a1c <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a86:	e009      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fd ffc8 	bl	8001a1c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	74fb      	strb	r3, [r7, #19]
        break;
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a9c:	4b31      	ldr	r3, [pc, #196]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d15c      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aae:	4b2c      	ldr	r3, [pc, #176]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01f      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d019      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003acc:	4b24      	ldr	r3, [pc, #144]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad8:	4b21      	ldr	r3, [pc, #132]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	4a20      	ldr	r2, [pc, #128]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aee:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003af8:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd ff87 	bl	8001a1c <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b10:	e00b      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fd ff83 	bl	8001a1c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d902      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	74fb      	strb	r3, [r7, #19]
            break;
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ec      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4e:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b56:	e009      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
 8003b5c:	e006      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b6c:	7c7b      	ldrb	r3, [r7, #17]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b72:	4b9e      	ldr	r3, [pc, #632]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	4a9d      	ldr	r2, [pc, #628]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8a:	4b98      	ldr	r3, [pc, #608]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f023 0203 	bic.w	r2, r3, #3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	4994      	ldr	r1, [pc, #592]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bac:	4b8f      	ldr	r3, [pc, #572]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f023 020c 	bic.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bba:	498c      	ldr	r1, [pc, #560]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bce:	4b87      	ldr	r3, [pc, #540]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	4983      	ldr	r1, [pc, #524]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	497b      	ldr	r1, [pc, #492]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c12:	4b76      	ldr	r3, [pc, #472]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c20:	4972      	ldr	r1, [pc, #456]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c34:	4b6d      	ldr	r3, [pc, #436]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	496a      	ldr	r1, [pc, #424]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c56:	4b65      	ldr	r3, [pc, #404]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	4961      	ldr	r1, [pc, #388]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c78:	4b5c      	ldr	r3, [pc, #368]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c86:	4959      	ldr	r1, [pc, #356]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c9a:	4b54      	ldr	r3, [pc, #336]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca8:	4950      	ldr	r1, [pc, #320]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	4948      	ldr	r1, [pc, #288]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cde:	4b43      	ldr	r3, [pc, #268]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	493f      	ldr	r1, [pc, #252]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d028      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d00:	4b3a      	ldr	r3, [pc, #232]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0e:	4937      	ldr	r1, [pc, #220]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d20:	4b32      	ldr	r3, [pc, #200]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a31      	ldr	r2, [pc, #196]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	60d3      	str	r3, [r2, #12]
 8003d2c:	e011      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d36:	d10c      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f8c8 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d028      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d5e:	4b23      	ldr	r3, [pc, #140]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6c:	491f      	ldr	r1, [pc, #124]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a1a      	ldr	r2, [pc, #104]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d88:	60d3      	str	r3, [r2, #12]
 8003d8a:	e011      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f899 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02b      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dca:	4908      	ldr	r1, [pc, #32]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dda:	d109      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a02      	ldr	r2, [pc, #8]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de6:	60d3      	str	r3, [r2, #12]
 8003de8:	e014      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 f867 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e10:	7cfb      	ldrb	r3, [r7, #19]
 8003e12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02f      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e20:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2e:	4928      	ldr	r1, [pc, #160]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	2102      	movs	r1, #2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f844 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d014      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	74bb      	strb	r3, [r7, #18]
 8003e5a:	e011      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3320      	adds	r3, #32
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f925 	bl	80040bc <RCCEx_PLLSAI2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9a:	490d      	ldr	r1, [pc, #52]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003eae:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ebe:	4904      	ldr	r1, [pc, #16]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ec6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ee2:	4b75      	ldr	r3, [pc, #468]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eee:	4b72      	ldr	r3, [pc, #456]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10d      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
       ||
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f06:	4b6c      	ldr	r3, [pc, #432]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
       ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d047      	beq.n	8003faa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e044      	b.n	8003faa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d018      	beq.n	8003f5a <RCCEx_PLLSAI1_Config+0x86>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d825      	bhi.n	8003f78 <RCCEx_PLLSAI1_Config+0xa4>
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d002      	beq.n	8003f36 <RCCEx_PLLSAI1_Config+0x62>
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d009      	beq.n	8003f48 <RCCEx_PLLSAI1_Config+0x74>
 8003f34:	e020      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f36:	4b60      	ldr	r3, [pc, #384]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11d      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f46:	e01a      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f48:	4b5b      	ldr	r3, [pc, #364]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f58:	e013      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f5a:	4b57      	ldr	r3, [pc, #348]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f66:	4b54      	ldr	r3, [pc, #336]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f76:	e006      	b.n	8003f86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	e004      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	4944      	ldr	r1, [pc, #272]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d17d      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fb0:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a40      	ldr	r2, [pc, #256]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fd2e 	bl	8001a1c <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc2:	e009      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc4:	f7fd fd2a 	bl	8001a1c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d902      	bls.n	8003fd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd6:	e005      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fd8:	4b37      	ldr	r3, [pc, #220]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ef      	bne.n	8003fc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d160      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d111      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff0:	4b31      	ldr	r3, [pc, #196]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6892      	ldr	r2, [r2, #8]
 8004000:	0211      	lsls	r1, r2, #8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	0912      	lsrs	r2, r2, #4
 8004008:	0452      	lsls	r2, r2, #17
 800400a:	430a      	orrs	r2, r1
 800400c:	492a      	ldr	r1, [pc, #168]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	610b      	str	r3, [r1, #16]
 8004012:	e027      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d112      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800401a:	4b27      	ldr	r3, [pc, #156]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004022:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6892      	ldr	r2, [r2, #8]
 800402a:	0211      	lsls	r1, r2, #8
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6912      	ldr	r2, [r2, #16]
 8004030:	0852      	lsrs	r2, r2, #1
 8004032:	3a01      	subs	r2, #1
 8004034:	0552      	lsls	r2, r2, #21
 8004036:	430a      	orrs	r2, r1
 8004038:	491f      	ldr	r1, [pc, #124]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
 800403e:	e011      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004048:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6892      	ldr	r2, [r2, #8]
 8004050:	0211      	lsls	r1, r2, #8
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6952      	ldr	r2, [r2, #20]
 8004056:	0852      	lsrs	r2, r2, #1
 8004058:	3a01      	subs	r2, #1
 800405a:	0652      	lsls	r2, r2, #25
 800405c:	430a      	orrs	r2, r1
 800405e:	4916      	ldr	r1, [pc, #88]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004064:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a13      	ldr	r2, [pc, #76]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800406e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fcd4 	bl	8001a1c <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004076:	e009      	b.n	800408c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004078:	f7fd fcd0 	bl	8001a1c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d902      	bls.n	800408c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	73fb      	strb	r3, [r7, #15]
          break;
 800408a:	e005      	b.n	8004098 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800408c:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ef      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	4904      	ldr	r1, [pc, #16]	@ (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000

080040bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d018      	beq.n	8004108 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040d6:	4b67      	ldr	r3, [pc, #412]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0203 	and.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d10d      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
       ||
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040ee:	4b61      	ldr	r3, [pc, #388]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
       ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d047      	beq.n	8004192 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	e044      	b.n	8004192 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d018      	beq.n	8004142 <RCCEx_PLLSAI2_Config+0x86>
 8004110:	2b03      	cmp	r3, #3
 8004112:	d825      	bhi.n	8004160 <RCCEx_PLLSAI2_Config+0xa4>
 8004114:	2b01      	cmp	r3, #1
 8004116:	d002      	beq.n	800411e <RCCEx_PLLSAI2_Config+0x62>
 8004118:	2b02      	cmp	r3, #2
 800411a:	d009      	beq.n	8004130 <RCCEx_PLLSAI2_Config+0x74>
 800411c:	e020      	b.n	8004160 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800411e:	4b55      	ldr	r3, [pc, #340]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11d      	bne.n	8004166 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412e:	e01a      	b.n	8004166 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004130:	4b50      	ldr	r3, [pc, #320]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d116      	bne.n	800416a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004140:	e013      	b.n	800416a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004142:	4b4c      	ldr	r3, [pc, #304]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800414e:	4b49      	ldr	r3, [pc, #292]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800415e:	e006      	b.n	800416e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      break;
 8004164:	e004      	b.n	8004170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800416e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10d      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004176:	4b3f      	ldr	r3, [pc, #252]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	3b01      	subs	r3, #1
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	430b      	orrs	r3, r1
 800418c:	4939      	ldr	r1, [pc, #228]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d167      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004198:	4b36      	ldr	r3, [pc, #216]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a35      	ldr	r2, [pc, #212]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a4:	f7fd fc3a 	bl	8001a1c <HAL_GetTick>
 80041a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041aa:	e009      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041ac:	f7fd fc36 	bl	8001a1c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d902      	bls.n	80041c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	73fb      	strb	r3, [r7, #15]
        break;
 80041be:	e005      	b.n	80041cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ef      	bne.n	80041ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d14a      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d111      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041d8:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6892      	ldr	r2, [r2, #8]
 80041e8:	0211      	lsls	r1, r2, #8
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68d2      	ldr	r2, [r2, #12]
 80041ee:	0912      	lsrs	r2, r2, #4
 80041f0:	0452      	lsls	r2, r2, #17
 80041f2:	430a      	orrs	r2, r1
 80041f4:	491f      	ldr	r1, [pc, #124]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	614b      	str	r3, [r1, #20]
 80041fa:	e011      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004204:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	0211      	lsls	r1, r2, #8
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6912      	ldr	r2, [r2, #16]
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0652      	lsls	r2, r2, #25
 8004218:	430a      	orrs	r2, r1
 800421a:	4916      	ldr	r1, [pc, #88]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004220:	4b14      	ldr	r3, [pc, #80]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a13      	ldr	r2, [pc, #76]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd fbf6 	bl	8001a1c <HAL_GetTick>
 8004230:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004232:	e009      	b.n	8004248 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004234:	f7fd fbf2 	bl	8001a1c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d902      	bls.n	8004248 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	73fb      	strb	r3, [r7, #15]
          break;
 8004246:	e005      	b.n	8004254 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004248:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ef      	beq.n	8004234 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800425a:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4904      	ldr	r1, [pc, #16]	@ (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000

08004278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e040      	b.n	800430c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd f9ca 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	@ 0x24
 80042a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fb6a 	bl	8004998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f8af 	bl	8004428 <UART_SetConfig>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e01b      	b.n	800430c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fbe9 	bl	8004adc <UART_CheckIdleState>
 800430a:	4603      	mov	r3, r0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	@ 0x28
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004328:	2b20      	cmp	r3, #32
 800432a:	d177      	bne.n	800441c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_UART_Transmit+0x24>
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e070      	b.n	800441e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2221      	movs	r2, #33	@ 0x21
 8004348:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434a:	f7fd fb67 	bl	8001a1c <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004368:	d108      	bne.n	800437c <HAL_UART_Transmit+0x68>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e003      	b.n	8004384 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004384:	e02f      	b.n	80043e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	@ 0x80
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fc4b 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e03b      	b.n	800441e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	881a      	ldrh	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b8:	b292      	uxth	r2, r2
 80043ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	3302      	adds	r3, #2
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e007      	b.n	80043d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1c9      	bne.n	8004386 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2140      	movs	r1, #64	@ 0x40
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fc15 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e005      	b.n	800441e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b08a      	sub	sp, #40	@ 0x28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	4313      	orrs	r3, r2
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4ba4      	ldr	r3, [pc, #656]	@ (80046e8 <UART_SetConfig+0x2c0>)
 8004458:	4013      	ands	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004460:	430b      	orrs	r3, r1
 8004462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a99      	ldr	r2, [pc, #612]	@ (80046ec <UART_SetConfig+0x2c4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004490:	4313      	orrs	r3, r2
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a90      	ldr	r2, [pc, #576]	@ (80046f0 <UART_SetConfig+0x2c8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d126      	bne.n	8004500 <UART_SetConfig+0xd8>
 80044b2:	4b90      	ldr	r3, [pc, #576]	@ (80046f4 <UART_SetConfig+0x2cc>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d81b      	bhi.n	80044f8 <UART_SetConfig+0xd0>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <UART_SetConfig+0xa0>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044f1 	.word	0x080044f1
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e116      	b.n	800470e <UART_SetConfig+0x2e6>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e112      	b.n	800470e <UART_SetConfig+0x2e6>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e10e      	b.n	800470e <UART_SetConfig+0x2e6>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e10a      	b.n	800470e <UART_SetConfig+0x2e6>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fe:	e106      	b.n	800470e <UART_SetConfig+0x2e6>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a7c      	ldr	r2, [pc, #496]	@ (80046f8 <UART_SetConfig+0x2d0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d138      	bne.n	800457c <UART_SetConfig+0x154>
 800450a:	4b7a      	ldr	r3, [pc, #488]	@ (80046f4 <UART_SetConfig+0x2cc>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d82d      	bhi.n	8004574 <UART_SetConfig+0x14c>
 8004518:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <UART_SetConfig+0xf8>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004555 	.word	0x08004555
 8004524:	08004575 	.word	0x08004575
 8004528:	08004575 	.word	0x08004575
 800452c:	08004575 	.word	0x08004575
 8004530:	08004565 	.word	0x08004565
 8004534:	08004575 	.word	0x08004575
 8004538:	08004575 	.word	0x08004575
 800453c:	08004575 	.word	0x08004575
 8004540:	0800455d 	.word	0x0800455d
 8004544:	08004575 	.word	0x08004575
 8004548:	08004575 	.word	0x08004575
 800454c:	08004575 	.word	0x08004575
 8004550:	0800456d 	.word	0x0800456d
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455a:	e0d8      	b.n	800470e <UART_SetConfig+0x2e6>
 800455c:	2302      	movs	r3, #2
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e0d4      	b.n	800470e <UART_SetConfig+0x2e6>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456a:	e0d0      	b.n	800470e <UART_SetConfig+0x2e6>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004572:	e0cc      	b.n	800470e <UART_SetConfig+0x2e6>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457a:	e0c8      	b.n	800470e <UART_SetConfig+0x2e6>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5e      	ldr	r2, [pc, #376]	@ (80046fc <UART_SetConfig+0x2d4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d125      	bne.n	80045d2 <UART_SetConfig+0x1aa>
 8004586:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <UART_SetConfig+0x2cc>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004590:	2b30      	cmp	r3, #48	@ 0x30
 8004592:	d016      	beq.n	80045c2 <UART_SetConfig+0x19a>
 8004594:	2b30      	cmp	r3, #48	@ 0x30
 8004596:	d818      	bhi.n	80045ca <UART_SetConfig+0x1a2>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d00a      	beq.n	80045b2 <UART_SetConfig+0x18a>
 800459c:	2b20      	cmp	r3, #32
 800459e:	d814      	bhi.n	80045ca <UART_SetConfig+0x1a2>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <UART_SetConfig+0x182>
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d008      	beq.n	80045ba <UART_SetConfig+0x192>
 80045a8:	e00f      	b.n	80045ca <UART_SetConfig+0x1a2>
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b0:	e0ad      	b.n	800470e <UART_SetConfig+0x2e6>
 80045b2:	2302      	movs	r3, #2
 80045b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b8:	e0a9      	b.n	800470e <UART_SetConfig+0x2e6>
 80045ba:	2304      	movs	r3, #4
 80045bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c0:	e0a5      	b.n	800470e <UART_SetConfig+0x2e6>
 80045c2:	2308      	movs	r3, #8
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c8:	e0a1      	b.n	800470e <UART_SetConfig+0x2e6>
 80045ca:	2310      	movs	r3, #16
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d0:	e09d      	b.n	800470e <UART_SetConfig+0x2e6>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004700 <UART_SetConfig+0x2d8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d125      	bne.n	8004628 <UART_SetConfig+0x200>
 80045dc:	4b45      	ldr	r3, [pc, #276]	@ (80046f4 <UART_SetConfig+0x2cc>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045e8:	d016      	beq.n	8004618 <UART_SetConfig+0x1f0>
 80045ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80045ec:	d818      	bhi.n	8004620 <UART_SetConfig+0x1f8>
 80045ee:	2b80      	cmp	r3, #128	@ 0x80
 80045f0:	d00a      	beq.n	8004608 <UART_SetConfig+0x1e0>
 80045f2:	2b80      	cmp	r3, #128	@ 0x80
 80045f4:	d814      	bhi.n	8004620 <UART_SetConfig+0x1f8>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <UART_SetConfig+0x1d8>
 80045fa:	2b40      	cmp	r3, #64	@ 0x40
 80045fc:	d008      	beq.n	8004610 <UART_SetConfig+0x1e8>
 80045fe:	e00f      	b.n	8004620 <UART_SetConfig+0x1f8>
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e082      	b.n	800470e <UART_SetConfig+0x2e6>
 8004608:	2302      	movs	r3, #2
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e07e      	b.n	800470e <UART_SetConfig+0x2e6>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e07a      	b.n	800470e <UART_SetConfig+0x2e6>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e076      	b.n	800470e <UART_SetConfig+0x2e6>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e072      	b.n	800470e <UART_SetConfig+0x2e6>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a35      	ldr	r2, [pc, #212]	@ (8004704 <UART_SetConfig+0x2dc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d12a      	bne.n	8004688 <UART_SetConfig+0x260>
 8004632:	4b30      	ldr	r3, [pc, #192]	@ (80046f4 <UART_SetConfig+0x2cc>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004640:	d01a      	beq.n	8004678 <UART_SetConfig+0x250>
 8004642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004646:	d81b      	bhi.n	8004680 <UART_SetConfig+0x258>
 8004648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464c:	d00c      	beq.n	8004668 <UART_SetConfig+0x240>
 800464e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004652:	d815      	bhi.n	8004680 <UART_SetConfig+0x258>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <UART_SetConfig+0x238>
 8004658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800465c:	d008      	beq.n	8004670 <UART_SetConfig+0x248>
 800465e:	e00f      	b.n	8004680 <UART_SetConfig+0x258>
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004666:	e052      	b.n	800470e <UART_SetConfig+0x2e6>
 8004668:	2302      	movs	r3, #2
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e04e      	b.n	800470e <UART_SetConfig+0x2e6>
 8004670:	2304      	movs	r3, #4
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004676:	e04a      	b.n	800470e <UART_SetConfig+0x2e6>
 8004678:	2308      	movs	r3, #8
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e046      	b.n	800470e <UART_SetConfig+0x2e6>
 8004680:	2310      	movs	r3, #16
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004686:	e042      	b.n	800470e <UART_SetConfig+0x2e6>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a17      	ldr	r2, [pc, #92]	@ (80046ec <UART_SetConfig+0x2c4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d13a      	bne.n	8004708 <UART_SetConfig+0x2e0>
 8004692:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <UART_SetConfig+0x2cc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004698:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800469c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a0:	d01a      	beq.n	80046d8 <UART_SetConfig+0x2b0>
 80046a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a6:	d81b      	bhi.n	80046e0 <UART_SetConfig+0x2b8>
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ac:	d00c      	beq.n	80046c8 <UART_SetConfig+0x2a0>
 80046ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b2:	d815      	bhi.n	80046e0 <UART_SetConfig+0x2b8>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <UART_SetConfig+0x298>
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046bc:	d008      	beq.n	80046d0 <UART_SetConfig+0x2a8>
 80046be:	e00f      	b.n	80046e0 <UART_SetConfig+0x2b8>
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c6:	e022      	b.n	800470e <UART_SetConfig+0x2e6>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ce:	e01e      	b.n	800470e <UART_SetConfig+0x2e6>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d6:	e01a      	b.n	800470e <UART_SetConfig+0x2e6>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046de:	e016      	b.n	800470e <UART_SetConfig+0x2e6>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e6:	e012      	b.n	800470e <UART_SetConfig+0x2e6>
 80046e8:	efff69f3 	.word	0xefff69f3
 80046ec:	40008000 	.word	0x40008000
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40004400 	.word	0x40004400
 80046fc:	40004800 	.word	0x40004800
 8004700:	40004c00 	.word	0x40004c00
 8004704:	40005000 	.word	0x40005000
 8004708:	2310      	movs	r3, #16
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a9f      	ldr	r2, [pc, #636]	@ (8004990 <UART_SetConfig+0x568>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d17a      	bne.n	800480e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004718:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800471c:	2b08      	cmp	r3, #8
 800471e:	d824      	bhi.n	800476a <UART_SetConfig+0x342>
 8004720:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <UART_SetConfig+0x300>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800474d 	.word	0x0800474d
 800472c:	0800476b 	.word	0x0800476b
 8004730:	08004755 	.word	0x08004755
 8004734:	0800476b 	.word	0x0800476b
 8004738:	0800475b 	.word	0x0800475b
 800473c:	0800476b 	.word	0x0800476b
 8004740:	0800476b 	.word	0x0800476b
 8004744:	0800476b 	.word	0x0800476b
 8004748:	08004763 	.word	0x08004763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7ff f84c 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 8004750:	61f8      	str	r0, [r7, #28]
        break;
 8004752:	e010      	b.n	8004776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004754:	4b8f      	ldr	r3, [pc, #572]	@ (8004994 <UART_SetConfig+0x56c>)
 8004756:	61fb      	str	r3, [r7, #28]
        break;
 8004758:	e00d      	b.n	8004776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fe ffad 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 800475e:	61f8      	str	r0, [r7, #28]
        break;
 8004760:	e009      	b.n	8004776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004766:	61fb      	str	r3, [r7, #28]
        break;
 8004768:	e005      	b.n	8004776 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004774:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80fb 	beq.w	8004974 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	429a      	cmp	r2, r3
 800478c:	d305      	bcc.n	800479a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	429a      	cmp	r2, r3
 8004798:	d903      	bls.n	80047a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047a0:	e0e8      	b.n	8004974 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2200      	movs	r2, #0
 80047a6:	461c      	mov	r4, r3
 80047a8:	4615      	mov	r5, r2
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	022b      	lsls	r3, r5, #8
 80047b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047b8:	0222      	lsls	r2, r4, #8
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	6849      	ldr	r1, [r1, #4]
 80047be:	0849      	lsrs	r1, r1, #1
 80047c0:	2000      	movs	r0, #0
 80047c2:	4688      	mov	r8, r1
 80047c4:	4681      	mov	r9, r0
 80047c6:	eb12 0a08 	adds.w	sl, r2, r8
 80047ca:	eb43 0b09 	adc.w	fp, r3, r9
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047dc:	4650      	mov	r0, sl
 80047de:	4659      	mov	r1, fp
 80047e0:	f7fb fd46 	bl	8000270 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047f2:	d308      	bcc.n	8004806 <UART_SetConfig+0x3de>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047fa:	d204      	bcs.n	8004806 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e0b6      	b.n	8004974 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800480c:	e0b2      	b.n	8004974 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004816:	d15e      	bne.n	80048d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004818:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800481c:	2b08      	cmp	r3, #8
 800481e:	d828      	bhi.n	8004872 <UART_SetConfig+0x44a>
 8004820:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <UART_SetConfig+0x400>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004855 	.word	0x08004855
 8004830:	0800485d 	.word	0x0800485d
 8004834:	08004873 	.word	0x08004873
 8004838:	08004863 	.word	0x08004863
 800483c:	08004873 	.word	0x08004873
 8004840:	08004873 	.word	0x08004873
 8004844:	08004873 	.word	0x08004873
 8004848:	0800486b 	.word	0x0800486b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800484c:	f7fe ffcc 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 8004850:	61f8      	str	r0, [r7, #28]
        break;
 8004852:	e014      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7fe ffde 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8004858:	61f8      	str	r0, [r7, #28]
        break;
 800485a:	e010      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800485c:	4b4d      	ldr	r3, [pc, #308]	@ (8004994 <UART_SetConfig+0x56c>)
 800485e:	61fb      	str	r3, [r7, #28]
        break;
 8004860:	e00d      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004862:	f7fe ff29 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8004866:	61f8      	str	r0, [r7, #28]
        break;
 8004868:	e009      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486e:	61fb      	str	r3, [r7, #28]
        break;
 8004870:	e005      	b.n	800487e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800487c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d077      	beq.n	8004974 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005a      	lsls	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	441a      	add	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d916      	bls.n	80048ce <UART_SetConfig+0x4a6>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a6:	d212      	bcs.n	80048ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f023 030f 	bic.w	r3, r3, #15
 80048b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	b29a      	uxth	r2, r3
 80048be:	8afb      	ldrh	r3, [r7, #22]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	8afa      	ldrh	r2, [r7, #22]
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e052      	b.n	8004974 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048d4:	e04e      	b.n	8004974 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d827      	bhi.n	800492e <UART_SetConfig+0x506>
 80048de:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <UART_SetConfig+0x4bc>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004919 	.word	0x08004919
 80048f0:	0800492f 	.word	0x0800492f
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	0800492f 	.word	0x0800492f
 80048fc:	0800492f 	.word	0x0800492f
 8004900:	0800492f 	.word	0x0800492f
 8004904:	08004927 	.word	0x08004927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7fe ff6e 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e014      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004910:	f7fe ff80 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8004914:	61f8      	str	r0, [r7, #28]
        break;
 8004916:	e010      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004918:	4b1e      	ldr	r3, [pc, #120]	@ (8004994 <UART_SetConfig+0x56c>)
 800491a:	61fb      	str	r3, [r7, #28]
        break;
 800491c:	e00d      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491e:	f7fe fecb 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8004922:	61f8      	str	r0, [r7, #28]
        break;
 8004924:	e009      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492a:	61fb      	str	r3, [r7, #28]
        break;
 800492c:	e005      	b.n	800493a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004938:	bf00      	nop
    }

    if (pclk != 0U)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d019      	beq.n	8004974 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	085a      	lsrs	r2, r3, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d909      	bls.n	800496e <UART_SetConfig+0x546>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004960:	d205      	bcs.n	800496e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	e002      	b.n	8004974 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004980:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	@ 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498e:	bf00      	nop
 8004990:	40008000 	.word	0x40008000
 8004994:	00f42400 	.word	0x00f42400

08004998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01a      	beq.n	8004aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a96:	d10a      	bne.n	8004aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b098      	sub	sp, #96	@ 0x60
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aec:	f7fc ff96 	bl	8001a1c <HAL_GetTick>
 8004af0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d12e      	bne.n	8004b5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f88c 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d021      	beq.n	8004b5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e062      	b.n	8004c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d149      	bne.n	8004c00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f856 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d03c      	beq.n	8004c00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	623b      	str	r3, [r7, #32]
   return(result);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e6      	bne.n	8004b86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bd8:	61fa      	str	r2, [r7, #28]
 8004bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	617b      	str	r3, [r7, #20]
   return(result);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e011      	b.n	8004c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3758      	adds	r7, #88	@ 0x58
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	e04f      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c44:	d04b      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fc fee9 	bl	8001a1c <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e04e      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d037      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b80      	cmp	r3, #128	@ 0x80
 8004c72:	d034      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d031      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d110      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f838 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e029      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb8:	d111      	bne.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f81e 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0a0      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b095      	sub	sp, #84	@ 0x54
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d118      	bne.n	8004dae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	613b      	str	r3, [r7, #16]
   return(result);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dc2:	bf00      	nop
 8004dc4:	3754      	adds	r7, #84	@ 0x54
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <std>:
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dde:	6083      	str	r3, [r0, #8]
 8004de0:	8181      	strh	r1, [r0, #12]
 8004de2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004de4:	81c2      	strh	r2, [r0, #14]
 8004de6:	6183      	str	r3, [r0, #24]
 8004de8:	4619      	mov	r1, r3
 8004dea:	2208      	movs	r2, #8
 8004dec:	305c      	adds	r0, #92	@ 0x5c
 8004dee:	f000 f921 	bl	8005034 <memset>
 8004df2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <std+0x58>)
 8004df4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <std+0x5c>)
 8004df8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <std+0x60>)
 8004dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <std+0x64>)
 8004e00:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e02:	4b0d      	ldr	r3, [pc, #52]	@ (8004e38 <std+0x68>)
 8004e04:	6224      	str	r4, [r4, #32]
 8004e06:	429c      	cmp	r4, r3
 8004e08:	d006      	beq.n	8004e18 <std+0x48>
 8004e0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e0e:	4294      	cmp	r4, r2
 8004e10:	d002      	beq.n	8004e18 <std+0x48>
 8004e12:	33d0      	adds	r3, #208	@ 0xd0
 8004e14:	429c      	cmp	r4, r3
 8004e16:	d105      	bne.n	8004e24 <std+0x54>
 8004e18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e20:	f000 b93a 	b.w	8005098 <__retarget_lock_init_recursive>
 8004e24:	bd10      	pop	{r4, pc}
 8004e26:	bf00      	nop
 8004e28:	080058f1 	.word	0x080058f1
 8004e2c:	08005913 	.word	0x08005913
 8004e30:	0800594b 	.word	0x0800594b
 8004e34:	0800596f 	.word	0x0800596f
 8004e38:	20000168 	.word	0x20000168

08004e3c <stdio_exit_handler>:
 8004e3c:	4a02      	ldr	r2, [pc, #8]	@ (8004e48 <stdio_exit_handler+0xc>)
 8004e3e:	4903      	ldr	r1, [pc, #12]	@ (8004e4c <stdio_exit_handler+0x10>)
 8004e40:	4803      	ldr	r0, [pc, #12]	@ (8004e50 <stdio_exit_handler+0x14>)
 8004e42:	f000 b869 	b.w	8004f18 <_fwalk_sglue>
 8004e46:	bf00      	nop
 8004e48:	2000000c 	.word	0x2000000c
 8004e4c:	08005889 	.word	0x08005889
 8004e50:	2000001c 	.word	0x2000001c

08004e54 <cleanup_stdio>:
 8004e54:	6841      	ldr	r1, [r0, #4]
 8004e56:	4b0c      	ldr	r3, [pc, #48]	@ (8004e88 <cleanup_stdio+0x34>)
 8004e58:	4299      	cmp	r1, r3
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	d001      	beq.n	8004e64 <cleanup_stdio+0x10>
 8004e60:	f000 fd12 	bl	8005888 <_fflush_r>
 8004e64:	68a1      	ldr	r1, [r4, #8]
 8004e66:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <cleanup_stdio+0x38>)
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	d002      	beq.n	8004e72 <cleanup_stdio+0x1e>
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f000 fd0b 	bl	8005888 <_fflush_r>
 8004e72:	68e1      	ldr	r1, [r4, #12]
 8004e74:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <cleanup_stdio+0x3c>)
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d004      	beq.n	8004e84 <cleanup_stdio+0x30>
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e80:	f000 bd02 	b.w	8005888 <_fflush_r>
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	bf00      	nop
 8004e88:	20000168 	.word	0x20000168
 8004e8c:	200001d0 	.word	0x200001d0
 8004e90:	20000238 	.word	0x20000238

08004e94 <global_stdio_init.part.0>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <global_stdio_init.part.0+0x30>)
 8004e98:	4c0b      	ldr	r4, [pc, #44]	@ (8004ec8 <global_stdio_init.part.0+0x34>)
 8004e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004ecc <global_stdio_init.part.0+0x38>)
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	f7ff ff94 	bl	8004dd0 <std>
 8004ea8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004eac:	2201      	movs	r2, #1
 8004eae:	2109      	movs	r1, #9
 8004eb0:	f7ff ff8e 	bl	8004dd0 <std>
 8004eb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004eb8:	2202      	movs	r2, #2
 8004eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ebe:	2112      	movs	r1, #18
 8004ec0:	f7ff bf86 	b.w	8004dd0 <std>
 8004ec4:	200002a0 	.word	0x200002a0
 8004ec8:	20000168 	.word	0x20000168
 8004ecc:	08004e3d 	.word	0x08004e3d

08004ed0 <__sfp_lock_acquire>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	@ (8004ed8 <__sfp_lock_acquire+0x8>)
 8004ed2:	f000 b8e2 	b.w	800509a <__retarget_lock_acquire_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	200002a5 	.word	0x200002a5

08004edc <__sfp_lock_release>:
 8004edc:	4801      	ldr	r0, [pc, #4]	@ (8004ee4 <__sfp_lock_release+0x8>)
 8004ede:	f000 b8dd 	b.w	800509c <__retarget_lock_release_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	200002a5 	.word	0x200002a5

08004ee8 <__sinit>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	f7ff fff0 	bl	8004ed0 <__sfp_lock_acquire>
 8004ef0:	6a23      	ldr	r3, [r4, #32]
 8004ef2:	b11b      	cbz	r3, 8004efc <__sinit+0x14>
 8004ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef8:	f7ff bff0 	b.w	8004edc <__sfp_lock_release>
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <__sinit+0x28>)
 8004efe:	6223      	str	r3, [r4, #32]
 8004f00:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <__sinit+0x2c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f5      	bne.n	8004ef4 <__sinit+0xc>
 8004f08:	f7ff ffc4 	bl	8004e94 <global_stdio_init.part.0>
 8004f0c:	e7f2      	b.n	8004ef4 <__sinit+0xc>
 8004f0e:	bf00      	nop
 8004f10:	08004e55 	.word	0x08004e55
 8004f14:	200002a0 	.word	0x200002a0

08004f18 <_fwalk_sglue>:
 8004f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	4688      	mov	r8, r1
 8004f20:	4614      	mov	r4, r2
 8004f22:	2600      	movs	r6, #0
 8004f24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f28:	f1b9 0901 	subs.w	r9, r9, #1
 8004f2c:	d505      	bpl.n	8004f3a <_fwalk_sglue+0x22>
 8004f2e:	6824      	ldr	r4, [r4, #0]
 8004f30:	2c00      	cmp	r4, #0
 8004f32:	d1f7      	bne.n	8004f24 <_fwalk_sglue+0xc>
 8004f34:	4630      	mov	r0, r6
 8004f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f3a:	89ab      	ldrh	r3, [r5, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d907      	bls.n	8004f50 <_fwalk_sglue+0x38>
 8004f40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f44:	3301      	adds	r3, #1
 8004f46:	d003      	beq.n	8004f50 <_fwalk_sglue+0x38>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	47c0      	blx	r8
 8004f4e:	4306      	orrs	r6, r0
 8004f50:	3568      	adds	r5, #104	@ 0x68
 8004f52:	e7e9      	b.n	8004f28 <_fwalk_sglue+0x10>

08004f54 <iprintf>:
 8004f54:	b40f      	push	{r0, r1, r2, r3}
 8004f56:	b507      	push	{r0, r1, r2, lr}
 8004f58:	4906      	ldr	r1, [pc, #24]	@ (8004f74 <iprintf+0x20>)
 8004f5a:	ab04      	add	r3, sp, #16
 8004f5c:	6808      	ldr	r0, [r1, #0]
 8004f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f62:	6881      	ldr	r1, [r0, #8]
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	f000 f8c3 	bl	80050f0 <_vfiprintf_r>
 8004f6a:	b003      	add	sp, #12
 8004f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f70:	b004      	add	sp, #16
 8004f72:	4770      	bx	lr
 8004f74:	20000018 	.word	0x20000018

08004f78 <_puts_r>:
 8004f78:	6a03      	ldr	r3, [r0, #32]
 8004f7a:	b570      	push	{r4, r5, r6, lr}
 8004f7c:	6884      	ldr	r4, [r0, #8]
 8004f7e:	4605      	mov	r5, r0
 8004f80:	460e      	mov	r6, r1
 8004f82:	b90b      	cbnz	r3, 8004f88 <_puts_r+0x10>
 8004f84:	f7ff ffb0 	bl	8004ee8 <__sinit>
 8004f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f8a:	07db      	lsls	r3, r3, #31
 8004f8c:	d405      	bmi.n	8004f9a <_puts_r+0x22>
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	0598      	lsls	r0, r3, #22
 8004f92:	d402      	bmi.n	8004f9a <_puts_r+0x22>
 8004f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f96:	f000 f880 	bl	800509a <__retarget_lock_acquire_recursive>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	0719      	lsls	r1, r3, #28
 8004f9e:	d502      	bpl.n	8004fa6 <_puts_r+0x2e>
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d135      	bne.n	8005012 <_puts_r+0x9a>
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f000 fd23 	bl	80059f4 <__swsetup_r>
 8004fae:	b380      	cbz	r0, 8005012 <_puts_r+0x9a>
 8004fb0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004fb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fb6:	07da      	lsls	r2, r3, #31
 8004fb8:	d405      	bmi.n	8004fc6 <_puts_r+0x4e>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	059b      	lsls	r3, r3, #22
 8004fbe:	d402      	bmi.n	8004fc6 <_puts_r+0x4e>
 8004fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fc2:	f000 f86b 	bl	800509c <__retarget_lock_release_recursive>
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	da04      	bge.n	8004fd8 <_puts_r+0x60>
 8004fce:	69a2      	ldr	r2, [r4, #24]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	dc17      	bgt.n	8005004 <_puts_r+0x8c>
 8004fd4:	290a      	cmp	r1, #10
 8004fd6:	d015      	beq.n	8005004 <_puts_r+0x8c>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	6022      	str	r2, [r4, #0]
 8004fde:	7019      	strb	r1, [r3, #0]
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	2900      	cmp	r1, #0
 8004fec:	d1ed      	bne.n	8004fca <_puts_r+0x52>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	da11      	bge.n	8005016 <_puts_r+0x9e>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	210a      	movs	r1, #10
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fcbd 	bl	8005976 <__swbuf_r>
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d0d7      	beq.n	8004fb0 <_puts_r+0x38>
 8005000:	250a      	movs	r5, #10
 8005002:	e7d7      	b.n	8004fb4 <_puts_r+0x3c>
 8005004:	4622      	mov	r2, r4
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fcb5 	bl	8005976 <__swbuf_r>
 800500c:	3001      	adds	r0, #1
 800500e:	d1e7      	bne.n	8004fe0 <_puts_r+0x68>
 8005010:	e7ce      	b.n	8004fb0 <_puts_r+0x38>
 8005012:	3e01      	subs	r6, #1
 8005014:	e7e4      	b.n	8004fe0 <_puts_r+0x68>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	220a      	movs	r2, #10
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e7ee      	b.n	8005000 <_puts_r+0x88>
	...

08005024 <puts>:
 8005024:	4b02      	ldr	r3, [pc, #8]	@ (8005030 <puts+0xc>)
 8005026:	4601      	mov	r1, r0
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	f7ff bfa5 	b.w	8004f78 <_puts_r>
 800502e:	bf00      	nop
 8005030:	20000018 	.word	0x20000018

08005034 <memset>:
 8005034:	4402      	add	r2, r0
 8005036:	4603      	mov	r3, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	d100      	bne.n	800503e <memset+0xa>
 800503c:	4770      	bx	lr
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
 8005042:	e7f9      	b.n	8005038 <memset+0x4>

08005044 <__errno>:
 8005044:	4b01      	ldr	r3, [pc, #4]	@ (800504c <__errno+0x8>)
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000018 	.word	0x20000018

08005050 <__libc_init_array>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4d0d      	ldr	r5, [pc, #52]	@ (8005088 <__libc_init_array+0x38>)
 8005054:	4c0d      	ldr	r4, [pc, #52]	@ (800508c <__libc_init_array+0x3c>)
 8005056:	1b64      	subs	r4, r4, r5
 8005058:	10a4      	asrs	r4, r4, #2
 800505a:	2600      	movs	r6, #0
 800505c:	42a6      	cmp	r6, r4
 800505e:	d109      	bne.n	8005074 <__libc_init_array+0x24>
 8005060:	4d0b      	ldr	r5, [pc, #44]	@ (8005090 <__libc_init_array+0x40>)
 8005062:	4c0c      	ldr	r4, [pc, #48]	@ (8005094 <__libc_init_array+0x44>)
 8005064:	f000 fe40 	bl	8005ce8 <_init>
 8005068:	1b64      	subs	r4, r4, r5
 800506a:	10a4      	asrs	r4, r4, #2
 800506c:	2600      	movs	r6, #0
 800506e:	42a6      	cmp	r6, r4
 8005070:	d105      	bne.n	800507e <__libc_init_array+0x2e>
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	f855 3b04 	ldr.w	r3, [r5], #4
 8005078:	4798      	blx	r3
 800507a:	3601      	adds	r6, #1
 800507c:	e7ee      	b.n	800505c <__libc_init_array+0xc>
 800507e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005082:	4798      	blx	r3
 8005084:	3601      	adds	r6, #1
 8005086:	e7f2      	b.n	800506e <__libc_init_array+0x1e>
 8005088:	08005edc 	.word	0x08005edc
 800508c:	08005edc 	.word	0x08005edc
 8005090:	08005edc 	.word	0x08005edc
 8005094:	08005ee0 	.word	0x08005ee0

08005098 <__retarget_lock_init_recursive>:
 8005098:	4770      	bx	lr

0800509a <__retarget_lock_acquire_recursive>:
 800509a:	4770      	bx	lr

0800509c <__retarget_lock_release_recursive>:
 800509c:	4770      	bx	lr

0800509e <__sfputc_r>:
 800509e:	6893      	ldr	r3, [r2, #8]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	b410      	push	{r4}
 80050a6:	6093      	str	r3, [r2, #8]
 80050a8:	da08      	bge.n	80050bc <__sfputc_r+0x1e>
 80050aa:	6994      	ldr	r4, [r2, #24]
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	db01      	blt.n	80050b4 <__sfputc_r+0x16>
 80050b0:	290a      	cmp	r1, #10
 80050b2:	d103      	bne.n	80050bc <__sfputc_r+0x1e>
 80050b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b8:	f000 bc5d 	b.w	8005976 <__swbuf_r>
 80050bc:	6813      	ldr	r3, [r2, #0]
 80050be:	1c58      	adds	r0, r3, #1
 80050c0:	6010      	str	r0, [r2, #0]
 80050c2:	7019      	strb	r1, [r3, #0]
 80050c4:	4608      	mov	r0, r1
 80050c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <__sfputs_r>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	4606      	mov	r6, r0
 80050d0:	460f      	mov	r7, r1
 80050d2:	4614      	mov	r4, r2
 80050d4:	18d5      	adds	r5, r2, r3
 80050d6:	42ac      	cmp	r4, r5
 80050d8:	d101      	bne.n	80050de <__sfputs_r+0x12>
 80050da:	2000      	movs	r0, #0
 80050dc:	e007      	b.n	80050ee <__sfputs_r+0x22>
 80050de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e2:	463a      	mov	r2, r7
 80050e4:	4630      	mov	r0, r6
 80050e6:	f7ff ffda 	bl	800509e <__sfputc_r>
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	d1f3      	bne.n	80050d6 <__sfputs_r+0xa>
 80050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050f0 <_vfiprintf_r>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	460d      	mov	r5, r1
 80050f6:	b09d      	sub	sp, #116	@ 0x74
 80050f8:	4614      	mov	r4, r2
 80050fa:	4698      	mov	r8, r3
 80050fc:	4606      	mov	r6, r0
 80050fe:	b118      	cbz	r0, 8005108 <_vfiprintf_r+0x18>
 8005100:	6a03      	ldr	r3, [r0, #32]
 8005102:	b90b      	cbnz	r3, 8005108 <_vfiprintf_r+0x18>
 8005104:	f7ff fef0 	bl	8004ee8 <__sinit>
 8005108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800510a:	07d9      	lsls	r1, r3, #31
 800510c:	d405      	bmi.n	800511a <_vfiprintf_r+0x2a>
 800510e:	89ab      	ldrh	r3, [r5, #12]
 8005110:	059a      	lsls	r2, r3, #22
 8005112:	d402      	bmi.n	800511a <_vfiprintf_r+0x2a>
 8005114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005116:	f7ff ffc0 	bl	800509a <__retarget_lock_acquire_recursive>
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	071b      	lsls	r3, r3, #28
 800511e:	d501      	bpl.n	8005124 <_vfiprintf_r+0x34>
 8005120:	692b      	ldr	r3, [r5, #16]
 8005122:	b99b      	cbnz	r3, 800514c <_vfiprintf_r+0x5c>
 8005124:	4629      	mov	r1, r5
 8005126:	4630      	mov	r0, r6
 8005128:	f000 fc64 	bl	80059f4 <__swsetup_r>
 800512c:	b170      	cbz	r0, 800514c <_vfiprintf_r+0x5c>
 800512e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005130:	07dc      	lsls	r4, r3, #31
 8005132:	d504      	bpl.n	800513e <_vfiprintf_r+0x4e>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005138:	b01d      	add	sp, #116	@ 0x74
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	89ab      	ldrh	r3, [r5, #12]
 8005140:	0598      	lsls	r0, r3, #22
 8005142:	d4f7      	bmi.n	8005134 <_vfiprintf_r+0x44>
 8005144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005146:	f7ff ffa9 	bl	800509c <__retarget_lock_release_recursive>
 800514a:	e7f3      	b.n	8005134 <_vfiprintf_r+0x44>
 800514c:	2300      	movs	r3, #0
 800514e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005150:	2320      	movs	r3, #32
 8005152:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005156:	f8cd 800c 	str.w	r8, [sp, #12]
 800515a:	2330      	movs	r3, #48	@ 0x30
 800515c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800530c <_vfiprintf_r+0x21c>
 8005160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005164:	f04f 0901 	mov.w	r9, #1
 8005168:	4623      	mov	r3, r4
 800516a:	469a      	mov	sl, r3
 800516c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005170:	b10a      	cbz	r2, 8005176 <_vfiprintf_r+0x86>
 8005172:	2a25      	cmp	r2, #37	@ 0x25
 8005174:	d1f9      	bne.n	800516a <_vfiprintf_r+0x7a>
 8005176:	ebba 0b04 	subs.w	fp, sl, r4
 800517a:	d00b      	beq.n	8005194 <_vfiprintf_r+0xa4>
 800517c:	465b      	mov	r3, fp
 800517e:	4622      	mov	r2, r4
 8005180:	4629      	mov	r1, r5
 8005182:	4630      	mov	r0, r6
 8005184:	f7ff ffa2 	bl	80050cc <__sfputs_r>
 8005188:	3001      	adds	r0, #1
 800518a:	f000 80a7 	beq.w	80052dc <_vfiprintf_r+0x1ec>
 800518e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005190:	445a      	add	r2, fp
 8005192:	9209      	str	r2, [sp, #36]	@ 0x24
 8005194:	f89a 3000 	ldrb.w	r3, [sl]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 809f 	beq.w	80052dc <_vfiprintf_r+0x1ec>
 800519e:	2300      	movs	r3, #0
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a8:	f10a 0a01 	add.w	sl, sl, #1
 80051ac:	9304      	str	r3, [sp, #16]
 80051ae:	9307      	str	r3, [sp, #28]
 80051b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80051b6:	4654      	mov	r4, sl
 80051b8:	2205      	movs	r2, #5
 80051ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051be:	4853      	ldr	r0, [pc, #332]	@ (800530c <_vfiprintf_r+0x21c>)
 80051c0:	f7fb f806 	bl	80001d0 <memchr>
 80051c4:	9a04      	ldr	r2, [sp, #16]
 80051c6:	b9d8      	cbnz	r0, 8005200 <_vfiprintf_r+0x110>
 80051c8:	06d1      	lsls	r1, r2, #27
 80051ca:	bf44      	itt	mi
 80051cc:	2320      	movmi	r3, #32
 80051ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d2:	0713      	lsls	r3, r2, #28
 80051d4:	bf44      	itt	mi
 80051d6:	232b      	movmi	r3, #43	@ 0x2b
 80051d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051dc:	f89a 3000 	ldrb.w	r3, [sl]
 80051e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e2:	d015      	beq.n	8005210 <_vfiprintf_r+0x120>
 80051e4:	9a07      	ldr	r2, [sp, #28]
 80051e6:	4654      	mov	r4, sl
 80051e8:	2000      	movs	r0, #0
 80051ea:	f04f 0c0a 	mov.w	ip, #10
 80051ee:	4621      	mov	r1, r4
 80051f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f4:	3b30      	subs	r3, #48	@ 0x30
 80051f6:	2b09      	cmp	r3, #9
 80051f8:	d94b      	bls.n	8005292 <_vfiprintf_r+0x1a2>
 80051fa:	b1b0      	cbz	r0, 800522a <_vfiprintf_r+0x13a>
 80051fc:	9207      	str	r2, [sp, #28]
 80051fe:	e014      	b.n	800522a <_vfiprintf_r+0x13a>
 8005200:	eba0 0308 	sub.w	r3, r0, r8
 8005204:	fa09 f303 	lsl.w	r3, r9, r3
 8005208:	4313      	orrs	r3, r2
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	46a2      	mov	sl, r4
 800520e:	e7d2      	b.n	80051b6 <_vfiprintf_r+0xc6>
 8005210:	9b03      	ldr	r3, [sp, #12]
 8005212:	1d19      	adds	r1, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	9103      	str	r1, [sp, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfbb      	ittet	lt
 800521c:	425b      	neglt	r3, r3
 800521e:	f042 0202 	orrlt.w	r2, r2, #2
 8005222:	9307      	strge	r3, [sp, #28]
 8005224:	9307      	strlt	r3, [sp, #28]
 8005226:	bfb8      	it	lt
 8005228:	9204      	strlt	r2, [sp, #16]
 800522a:	7823      	ldrb	r3, [r4, #0]
 800522c:	2b2e      	cmp	r3, #46	@ 0x2e
 800522e:	d10a      	bne.n	8005246 <_vfiprintf_r+0x156>
 8005230:	7863      	ldrb	r3, [r4, #1]
 8005232:	2b2a      	cmp	r3, #42	@ 0x2a
 8005234:	d132      	bne.n	800529c <_vfiprintf_r+0x1ac>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	9203      	str	r2, [sp, #12]
 800523e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005242:	3402      	adds	r4, #2
 8005244:	9305      	str	r3, [sp, #20]
 8005246:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800531c <_vfiprintf_r+0x22c>
 800524a:	7821      	ldrb	r1, [r4, #0]
 800524c:	2203      	movs	r2, #3
 800524e:	4650      	mov	r0, sl
 8005250:	f7fa ffbe 	bl	80001d0 <memchr>
 8005254:	b138      	cbz	r0, 8005266 <_vfiprintf_r+0x176>
 8005256:	9b04      	ldr	r3, [sp, #16]
 8005258:	eba0 000a 	sub.w	r0, r0, sl
 800525c:	2240      	movs	r2, #64	@ 0x40
 800525e:	4082      	lsls	r2, r0
 8005260:	4313      	orrs	r3, r2
 8005262:	3401      	adds	r4, #1
 8005264:	9304      	str	r3, [sp, #16]
 8005266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800526a:	4829      	ldr	r0, [pc, #164]	@ (8005310 <_vfiprintf_r+0x220>)
 800526c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005270:	2206      	movs	r2, #6
 8005272:	f7fa ffad 	bl	80001d0 <memchr>
 8005276:	2800      	cmp	r0, #0
 8005278:	d03f      	beq.n	80052fa <_vfiprintf_r+0x20a>
 800527a:	4b26      	ldr	r3, [pc, #152]	@ (8005314 <_vfiprintf_r+0x224>)
 800527c:	bb1b      	cbnz	r3, 80052c6 <_vfiprintf_r+0x1d6>
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	3307      	adds	r3, #7
 8005282:	f023 0307 	bic.w	r3, r3, #7
 8005286:	3308      	adds	r3, #8
 8005288:	9303      	str	r3, [sp, #12]
 800528a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528c:	443b      	add	r3, r7
 800528e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005290:	e76a      	b.n	8005168 <_vfiprintf_r+0x78>
 8005292:	fb0c 3202 	mla	r2, ip, r2, r3
 8005296:	460c      	mov	r4, r1
 8005298:	2001      	movs	r0, #1
 800529a:	e7a8      	b.n	80051ee <_vfiprintf_r+0xfe>
 800529c:	2300      	movs	r3, #0
 800529e:	3401      	adds	r4, #1
 80052a0:	9305      	str	r3, [sp, #20]
 80052a2:	4619      	mov	r1, r3
 80052a4:	f04f 0c0a 	mov.w	ip, #10
 80052a8:	4620      	mov	r0, r4
 80052aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ae:	3a30      	subs	r2, #48	@ 0x30
 80052b0:	2a09      	cmp	r2, #9
 80052b2:	d903      	bls.n	80052bc <_vfiprintf_r+0x1cc>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0c6      	beq.n	8005246 <_vfiprintf_r+0x156>
 80052b8:	9105      	str	r1, [sp, #20]
 80052ba:	e7c4      	b.n	8005246 <_vfiprintf_r+0x156>
 80052bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80052c0:	4604      	mov	r4, r0
 80052c2:	2301      	movs	r3, #1
 80052c4:	e7f0      	b.n	80052a8 <_vfiprintf_r+0x1b8>
 80052c6:	ab03      	add	r3, sp, #12
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	462a      	mov	r2, r5
 80052cc:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <_vfiprintf_r+0x228>)
 80052ce:	a904      	add	r1, sp, #16
 80052d0:	4630      	mov	r0, r6
 80052d2:	f3af 8000 	nop.w
 80052d6:	4607      	mov	r7, r0
 80052d8:	1c78      	adds	r0, r7, #1
 80052da:	d1d6      	bne.n	800528a <_vfiprintf_r+0x19a>
 80052dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052de:	07d9      	lsls	r1, r3, #31
 80052e0:	d405      	bmi.n	80052ee <_vfiprintf_r+0x1fe>
 80052e2:	89ab      	ldrh	r3, [r5, #12]
 80052e4:	059a      	lsls	r2, r3, #22
 80052e6:	d402      	bmi.n	80052ee <_vfiprintf_r+0x1fe>
 80052e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ea:	f7ff fed7 	bl	800509c <__retarget_lock_release_recursive>
 80052ee:	89ab      	ldrh	r3, [r5, #12]
 80052f0:	065b      	lsls	r3, r3, #25
 80052f2:	f53f af1f 	bmi.w	8005134 <_vfiprintf_r+0x44>
 80052f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052f8:	e71e      	b.n	8005138 <_vfiprintf_r+0x48>
 80052fa:	ab03      	add	r3, sp, #12
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	462a      	mov	r2, r5
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <_vfiprintf_r+0x228>)
 8005302:	a904      	add	r1, sp, #16
 8005304:	4630      	mov	r0, r6
 8005306:	f000 f91b 	bl	8005540 <_printf_i>
 800530a:	e7e4      	b.n	80052d6 <_vfiprintf_r+0x1e6>
 800530c:	08005ea0 	.word	0x08005ea0
 8005310:	08005eaa 	.word	0x08005eaa
 8005314:	00000000 	.word	0x00000000
 8005318:	080050cd 	.word	0x080050cd
 800531c:	08005ea6 	.word	0x08005ea6

08005320 <sbrk_aligned>:
 8005320:	b570      	push	{r4, r5, r6, lr}
 8005322:	4e0f      	ldr	r6, [pc, #60]	@ (8005360 <sbrk_aligned+0x40>)
 8005324:	460c      	mov	r4, r1
 8005326:	6831      	ldr	r1, [r6, #0]
 8005328:	4605      	mov	r5, r0
 800532a:	b911      	cbnz	r1, 8005332 <sbrk_aligned+0x12>
 800532c:	f000 fc70 	bl	8005c10 <_sbrk_r>
 8005330:	6030      	str	r0, [r6, #0]
 8005332:	4621      	mov	r1, r4
 8005334:	4628      	mov	r0, r5
 8005336:	f000 fc6b 	bl	8005c10 <_sbrk_r>
 800533a:	1c43      	adds	r3, r0, #1
 800533c:	d103      	bne.n	8005346 <sbrk_aligned+0x26>
 800533e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005342:	4620      	mov	r0, r4
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	1cc4      	adds	r4, r0, #3
 8005348:	f024 0403 	bic.w	r4, r4, #3
 800534c:	42a0      	cmp	r0, r4
 800534e:	d0f8      	beq.n	8005342 <sbrk_aligned+0x22>
 8005350:	1a21      	subs	r1, r4, r0
 8005352:	4628      	mov	r0, r5
 8005354:	f000 fc5c 	bl	8005c10 <_sbrk_r>
 8005358:	3001      	adds	r0, #1
 800535a:	d1f2      	bne.n	8005342 <sbrk_aligned+0x22>
 800535c:	e7ef      	b.n	800533e <sbrk_aligned+0x1e>
 800535e:	bf00      	nop
 8005360:	200002a8 	.word	0x200002a8

08005364 <_malloc_r>:
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	1ccd      	adds	r5, r1, #3
 800536a:	f025 0503 	bic.w	r5, r5, #3
 800536e:	3508      	adds	r5, #8
 8005370:	2d0c      	cmp	r5, #12
 8005372:	bf38      	it	cc
 8005374:	250c      	movcc	r5, #12
 8005376:	2d00      	cmp	r5, #0
 8005378:	4606      	mov	r6, r0
 800537a:	db01      	blt.n	8005380 <_malloc_r+0x1c>
 800537c:	42a9      	cmp	r1, r5
 800537e:	d904      	bls.n	800538a <_malloc_r+0x26>
 8005380:	230c      	movs	r3, #12
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800538a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005460 <_malloc_r+0xfc>
 800538e:	f000 faa3 	bl	80058d8 <__malloc_lock>
 8005392:	f8d8 3000 	ldr.w	r3, [r8]
 8005396:	461c      	mov	r4, r3
 8005398:	bb44      	cbnz	r4, 80053ec <_malloc_r+0x88>
 800539a:	4629      	mov	r1, r5
 800539c:	4630      	mov	r0, r6
 800539e:	f7ff ffbf 	bl	8005320 <sbrk_aligned>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	4604      	mov	r4, r0
 80053a6:	d158      	bne.n	800545a <_malloc_r+0xf6>
 80053a8:	f8d8 4000 	ldr.w	r4, [r8]
 80053ac:	4627      	mov	r7, r4
 80053ae:	2f00      	cmp	r7, #0
 80053b0:	d143      	bne.n	800543a <_malloc_r+0xd6>
 80053b2:	2c00      	cmp	r4, #0
 80053b4:	d04b      	beq.n	800544e <_malloc_r+0xea>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	4639      	mov	r1, r7
 80053ba:	4630      	mov	r0, r6
 80053bc:	eb04 0903 	add.w	r9, r4, r3
 80053c0:	f000 fc26 	bl	8005c10 <_sbrk_r>
 80053c4:	4581      	cmp	r9, r0
 80053c6:	d142      	bne.n	800544e <_malloc_r+0xea>
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	1a6d      	subs	r5, r5, r1
 80053cc:	4629      	mov	r1, r5
 80053ce:	4630      	mov	r0, r6
 80053d0:	f7ff ffa6 	bl	8005320 <sbrk_aligned>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d03a      	beq.n	800544e <_malloc_r+0xea>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	442b      	add	r3, r5
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	f8d8 3000 	ldr.w	r3, [r8]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	bb62      	cbnz	r2, 8005440 <_malloc_r+0xdc>
 80053e6:	f8c8 7000 	str.w	r7, [r8]
 80053ea:	e00f      	b.n	800540c <_malloc_r+0xa8>
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	1b52      	subs	r2, r2, r5
 80053f0:	d420      	bmi.n	8005434 <_malloc_r+0xd0>
 80053f2:	2a0b      	cmp	r2, #11
 80053f4:	d917      	bls.n	8005426 <_malloc_r+0xc2>
 80053f6:	1961      	adds	r1, r4, r5
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	6025      	str	r5, [r4, #0]
 80053fc:	bf18      	it	ne
 80053fe:	6059      	strne	r1, [r3, #4]
 8005400:	6863      	ldr	r3, [r4, #4]
 8005402:	bf08      	it	eq
 8005404:	f8c8 1000 	streq.w	r1, [r8]
 8005408:	5162      	str	r2, [r4, r5]
 800540a:	604b      	str	r3, [r1, #4]
 800540c:	4630      	mov	r0, r6
 800540e:	f000 fa69 	bl	80058e4 <__malloc_unlock>
 8005412:	f104 000b 	add.w	r0, r4, #11
 8005416:	1d23      	adds	r3, r4, #4
 8005418:	f020 0007 	bic.w	r0, r0, #7
 800541c:	1ac2      	subs	r2, r0, r3
 800541e:	bf1c      	itt	ne
 8005420:	1a1b      	subne	r3, r3, r0
 8005422:	50a3      	strne	r3, [r4, r2]
 8005424:	e7af      	b.n	8005386 <_malloc_r+0x22>
 8005426:	6862      	ldr	r2, [r4, #4]
 8005428:	42a3      	cmp	r3, r4
 800542a:	bf0c      	ite	eq
 800542c:	f8c8 2000 	streq.w	r2, [r8]
 8005430:	605a      	strne	r2, [r3, #4]
 8005432:	e7eb      	b.n	800540c <_malloc_r+0xa8>
 8005434:	4623      	mov	r3, r4
 8005436:	6864      	ldr	r4, [r4, #4]
 8005438:	e7ae      	b.n	8005398 <_malloc_r+0x34>
 800543a:	463c      	mov	r4, r7
 800543c:	687f      	ldr	r7, [r7, #4]
 800543e:	e7b6      	b.n	80053ae <_malloc_r+0x4a>
 8005440:	461a      	mov	r2, r3
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	42a3      	cmp	r3, r4
 8005446:	d1fb      	bne.n	8005440 <_malloc_r+0xdc>
 8005448:	2300      	movs	r3, #0
 800544a:	6053      	str	r3, [r2, #4]
 800544c:	e7de      	b.n	800540c <_malloc_r+0xa8>
 800544e:	230c      	movs	r3, #12
 8005450:	6033      	str	r3, [r6, #0]
 8005452:	4630      	mov	r0, r6
 8005454:	f000 fa46 	bl	80058e4 <__malloc_unlock>
 8005458:	e794      	b.n	8005384 <_malloc_r+0x20>
 800545a:	6005      	str	r5, [r0, #0]
 800545c:	e7d6      	b.n	800540c <_malloc_r+0xa8>
 800545e:	bf00      	nop
 8005460:	200002ac 	.word	0x200002ac

08005464 <_printf_common>:
 8005464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	4616      	mov	r6, r2
 800546a:	4698      	mov	r8, r3
 800546c:	688a      	ldr	r2, [r1, #8]
 800546e:	690b      	ldr	r3, [r1, #16]
 8005470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005474:	4293      	cmp	r3, r2
 8005476:	bfb8      	it	lt
 8005478:	4613      	movlt	r3, r2
 800547a:	6033      	str	r3, [r6, #0]
 800547c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005480:	4607      	mov	r7, r0
 8005482:	460c      	mov	r4, r1
 8005484:	b10a      	cbz	r2, 800548a <_printf_common+0x26>
 8005486:	3301      	adds	r3, #1
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	0699      	lsls	r1, r3, #26
 800548e:	bf42      	ittt	mi
 8005490:	6833      	ldrmi	r3, [r6, #0]
 8005492:	3302      	addmi	r3, #2
 8005494:	6033      	strmi	r3, [r6, #0]
 8005496:	6825      	ldr	r5, [r4, #0]
 8005498:	f015 0506 	ands.w	r5, r5, #6
 800549c:	d106      	bne.n	80054ac <_printf_common+0x48>
 800549e:	f104 0a19 	add.w	sl, r4, #25
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	6832      	ldr	r2, [r6, #0]
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	dc26      	bgt.n	80054fa <_printf_common+0x96>
 80054ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	3b00      	subs	r3, #0
 80054b4:	bf18      	it	ne
 80054b6:	2301      	movne	r3, #1
 80054b8:	0692      	lsls	r2, r2, #26
 80054ba:	d42b      	bmi.n	8005514 <_printf_common+0xb0>
 80054bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054c0:	4641      	mov	r1, r8
 80054c2:	4638      	mov	r0, r7
 80054c4:	47c8      	blx	r9
 80054c6:	3001      	adds	r0, #1
 80054c8:	d01e      	beq.n	8005508 <_printf_common+0xa4>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	6922      	ldr	r2, [r4, #16]
 80054ce:	f003 0306 	and.w	r3, r3, #6
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	bf02      	ittt	eq
 80054d6:	68e5      	ldreq	r5, [r4, #12]
 80054d8:	6833      	ldreq	r3, [r6, #0]
 80054da:	1aed      	subeq	r5, r5, r3
 80054dc:	68a3      	ldr	r3, [r4, #8]
 80054de:	bf0c      	ite	eq
 80054e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054e4:	2500      	movne	r5, #0
 80054e6:	4293      	cmp	r3, r2
 80054e8:	bfc4      	itt	gt
 80054ea:	1a9b      	subgt	r3, r3, r2
 80054ec:	18ed      	addgt	r5, r5, r3
 80054ee:	2600      	movs	r6, #0
 80054f0:	341a      	adds	r4, #26
 80054f2:	42b5      	cmp	r5, r6
 80054f4:	d11a      	bne.n	800552c <_printf_common+0xc8>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e008      	b.n	800550c <_printf_common+0xa8>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4652      	mov	r2, sl
 80054fe:	4641      	mov	r1, r8
 8005500:	4638      	mov	r0, r7
 8005502:	47c8      	blx	r9
 8005504:	3001      	adds	r0, #1
 8005506:	d103      	bne.n	8005510 <_printf_common+0xac>
 8005508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	3501      	adds	r5, #1
 8005512:	e7c6      	b.n	80054a2 <_printf_common+0x3e>
 8005514:	18e1      	adds	r1, r4, r3
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	2030      	movs	r0, #48	@ 0x30
 800551a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800551e:	4422      	add	r2, r4
 8005520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005528:	3302      	adds	r3, #2
 800552a:	e7c7      	b.n	80054bc <_printf_common+0x58>
 800552c:	2301      	movs	r3, #1
 800552e:	4622      	mov	r2, r4
 8005530:	4641      	mov	r1, r8
 8005532:	4638      	mov	r0, r7
 8005534:	47c8      	blx	r9
 8005536:	3001      	adds	r0, #1
 8005538:	d0e6      	beq.n	8005508 <_printf_common+0xa4>
 800553a:	3601      	adds	r6, #1
 800553c:	e7d9      	b.n	80054f2 <_printf_common+0x8e>
	...

08005540 <_printf_i>:
 8005540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	7e0f      	ldrb	r7, [r1, #24]
 8005546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005548:	2f78      	cmp	r7, #120	@ 0x78
 800554a:	4691      	mov	r9, r2
 800554c:	4680      	mov	r8, r0
 800554e:	460c      	mov	r4, r1
 8005550:	469a      	mov	sl, r3
 8005552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005556:	d807      	bhi.n	8005568 <_printf_i+0x28>
 8005558:	2f62      	cmp	r7, #98	@ 0x62
 800555a:	d80a      	bhi.n	8005572 <_printf_i+0x32>
 800555c:	2f00      	cmp	r7, #0
 800555e:	f000 80d2 	beq.w	8005706 <_printf_i+0x1c6>
 8005562:	2f58      	cmp	r7, #88	@ 0x58
 8005564:	f000 80b9 	beq.w	80056da <_printf_i+0x19a>
 8005568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800556c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005570:	e03a      	b.n	80055e8 <_printf_i+0xa8>
 8005572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005576:	2b15      	cmp	r3, #21
 8005578:	d8f6      	bhi.n	8005568 <_printf_i+0x28>
 800557a:	a101      	add	r1, pc, #4	@ (adr r1, 8005580 <_printf_i+0x40>)
 800557c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005580:	080055d9 	.word	0x080055d9
 8005584:	080055ed 	.word	0x080055ed
 8005588:	08005569 	.word	0x08005569
 800558c:	08005569 	.word	0x08005569
 8005590:	08005569 	.word	0x08005569
 8005594:	08005569 	.word	0x08005569
 8005598:	080055ed 	.word	0x080055ed
 800559c:	08005569 	.word	0x08005569
 80055a0:	08005569 	.word	0x08005569
 80055a4:	08005569 	.word	0x08005569
 80055a8:	08005569 	.word	0x08005569
 80055ac:	080056ed 	.word	0x080056ed
 80055b0:	08005617 	.word	0x08005617
 80055b4:	080056a7 	.word	0x080056a7
 80055b8:	08005569 	.word	0x08005569
 80055bc:	08005569 	.word	0x08005569
 80055c0:	0800570f 	.word	0x0800570f
 80055c4:	08005569 	.word	0x08005569
 80055c8:	08005617 	.word	0x08005617
 80055cc:	08005569 	.word	0x08005569
 80055d0:	08005569 	.word	0x08005569
 80055d4:	080056af 	.word	0x080056af
 80055d8:	6833      	ldr	r3, [r6, #0]
 80055da:	1d1a      	adds	r2, r3, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6032      	str	r2, [r6, #0]
 80055e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055e8:	2301      	movs	r3, #1
 80055ea:	e09d      	b.n	8005728 <_printf_i+0x1e8>
 80055ec:	6833      	ldr	r3, [r6, #0]
 80055ee:	6820      	ldr	r0, [r4, #0]
 80055f0:	1d19      	adds	r1, r3, #4
 80055f2:	6031      	str	r1, [r6, #0]
 80055f4:	0606      	lsls	r6, r0, #24
 80055f6:	d501      	bpl.n	80055fc <_printf_i+0xbc>
 80055f8:	681d      	ldr	r5, [r3, #0]
 80055fa:	e003      	b.n	8005604 <_printf_i+0xc4>
 80055fc:	0645      	lsls	r5, r0, #25
 80055fe:	d5fb      	bpl.n	80055f8 <_printf_i+0xb8>
 8005600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005604:	2d00      	cmp	r5, #0
 8005606:	da03      	bge.n	8005610 <_printf_i+0xd0>
 8005608:	232d      	movs	r3, #45	@ 0x2d
 800560a:	426d      	negs	r5, r5
 800560c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005610:	4859      	ldr	r0, [pc, #356]	@ (8005778 <_printf_i+0x238>)
 8005612:	230a      	movs	r3, #10
 8005614:	e011      	b.n	800563a <_printf_i+0xfa>
 8005616:	6821      	ldr	r1, [r4, #0]
 8005618:	6833      	ldr	r3, [r6, #0]
 800561a:	0608      	lsls	r0, r1, #24
 800561c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005620:	d402      	bmi.n	8005628 <_printf_i+0xe8>
 8005622:	0649      	lsls	r1, r1, #25
 8005624:	bf48      	it	mi
 8005626:	b2ad      	uxthmi	r5, r5
 8005628:	2f6f      	cmp	r7, #111	@ 0x6f
 800562a:	4853      	ldr	r0, [pc, #332]	@ (8005778 <_printf_i+0x238>)
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	bf14      	ite	ne
 8005630:	230a      	movne	r3, #10
 8005632:	2308      	moveq	r3, #8
 8005634:	2100      	movs	r1, #0
 8005636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800563a:	6866      	ldr	r6, [r4, #4]
 800563c:	60a6      	str	r6, [r4, #8]
 800563e:	2e00      	cmp	r6, #0
 8005640:	bfa2      	ittt	ge
 8005642:	6821      	ldrge	r1, [r4, #0]
 8005644:	f021 0104 	bicge.w	r1, r1, #4
 8005648:	6021      	strge	r1, [r4, #0]
 800564a:	b90d      	cbnz	r5, 8005650 <_printf_i+0x110>
 800564c:	2e00      	cmp	r6, #0
 800564e:	d04b      	beq.n	80056e8 <_printf_i+0x1a8>
 8005650:	4616      	mov	r6, r2
 8005652:	fbb5 f1f3 	udiv	r1, r5, r3
 8005656:	fb03 5711 	mls	r7, r3, r1, r5
 800565a:	5dc7      	ldrb	r7, [r0, r7]
 800565c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005660:	462f      	mov	r7, r5
 8005662:	42bb      	cmp	r3, r7
 8005664:	460d      	mov	r5, r1
 8005666:	d9f4      	bls.n	8005652 <_printf_i+0x112>
 8005668:	2b08      	cmp	r3, #8
 800566a:	d10b      	bne.n	8005684 <_printf_i+0x144>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	07df      	lsls	r7, r3, #31
 8005670:	d508      	bpl.n	8005684 <_printf_i+0x144>
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	6861      	ldr	r1, [r4, #4]
 8005676:	4299      	cmp	r1, r3
 8005678:	bfde      	ittt	le
 800567a:	2330      	movle	r3, #48	@ 0x30
 800567c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005680:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005684:	1b92      	subs	r2, r2, r6
 8005686:	6122      	str	r2, [r4, #16]
 8005688:	f8cd a000 	str.w	sl, [sp]
 800568c:	464b      	mov	r3, r9
 800568e:	aa03      	add	r2, sp, #12
 8005690:	4621      	mov	r1, r4
 8005692:	4640      	mov	r0, r8
 8005694:	f7ff fee6 	bl	8005464 <_printf_common>
 8005698:	3001      	adds	r0, #1
 800569a:	d14a      	bne.n	8005732 <_printf_i+0x1f2>
 800569c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a0:	b004      	add	sp, #16
 80056a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	f043 0320 	orr.w	r3, r3, #32
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	4833      	ldr	r0, [pc, #204]	@ (800577c <_printf_i+0x23c>)
 80056b0:	2778      	movs	r7, #120	@ 0x78
 80056b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	6831      	ldr	r1, [r6, #0]
 80056ba:	061f      	lsls	r7, r3, #24
 80056bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80056c0:	d402      	bmi.n	80056c8 <_printf_i+0x188>
 80056c2:	065f      	lsls	r7, r3, #25
 80056c4:	bf48      	it	mi
 80056c6:	b2ad      	uxthmi	r5, r5
 80056c8:	6031      	str	r1, [r6, #0]
 80056ca:	07d9      	lsls	r1, r3, #31
 80056cc:	bf44      	itt	mi
 80056ce:	f043 0320 	orrmi.w	r3, r3, #32
 80056d2:	6023      	strmi	r3, [r4, #0]
 80056d4:	b11d      	cbz	r5, 80056de <_printf_i+0x19e>
 80056d6:	2310      	movs	r3, #16
 80056d8:	e7ac      	b.n	8005634 <_printf_i+0xf4>
 80056da:	4827      	ldr	r0, [pc, #156]	@ (8005778 <_printf_i+0x238>)
 80056dc:	e7e9      	b.n	80056b2 <_printf_i+0x172>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f023 0320 	bic.w	r3, r3, #32
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	e7f6      	b.n	80056d6 <_printf_i+0x196>
 80056e8:	4616      	mov	r6, r2
 80056ea:	e7bd      	b.n	8005668 <_printf_i+0x128>
 80056ec:	6833      	ldr	r3, [r6, #0]
 80056ee:	6825      	ldr	r5, [r4, #0]
 80056f0:	6961      	ldr	r1, [r4, #20]
 80056f2:	1d18      	adds	r0, r3, #4
 80056f4:	6030      	str	r0, [r6, #0]
 80056f6:	062e      	lsls	r6, r5, #24
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	d501      	bpl.n	8005700 <_printf_i+0x1c0>
 80056fc:	6019      	str	r1, [r3, #0]
 80056fe:	e002      	b.n	8005706 <_printf_i+0x1c6>
 8005700:	0668      	lsls	r0, r5, #25
 8005702:	d5fb      	bpl.n	80056fc <_printf_i+0x1bc>
 8005704:	8019      	strh	r1, [r3, #0]
 8005706:	2300      	movs	r3, #0
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	4616      	mov	r6, r2
 800570c:	e7bc      	b.n	8005688 <_printf_i+0x148>
 800570e:	6833      	ldr	r3, [r6, #0]
 8005710:	1d1a      	adds	r2, r3, #4
 8005712:	6032      	str	r2, [r6, #0]
 8005714:	681e      	ldr	r6, [r3, #0]
 8005716:	6862      	ldr	r2, [r4, #4]
 8005718:	2100      	movs	r1, #0
 800571a:	4630      	mov	r0, r6
 800571c:	f7fa fd58 	bl	80001d0 <memchr>
 8005720:	b108      	cbz	r0, 8005726 <_printf_i+0x1e6>
 8005722:	1b80      	subs	r0, r0, r6
 8005724:	6060      	str	r0, [r4, #4]
 8005726:	6863      	ldr	r3, [r4, #4]
 8005728:	6123      	str	r3, [r4, #16]
 800572a:	2300      	movs	r3, #0
 800572c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005730:	e7aa      	b.n	8005688 <_printf_i+0x148>
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d0ad      	beq.n	800569c <_printf_i+0x15c>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	079b      	lsls	r3, r3, #30
 8005744:	d413      	bmi.n	800576e <_printf_i+0x22e>
 8005746:	68e0      	ldr	r0, [r4, #12]
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	4298      	cmp	r0, r3
 800574c:	bfb8      	it	lt
 800574e:	4618      	movlt	r0, r3
 8005750:	e7a6      	b.n	80056a0 <_printf_i+0x160>
 8005752:	2301      	movs	r3, #1
 8005754:	4632      	mov	r2, r6
 8005756:	4649      	mov	r1, r9
 8005758:	4640      	mov	r0, r8
 800575a:	47d0      	blx	sl
 800575c:	3001      	adds	r0, #1
 800575e:	d09d      	beq.n	800569c <_printf_i+0x15c>
 8005760:	3501      	adds	r5, #1
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	9903      	ldr	r1, [sp, #12]
 8005766:	1a5b      	subs	r3, r3, r1
 8005768:	42ab      	cmp	r3, r5
 800576a:	dcf2      	bgt.n	8005752 <_printf_i+0x212>
 800576c:	e7eb      	b.n	8005746 <_printf_i+0x206>
 800576e:	2500      	movs	r5, #0
 8005770:	f104 0619 	add.w	r6, r4, #25
 8005774:	e7f5      	b.n	8005762 <_printf_i+0x222>
 8005776:	bf00      	nop
 8005778:	08005eb1 	.word	0x08005eb1
 800577c:	08005ec2 	.word	0x08005ec2

08005780 <__sflush_r>:
 8005780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005788:	0716      	lsls	r6, r2, #28
 800578a:	4605      	mov	r5, r0
 800578c:	460c      	mov	r4, r1
 800578e:	d454      	bmi.n	800583a <__sflush_r+0xba>
 8005790:	684b      	ldr	r3, [r1, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	dc02      	bgt.n	800579c <__sflush_r+0x1c>
 8005796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	dd48      	ble.n	800582e <__sflush_r+0xae>
 800579c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800579e:	2e00      	cmp	r6, #0
 80057a0:	d045      	beq.n	800582e <__sflush_r+0xae>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80057a8:	682f      	ldr	r7, [r5, #0]
 80057aa:	6a21      	ldr	r1, [r4, #32]
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	d030      	beq.n	8005812 <__sflush_r+0x92>
 80057b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	0759      	lsls	r1, r3, #29
 80057b6:	d505      	bpl.n	80057c4 <__sflush_r+0x44>
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	1ad2      	subs	r2, r2, r3
 80057bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80057be:	b10b      	cbz	r3, 80057c4 <__sflush_r+0x44>
 80057c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057c2:	1ad2      	subs	r2, r2, r3
 80057c4:	2300      	movs	r3, #0
 80057c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057c8:	6a21      	ldr	r1, [r4, #32]
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b0      	blx	r6
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	d106      	bne.n	80057e2 <__sflush_r+0x62>
 80057d4:	6829      	ldr	r1, [r5, #0]
 80057d6:	291d      	cmp	r1, #29
 80057d8:	d82b      	bhi.n	8005832 <__sflush_r+0xb2>
 80057da:	4a2a      	ldr	r2, [pc, #168]	@ (8005884 <__sflush_r+0x104>)
 80057dc:	410a      	asrs	r2, r1
 80057de:	07d6      	lsls	r6, r2, #31
 80057e0:	d427      	bmi.n	8005832 <__sflush_r+0xb2>
 80057e2:	2200      	movs	r2, #0
 80057e4:	6062      	str	r2, [r4, #4]
 80057e6:	04d9      	lsls	r1, r3, #19
 80057e8:	6922      	ldr	r2, [r4, #16]
 80057ea:	6022      	str	r2, [r4, #0]
 80057ec:	d504      	bpl.n	80057f8 <__sflush_r+0x78>
 80057ee:	1c42      	adds	r2, r0, #1
 80057f0:	d101      	bne.n	80057f6 <__sflush_r+0x76>
 80057f2:	682b      	ldr	r3, [r5, #0]
 80057f4:	b903      	cbnz	r3, 80057f8 <__sflush_r+0x78>
 80057f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80057f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057fa:	602f      	str	r7, [r5, #0]
 80057fc:	b1b9      	cbz	r1, 800582e <__sflush_r+0xae>
 80057fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005802:	4299      	cmp	r1, r3
 8005804:	d002      	beq.n	800580c <__sflush_r+0x8c>
 8005806:	4628      	mov	r0, r5
 8005808:	f000 fa24 	bl	8005c54 <_free_r>
 800580c:	2300      	movs	r3, #0
 800580e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005810:	e00d      	b.n	800582e <__sflush_r+0xae>
 8005812:	2301      	movs	r3, #1
 8005814:	4628      	mov	r0, r5
 8005816:	47b0      	blx	r6
 8005818:	4602      	mov	r2, r0
 800581a:	1c50      	adds	r0, r2, #1
 800581c:	d1c9      	bne.n	80057b2 <__sflush_r+0x32>
 800581e:	682b      	ldr	r3, [r5, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0c6      	beq.n	80057b2 <__sflush_r+0x32>
 8005824:	2b1d      	cmp	r3, #29
 8005826:	d001      	beq.n	800582c <__sflush_r+0xac>
 8005828:	2b16      	cmp	r3, #22
 800582a:	d11e      	bne.n	800586a <__sflush_r+0xea>
 800582c:	602f      	str	r7, [r5, #0]
 800582e:	2000      	movs	r0, #0
 8005830:	e022      	b.n	8005878 <__sflush_r+0xf8>
 8005832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005836:	b21b      	sxth	r3, r3
 8005838:	e01b      	b.n	8005872 <__sflush_r+0xf2>
 800583a:	690f      	ldr	r7, [r1, #16]
 800583c:	2f00      	cmp	r7, #0
 800583e:	d0f6      	beq.n	800582e <__sflush_r+0xae>
 8005840:	0793      	lsls	r3, r2, #30
 8005842:	680e      	ldr	r6, [r1, #0]
 8005844:	bf08      	it	eq
 8005846:	694b      	ldreq	r3, [r1, #20]
 8005848:	600f      	str	r7, [r1, #0]
 800584a:	bf18      	it	ne
 800584c:	2300      	movne	r3, #0
 800584e:	eba6 0807 	sub.w	r8, r6, r7
 8005852:	608b      	str	r3, [r1, #8]
 8005854:	f1b8 0f00 	cmp.w	r8, #0
 8005858:	dde9      	ble.n	800582e <__sflush_r+0xae>
 800585a:	6a21      	ldr	r1, [r4, #32]
 800585c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800585e:	4643      	mov	r3, r8
 8005860:	463a      	mov	r2, r7
 8005862:	4628      	mov	r0, r5
 8005864:	47b0      	blx	r6
 8005866:	2800      	cmp	r0, #0
 8005868:	dc08      	bgt.n	800587c <__sflush_r+0xfc>
 800586a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800586e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800587c:	4407      	add	r7, r0
 800587e:	eba8 0800 	sub.w	r8, r8, r0
 8005882:	e7e7      	b.n	8005854 <__sflush_r+0xd4>
 8005884:	dfbffffe 	.word	0xdfbffffe

08005888 <_fflush_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	690b      	ldr	r3, [r1, #16]
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b913      	cbnz	r3, 8005898 <_fflush_r+0x10>
 8005892:	2500      	movs	r5, #0
 8005894:	4628      	mov	r0, r5
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	b118      	cbz	r0, 80058a2 <_fflush_r+0x1a>
 800589a:	6a03      	ldr	r3, [r0, #32]
 800589c:	b90b      	cbnz	r3, 80058a2 <_fflush_r+0x1a>
 800589e:	f7ff fb23 	bl	8004ee8 <__sinit>
 80058a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f3      	beq.n	8005892 <_fflush_r+0xa>
 80058aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058ac:	07d0      	lsls	r0, r2, #31
 80058ae:	d404      	bmi.n	80058ba <_fflush_r+0x32>
 80058b0:	0599      	lsls	r1, r3, #22
 80058b2:	d402      	bmi.n	80058ba <_fflush_r+0x32>
 80058b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058b6:	f7ff fbf0 	bl	800509a <__retarget_lock_acquire_recursive>
 80058ba:	4628      	mov	r0, r5
 80058bc:	4621      	mov	r1, r4
 80058be:	f7ff ff5f 	bl	8005780 <__sflush_r>
 80058c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058c4:	07da      	lsls	r2, r3, #31
 80058c6:	4605      	mov	r5, r0
 80058c8:	d4e4      	bmi.n	8005894 <_fflush_r+0xc>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	059b      	lsls	r3, r3, #22
 80058ce:	d4e1      	bmi.n	8005894 <_fflush_r+0xc>
 80058d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058d2:	f7ff fbe3 	bl	800509c <__retarget_lock_release_recursive>
 80058d6:	e7dd      	b.n	8005894 <_fflush_r+0xc>

080058d8 <__malloc_lock>:
 80058d8:	4801      	ldr	r0, [pc, #4]	@ (80058e0 <__malloc_lock+0x8>)
 80058da:	f7ff bbde 	b.w	800509a <__retarget_lock_acquire_recursive>
 80058de:	bf00      	nop
 80058e0:	200002a4 	.word	0x200002a4

080058e4 <__malloc_unlock>:
 80058e4:	4801      	ldr	r0, [pc, #4]	@ (80058ec <__malloc_unlock+0x8>)
 80058e6:	f7ff bbd9 	b.w	800509c <__retarget_lock_release_recursive>
 80058ea:	bf00      	nop
 80058ec:	200002a4 	.word	0x200002a4

080058f0 <__sread>:
 80058f0:	b510      	push	{r4, lr}
 80058f2:	460c      	mov	r4, r1
 80058f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f8:	f000 f978 	bl	8005bec <_read_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	bfab      	itete	ge
 8005900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005902:	89a3      	ldrhlt	r3, [r4, #12]
 8005904:	181b      	addge	r3, r3, r0
 8005906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800590a:	bfac      	ite	ge
 800590c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800590e:	81a3      	strhlt	r3, [r4, #12]
 8005910:	bd10      	pop	{r4, pc}

08005912 <__swrite>:
 8005912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	461f      	mov	r7, r3
 8005918:	898b      	ldrh	r3, [r1, #12]
 800591a:	05db      	lsls	r3, r3, #23
 800591c:	4605      	mov	r5, r0
 800591e:	460c      	mov	r4, r1
 8005920:	4616      	mov	r6, r2
 8005922:	d505      	bpl.n	8005930 <__swrite+0x1e>
 8005924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005928:	2302      	movs	r3, #2
 800592a:	2200      	movs	r2, #0
 800592c:	f000 f94c 	bl	8005bc8 <_lseek_r>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	4632      	mov	r2, r6
 800593e:	463b      	mov	r3, r7
 8005940:	4628      	mov	r0, r5
 8005942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005946:	f000 b973 	b.w	8005c30 <_write_r>

0800594a <__sseek>:
 800594a:	b510      	push	{r4, lr}
 800594c:	460c      	mov	r4, r1
 800594e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005952:	f000 f939 	bl	8005bc8 <_lseek_r>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	bf15      	itete	ne
 800595c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800595e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005966:	81a3      	strheq	r3, [r4, #12]
 8005968:	bf18      	it	ne
 800596a:	81a3      	strhne	r3, [r4, #12]
 800596c:	bd10      	pop	{r4, pc}

0800596e <__sclose>:
 800596e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005972:	f000 b8f7 	b.w	8005b64 <_close_r>

08005976 <__swbuf_r>:
 8005976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005978:	460e      	mov	r6, r1
 800597a:	4614      	mov	r4, r2
 800597c:	4605      	mov	r5, r0
 800597e:	b118      	cbz	r0, 8005988 <__swbuf_r+0x12>
 8005980:	6a03      	ldr	r3, [r0, #32]
 8005982:	b90b      	cbnz	r3, 8005988 <__swbuf_r+0x12>
 8005984:	f7ff fab0 	bl	8004ee8 <__sinit>
 8005988:	69a3      	ldr	r3, [r4, #24]
 800598a:	60a3      	str	r3, [r4, #8]
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	071a      	lsls	r2, r3, #28
 8005990:	d501      	bpl.n	8005996 <__swbuf_r+0x20>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	b943      	cbnz	r3, 80059a8 <__swbuf_r+0x32>
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f000 f82b 	bl	80059f4 <__swsetup_r>
 800599e:	b118      	cbz	r0, 80059a8 <__swbuf_r+0x32>
 80059a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80059a4:	4638      	mov	r0, r7
 80059a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	6922      	ldr	r2, [r4, #16]
 80059ac:	1a98      	subs	r0, r3, r2
 80059ae:	6963      	ldr	r3, [r4, #20]
 80059b0:	b2f6      	uxtb	r6, r6
 80059b2:	4283      	cmp	r3, r0
 80059b4:	4637      	mov	r7, r6
 80059b6:	dc05      	bgt.n	80059c4 <__swbuf_r+0x4e>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f7ff ff64 	bl	8005888 <_fflush_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1ed      	bne.n	80059a0 <__swbuf_r+0x2a>
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	701e      	strb	r6, [r3, #0]
 80059d2:	6962      	ldr	r2, [r4, #20]
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d004      	beq.n	80059e4 <__swbuf_r+0x6e>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	07db      	lsls	r3, r3, #31
 80059de:	d5e1      	bpl.n	80059a4 <__swbuf_r+0x2e>
 80059e0:	2e0a      	cmp	r6, #10
 80059e2:	d1df      	bne.n	80059a4 <__swbuf_r+0x2e>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7ff ff4e 	bl	8005888 <_fflush_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d0d9      	beq.n	80059a4 <__swbuf_r+0x2e>
 80059f0:	e7d6      	b.n	80059a0 <__swbuf_r+0x2a>
	...

080059f4 <__swsetup_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4b29      	ldr	r3, [pc, #164]	@ (8005a9c <__swsetup_r+0xa8>)
 80059f8:	4605      	mov	r5, r0
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	460c      	mov	r4, r1
 80059fe:	b118      	cbz	r0, 8005a08 <__swsetup_r+0x14>
 8005a00:	6a03      	ldr	r3, [r0, #32]
 8005a02:	b90b      	cbnz	r3, 8005a08 <__swsetup_r+0x14>
 8005a04:	f7ff fa70 	bl	8004ee8 <__sinit>
 8005a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0c:	0719      	lsls	r1, r3, #28
 8005a0e:	d422      	bmi.n	8005a56 <__swsetup_r+0x62>
 8005a10:	06da      	lsls	r2, r3, #27
 8005a12:	d407      	bmi.n	8005a24 <__swsetup_r+0x30>
 8005a14:	2209      	movs	r2, #9
 8005a16:	602a      	str	r2, [r5, #0]
 8005a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a1c:	81a3      	strh	r3, [r4, #12]
 8005a1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a22:	e033      	b.n	8005a8c <__swsetup_r+0x98>
 8005a24:	0758      	lsls	r0, r3, #29
 8005a26:	d512      	bpl.n	8005a4e <__swsetup_r+0x5a>
 8005a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a2a:	b141      	cbz	r1, 8005a3e <__swsetup_r+0x4a>
 8005a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a30:	4299      	cmp	r1, r3
 8005a32:	d002      	beq.n	8005a3a <__swsetup_r+0x46>
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f90d 	bl	8005c54 <_free_r>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	2300      	movs	r3, #0
 8005a48:	6063      	str	r3, [r4, #4]
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f043 0308 	orr.w	r3, r3, #8
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	b94b      	cbnz	r3, 8005a6e <__swsetup_r+0x7a>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a64:	d003      	beq.n	8005a6e <__swsetup_r+0x7a>
 8005a66:	4621      	mov	r1, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 f83f 	bl	8005aec <__smakebuf_r>
 8005a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a72:	f013 0201 	ands.w	r2, r3, #1
 8005a76:	d00a      	beq.n	8005a8e <__swsetup_r+0x9a>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	60a2      	str	r2, [r4, #8]
 8005a7c:	6962      	ldr	r2, [r4, #20]
 8005a7e:	4252      	negs	r2, r2
 8005a80:	61a2      	str	r2, [r4, #24]
 8005a82:	6922      	ldr	r2, [r4, #16]
 8005a84:	b942      	cbnz	r2, 8005a98 <__swsetup_r+0xa4>
 8005a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a8a:	d1c5      	bne.n	8005a18 <__swsetup_r+0x24>
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	0799      	lsls	r1, r3, #30
 8005a90:	bf58      	it	pl
 8005a92:	6962      	ldrpl	r2, [r4, #20]
 8005a94:	60a2      	str	r2, [r4, #8]
 8005a96:	e7f4      	b.n	8005a82 <__swsetup_r+0x8e>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e7f7      	b.n	8005a8c <__swsetup_r+0x98>
 8005a9c:	20000018 	.word	0x20000018

08005aa0 <__swhatbuf_r>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	b096      	sub	sp, #88	@ 0x58
 8005aac:	4615      	mov	r5, r2
 8005aae:	461e      	mov	r6, r3
 8005ab0:	da0d      	bge.n	8005ace <__swhatbuf_r+0x2e>
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	bf14      	ite	ne
 8005abe:	2340      	movne	r3, #64	@ 0x40
 8005ac0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	6031      	str	r1, [r6, #0]
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	b016      	add	sp, #88	@ 0x58
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
 8005ace:	466a      	mov	r2, sp
 8005ad0:	f000 f858 	bl	8005b84 <_fstat_r>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	dbec      	blt.n	8005ab2 <__swhatbuf_r+0x12>
 8005ad8:	9901      	ldr	r1, [sp, #4]
 8005ada:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ade:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ae2:	4259      	negs	r1, r3
 8005ae4:	4159      	adcs	r1, r3
 8005ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aea:	e7eb      	b.n	8005ac4 <__swhatbuf_r+0x24>

08005aec <__smakebuf_r>:
 8005aec:	898b      	ldrh	r3, [r1, #12]
 8005aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af0:	079d      	lsls	r5, r3, #30
 8005af2:	4606      	mov	r6, r0
 8005af4:	460c      	mov	r4, r1
 8005af6:	d507      	bpl.n	8005b08 <__smakebuf_r+0x1c>
 8005af8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	6123      	str	r3, [r4, #16]
 8005b00:	2301      	movs	r3, #1
 8005b02:	6163      	str	r3, [r4, #20]
 8005b04:	b003      	add	sp, #12
 8005b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b08:	ab01      	add	r3, sp, #4
 8005b0a:	466a      	mov	r2, sp
 8005b0c:	f7ff ffc8 	bl	8005aa0 <__swhatbuf_r>
 8005b10:	9f00      	ldr	r7, [sp, #0]
 8005b12:	4605      	mov	r5, r0
 8005b14:	4639      	mov	r1, r7
 8005b16:	4630      	mov	r0, r6
 8005b18:	f7ff fc24 	bl	8005364 <_malloc_r>
 8005b1c:	b948      	cbnz	r0, 8005b32 <__smakebuf_r+0x46>
 8005b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b22:	059a      	lsls	r2, r3, #22
 8005b24:	d4ee      	bmi.n	8005b04 <__smakebuf_r+0x18>
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	f043 0302 	orr.w	r3, r3, #2
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	e7e2      	b.n	8005af8 <__smakebuf_r+0xc>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	6020      	str	r0, [r4, #0]
 8005b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3a:	81a3      	strh	r3, [r4, #12]
 8005b3c:	9b01      	ldr	r3, [sp, #4]
 8005b3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b42:	b15b      	cbz	r3, 8005b5c <__smakebuf_r+0x70>
 8005b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 f82d 	bl	8005ba8 <_isatty_r>
 8005b4e:	b128      	cbz	r0, 8005b5c <__smakebuf_r+0x70>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	431d      	orrs	r5, r3
 8005b60:	81a5      	strh	r5, [r4, #12]
 8005b62:	e7cf      	b.n	8005b04 <__smakebuf_r+0x18>

08005b64 <_close_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d06      	ldr	r5, [pc, #24]	@ (8005b80 <_close_r+0x1c>)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	f7fb fe45 	bl	80017fe <_close>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_close_r+0x1a>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_close_r+0x1a>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	200002b0 	.word	0x200002b0

08005b84 <_fstat_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d07      	ldr	r5, [pc, #28]	@ (8005ba4 <_fstat_r+0x20>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	f7fb fe40 	bl	8001816 <_fstat>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d102      	bne.n	8005ba0 <_fstat_r+0x1c>
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	b103      	cbz	r3, 8005ba0 <_fstat_r+0x1c>
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	bd38      	pop	{r3, r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200002b0 	.word	0x200002b0

08005ba8 <_isatty_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d06      	ldr	r5, [pc, #24]	@ (8005bc4 <_isatty_r+0x1c>)
 8005bac:	2300      	movs	r3, #0
 8005bae:	4604      	mov	r4, r0
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	f7fb fe3f 	bl	8001836 <_isatty>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_isatty_r+0x1a>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_isatty_r+0x1a>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	200002b0 	.word	0x200002b0

08005bc8 <_lseek_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d07      	ldr	r5, [pc, #28]	@ (8005be8 <_lseek_r+0x20>)
 8005bcc:	4604      	mov	r4, r0
 8005bce:	4608      	mov	r0, r1
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	602a      	str	r2, [r5, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f7fb fe38 	bl	800184c <_lseek>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_lseek_r+0x1e>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_lseek_r+0x1e>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	200002b0 	.word	0x200002b0

08005bec <_read_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	@ (8005c0c <_read_r+0x20>)
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	602a      	str	r2, [r5, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f7fb fdc6 	bl	800178c <_read>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_read_r+0x1e>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_read_r+0x1e>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200002b0 	.word	0x200002b0

08005c10 <_sbrk_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d06      	ldr	r5, [pc, #24]	@ (8005c2c <_sbrk_r+0x1c>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fb fe24 	bl	8001868 <_sbrk>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_sbrk_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_sbrk_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	200002b0 	.word	0x200002b0

08005c30 <_write_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d07      	ldr	r5, [pc, #28]	@ (8005c50 <_write_r+0x20>)
 8005c34:	4604      	mov	r4, r0
 8005c36:	4608      	mov	r0, r1
 8005c38:	4611      	mov	r1, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb fdc1 	bl	80017c6 <_write>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_write_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_write_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	200002b0 	.word	0x200002b0

08005c54 <_free_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4605      	mov	r5, r0
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	d041      	beq.n	8005ce0 <_free_r+0x8c>
 8005c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c60:	1f0c      	subs	r4, r1, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bfb8      	it	lt
 8005c66:	18e4      	addlt	r4, r4, r3
 8005c68:	f7ff fe36 	bl	80058d8 <__malloc_lock>
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <_free_r+0x90>)
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	b933      	cbnz	r3, 8005c80 <_free_r+0x2c>
 8005c72:	6063      	str	r3, [r4, #4]
 8005c74:	6014      	str	r4, [r2, #0]
 8005c76:	4628      	mov	r0, r5
 8005c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c7c:	f7ff be32 	b.w	80058e4 <__malloc_unlock>
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d908      	bls.n	8005c96 <_free_r+0x42>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	1821      	adds	r1, r4, r0
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf01      	itttt	eq
 8005c8c:	6819      	ldreq	r1, [r3, #0]
 8005c8e:	685b      	ldreq	r3, [r3, #4]
 8005c90:	1809      	addeq	r1, r1, r0
 8005c92:	6021      	streq	r1, [r4, #0]
 8005c94:	e7ed      	b.n	8005c72 <_free_r+0x1e>
 8005c96:	461a      	mov	r2, r3
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b10b      	cbz	r3, 8005ca0 <_free_r+0x4c>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d9fa      	bls.n	8005c96 <_free_r+0x42>
 8005ca0:	6811      	ldr	r1, [r2, #0]
 8005ca2:	1850      	adds	r0, r2, r1
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d10b      	bne.n	8005cc0 <_free_r+0x6c>
 8005ca8:	6820      	ldr	r0, [r4, #0]
 8005caa:	4401      	add	r1, r0
 8005cac:	1850      	adds	r0, r2, r1
 8005cae:	4283      	cmp	r3, r0
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	d1e0      	bne.n	8005c76 <_free_r+0x22>
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	6053      	str	r3, [r2, #4]
 8005cba:	4408      	add	r0, r1
 8005cbc:	6010      	str	r0, [r2, #0]
 8005cbe:	e7da      	b.n	8005c76 <_free_r+0x22>
 8005cc0:	d902      	bls.n	8005cc8 <_free_r+0x74>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	e7d6      	b.n	8005c76 <_free_r+0x22>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	1821      	adds	r1, r4, r0
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf04      	itt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	6063      	str	r3, [r4, #4]
 8005cd6:	bf04      	itt	eq
 8005cd8:	1809      	addeq	r1, r1, r0
 8005cda:	6021      	streq	r1, [r4, #0]
 8005cdc:	6054      	str	r4, [r2, #4]
 8005cde:	e7ca      	b.n	8005c76 <_free_r+0x22>
 8005ce0:	bd38      	pop	{r3, r4, r5, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200002ac 	.word	0x200002ac

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
