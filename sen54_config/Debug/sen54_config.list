
sen54_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005358  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055fc  080055fc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080055fc  080055fc  000065fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005604  08005604  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005604  08005604  00006604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005608  08005608  00006608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800560c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08005674  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005674  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4c5  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002097  00000000  00000000  0001555d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000175f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c4  00000000  00000000  000182a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027564  00000000  00000000  00018c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010112  00000000  00000000  000401c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec0ea  00000000  00000000  000502da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c3c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  0013c408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013ff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054d0 	.word	0x080054d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080054d0 	.word	0x080054d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

PUTCHAR_PROTOTYPE
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f003 fac3 	bl	8003afc <HAL_UART_Transmit>
    return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000d8 	.word	0x200000d8

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	@ 0x38
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fdd2 	bl	8001132 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f849 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f909 	bl	80007a8 <MX_GPIO_Init>
  /*MX_USART2_UART_Init();*/
  MX_I2C1_Init();
 8000596:	f000 f897 	bl	80006c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f8d5 	bl	8000748 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t sensor_data[48];  // Buffer large enough for full data

  if (sen54_init(&hi2c1) == HAL_OK)
 800059e:	481a      	ldr	r0, [pc, #104]	@ (8000608 <main+0x84>)
 80005a0:	f000 fafe 	bl	8000ba0 <sen54_init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d103      	bne.n	80005b2 <main+0x2e>
  {
      printf("Sensor initialized.\r\n");
 80005aa:	4818      	ldr	r0, [pc, #96]	@ (800060c <main+0x88>)
 80005ac:	f004 f92e 	bl	800480c <puts>
 80005b0:	e002      	b.n	80005b8 <main+0x34>
  } else {
      printf("Sensor init failed.\r\n");
 80005b2:	4817      	ldr	r0, [pc, #92]	@ (8000610 <main+0x8c>)
 80005b4:	f004 f92a 	bl	800480c <puts>
  }
  if (sen54_read_measurements(&hi2c1, sensor_data, sizeof(sensor_data)) == HAL_OK) {
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	4619      	mov	r1, r3
 80005be:	4812      	ldr	r0, [pc, #72]	@ (8000608 <main+0x84>)
 80005c0:	f000 fb0e 	bl	8000be0 <sen54_read_measurements>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d117      	bne.n	80005fa <main+0x76>
      printf("Measurement received:\r\n");
 80005ca:	4812      	ldr	r0, [pc, #72]	@ (8000614 <main+0x90>)
 80005cc:	f004 f91e 	bl	800480c <puts>
      for (int i = 0; i < sizeof(sensor_data); i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80005d4:	e00a      	b.n	80005ec <main+0x68>
          printf("%02X ", sensor_data[i]);
 80005d6:	1d3a      	adds	r2, r7, #4
 80005d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	480d      	ldr	r0, [pc, #52]	@ (8000618 <main+0x94>)
 80005e2:	f004 f8ab 	bl	800473c <iprintf>
      for (int i = 0; i < sizeof(sensor_data); i++) {
 80005e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005e8:	3301      	adds	r3, #1
 80005ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80005ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80005f0:	d9f1      	bls.n	80005d6 <main+0x52>
      }
      printf("\r\n");
 80005f2:	480a      	ldr	r0, [pc, #40]	@ (800061c <main+0x98>)
 80005f4:	f004 f90a 	bl	800480c <puts>
 80005f8:	e003      	b.n	8000602 <main+0x7e>
  } else {
      printf("Measurement read failed\r\n");
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <main+0x9c>)
 80005fc:	f004 f906 	bl	800480c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	e7fd      	b.n	8000602 <main+0x7e>
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084
 800060c:	080054e8 	.word	0x080054e8
 8000610:	08005500 	.word	0x08005500
 8000614:	08005518 	.word	0x08005518
 8000618:	08005530 	.word	0x08005530
 800061c:	08005538 	.word	0x08005538
 8000620:	0800553c 	.word	0x0800553c

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b096      	sub	sp, #88	@ 0x58
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2244      	movs	r2, #68	@ 0x44
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 f8f2 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000646:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800064a:	f001 fef7 	bl	800243c <HAL_PWREx_ControlVoltageScaling>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000654:	f000 fa9e 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000658:	2310      	movs	r3, #16
 800065a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000664:	2360      	movs	r3, #96	@ 0x60
 8000666:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066c:	2301      	movs	r3, #1
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000674:	2328      	movs	r3, #40	@ 0x28
 8000676:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4618      	mov	r0, r3
 800068a:	f001 ff2d 	bl	80024e8 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000694:	f000 fa7e 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2104      	movs	r1, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 faf5 	bl	8002ca0 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006bc:	f000 fa6a 	bl	8000b94 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3758      	adds	r7, #88	@ 0x58
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_I2C1_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <MX_I2C1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_I2C1_Init+0x74>)
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <MX_I2C1_Init+0x7c>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_I2C1_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000702:	480e      	ldr	r0, [pc, #56]	@ (800073c <MX_I2C1_Init+0x74>)
 8000704:	f001 f8a5 	bl	8001852 <HAL_I2C_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070e:	f000 fa41 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <MX_I2C1_Init+0x74>)
 8000716:	f001 fdeb 	bl	80022f0 <HAL_I2CEx_ConfigAnalogFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 fa38 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_I2C1_Init+0x74>)
 8000728:	f001 fe2d 	bl	8002386 <HAL_I2CEx_ConfigDigitalFilter>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 fa2f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000084 	.word	0x20000084
 8000740:	40005400 	.word	0x40005400
 8000744:	10d19ce4 	.word	0x10d19ce4

08000748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 800074e:	4a15      	ldr	r2, [pc, #84]	@ (80007a4 <MX_USART1_UART_Init+0x5c>)
 8000750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART1_UART_Init+0x58>)
 800078c:	f003 f968 	bl	8003a60 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f9fd 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d8 	.word	0x200000d8
 80007a4:	40013800 	.word	0x40013800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007be:	4bbc      	ldr	r3, [pc, #752]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4abb      	ldr	r2, [pc, #748]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4bb9      	ldr	r3, [pc, #740]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0310 	and.w	r3, r3, #16
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4bb6      	ldr	r3, [pc, #728]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4ab5      	ldr	r2, [pc, #724]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4bb3      	ldr	r3, [pc, #716]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4bb0      	ldr	r3, [pc, #704]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4aaf      	ldr	r2, [pc, #700]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4bad      	ldr	r3, [pc, #692]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4baa      	ldr	r3, [pc, #680]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4aa9      	ldr	r2, [pc, #676]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4ba7      	ldr	r3, [pc, #668]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4ba4      	ldr	r3, [pc, #656]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4aa3      	ldr	r2, [pc, #652]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4ba1      	ldr	r3, [pc, #644]	@ (8000ab0 <MX_GPIO_Init+0x308>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800083c:	489d      	ldr	r0, [pc, #628]	@ (8000ab4 <MX_GPIO_Init+0x30c>)
 800083e:	f000 ffcd 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000842:	2200      	movs	r2, #0
 8000844:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000848:	489b      	ldr	r0, [pc, #620]	@ (8000ab8 <MX_GPIO_Init+0x310>)
 800084a:	f000 ffc7 	bl	80017dc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000854:	4899      	ldr	r0, [pc, #612]	@ (8000abc <MX_GPIO_Init+0x314>)
 8000856:	f000 ffc1 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000860:	4896      	ldr	r0, [pc, #600]	@ (8000abc <MX_GPIO_Init+0x314>)
 8000862:	f000 ffbb 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800086c:	4894      	ldr	r0, [pc, #592]	@ (8000ac0 <MX_GPIO_Init+0x318>)
 800086e:	f000 ffb5 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087c:	f000 ffae 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2120      	movs	r1, #32
 8000884:	488c      	ldr	r0, [pc, #560]	@ (8000ab8 <MX_GPIO_Init+0x310>)
 8000886:	f000 ffa9 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2101      	movs	r1, #1
 800088e:	4889      	ldr	r0, [pc, #548]	@ (8000ab4 <MX_GPIO_Init+0x30c>)
 8000890:	f000 ffa4 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000894:	f240 1315 	movw	r3, #277	@ 0x115
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4881      	ldr	r0, [pc, #516]	@ (8000ab4 <MX_GPIO_Init+0x30c>)
 80008ae:	f000 fdeb 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80008b2:	236a      	movs	r3, #106	@ 0x6a
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	487b      	ldr	r0, [pc, #492]	@ (8000ab4 <MX_GPIO_Init+0x30c>)
 80008c8:	f000 fdde 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4877      	ldr	r0, [pc, #476]	@ (8000ac0 <MX_GPIO_Init+0x318>)
 80008e4:	f000 fdd0 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80008e8:	233f      	movs	r3, #63	@ 0x3f
 80008ea:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008ec:	230b      	movs	r3, #11
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4871      	ldr	r0, [pc, #452]	@ (8000ac0 <MX_GPIO_Init+0x318>)
 80008fc:	f000 fdc4 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000900:	2303      	movs	r3, #3
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000910:	2308      	movs	r3, #8
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091e:	f000 fdb3 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000922:	2310      	movs	r3, #16
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000926:	230b      	movs	r3, #11
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f000 fda6 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800093c:	23e0      	movs	r3, #224	@ 0xe0
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094c:	2305      	movs	r3, #5
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095a:	f000 fd95 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4851      	ldr	r0, [pc, #324]	@ (8000ab8 <MX_GPIO_Init+0x310>)
 8000974:	f000 fd88 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000978:	2302      	movs	r3, #2
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800097c:	230b      	movs	r3, #11
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	484b      	ldr	r0, [pc, #300]	@ (8000ab8 <MX_GPIO_Init+0x310>)
 800098c:	f000 fd7c 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000990:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000994:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4843      	ldr	r0, [pc, #268]	@ (8000ab8 <MX_GPIO_Init+0x310>)
 80009aa:	f000 fd6d 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80009ae:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009c0:	2306      	movs	r3, #6
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	483a      	ldr	r0, [pc, #232]	@ (8000ab4 <MX_GPIO_Init+0x30c>)
 80009cc:	f000 fd5c 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80009d0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80009d4:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009e2:	230a      	movs	r3, #10
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4831      	ldr	r0, [pc, #196]	@ (8000ab4 <MX_GPIO_Init+0x30c>)
 80009ee:	f000 fd4b 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80009f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a04:	2304      	movs	r3, #4
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482a      	ldr	r0, [pc, #168]	@ (8000ab8 <MX_GPIO_Init+0x310>)
 8000a10:	f000 fd3a 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000a14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a26:	2307      	movs	r3, #7
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4822      	ldr	r0, [pc, #136]	@ (8000abc <MX_GPIO_Init+0x314>)
 8000a32:	f000 fd29 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000a36:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000a3a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481b      	ldr	r0, [pc, #108]	@ (8000abc <MX_GPIO_Init+0x314>)
 8000a4e:	f000 fd1b 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000a52:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_GPIO_Init+0x314>)
 8000a6c:	f000 fd0c 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000a70:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_GPIO_Init+0x318>)
 8000a8a:	f000 fcfd 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000a8e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <MX_GPIO_Init+0x318>)
 8000aa6:	f000 fcef 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000aaa:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000aae:	e009      	b.n	8000ac4 <MX_GPIO_Init+0x31c>
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48001000 	.word	0x48001000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000c00 	.word	0x48000c00
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f000 fcd4 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000ae0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f000 fcc6 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000afc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1c:	f000 fcb4 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000b20:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b32:	2306      	movs	r3, #6
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <MX_GPIO_Init+0x3e4>)
 8000b3e:	f000 fca3 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b42:	2302      	movs	r3, #2
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b52:	2305      	movs	r3, #5
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <MX_GPIO_Init+0x3e8>)
 8000b5e:	f000 fc93 	bl	8001488 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2017      	movs	r0, #23
 8000b68:	f000 fc57 	bl	800141a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b6c:	2017      	movs	r0, #23
 8000b6e:	f000 fc70 	bl	8001452 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2028      	movs	r0, #40	@ 0x28
 8000b78:	f000 fc4f 	bl	800141a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b7c:	2028      	movs	r0, #40	@ 0x28
 8000b7e:	f000 fc68 	bl	8001452 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	48000c00 	.word	0x48000c00

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <sen54_init>:
// SEN54 command to read measured values
static const uint8_t read_measurement_cmd[] = { 0x03, 0xC4 };

// Initialization function: sends command to start measurements
HAL_StatusTypeDef sen54_init(I2C_HandleTypeDef *hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(hi2c, SEN54_I2C_ADDR, (uint8_t*)start_measurement_cmd, sizeof(start_measurement_cmd), HAL_MAX_DELAY);
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	4a09      	ldr	r2, [pc, #36]	@ (8000bd8 <sen54_init+0x38>)
 8000bb2:	21d2      	movs	r1, #210	@ 0xd2
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 fee7 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);  // Give sensor time to start measuring
 8000bbe:	2064      	movs	r0, #100	@ 0x64
 8000bc0:	f000 fb2c 	bl	800121c <HAL_Delay>

    printf("Sending to I2C address 0x%02X\r\n", SEN54_I2C_ADDR);
 8000bc4:	21d2      	movs	r1, #210	@ 0xd2
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <sen54_init+0x3c>)
 8000bc8:	f003 fdb8 	bl	800473c <iprintf>


    return status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08005578 	.word	0x08005578
 8000bdc:	08005558 	.word	0x08005558

08000be0 <sen54_read_measurements>:

// Read raw measurement data into buffer
HAL_StatusTypeDef sen54_read_measurements(I2C_HandleTypeDef *hi2c, uint8_t *buffer, uint16_t len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	4613      	mov	r3, r2
 8000bec:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    // Request data from sensor
    status = HAL_I2C_Master_Transmit(hi2c, SEN54_I2C_ADDR, (uint8_t*)read_measurement_cmd, sizeof(read_measurement_cmd), HAL_MAX_DELAY);
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <sen54_read_measurements+0x54>)
 8000bf8:	21d2      	movs	r1, #210	@ 0xd2
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f000 fec4 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000c00:	4603      	mov	r3, r0
 8000c02:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <sen54_read_measurements+0x2e>
        return status;
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	e00e      	b.n	8000c2c <sen54_read_measurements+0x4c>
    }

    // Wait briefly before reading
    HAL_Delay(10);
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f000 fb04 	bl	800121c <HAL_Delay>

    // Read sensor response into buffer
    status = HAL_I2C_Master_Receive(hi2c, SEN54_I2C_ADDR, buffer, len, HAL_MAX_DELAY);
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c1a:	9200      	str	r2, [sp, #0]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	21d2      	movs	r1, #210	@ 0xd2
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f000 ffc9 	bl	8001bb8 <HAL_I2C_Master_Receive>
 8000c26:	4603      	mov	r3, r0
 8000c28:	75fb      	strb	r3, [r7, #23]
    return status;
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	0800557c 	.word	0x0800557c

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ac      	sub	sp, #176	@ 0xb0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2288      	movs	r2, #136	@ 0x88
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 fdbb 	bl	800481c <memset>
  if(hi2c->Instance==I2C1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a21      	ldr	r2, [pc, #132]	@ (8000d30 <HAL_I2C_MspInit+0xb0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d13b      	bne.n	8000d28 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cb0:	2340      	movs	r3, #64	@ 0x40
 8000cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fa13 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff ff64 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|ARD_D14_Pin;
 8000ce4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000d0c:	f000 fbbc 	bl	8001488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000d16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d28:	bf00      	nop
 8000d2a:	37b0      	adds	r7, #176	@ 0xb0
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2288      	movs	r2, #136	@ 0x88
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fd5d 	bl	800481c <memset>
  if(huart->Instance==USART1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a52      	ldr	r2, [pc, #328]	@ (8000eb0 <HAL_UART_MspInit+0x174>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d13b      	bne.n	8000de4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d70:	2300      	movs	r3, #0
 8000d72:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 f9b5 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff ff06 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d88:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8c:	4a49      	ldr	r2, [pc, #292]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d92:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d94:	4b47      	ldr	r3, [pc, #284]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b44      	ldr	r3, [pc, #272]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da4:	4a43      	ldr	r2, [pc, #268]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dac:	4b41      	ldr	r3, [pc, #260]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db8:	23c0      	movs	r3, #192	@ 0xc0
 8000dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4836      	ldr	r0, [pc, #216]	@ (8000eb8 <HAL_UART_MspInit+0x17c>)
 8000dde:	f000 fb53 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de2:	e061      	b.n	8000ea8 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a34      	ldr	r2, [pc, #208]	@ (8000ebc <HAL_UART_MspInit+0x180>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d15c      	bne.n	8000ea8 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 f974 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000e06:	f7ff fec5 	bl	8000b94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0e:	4a29      	ldr	r2, [pc, #164]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e16:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a23      	ldr	r2, [pc, #140]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e46:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e52:	230c      	movs	r3, #12
 8000e54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e74:	4619      	mov	r1, r3
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7a:	f000 fb05 	bl	8001488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin;
 8000e7e:	2318      	movs	r3, #24
 8000e80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e96:	2307      	movs	r3, #7
 8000e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <HAL_UART_MspInit+0x184>)
 8000ea4:	f000 faf0 	bl	8001488 <HAL_GPIO_Init>
}
 8000ea8:	bf00      	nop
 8000eaa:	37b8      	adds	r7, #184	@ 0xb8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	48000c00 	.word	0x48000c00

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f95f 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000f26:	2020      	movs	r0, #32
 8000f28:	f000 fc70 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000f2c:	2040      	movs	r0, #64	@ 0x40
 8000f2e:	f000 fc6d 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000f32:	2080      	movs	r0, #128	@ 0x80
 8000f34:	f000 fc6a 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000f38:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f3c:	f000 fc66 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000f48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f4c:	f000 fc5e 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000f50:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f54:	f000 fc5a 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000f58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f5c:	f000 fc56 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000f60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f64:	f000 fc52 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000f68:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f6c:	f000 fc4e 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
  }

  return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fac9 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
  }
  return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100e:	605a      	str	r2, [r3, #4]
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f003 fbd4 	bl	800482c <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20018000 	.word	0x20018000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20000160 	.word	0x20000160
 80010b8:	200002b8 	.word	0x200002b8

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001118 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e4:	f7ff ffea 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	@ (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	@ (800112c <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f003 fb93 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fa37 	bl	8000584 <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001124:	0800560c 	.word	0x0800560c
  ldr r2, =_sbss
 8001128:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800112c:	200002b4 	.word	0x200002b4

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>

08001132 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f961 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f80e 	bl	8001164 <HAL_InitTick>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	e001      	b.n	8001158 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001154:	f7ff fd70 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <HAL_InitTick+0x70>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_InitTick+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f96d 	bl	800146e <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d809      	bhi.n	80011b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011a8:	f000 f937 	bl	800141a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_InitTick+0x74>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e001      	b.n	80011c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000164 	.word	0x20000164

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000164 	.word	0x20000164

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	@ (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e17f      	b.n	8001798 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8171 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 0201 	and.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b03      	cmp	r3, #3
 8001534:	d118      	bne.n	8001568 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80ac 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b5f      	ldr	r3, [pc, #380]	@ (80017b8 <HAL_GPIO_Init+0x330>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163e:	4a5e      	ldr	r2, [pc, #376]	@ (80017b8 <HAL_GPIO_Init+0x330>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6613      	str	r3, [r2, #96]	@ 0x60
 8001646:	4b5c      	ldr	r3, [pc, #368]	@ (80017b8 <HAL_GPIO_Init+0x330>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001652:	4a5a      	ldr	r2, [pc, #360]	@ (80017bc <HAL_GPIO_Init+0x334>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x242>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4f      	ldr	r2, [pc, #316]	@ (80017c0 <HAL_GPIO_Init+0x338>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x23e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4e      	ldr	r2, [pc, #312]	@ (80017c4 <HAL_GPIO_Init+0x33c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x23a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4d      	ldr	r2, [pc, #308]	@ (80017c8 <HAL_GPIO_Init+0x340>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x236>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4c      	ldr	r2, [pc, #304]	@ (80017cc <HAL_GPIO_Init+0x344>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x232>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4b      	ldr	r2, [pc, #300]	@ (80017d0 <HAL_GPIO_Init+0x348>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x22e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4a      	ldr	r2, [pc, #296]	@ (80017d4 <HAL_GPIO_Init+0x34c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x22a>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ca:	2300      	movs	r3, #0
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016dc:	4937      	ldr	r1, [pc, #220]	@ (80017bc <HAL_GPIO_Init+0x334>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170e:	4a32      	ldr	r2, [pc, #200]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001714:	4b30      	ldr	r3, [pc, #192]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173e:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001762:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178c:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <HAL_GPIO_Init+0x350>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f47f ae78 	bne.w	8001498 <HAL_GPIO_Init+0x10>
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	48000400 	.word	0x48000400
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48001000 	.word	0x48001000
 80017d0:	48001400 	.word	0x48001400
 80017d4:	48001800 	.word	0x48001800
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f806 	bl	800183c <HAL_GPIO_EXTI_Callback>
  }
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e08d      	b.n	8001980 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fa01 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2224      	movs	r2, #36	@ 0x24
 8001882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	e006      	b.n	80018da <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d108      	bne.n	80018f4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	e007      	b.n	8001904 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001902:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001916:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001926:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69d9      	ldr	r1, [r3, #28]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af02      	add	r7, sp, #8
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	461a      	mov	r2, r3
 8001994:	460b      	mov	r3, r1
 8001996:	817b      	strh	r3, [r7, #10]
 8001998:	4613      	mov	r3, r2
 800199a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	f040 80fd 	bne.w	8001ba4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x30>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0f6      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x21e>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019c0:	f7ff fc20 	bl	8001204 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2319      	movs	r3, #25
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fa0a 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0e1      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2221      	movs	r2, #33	@ 0x21
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2210      	movs	r2, #16
 80019ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2bff      	cmp	r3, #255	@ 0xff
 8001a12:	d906      	bls.n	8001a22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	22ff      	movs	r2, #255	@ 0xff
 8001a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e007      	b.n	8001a32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d024      	beq.n	8001a84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	8979      	ldrh	r1, [r7, #10]
 8001a76:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb0 <HAL_I2C_Master_Transmit+0x228>)
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fc05 	bl	800228c <I2C_TransferConfig>
 8001a82:	e066      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	4b48      	ldr	r3, [pc, #288]	@ (8001bb0 <HAL_I2C_Master_Transmit+0x228>)
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fbfa 	bl	800228c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a98:	e05b      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	6a39      	ldr	r1, [r7, #32]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f9fd 	bl	8001e9e <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e07b      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d034      	beq.n	8001b52 <HAL_I2C_Master_Transmit+0x1ca>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d130      	bne.n	8001b52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	2200      	movs	r2, #0
 8001af8:	2180      	movs	r1, #128	@ 0x80
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f976 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e04d      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2bff      	cmp	r3, #255	@ 0xff
 8001b12:	d90e      	bls.n	8001b32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	22ff      	movs	r2, #255	@ 0xff
 8001b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	2300      	movs	r3, #0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fbae 	bl	800228c <I2C_TransferConfig>
 8001b30:	e00f      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fb9d 	bl	800228c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d19e      	bne.n	8001a9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f9e3 	bl	8001f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e01a      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2220      	movs	r2, #32
 8001b76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_I2C_Master_Transmit+0x22c>)
 8001b84:	400b      	ands	r3, r1
 8001b86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	80002000 	.word	0x80002000
 8001bb4:	fe00e800 	.word	0xfe00e800

08001bb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	f040 80db 	bne.w	8001d90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_I2C_Master_Receive+0x30>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e0d4      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bf0:	f7ff fb08 	bl	8001204 <HAL_GetTick>
 8001bf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2319      	movs	r3, #25
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f8f2 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0bf      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2222      	movs	r2, #34	@ 0x22
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	893a      	ldrh	r2, [r7, #8]
 8001c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2bff      	cmp	r3, #255	@ 0xff
 8001c42:	d90e      	bls.n	8001c62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	8979      	ldrh	r1, [r7, #10]
 8001c52:	4b52      	ldr	r3, [pc, #328]	@ (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fb16 	bl	800228c <I2C_TransferConfig>
 8001c60:	e06d      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	4b49      	ldr	r3, [pc, #292]	@ (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fb05 	bl	800228c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c82:	e05c      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	6a39      	ldr	r1, [r7, #32]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f993 	bl	8001fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e07c      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d034      	beq.n	8001d3e <HAL_I2C_Master_Receive+0x186>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d130      	bne.n	8001d3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2180      	movs	r1, #128	@ 0x80
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f880 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e04d      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2bff      	cmp	r3, #255	@ 0xff
 8001cfe:	d90e      	bls.n	8001d1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	22ff      	movs	r2, #255	@ 0xff
 8001d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fab8 	bl	800228c <I2C_TransferConfig>
 8001d1c:	e00f      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 faa7 	bl	800228c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d19d      	bne.n	8001c84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f8ed 	bl	8001f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e01a      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_I2C_Master_Receive+0x1e8>)
 8001d70:	400b      	ands	r3, r1
 8001d72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	80002400 	.word	0x80002400
 8001da0:	fe00e800 	.word	0xfe00e800

08001da4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d103      	bne.n	8001dc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d007      	beq.n	8001de0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	619a      	str	r2, [r3, #24]
  }
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfc:	e03b      	b.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f962 	bl	80020cc <I2C_IsErrorOccurred>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e041      	b.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e18:	d02d      	beq.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1a:	f7ff f9f3 	bl	8001204 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d302      	bcc.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d122      	bne.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d113      	bne.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d0b4      	beq.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001eaa:	e033      	b.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f90b 	bl	80020cc <I2C_IsErrorOccurred>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e031      	b.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ec6:	d025      	beq.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec8:	f7ff f99c 	bl	8001204 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d302      	bcc.n	8001ede <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11a      	bne.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d013      	beq.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e007      	b.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d1c4      	bne.n	8001eac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f38:	e02f      	b.n	8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f8c4 	bl	80020cc <I2C_IsErrorOccurred>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e02d      	b.n	8001faa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7ff f959 	bl	8001204 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11a      	bne.n	8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d013      	beq.n	8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e007      	b.n	8001faa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d1c8      	bne.n	8001f3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001fc4:	e071      	b.n	80020aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f87e 	bl	80020cc <I2C_IsErrorOccurred>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d13b      	bne.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d138      	bne.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d105      	bne.n	8002008 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b10      	cmp	r3, #16
 8002014:	d121      	bne.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2210      	movs	r2, #16
 800201c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2204      	movs	r2, #4
 8002022:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002038:	400b      	ands	r3, r1
 800203a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	75fb      	strb	r3, [r7, #23]
 8002058:	e002      	b.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002060:	f7ff f8d0 	bl	8001204 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	429a      	cmp	r2, r3
 800206e:	d302      	bcc.n	8002076 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d119      	bne.n	80020aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d116      	bne.n	80020aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00f      	beq.n	80020aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d002      	beq.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d083      	beq.n	8001fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80020be:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	fe00e800 	.word	0xfe00e800

080020cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d068      	beq.n	80021ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2210      	movs	r2, #16
 80020fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002100:	e049      	b.n	8002196 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002108:	d045      	beq.n	8002196 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800210a:	f7ff f87b 	bl	8001204 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <I2C_IsErrorOccurred+0x54>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13a      	bne.n	8002196 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002132:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800213e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002142:	d121      	bne.n	8002188 <I2C_IsErrorOccurred+0xbc>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800214a:	d01d      	beq.n	8002188 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b20      	cmp	r3, #32
 8002150:	d01a      	beq.n	8002188 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002160:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002162:	f7ff f84f 	bl	8001204 <HAL_GetTick>
 8002166:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002168:	e00e      	b.n	8002188 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800216a:	f7ff f84b 	bl	8001204 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b19      	cmp	r3, #25
 8002176:	d907      	bls.n	8002188 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f043 0320 	orr.w	r3, r3, #32
 800217e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002186:	e006      	b.n	8002196 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b20      	cmp	r3, #32
 8002194:	d1e9      	bne.n	800216a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d003      	beq.n	80021ac <I2C_IsErrorOccurred+0xe0>
 80021a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0aa      	beq.n	8002102 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2220      	movs	r2, #32
 80021ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800220e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01c      	beq.n	800227a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff fdaf 	bl	8001da4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <I2C_IsErrorOccurred+0x1bc>)
 8002252:	400b      	ands	r3, r1
 8002254:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800227a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800227e:	4618      	mov	r0, r3
 8002280:	3728      	adds	r7, #40	@ 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	fe00e800 	.word	0xfe00e800

0800228c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	4613      	mov	r3, r2
 800229c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022a4:	7a7b      	ldrb	r3, [r7, #9]
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	0d5b      	lsrs	r3, r3, #21
 80022c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80022ca:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <I2C_TransferConfig+0x60>)
 80022cc:	430b      	orrs	r3, r1
 80022ce:	43db      	mvns	r3, r3
 80022d0:	ea02 0103 	and.w	r1, r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	03ff63ff 	.word	0x03ff63ff

080022f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	d138      	bne.n	8002378 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002310:	2302      	movs	r3, #2
 8002312:	e032      	b.n	800237a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2224      	movs	r2, #36	@ 0x24
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002342:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	d139      	bne.n	8002410 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e033      	b.n	8002412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2224      	movs	r2, #36	@ 0x24
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002424:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <HAL_PWREx_GetVoltageRange+0x18>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000

0800243c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800244a:	d130      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800244c:	4b23      	ldr	r3, [pc, #140]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002458:	d038      	beq.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800245a:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002462:	4a1e      	ldr	r2, [pc, #120]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002464:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800246a:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2232      	movs	r2, #50	@ 0x32
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0c9b      	lsrs	r3, r3, #18
 800247c:	3301      	adds	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002480:	e002      	b.n	8002488 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3b01      	subs	r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002494:	d102      	bne.n	800249c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f2      	bne.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a8:	d110      	bne.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e00f      	b.n	80024ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ba:	d007      	beq.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024bc:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024c4:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40007000 	.word	0x40007000
 80024e0:	20000000 	.word	0x20000000
 80024e4:	431bde83 	.word	0x431bde83

080024e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e3ca      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fa:	4b97      	ldr	r3, [pc, #604]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002504:	4b94      	ldr	r3, [pc, #592]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80e4 	beq.w	80026e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_RCC_OscConfig+0x4a>
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	f040 808b 	bne.w	8002640 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 8087 	bne.w	8002640 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002532:	4b89      	ldr	r3, [pc, #548]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e3a2      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b82      	ldr	r3, [pc, #520]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_RCC_OscConfig+0x7c>
 800255a:	4b7f      	ldr	r3, [pc, #508]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002562:	e005      	b.n	8002570 <HAL_RCC_OscConfig+0x88>
 8002564:	4b7c      	ldr	r3, [pc, #496]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002570:	4293      	cmp	r3, r2
 8002572:	d223      	bcs.n	80025bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fd55 	bl	8003028 <RCC_SetFlashLatencyFromMSIRange>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e383      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002588:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a72      	ldr	r2, [pc, #456]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b70      	ldr	r3, [pc, #448]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	496d      	ldr	r1, [pc, #436]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	4968      	ldr	r1, [pc, #416]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
 80025ba:	e025      	b.n	8002608 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025bc:	4b66      	ldr	r3, [pc, #408]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4960      	ldr	r1, [pc, #384]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025da:	4b5f      	ldr	r3, [pc, #380]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	495b      	ldr	r1, [pc, #364]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fd15 	bl	8003028 <RCC_SetFlashLatencyFromMSIRange>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e343      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002608:	f000 fc4a 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	4950      	ldr	r1, [pc, #320]	@ (800275c <HAL_RCC_OscConfig+0x274>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	4a4e      	ldr	r2, [pc, #312]	@ (8002760 <HAL_RCC_OscConfig+0x278>)
 8002626:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002628:	4b4e      	ldr	r3, [pc, #312]	@ (8002764 <HAL_RCC_OscConfig+0x27c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fd99 	bl	8001164 <HAL_InitTick>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d052      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	e327      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d032      	beq.n	80026ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002648:	4b43      	ldr	r3, [pc, #268]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a42      	ldr	r2, [pc, #264]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002654:	f7fe fdd6 	bl	8001204 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265c:	f7fe fdd2 	bl	8001204 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e310      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800266e:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267a:	4b37      	ldr	r3, [pc, #220]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a36      	ldr	r2, [pc, #216]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002680:	f043 0308 	orr.w	r3, r3, #8
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4931      	ldr	r1, [pc, #196]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002698:	4b2f      	ldr	r3, [pc, #188]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	492c      	ldr	r1, [pc, #176]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	e01a      	b.n	80026e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a29      	ldr	r2, [pc, #164]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ba:	f7fe fda3 	bl	8001204 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c2:	f7fe fd9f 	bl	8001204 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e2dd      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d4:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x1da>
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d074      	beq.n	80027da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x21a>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d10e      	bne.n	800271a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d10b      	bne.n	800271a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d064      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d160      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e2ba      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x24a>
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0b      	ldr	r2, [pc, #44]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e026      	b.n	8002780 <HAL_RCC_OscConfig+0x298>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800273a:	d115      	bne.n	8002768 <HAL_RCC_OscConfig+0x280>
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 8002742:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a02      	ldr	r2, [pc, #8]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e014      	b.n	8002780 <HAL_RCC_OscConfig+0x298>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	08005580 	.word	0x08005580
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004
 8002768:	4ba0      	ldr	r3, [pc, #640]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a9f      	ldr	r2, [pc, #636]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b9d      	ldr	r3, [pc, #628]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9c      	ldr	r2, [pc, #624]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fd3c 	bl	8001204 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe fd38 	bl	8001204 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e276      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a2:	4b92      	ldr	r3, [pc, #584]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x2a8>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fd28 	bl	8001204 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe fd24 	bl	8001204 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e262      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ca:	4b88      	ldr	r3, [pc, #544]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2d0>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d060      	beq.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x310>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d116      	bne.n	8002826 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	4b7c      	ldr	r3, [pc, #496]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x328>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e23f      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b76      	ldr	r3, [pc, #472]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	4973      	ldr	r1, [pc, #460]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	e040      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282e:	4b6f      	ldr	r3, [pc, #444]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6e      	ldr	r2, [pc, #440]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fce3 	bl	8001204 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fcdf 	bl	8001204 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e21d      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b65      	ldr	r3, [pc, #404]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b62      	ldr	r3, [pc, #392]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	495f      	ldr	r1, [pc, #380]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e018      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b5d      	ldr	r3, [pc, #372]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5c      	ldr	r2, [pc, #368]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 800287c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fcbf 	bl	8001204 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fcbb 	bl	8001204 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1f9      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800289c:	4b53      	ldr	r3, [pc, #332]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d03c      	beq.n	800292e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028bc:	4b4b      	ldr	r3, [pc, #300]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c2:	4a4a      	ldr	r2, [pc, #296]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fc9a 	bl	8001204 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fc96 	bl	8001204 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1d4      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e6:	4b41      	ldr	r3, [pc, #260]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ef      	beq.n	80028d4 <HAL_RCC_OscConfig+0x3ec>
 80028f4:	e01b      	b.n	800292e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	4b3d      	ldr	r3, [pc, #244]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fc:	4a3b      	ldr	r2, [pc, #236]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe fc7d 	bl	8001204 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe fc79 	bl	8001204 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e1b7      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002920:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ef      	bne.n	800290e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80a6 	beq.w	8002a88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002940:	4b2a      	ldr	r3, [pc, #168]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002956:	6593      	str	r3, [r2, #88]	@ 0x58
 8002958:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002964:	2301      	movs	r3, #1
 8002966:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002968:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <HAL_RCC_OscConfig+0x508>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002974:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_RCC_OscConfig+0x508>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <HAL_RCC_OscConfig+0x508>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002980:	f7fe fc40 	bl	8001204 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002988:	f7fe fc3c 	bl	8001204 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e17a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_RCC_OscConfig+0x508>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4d8>
 80029ae:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b4:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029be:	e029      	b.n	8002a14 <HAL_RCC_OscConfig+0x52c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d115      	bne.n	80029f4 <HAL_RCC_OscConfig+0x50c>
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	4a07      	ldr	r2, [pc, #28]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029de:	4a03      	ldr	r2, [pc, #12]	@ (80029ec <HAL_RCC_OscConfig+0x504>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e8:	e014      	b.n	8002a14 <HAL_RCC_OscConfig+0x52c>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40007000 	.word	0x40007000
 80029f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	4a9b      	ldr	r2, [pc, #620]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a04:	4b98      	ldr	r3, [pc, #608]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0a:	4a97      	ldr	r2, [pc, #604]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fbf2 	bl	8001204 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fbee 	bl	8001204 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e12a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ed      	beq.n	8002a24 <HAL_RCC_OscConfig+0x53c>
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fbdb 	bl	8001204 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fbd7 	bl	8001204 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e113      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	4b7f      	ldr	r3, [pc, #508]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ed      	bne.n	8002a52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b7a      	ldr	r3, [pc, #488]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	4a79      	ldr	r2, [pc, #484]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80fe 	beq.w	8002c8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f040 80d0 	bne.w	8002c3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a9c:	4b72      	ldr	r3, [pc, #456]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d130      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	3b01      	subs	r3, #1
 8002abc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d127      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002acc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d11f      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002adc:	2a07      	cmp	r2, #7
 8002ade:	bf14      	ite	ne
 8002ae0:	2201      	movne	r2, #1
 8002ae2:	2200      	moveq	r2, #0
 8002ae4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d113      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d06e      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d069      	beq.n	8002bec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b18:	4b53      	ldr	r3, [pc, #332]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b24:	4b50      	ldr	r3, [pc, #320]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0ad      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b34:	4b4c      	ldr	r3, [pc, #304]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4b      	ldr	r2, [pc, #300]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b40:	f7fe fb60 	bl	8001204 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fb5c 	bl	8001204 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e09a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5a:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b66:	4b40      	ldr	r3, [pc, #256]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	4b40      	ldr	r3, [pc, #256]	@ (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b80:	0212      	lsls	r2, r2, #8
 8002b82:	4311      	orrs	r1, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b88:	0852      	lsrs	r2, r2, #1
 8002b8a:	3a01      	subs	r2, #1
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0652      	lsls	r2, r2, #25
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ba0:	0912      	lsrs	r2, r2, #4
 8002ba2:	0452      	lsls	r2, r2, #17
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	4930      	ldr	r1, [pc, #192]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bac:	4b2e      	ldr	r3, [pc, #184]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bc4:	f7fe fb1e 	bl	8001204 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fb1a 	bl	8001204 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e058      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bea:	e050      	b.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e04f      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d148      	bne.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c08:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c14:	f7fe faf6 	bl	8001204 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe faf2 	bl	8001204 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e030      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x734>
 8002c3a:	e028      	b.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d023      	beq.n	8002c8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a08      	ldr	r2, [pc, #32]	@ (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fad9 	bl	8001204 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe fad5 	bl	8001204 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d905      	bls.n	8002c70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e013      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x7b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ec      	bne.n	8002c56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4905      	ldr	r1, [pc, #20]	@ (8002c98 <HAL_RCC_OscConfig+0x7b0>)
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_RCC_OscConfig+0x7b4>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e001      	b.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	feeefffc 	.word	0xfeeefffc

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0e7      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b75      	ldr	r3, [pc, #468]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d910      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b72      	ldr	r3, [pc, #456]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0207 	bic.w	r2, r3, #7
 8002cca:	4970      	ldr	r1, [pc, #448]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0cf      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	4b66      	ldr	r3, [pc, #408]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b63      	ldr	r3, [pc, #396]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4960      	ldr	r1, [pc, #384]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04c      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	4b5a      	ldr	r3, [pc, #360]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d121      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0a6      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	4b54      	ldr	r3, [pc, #336]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d115      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e09a      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d56:	4b4e      	ldr	r3, [pc, #312]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e08e      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d66:	4b4a      	ldr	r3, [pc, #296]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e086      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b46      	ldr	r3, [pc, #280]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4943      	ldr	r1, [pc, #268]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe fa3c 	bl	8001204 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fa38 	bl	8001204 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e06e      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b3a      	ldr	r3, [pc, #232]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b31      	ldr	r3, [pc, #196]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d208      	bcs.n	8002de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	492b      	ldr	r1, [pc, #172]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de6:	4b29      	ldr	r3, [pc, #164]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d210      	bcs.n	8002e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df4:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 0207 	bic.w	r2, r3, #7
 8002dfc:	4923      	ldr	r1, [pc, #140]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e04:	4b21      	ldr	r3, [pc, #132]	@ (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e036      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e22:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4918      	ldr	r1, [pc, #96]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e40:	4b13      	ldr	r3, [pc, #76]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4910      	ldr	r1, [pc, #64]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e54:	f000 f824 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	490b      	ldr	r1, [pc, #44]	@ (8002e94 <HAL_RCC_ClockConfig+0x1f4>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	4a09      	ldr	r2, [pc, #36]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f8>)
 8002e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_ClockConfig+0x1fc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe f973 	bl	8001164 <HAL_InitTick>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08005580 	.word	0x08005580
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eae:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d121      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d11e      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ed4:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ee0:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	e005      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002efc:	4a2b      	ldr	r2, [pc, #172]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d102      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f18:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	e004      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f24:	4b23      	ldr	r3, [pc, #140]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d134      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d003      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0xac>
 8002f44:	e005      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f48:	617b      	str	r3, [r7, #20]
      break;
 8002f4a:	e005      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4e:	617b      	str	r3, [r7, #20]
      break;
 8002f50:	e002      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f58:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	3301      	adds	r3, #1
 8002f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	fb03 f202 	mul.w	r2, r3, r2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	0e5b      	lsrs	r3, r3, #25
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f98:	69bb      	ldr	r3, [r7, #24]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	@ 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08005598 	.word	0x08005598
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	007a1200 	.word	0x007a1200

08002fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fd4:	f7ff fff0 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4904      	ldr	r1, [pc, #16]	@ (8002ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08005590 	.word	0x08005590

08002ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003000:	f7ff ffda 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	0adb      	lsrs	r3, r3, #11
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	4904      	ldr	r1, [pc, #16]	@ (8003024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	08005590 	.word	0x08005590

08003028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003034:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003040:	f7ff f9ee 	bl	8002420 <HAL_PWREx_GetVoltageRange>
 8003044:	6178      	str	r0, [r7, #20]
 8003046:	e014      	b.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b25      	ldr	r3, [pc, #148]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304c:	4a24      	ldr	r2, [pc, #144]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003052:	6593      	str	r3, [r2, #88]	@ 0x58
 8003054:	4b22      	ldr	r3, [pc, #136]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003060:	f7ff f9de 	bl	8002420 <HAL_PWREx_GetVoltageRange>
 8003064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003066:	4b1e      	ldr	r3, [pc, #120]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306a:	4a1d      	ldr	r2, [pc, #116]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003070:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003078:	d10b      	bne.n	8003092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b80      	cmp	r3, #128	@ 0x80
 800307e:	d919      	bls.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2ba0      	cmp	r3, #160	@ 0xa0
 8003084:	d902      	bls.n	800308c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003086:	2302      	movs	r3, #2
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	e013      	b.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800308c:	2301      	movs	r3, #1
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	e010      	b.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b80      	cmp	r3, #128	@ 0x80
 8003096:	d902      	bls.n	800309e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003098:	2303      	movs	r3, #3
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e00a      	b.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b80      	cmp	r3, #128	@ 0x80
 80030a2:	d102      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a4:	2302      	movs	r3, #2
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e004      	b.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b70      	cmp	r3, #112	@ 0x70
 80030ae:	d101      	bne.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030b0:	2301      	movs	r3, #1
 80030b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 0207 	bic.w	r2, r3, #7
 80030bc:	4909      	ldr	r1, [pc, #36]	@ (80030e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030c4:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f0:	2300      	movs	r3, #0
 80030f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f4:	2300      	movs	r3, #0
 80030f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003100:	2b00      	cmp	r3, #0
 8003102:	d041      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003108:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800310c:	d02a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800310e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003112:	d824      	bhi.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003114:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003118:	d008      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800311a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800311e:	d81e      	bhi.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003128:	d010      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800312a:	e018      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800312c:	4b86      	ldr	r3, [pc, #536]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a85      	ldr	r2, [pc, #532]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003136:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003138:	e015      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fabb 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800314a:	e00c      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3320      	adds	r3, #32
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fba6 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800315c:	e003      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	74fb      	strb	r3, [r7, #19]
      break;
 8003162:	e000      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800316c:	4b76      	ldr	r3, [pc, #472]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800317a:	4973      	ldr	r1, [pc, #460]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003182:	e001      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d041      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003198:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800319c:	d02a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800319e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031a2:	d824      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ae:	d81e      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b8:	d010      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031ba:	e018      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031bc:	4b62      	ldr	r3, [pc, #392]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a61      	ldr	r2, [pc, #388]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c8:	e015      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fa73 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031da:	e00c      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3320      	adds	r3, #32
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fb5e 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ec:	e003      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	74fb      	strb	r3, [r7, #19]
      break;
 80031f2:	e000      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031fc:	4b52      	ldr	r3, [pc, #328]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800320a:	494f      	ldr	r1, [pc, #316]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003212:	e001      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a0 	beq.w	8003366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003240:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	4a40      	ldr	r2, [pc, #256]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324a:	6593      	str	r3, [r2, #88]	@ 0x58
 800324c:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003258:	2301      	movs	r3, #1
 800325a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325c:	4b3b      	ldr	r3, [pc, #236]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3a      	ldr	r2, [pc, #232]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003268:	f7fd ffcc 	bl	8001204 <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800326e:	e009      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003270:	f7fd ffc8 	bl	8001204 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d902      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	74fb      	strb	r3, [r7, #19]
        break;
 8003282:	e005      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003284:	4b31      	ldr	r3, [pc, #196]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d15c      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003296:	4b2c      	ldr	r3, [pc, #176]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01f      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d019      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b4:	4b24      	ldr	r3, [pc, #144]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032e0:	4a19      	ldr	r2, [pc, #100]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fd ff87 	bl	8001204 <HAL_GetTick>
 80032f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f8:	e00b      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fd ff83 	bl	8001204 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d902      	bls.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	74fb      	strb	r3, [r7, #19]
            break;
 8003310:	e006      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ec      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003326:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003336:	4904      	ldr	r1, [pc, #16]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800333e:	e009      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
 8003344:	e006      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003354:	7c7b      	ldrb	r3, [r7, #17]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d105      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335a:	4b9e      	ldr	r3, [pc, #632]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	4a9d      	ldr	r2, [pc, #628]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003372:	4b98      	ldr	r3, [pc, #608]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003378:	f023 0203 	bic.w	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003380:	4994      	ldr	r1, [pc, #592]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003394:	4b8f      	ldr	r3, [pc, #572]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f023 020c 	bic.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a2:	498c      	ldr	r1, [pc, #560]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b6:	4b87      	ldr	r3, [pc, #540]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	4983      	ldr	r1, [pc, #524]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033d8:	4b7e      	ldr	r3, [pc, #504]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	497b      	ldr	r1, [pc, #492]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033fa:	4b76      	ldr	r3, [pc, #472]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003408:	4972      	ldr	r1, [pc, #456]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800341c:	4b6d      	ldr	r3, [pc, #436]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	496a      	ldr	r1, [pc, #424]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800343e:	4b65      	ldr	r3, [pc, #404]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003444:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	4961      	ldr	r1, [pc, #388]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003460:	4b5c      	ldr	r3, [pc, #368]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346e:	4959      	ldr	r1, [pc, #356]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003482:	4b54      	ldr	r3, [pc, #336]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003490:	4950      	ldr	r1, [pc, #320]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a4:	4b4b      	ldr	r3, [pc, #300]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	4948      	ldr	r1, [pc, #288]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c6:	4b43      	ldr	r3, [pc, #268]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	493f      	ldr	r1, [pc, #252]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d028      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e8:	4b3a      	ldr	r3, [pc, #232]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f6:	4937      	ldr	r1, [pc, #220]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003506:	d106      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	4b32      	ldr	r3, [pc, #200]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a31      	ldr	r2, [pc, #196]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003512:	60d3      	str	r3, [r2, #12]
 8003514:	e011      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800351e:	d10c      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	2101      	movs	r1, #1
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f8c8 	bl	80036bc <RCCEx_PLLSAI1_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d028      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003546:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003554:	491f      	ldr	r1, [pc, #124]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003564:	d106      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003566:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003570:	60d3      	str	r3, [r2, #12]
 8003572:	e011      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800357c:	d10c      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	2101      	movs	r1, #1
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f899 	bl	80036bc <RCCEx_PLLSAI1_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02b      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b2:	4908      	ldr	r1, [pc, #32]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035c2:	d109      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c4:	4b03      	ldr	r3, [pc, #12]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a02      	ldr	r2, [pc, #8]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ce:	60d3      	str	r3, [r2, #12]
 80035d0:	e014      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035e0:	d10c      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f867 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d02f      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003608:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003616:	4928      	ldr	r1, [pc, #160]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003626:	d10d      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f844 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d014      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	74bb      	strb	r3, [r7, #18]
 8003642:	e011      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800364c:	d10c      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3320      	adds	r3, #32
 8003652:	2102      	movs	r1, #2
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f925 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003674:	4b10      	ldr	r3, [pc, #64]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003682:	490d      	ldr	r1, [pc, #52]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003696:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a6:	4904      	ldr	r1, [pc, #16]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000

080036bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ca:	4b75      	ldr	r3, [pc, #468]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d018      	beq.n	8003708 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036d6:	4b72      	ldr	r3, [pc, #456]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d10d      	bne.n	8003702 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ee:	4b6c      	ldr	r3, [pc, #432]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
       ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d047      	beq.n	8003792 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	e044      	b.n	8003792 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d018      	beq.n	8003742 <RCCEx_PLLSAI1_Config+0x86>
 8003710:	2b03      	cmp	r3, #3
 8003712:	d825      	bhi.n	8003760 <RCCEx_PLLSAI1_Config+0xa4>
 8003714:	2b01      	cmp	r3, #1
 8003716:	d002      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x62>
 8003718:	2b02      	cmp	r3, #2
 800371a:	d009      	beq.n	8003730 <RCCEx_PLLSAI1_Config+0x74>
 800371c:	e020      	b.n	8003760 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800371e:	4b60      	ldr	r3, [pc, #384]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11d      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372e:	e01a      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003730:	4b5b      	ldr	r3, [pc, #364]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e013      	b.n	800376a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003742:	4b57      	ldr	r3, [pc, #348]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800374e:	4b54      	ldr	r3, [pc, #336]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800375e:	e006      	b.n	800376e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e004      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800376e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003776:	4b4a      	ldr	r3, [pc, #296]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	430b      	orrs	r3, r1
 800378c:	4944      	ldr	r1, [pc, #272]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d17d      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003798:	4b41      	ldr	r3, [pc, #260]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a40      	ldr	r2, [pc, #256]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fd fd2e 	bl	8001204 <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037aa:	e009      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ac:	f7fd fd2a 	bl	8001204 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	73fb      	strb	r3, [r7, #15]
        break;
 80037be:	e005      	b.n	80037cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c0:	4b37      	ldr	r3, [pc, #220]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ef      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d160      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d8:	4b31      	ldr	r3, [pc, #196]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6892      	ldr	r2, [r2, #8]
 80037e8:	0211      	lsls	r1, r2, #8
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68d2      	ldr	r2, [r2, #12]
 80037ee:	0912      	lsrs	r2, r2, #4
 80037f0:	0452      	lsls	r2, r2, #17
 80037f2:	430a      	orrs	r2, r1
 80037f4:	492a      	ldr	r1, [pc, #168]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	610b      	str	r3, [r1, #16]
 80037fa:	e027      	b.n	800384c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d112      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800380a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	0211      	lsls	r1, r2, #8
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6912      	ldr	r2, [r2, #16]
 8003818:	0852      	lsrs	r2, r2, #1
 800381a:	3a01      	subs	r2, #1
 800381c:	0552      	lsls	r2, r2, #21
 800381e:	430a      	orrs	r2, r1
 8003820:	491f      	ldr	r1, [pc, #124]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	610b      	str	r3, [r1, #16]
 8003826:	e011      	b.n	800384c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003828:	4b1d      	ldr	r3, [pc, #116]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003830:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6892      	ldr	r2, [r2, #8]
 8003838:	0211      	lsls	r1, r2, #8
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6952      	ldr	r2, [r2, #20]
 800383e:	0852      	lsrs	r2, r2, #1
 8003840:	3a01      	subs	r2, #1
 8003842:	0652      	lsls	r2, r2, #25
 8003844:	430a      	orrs	r2, r1
 8003846:	4916      	ldr	r1, [pc, #88]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800384c:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd fcd4 	bl	8001204 <HAL_GetTick>
 800385c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800385e:	e009      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003860:	f7fd fcd0 	bl	8001204 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d902      	bls.n	8003874 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	73fb      	strb	r3, [r7, #15]
          break;
 8003872:	e005      	b.n	8003880 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ef      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038be:	4b67      	ldr	r3, [pc, #412]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038d6:	4b61      	ldr	r3, [pc, #388]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
       ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d047      	beq.n	800397a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e044      	b.n	800397a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d018      	beq.n	800392a <RCCEx_PLLSAI2_Config+0x86>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d825      	bhi.n	8003948 <RCCEx_PLLSAI2_Config+0xa4>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d002      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x62>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d009      	beq.n	8003918 <RCCEx_PLLSAI2_Config+0x74>
 8003904:	e020      	b.n	8003948 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003906:	4b55      	ldr	r3, [pc, #340]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11d      	bne.n	800394e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003916:	e01a      	b.n	800394e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003918:	4b50      	ldr	r3, [pc, #320]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e013      	b.n	8003952 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800392a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003936:	4b49      	ldr	r3, [pc, #292]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003946:	e006      	b.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e004      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003956:	bf00      	nop
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	430b      	orrs	r3, r1
 8003974:	4939      	ldr	r1, [pc, #228]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d167      	bne.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003980:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a35      	ldr	r2, [pc, #212]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800398a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd fc3a 	bl	8001204 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003994:	f7fd fc36 	bl	8001204 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
        break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039a8:	4b2c      	ldr	r3, [pc, #176]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ef      	bne.n	8003994 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d14a      	bne.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c0:	4b26      	ldr	r3, [pc, #152]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	0211      	lsls	r1, r2, #8
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	0912      	lsrs	r2, r2, #4
 80039d8:	0452      	lsls	r2, r2, #17
 80039da:	430a      	orrs	r2, r1
 80039dc:	491f      	ldr	r1, [pc, #124]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	614b      	str	r3, [r1, #20]
 80039e2:	e011      	b.n	8003a08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
 80039f4:	0211      	lsls	r1, r2, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6912      	ldr	r2, [r2, #16]
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0652      	lsls	r2, r2, #25
 8003a00:	430a      	orrs	r2, r1
 8003a02:	4916      	ldr	r1, [pc, #88]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a08:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a13      	ldr	r2, [pc, #76]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd fbf6 	bl	8001204 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a1a:	e009      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a1c:	f7fd fbf2 	bl	8001204 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a2e:	e005      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a30:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ef      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4904      	ldr	r1, [pc, #16]	@ (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000

08003a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e040      	b.n	8003af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f95a 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	@ 0x24
 8003a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fb6a 	bl	8004180 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8af 	bl	8003c10 <UART_SetConfig>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e01b      	b.n	8003af4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fbe9 	bl	80042c4 <UART_CheckIdleState>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d177      	bne.n	8003c04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_UART_Transmit+0x24>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e070      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2221      	movs	r2, #33	@ 0x21
 8003b30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fb67 	bl	8001204 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b50:	d108      	bne.n	8003b64 <HAL_UART_Transmit+0x68>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e003      	b.n	8003b6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b6c:	e02f      	b.n	8003bce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2180      	movs	r1, #128	@ 0x80
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fc4b 	bl	8004414 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03b      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e007      	b.n	8003bbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1c9      	bne.n	8003b6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	@ 0x40
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fc15 	bl	8004414 <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e005      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b08a      	sub	sp, #40	@ 0x28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4ba4      	ldr	r3, [pc, #656]	@ (8003ed0 <UART_SetConfig+0x2c0>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a99      	ldr	r2, [pc, #612]	@ (8003ed4 <UART_SetConfig+0x2c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a90      	ldr	r2, [pc, #576]	@ (8003ed8 <UART_SetConfig+0x2c8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d126      	bne.n	8003ce8 <UART_SetConfig+0xd8>
 8003c9a:	4b90      	ldr	r3, [pc, #576]	@ (8003edc <UART_SetConfig+0x2cc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d81b      	bhi.n	8003ce0 <UART_SetConfig+0xd0>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0xa0>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003cd9 	.word	0x08003cd9
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc6:	e116      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cce:	e112      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd6:	e10e      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cde:	e10a      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce6:	e106      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7c      	ldr	r2, [pc, #496]	@ (8003ee0 <UART_SetConfig+0x2d0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d138      	bne.n	8003d64 <UART_SetConfig+0x154>
 8003cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8003edc <UART_SetConfig+0x2cc>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d82d      	bhi.n	8003d5c <UART_SetConfig+0x14c>
 8003d00:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <UART_SetConfig+0xf8>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	08003d5d 	.word	0x08003d5d
 8003d14:	08003d5d 	.word	0x08003d5d
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d5d 	.word	0x08003d5d
 8003d24:	08003d5d 	.word	0x08003d5d
 8003d28:	08003d45 	.word	0x08003d45
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d55 	.word	0x08003d55
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e0d8      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	e0d4      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d52:	e0d0      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003d54:	2308      	movs	r3, #8
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5a:	e0cc      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d62:	e0c8      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee4 <UART_SetConfig+0x2d4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d125      	bne.n	8003dba <UART_SetConfig+0x1aa>
 8003d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003edc <UART_SetConfig+0x2cc>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d78:	2b30      	cmp	r3, #48	@ 0x30
 8003d7a:	d016      	beq.n	8003daa <UART_SetConfig+0x19a>
 8003d7c:	2b30      	cmp	r3, #48	@ 0x30
 8003d7e:	d818      	bhi.n	8003db2 <UART_SetConfig+0x1a2>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d00a      	beq.n	8003d9a <UART_SetConfig+0x18a>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d814      	bhi.n	8003db2 <UART_SetConfig+0x1a2>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <UART_SetConfig+0x182>
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d008      	beq.n	8003da2 <UART_SetConfig+0x192>
 8003d90:	e00f      	b.n	8003db2 <UART_SetConfig+0x1a2>
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d98:	e0ad      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da0:	e0a9      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003da2:	2304      	movs	r3, #4
 8003da4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da8:	e0a5      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003daa:	2308      	movs	r3, #8
 8003dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db0:	e0a1      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003db2:	2310      	movs	r3, #16
 8003db4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db8:	e09d      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee8 <UART_SetConfig+0x2d8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d125      	bne.n	8003e10 <UART_SetConfig+0x200>
 8003dc4:	4b45      	ldr	r3, [pc, #276]	@ (8003edc <UART_SetConfig+0x2cc>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd0:	d016      	beq.n	8003e00 <UART_SetConfig+0x1f0>
 8003dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd4:	d818      	bhi.n	8003e08 <UART_SetConfig+0x1f8>
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d00a      	beq.n	8003df0 <UART_SetConfig+0x1e0>
 8003dda:	2b80      	cmp	r3, #128	@ 0x80
 8003ddc:	d814      	bhi.n	8003e08 <UART_SetConfig+0x1f8>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <UART_SetConfig+0x1d8>
 8003de2:	2b40      	cmp	r3, #64	@ 0x40
 8003de4:	d008      	beq.n	8003df8 <UART_SetConfig+0x1e8>
 8003de6:	e00f      	b.n	8003e08 <UART_SetConfig+0x1f8>
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dee:	e082      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003df0:	2302      	movs	r3, #2
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e07e      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e07a      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e00:	2308      	movs	r3, #8
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e06:	e076      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0e:	e072      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a35      	ldr	r2, [pc, #212]	@ (8003eec <UART_SetConfig+0x2dc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12a      	bne.n	8003e70 <UART_SetConfig+0x260>
 8003e1a:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <UART_SetConfig+0x2cc>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e28:	d01a      	beq.n	8003e60 <UART_SetConfig+0x250>
 8003e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e2e:	d81b      	bhi.n	8003e68 <UART_SetConfig+0x258>
 8003e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e34:	d00c      	beq.n	8003e50 <UART_SetConfig+0x240>
 8003e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e3a:	d815      	bhi.n	8003e68 <UART_SetConfig+0x258>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <UART_SetConfig+0x238>
 8003e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e44:	d008      	beq.n	8003e58 <UART_SetConfig+0x248>
 8003e46:	e00f      	b.n	8003e68 <UART_SetConfig+0x258>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4e:	e052      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e50:	2302      	movs	r3, #2
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e04e      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e04a      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e60:	2308      	movs	r3, #8
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e046      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e042      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <UART_SetConfig+0x2c4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d13a      	bne.n	8003ef0 <UART_SetConfig+0x2e0>
 8003e7a:	4b18      	ldr	r3, [pc, #96]	@ (8003edc <UART_SetConfig+0x2cc>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e88:	d01a      	beq.n	8003ec0 <UART_SetConfig+0x2b0>
 8003e8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e8e:	d81b      	bhi.n	8003ec8 <UART_SetConfig+0x2b8>
 8003e90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e94:	d00c      	beq.n	8003eb0 <UART_SetConfig+0x2a0>
 8003e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9a:	d815      	bhi.n	8003ec8 <UART_SetConfig+0x2b8>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <UART_SetConfig+0x298>
 8003ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea4:	d008      	beq.n	8003eb8 <UART_SetConfig+0x2a8>
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x2b8>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eae:	e022      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb6:	e01e      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	e01a      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec6:	e016      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ece:	e012      	b.n	8003ef6 <UART_SetConfig+0x2e6>
 8003ed0:	efff69f3 	.word	0xefff69f3
 8003ed4:	40008000 	.word	0x40008000
 8003ed8:	40013800 	.word	0x40013800
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40004400 	.word	0x40004400
 8003ee4:	40004800 	.word	0x40004800
 8003ee8:	40004c00 	.word	0x40004c00
 8003eec:	40005000 	.word	0x40005000
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a9f      	ldr	r2, [pc, #636]	@ (8004178 <UART_SetConfig+0x568>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d17a      	bne.n	8003ff6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d824      	bhi.n	8003f52 <UART_SetConfig+0x342>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <UART_SetConfig+0x300>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f53 	.word	0x08003f53
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f53 	.word	0x08003f53
 8003f20:	08003f43 	.word	0x08003f43
 8003f24:	08003f53 	.word	0x08003f53
 8003f28:	08003f53 	.word	0x08003f53
 8003f2c:	08003f53 	.word	0x08003f53
 8003f30:	08003f4b 	.word	0x08003f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7ff f84c 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8003f38:	61f8      	str	r0, [r7, #28]
        break;
 8003f3a:	e010      	b.n	8003f5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800417c <UART_SetConfig+0x56c>)
 8003f3e:	61fb      	str	r3, [r7, #28]
        break;
 8003f40:	e00d      	b.n	8003f5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f42:	f7fe ffad 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8003f46:	61f8      	str	r0, [r7, #28]
        break;
 8003f48:	e009      	b.n	8003f5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4e:	61fb      	str	r3, [r7, #28]
        break;
 8003f50:	e005      	b.n	8003f5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80fb 	beq.w	800415c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d305      	bcc.n	8003f82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d903      	bls.n	8003f8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f88:	e0e8      	b.n	800415c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	461c      	mov	r4, r3
 8003f90:	4615      	mov	r5, r2
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	022b      	lsls	r3, r5, #8
 8003f9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fa0:	0222      	lsls	r2, r4, #8
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	6849      	ldr	r1, [r1, #4]
 8003fa6:	0849      	lsrs	r1, r1, #1
 8003fa8:	2000      	movs	r0, #0
 8003faa:	4688      	mov	r8, r1
 8003fac:	4681      	mov	r9, r0
 8003fae:	eb12 0a08 	adds.w	sl, r2, r8
 8003fb2:	eb43 0b09 	adc.w	fp, r3, r9
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	f7fc f952 	bl	8000270 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fda:	d308      	bcc.n	8003fee <UART_SetConfig+0x3de>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fe2:	d204      	bcs.n	8003fee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	e0b6      	b.n	800415c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ff4:	e0b2      	b.n	800415c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffe:	d15e      	bne.n	80040be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004000:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004004:	2b08      	cmp	r3, #8
 8004006:	d828      	bhi.n	800405a <UART_SetConfig+0x44a>
 8004008:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <UART_SetConfig+0x400>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	0800405b 	.word	0x0800405b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800405b 	.word	0x0800405b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7fe ffcc 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8004038:	61f8      	str	r0, [r7, #28]
        break;
 800403a:	e014      	b.n	8004066 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7fe ffde 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 8004040:	61f8      	str	r0, [r7, #28]
        break;
 8004042:	e010      	b.n	8004066 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b4d      	ldr	r3, [pc, #308]	@ (800417c <UART_SetConfig+0x56c>)
 8004046:	61fb      	str	r3, [r7, #28]
        break;
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe ff29 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800404e:	61f8      	str	r0, [r7, #28]
        break;
 8004050:	e009      	b.n	8004066 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004056:	61fb      	str	r3, [r7, #28]
        break;
 8004058:	e005      	b.n	8004066 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d077      	beq.n	800415c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	005a      	lsls	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	d916      	bls.n	80040b6 <UART_SetConfig+0x4a6>
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408e:	d212      	bcs.n	80040b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f023 030f 	bic.w	r3, r3, #15
 8004098:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	8afb      	ldrh	r3, [r7, #22]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	8afa      	ldrh	r2, [r7, #22]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e052      	b.n	800415c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040bc:	e04e      	b.n	800415c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d827      	bhi.n	8004116 <UART_SetConfig+0x506>
 80040c6:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <UART_SetConfig+0x4bc>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004117 	.word	0x08004117
 80040dc:	08004107 	.word	0x08004107
 80040e0:	08004117 	.word	0x08004117
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004117 	.word	0x08004117
 80040ec:	0800410f 	.word	0x0800410f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7fe ff6e 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 80040f4:	61f8      	str	r0, [r7, #28]
        break;
 80040f6:	e014      	b.n	8004122 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7fe ff80 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 80040fc:	61f8      	str	r0, [r7, #28]
        break;
 80040fe:	e010      	b.n	8004122 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004100:	4b1e      	ldr	r3, [pc, #120]	@ (800417c <UART_SetConfig+0x56c>)
 8004102:	61fb      	str	r3, [r7, #28]
        break;
 8004104:	e00d      	b.n	8004122 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004106:	f7fe fecb 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800410a:	61f8      	str	r0, [r7, #28]
        break;
 800410c:	e009      	b.n	8004122 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004112:	61fb      	str	r3, [r7, #28]
        break;
 8004114:	e005      	b.n	8004122 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004120:	bf00      	nop
    }

    if (pclk != 0U)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d019      	beq.n	800415c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	085a      	lsrs	r2, r3, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	441a      	add	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d909      	bls.n	8004156 <UART_SetConfig+0x546>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d205      	bcs.n	8004156 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
 8004154:	e002      	b.n	800415c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004168:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	@ 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	40008000 	.word	0x40008000
 800417c:	00f42400 	.word	0x00f42400

08004180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01a      	beq.n	8004296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800427e:	d10a      	bne.n	8004296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b098      	sub	sp, #96	@ 0x60
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042d4:	f7fc ff96 	bl	8001204 <HAL_GetTick>
 80042d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d12e      	bne.n	8004346 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f0:	2200      	movs	r2, #0
 80042f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f88c 	bl	8004414 <UART_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d021      	beq.n	8004346 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004316:	653b      	str	r3, [r7, #80]	@ 0x50
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
 8004322:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800432e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e6      	bne.n	8004302 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e062      	b.n	800440c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d149      	bne.n	80043e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004354:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435c:	2200      	movs	r2, #0
 800435e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f856 	bl	8004414 <UART_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d03c      	beq.n	80043e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	623b      	str	r3, [r7, #32]
   return(result);
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800438c:	633b      	str	r3, [r7, #48]	@ 0x30
 800438e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e6      	bne.n	800436e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043c0:	61fa      	str	r2, [r7, #28]
 80043c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	617b      	str	r3, [r7, #20]
   return(result);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e011      	b.n	800440c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3758      	adds	r7, #88	@ 0x58
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004424:	e04f      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800442c:	d04b      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fc fee9 	bl	8001204 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <UART_WaitOnFlagUntilTimeout+0x30>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e04e      	b.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d037      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b80      	cmp	r3, #128	@ 0x80
 800445a:	d034      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	d031      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d110      	bne.n	8004492 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2208      	movs	r2, #8
 8004476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f838 	bl	80044ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2208      	movs	r2, #8
 8004482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e029      	b.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044a0:	d111      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f81e 	bl	80044ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e00f      	b.n	80044e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	bf0c      	ite	eq
 80044d6:	2301      	moveq	r3, #1
 80044d8:	2300      	movne	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d0a0      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b095      	sub	sp, #84	@ 0x54
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800450a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004514:	643b      	str	r3, [r7, #64]	@ 0x40
 8004516:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800451a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e6      	bne.n	80044f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	61fb      	str	r3, [r7, #28]
   return(result);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3308      	adds	r3, #8
 8004546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004548:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800454e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e5      	bne.n	8004528 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004560:	2b01      	cmp	r3, #1
 8004562:	d118      	bne.n	8004596 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	60bb      	str	r3, [r7, #8]
   return(result);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f023 0310 	bic.w	r3, r3, #16
 8004578:	647b      	str	r3, [r7, #68]	@ 0x44
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	613b      	str	r3, [r7, #16]
   return(result);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e6      	bne.n	8004564 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045aa:	bf00      	nop
 80045ac:	3754      	adds	r7, #84	@ 0x54
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <std>:
 80045b8:	2300      	movs	r3, #0
 80045ba:	b510      	push	{r4, lr}
 80045bc:	4604      	mov	r4, r0
 80045be:	e9c0 3300 	strd	r3, r3, [r0]
 80045c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045c6:	6083      	str	r3, [r0, #8]
 80045c8:	8181      	strh	r1, [r0, #12]
 80045ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80045cc:	81c2      	strh	r2, [r0, #14]
 80045ce:	6183      	str	r3, [r0, #24]
 80045d0:	4619      	mov	r1, r3
 80045d2:	2208      	movs	r2, #8
 80045d4:	305c      	adds	r0, #92	@ 0x5c
 80045d6:	f000 f921 	bl	800481c <memset>
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <std+0x58>)
 80045dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <std+0x5c>)
 80045e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004618 <std+0x60>)
 80045e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045e6:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <std+0x64>)
 80045e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <std+0x68>)
 80045ec:	6224      	str	r4, [r4, #32]
 80045ee:	429c      	cmp	r4, r3
 80045f0:	d006      	beq.n	8004600 <std+0x48>
 80045f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045f6:	4294      	cmp	r4, r2
 80045f8:	d002      	beq.n	8004600 <std+0x48>
 80045fa:	33d0      	adds	r3, #208	@ 0xd0
 80045fc:	429c      	cmp	r4, r3
 80045fe:	d105      	bne.n	800460c <std+0x54>
 8004600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004608:	f000 b93a 	b.w	8004880 <__retarget_lock_init_recursive>
 800460c:	bd10      	pop	{r4, pc}
 800460e:	bf00      	nop
 8004610:	080050d9 	.word	0x080050d9
 8004614:	080050fb 	.word	0x080050fb
 8004618:	08005133 	.word	0x08005133
 800461c:	08005157 	.word	0x08005157
 8004620:	20000168 	.word	0x20000168

08004624 <stdio_exit_handler>:
 8004624:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <stdio_exit_handler+0xc>)
 8004626:	4903      	ldr	r1, [pc, #12]	@ (8004634 <stdio_exit_handler+0x10>)
 8004628:	4803      	ldr	r0, [pc, #12]	@ (8004638 <stdio_exit_handler+0x14>)
 800462a:	f000 b869 	b.w	8004700 <_fwalk_sglue>
 800462e:	bf00      	nop
 8004630:	2000000c 	.word	0x2000000c
 8004634:	08005071 	.word	0x08005071
 8004638:	2000001c 	.word	0x2000001c

0800463c <cleanup_stdio>:
 800463c:	6841      	ldr	r1, [r0, #4]
 800463e:	4b0c      	ldr	r3, [pc, #48]	@ (8004670 <cleanup_stdio+0x34>)
 8004640:	4299      	cmp	r1, r3
 8004642:	b510      	push	{r4, lr}
 8004644:	4604      	mov	r4, r0
 8004646:	d001      	beq.n	800464c <cleanup_stdio+0x10>
 8004648:	f000 fd12 	bl	8005070 <_fflush_r>
 800464c:	68a1      	ldr	r1, [r4, #8]
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <cleanup_stdio+0x38>)
 8004650:	4299      	cmp	r1, r3
 8004652:	d002      	beq.n	800465a <cleanup_stdio+0x1e>
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fd0b 	bl	8005070 <_fflush_r>
 800465a:	68e1      	ldr	r1, [r4, #12]
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <cleanup_stdio+0x3c>)
 800465e:	4299      	cmp	r1, r3
 8004660:	d004      	beq.n	800466c <cleanup_stdio+0x30>
 8004662:	4620      	mov	r0, r4
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004668:	f000 bd02 	b.w	8005070 <_fflush_r>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	20000168 	.word	0x20000168
 8004674:	200001d0 	.word	0x200001d0
 8004678:	20000238 	.word	0x20000238

0800467c <global_stdio_init.part.0>:
 800467c:	b510      	push	{r4, lr}
 800467e:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <global_stdio_init.part.0+0x30>)
 8004680:	4c0b      	ldr	r4, [pc, #44]	@ (80046b0 <global_stdio_init.part.0+0x34>)
 8004682:	4a0c      	ldr	r2, [pc, #48]	@ (80046b4 <global_stdio_init.part.0+0x38>)
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	4620      	mov	r0, r4
 8004688:	2200      	movs	r2, #0
 800468a:	2104      	movs	r1, #4
 800468c:	f7ff ff94 	bl	80045b8 <std>
 8004690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004694:	2201      	movs	r2, #1
 8004696:	2109      	movs	r1, #9
 8004698:	f7ff ff8e 	bl	80045b8 <std>
 800469c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046a0:	2202      	movs	r2, #2
 80046a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a6:	2112      	movs	r1, #18
 80046a8:	f7ff bf86 	b.w	80045b8 <std>
 80046ac:	200002a0 	.word	0x200002a0
 80046b0:	20000168 	.word	0x20000168
 80046b4:	08004625 	.word	0x08004625

080046b8 <__sfp_lock_acquire>:
 80046b8:	4801      	ldr	r0, [pc, #4]	@ (80046c0 <__sfp_lock_acquire+0x8>)
 80046ba:	f000 b8e2 	b.w	8004882 <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	200002a5 	.word	0x200002a5

080046c4 <__sfp_lock_release>:
 80046c4:	4801      	ldr	r0, [pc, #4]	@ (80046cc <__sfp_lock_release+0x8>)
 80046c6:	f000 b8dd 	b.w	8004884 <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	200002a5 	.word	0x200002a5

080046d0 <__sinit>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	f7ff fff0 	bl	80046b8 <__sfp_lock_acquire>
 80046d8:	6a23      	ldr	r3, [r4, #32]
 80046da:	b11b      	cbz	r3, 80046e4 <__sinit+0x14>
 80046dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e0:	f7ff bff0 	b.w	80046c4 <__sfp_lock_release>
 80046e4:	4b04      	ldr	r3, [pc, #16]	@ (80046f8 <__sinit+0x28>)
 80046e6:	6223      	str	r3, [r4, #32]
 80046e8:	4b04      	ldr	r3, [pc, #16]	@ (80046fc <__sinit+0x2c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f5      	bne.n	80046dc <__sinit+0xc>
 80046f0:	f7ff ffc4 	bl	800467c <global_stdio_init.part.0>
 80046f4:	e7f2      	b.n	80046dc <__sinit+0xc>
 80046f6:	bf00      	nop
 80046f8:	0800463d 	.word	0x0800463d
 80046fc:	200002a0 	.word	0x200002a0

08004700 <_fwalk_sglue>:
 8004700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004704:	4607      	mov	r7, r0
 8004706:	4688      	mov	r8, r1
 8004708:	4614      	mov	r4, r2
 800470a:	2600      	movs	r6, #0
 800470c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004710:	f1b9 0901 	subs.w	r9, r9, #1
 8004714:	d505      	bpl.n	8004722 <_fwalk_sglue+0x22>
 8004716:	6824      	ldr	r4, [r4, #0]
 8004718:	2c00      	cmp	r4, #0
 800471a:	d1f7      	bne.n	800470c <_fwalk_sglue+0xc>
 800471c:	4630      	mov	r0, r6
 800471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004722:	89ab      	ldrh	r3, [r5, #12]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d907      	bls.n	8004738 <_fwalk_sglue+0x38>
 8004728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800472c:	3301      	adds	r3, #1
 800472e:	d003      	beq.n	8004738 <_fwalk_sglue+0x38>
 8004730:	4629      	mov	r1, r5
 8004732:	4638      	mov	r0, r7
 8004734:	47c0      	blx	r8
 8004736:	4306      	orrs	r6, r0
 8004738:	3568      	adds	r5, #104	@ 0x68
 800473a:	e7e9      	b.n	8004710 <_fwalk_sglue+0x10>

0800473c <iprintf>:
 800473c:	b40f      	push	{r0, r1, r2, r3}
 800473e:	b507      	push	{r0, r1, r2, lr}
 8004740:	4906      	ldr	r1, [pc, #24]	@ (800475c <iprintf+0x20>)
 8004742:	ab04      	add	r3, sp, #16
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	f853 2b04 	ldr.w	r2, [r3], #4
 800474a:	6881      	ldr	r1, [r0, #8]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	f000 f8c3 	bl	80048d8 <_vfiprintf_r>
 8004752:	b003      	add	sp, #12
 8004754:	f85d eb04 	ldr.w	lr, [sp], #4
 8004758:	b004      	add	sp, #16
 800475a:	4770      	bx	lr
 800475c:	20000018 	.word	0x20000018

08004760 <_puts_r>:
 8004760:	6a03      	ldr	r3, [r0, #32]
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	6884      	ldr	r4, [r0, #8]
 8004766:	4605      	mov	r5, r0
 8004768:	460e      	mov	r6, r1
 800476a:	b90b      	cbnz	r3, 8004770 <_puts_r+0x10>
 800476c:	f7ff ffb0 	bl	80046d0 <__sinit>
 8004770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004772:	07db      	lsls	r3, r3, #31
 8004774:	d405      	bmi.n	8004782 <_puts_r+0x22>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	0598      	lsls	r0, r3, #22
 800477a:	d402      	bmi.n	8004782 <_puts_r+0x22>
 800477c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800477e:	f000 f880 	bl	8004882 <__retarget_lock_acquire_recursive>
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	0719      	lsls	r1, r3, #28
 8004786:	d502      	bpl.n	800478e <_puts_r+0x2e>
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d135      	bne.n	80047fa <_puts_r+0x9a>
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 fd23 	bl	80051dc <__swsetup_r>
 8004796:	b380      	cbz	r0, 80047fa <_puts_r+0x9a>
 8004798:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800479c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800479e:	07da      	lsls	r2, r3, #31
 80047a0:	d405      	bmi.n	80047ae <_puts_r+0x4e>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	059b      	lsls	r3, r3, #22
 80047a6:	d402      	bmi.n	80047ae <_puts_r+0x4e>
 80047a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047aa:	f000 f86b 	bl	8004884 <__retarget_lock_release_recursive>
 80047ae:	4628      	mov	r0, r5
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	da04      	bge.n	80047c0 <_puts_r+0x60>
 80047b6:	69a2      	ldr	r2, [r4, #24]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	dc17      	bgt.n	80047ec <_puts_r+0x8c>
 80047bc:	290a      	cmp	r1, #10
 80047be:	d015      	beq.n	80047ec <_puts_r+0x8c>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	6022      	str	r2, [r4, #0]
 80047c6:	7019      	strb	r1, [r3, #0]
 80047c8:	68a3      	ldr	r3, [r4, #8]
 80047ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047ce:	3b01      	subs	r3, #1
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	2900      	cmp	r1, #0
 80047d4:	d1ed      	bne.n	80047b2 <_puts_r+0x52>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	da11      	bge.n	80047fe <_puts_r+0x9e>
 80047da:	4622      	mov	r2, r4
 80047dc:	210a      	movs	r1, #10
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 fcbd 	bl	800515e <__swbuf_r>
 80047e4:	3001      	adds	r0, #1
 80047e6:	d0d7      	beq.n	8004798 <_puts_r+0x38>
 80047e8:	250a      	movs	r5, #10
 80047ea:	e7d7      	b.n	800479c <_puts_r+0x3c>
 80047ec:	4622      	mov	r2, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 fcb5 	bl	800515e <__swbuf_r>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d1e7      	bne.n	80047c8 <_puts_r+0x68>
 80047f8:	e7ce      	b.n	8004798 <_puts_r+0x38>
 80047fa:	3e01      	subs	r6, #1
 80047fc:	e7e4      	b.n	80047c8 <_puts_r+0x68>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	6022      	str	r2, [r4, #0]
 8004804:	220a      	movs	r2, #10
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e7ee      	b.n	80047e8 <_puts_r+0x88>
	...

0800480c <puts>:
 800480c:	4b02      	ldr	r3, [pc, #8]	@ (8004818 <puts+0xc>)
 800480e:	4601      	mov	r1, r0
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	f7ff bfa5 	b.w	8004760 <_puts_r>
 8004816:	bf00      	nop
 8004818:	20000018 	.word	0x20000018

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <__errno>:
 800482c:	4b01      	ldr	r3, [pc, #4]	@ (8004834 <__errno+0x8>)
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000018 	.word	0x20000018

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4d0d      	ldr	r5, [pc, #52]	@ (8004870 <__libc_init_array+0x38>)
 800483c:	4c0d      	ldr	r4, [pc, #52]	@ (8004874 <__libc_init_array+0x3c>)
 800483e:	1b64      	subs	r4, r4, r5
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	2600      	movs	r6, #0
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	4d0b      	ldr	r5, [pc, #44]	@ (8004878 <__libc_init_array+0x40>)
 800484a:	4c0c      	ldr	r4, [pc, #48]	@ (800487c <__libc_init_array+0x44>)
 800484c:	f000 fe40 	bl	80054d0 <_init>
 8004850:	1b64      	subs	r4, r4, r5
 8004852:	10a4      	asrs	r4, r4, #2
 8004854:	2600      	movs	r6, #0
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f855 3b04 	ldr.w	r3, [r5], #4
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	08005604 	.word	0x08005604
 8004874:	08005604 	.word	0x08005604
 8004878:	08005604 	.word	0x08005604
 800487c:	08005608 	.word	0x08005608

08004880 <__retarget_lock_init_recursive>:
 8004880:	4770      	bx	lr

08004882 <__retarget_lock_acquire_recursive>:
 8004882:	4770      	bx	lr

08004884 <__retarget_lock_release_recursive>:
 8004884:	4770      	bx	lr

08004886 <__sfputc_r>:
 8004886:	6893      	ldr	r3, [r2, #8]
 8004888:	3b01      	subs	r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	b410      	push	{r4}
 800488e:	6093      	str	r3, [r2, #8]
 8004890:	da08      	bge.n	80048a4 <__sfputc_r+0x1e>
 8004892:	6994      	ldr	r4, [r2, #24]
 8004894:	42a3      	cmp	r3, r4
 8004896:	db01      	blt.n	800489c <__sfputc_r+0x16>
 8004898:	290a      	cmp	r1, #10
 800489a:	d103      	bne.n	80048a4 <__sfputc_r+0x1e>
 800489c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048a0:	f000 bc5d 	b.w	800515e <__swbuf_r>
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	1c58      	adds	r0, r3, #1
 80048a8:	6010      	str	r0, [r2, #0]
 80048aa:	7019      	strb	r1, [r3, #0]
 80048ac:	4608      	mov	r0, r1
 80048ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <__sfputs_r>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	4606      	mov	r6, r0
 80048b8:	460f      	mov	r7, r1
 80048ba:	4614      	mov	r4, r2
 80048bc:	18d5      	adds	r5, r2, r3
 80048be:	42ac      	cmp	r4, r5
 80048c0:	d101      	bne.n	80048c6 <__sfputs_r+0x12>
 80048c2:	2000      	movs	r0, #0
 80048c4:	e007      	b.n	80048d6 <__sfputs_r+0x22>
 80048c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ca:	463a      	mov	r2, r7
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7ff ffda 	bl	8004886 <__sfputc_r>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d1f3      	bne.n	80048be <__sfputs_r+0xa>
 80048d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048d8 <_vfiprintf_r>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	460d      	mov	r5, r1
 80048de:	b09d      	sub	sp, #116	@ 0x74
 80048e0:	4614      	mov	r4, r2
 80048e2:	4698      	mov	r8, r3
 80048e4:	4606      	mov	r6, r0
 80048e6:	b118      	cbz	r0, 80048f0 <_vfiprintf_r+0x18>
 80048e8:	6a03      	ldr	r3, [r0, #32]
 80048ea:	b90b      	cbnz	r3, 80048f0 <_vfiprintf_r+0x18>
 80048ec:	f7ff fef0 	bl	80046d0 <__sinit>
 80048f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048f2:	07d9      	lsls	r1, r3, #31
 80048f4:	d405      	bmi.n	8004902 <_vfiprintf_r+0x2a>
 80048f6:	89ab      	ldrh	r3, [r5, #12]
 80048f8:	059a      	lsls	r2, r3, #22
 80048fa:	d402      	bmi.n	8004902 <_vfiprintf_r+0x2a>
 80048fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048fe:	f7ff ffc0 	bl	8004882 <__retarget_lock_acquire_recursive>
 8004902:	89ab      	ldrh	r3, [r5, #12]
 8004904:	071b      	lsls	r3, r3, #28
 8004906:	d501      	bpl.n	800490c <_vfiprintf_r+0x34>
 8004908:	692b      	ldr	r3, [r5, #16]
 800490a:	b99b      	cbnz	r3, 8004934 <_vfiprintf_r+0x5c>
 800490c:	4629      	mov	r1, r5
 800490e:	4630      	mov	r0, r6
 8004910:	f000 fc64 	bl	80051dc <__swsetup_r>
 8004914:	b170      	cbz	r0, 8004934 <_vfiprintf_r+0x5c>
 8004916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004918:	07dc      	lsls	r4, r3, #31
 800491a:	d504      	bpl.n	8004926 <_vfiprintf_r+0x4e>
 800491c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004920:	b01d      	add	sp, #116	@ 0x74
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	89ab      	ldrh	r3, [r5, #12]
 8004928:	0598      	lsls	r0, r3, #22
 800492a:	d4f7      	bmi.n	800491c <_vfiprintf_r+0x44>
 800492c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800492e:	f7ff ffa9 	bl	8004884 <__retarget_lock_release_recursive>
 8004932:	e7f3      	b.n	800491c <_vfiprintf_r+0x44>
 8004934:	2300      	movs	r3, #0
 8004936:	9309      	str	r3, [sp, #36]	@ 0x24
 8004938:	2320      	movs	r3, #32
 800493a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800493e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004942:	2330      	movs	r3, #48	@ 0x30
 8004944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004af4 <_vfiprintf_r+0x21c>
 8004948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800494c:	f04f 0901 	mov.w	r9, #1
 8004950:	4623      	mov	r3, r4
 8004952:	469a      	mov	sl, r3
 8004954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004958:	b10a      	cbz	r2, 800495e <_vfiprintf_r+0x86>
 800495a:	2a25      	cmp	r2, #37	@ 0x25
 800495c:	d1f9      	bne.n	8004952 <_vfiprintf_r+0x7a>
 800495e:	ebba 0b04 	subs.w	fp, sl, r4
 8004962:	d00b      	beq.n	800497c <_vfiprintf_r+0xa4>
 8004964:	465b      	mov	r3, fp
 8004966:	4622      	mov	r2, r4
 8004968:	4629      	mov	r1, r5
 800496a:	4630      	mov	r0, r6
 800496c:	f7ff ffa2 	bl	80048b4 <__sfputs_r>
 8004970:	3001      	adds	r0, #1
 8004972:	f000 80a7 	beq.w	8004ac4 <_vfiprintf_r+0x1ec>
 8004976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004978:	445a      	add	r2, fp
 800497a:	9209      	str	r2, [sp, #36]	@ 0x24
 800497c:	f89a 3000 	ldrb.w	r3, [sl]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 809f 	beq.w	8004ac4 <_vfiprintf_r+0x1ec>
 8004986:	2300      	movs	r3, #0
 8004988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800498c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004990:	f10a 0a01 	add.w	sl, sl, #1
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	9307      	str	r3, [sp, #28]
 8004998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800499c:	931a      	str	r3, [sp, #104]	@ 0x68
 800499e:	4654      	mov	r4, sl
 80049a0:	2205      	movs	r2, #5
 80049a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a6:	4853      	ldr	r0, [pc, #332]	@ (8004af4 <_vfiprintf_r+0x21c>)
 80049a8:	f7fb fc12 	bl	80001d0 <memchr>
 80049ac:	9a04      	ldr	r2, [sp, #16]
 80049ae:	b9d8      	cbnz	r0, 80049e8 <_vfiprintf_r+0x110>
 80049b0:	06d1      	lsls	r1, r2, #27
 80049b2:	bf44      	itt	mi
 80049b4:	2320      	movmi	r3, #32
 80049b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ba:	0713      	lsls	r3, r2, #28
 80049bc:	bf44      	itt	mi
 80049be:	232b      	movmi	r3, #43	@ 0x2b
 80049c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049c4:	f89a 3000 	ldrb.w	r3, [sl]
 80049c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ca:	d015      	beq.n	80049f8 <_vfiprintf_r+0x120>
 80049cc:	9a07      	ldr	r2, [sp, #28]
 80049ce:	4654      	mov	r4, sl
 80049d0:	2000      	movs	r0, #0
 80049d2:	f04f 0c0a 	mov.w	ip, #10
 80049d6:	4621      	mov	r1, r4
 80049d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049dc:	3b30      	subs	r3, #48	@ 0x30
 80049de:	2b09      	cmp	r3, #9
 80049e0:	d94b      	bls.n	8004a7a <_vfiprintf_r+0x1a2>
 80049e2:	b1b0      	cbz	r0, 8004a12 <_vfiprintf_r+0x13a>
 80049e4:	9207      	str	r2, [sp, #28]
 80049e6:	e014      	b.n	8004a12 <_vfiprintf_r+0x13a>
 80049e8:	eba0 0308 	sub.w	r3, r0, r8
 80049ec:	fa09 f303 	lsl.w	r3, r9, r3
 80049f0:	4313      	orrs	r3, r2
 80049f2:	9304      	str	r3, [sp, #16]
 80049f4:	46a2      	mov	sl, r4
 80049f6:	e7d2      	b.n	800499e <_vfiprintf_r+0xc6>
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	1d19      	adds	r1, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	9103      	str	r1, [sp, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bfbb      	ittet	lt
 8004a04:	425b      	neglt	r3, r3
 8004a06:	f042 0202 	orrlt.w	r2, r2, #2
 8004a0a:	9307      	strge	r3, [sp, #28]
 8004a0c:	9307      	strlt	r3, [sp, #28]
 8004a0e:	bfb8      	it	lt
 8004a10:	9204      	strlt	r2, [sp, #16]
 8004a12:	7823      	ldrb	r3, [r4, #0]
 8004a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a16:	d10a      	bne.n	8004a2e <_vfiprintf_r+0x156>
 8004a18:	7863      	ldrb	r3, [r4, #1]
 8004a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a1c:	d132      	bne.n	8004a84 <_vfiprintf_r+0x1ac>
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	1d1a      	adds	r2, r3, #4
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	9203      	str	r2, [sp, #12]
 8004a26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a2a:	3402      	adds	r4, #2
 8004a2c:	9305      	str	r3, [sp, #20]
 8004a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b04 <_vfiprintf_r+0x22c>
 8004a32:	7821      	ldrb	r1, [r4, #0]
 8004a34:	2203      	movs	r2, #3
 8004a36:	4650      	mov	r0, sl
 8004a38:	f7fb fbca 	bl	80001d0 <memchr>
 8004a3c:	b138      	cbz	r0, 8004a4e <_vfiprintf_r+0x176>
 8004a3e:	9b04      	ldr	r3, [sp, #16]
 8004a40:	eba0 000a 	sub.w	r0, r0, sl
 8004a44:	2240      	movs	r2, #64	@ 0x40
 8004a46:	4082      	lsls	r2, r0
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a52:	4829      	ldr	r0, [pc, #164]	@ (8004af8 <_vfiprintf_r+0x220>)
 8004a54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a58:	2206      	movs	r2, #6
 8004a5a:	f7fb fbb9 	bl	80001d0 <memchr>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d03f      	beq.n	8004ae2 <_vfiprintf_r+0x20a>
 8004a62:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <_vfiprintf_r+0x224>)
 8004a64:	bb1b      	cbnz	r3, 8004aae <_vfiprintf_r+0x1d6>
 8004a66:	9b03      	ldr	r3, [sp, #12]
 8004a68:	3307      	adds	r3, #7
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	3308      	adds	r3, #8
 8004a70:	9303      	str	r3, [sp, #12]
 8004a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a74:	443b      	add	r3, r7
 8004a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a78:	e76a      	b.n	8004950 <_vfiprintf_r+0x78>
 8004a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a7e:	460c      	mov	r4, r1
 8004a80:	2001      	movs	r0, #1
 8004a82:	e7a8      	b.n	80049d6 <_vfiprintf_r+0xfe>
 8004a84:	2300      	movs	r3, #0
 8004a86:	3401      	adds	r4, #1
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f04f 0c0a 	mov.w	ip, #10
 8004a90:	4620      	mov	r0, r4
 8004a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a96:	3a30      	subs	r2, #48	@ 0x30
 8004a98:	2a09      	cmp	r2, #9
 8004a9a:	d903      	bls.n	8004aa4 <_vfiprintf_r+0x1cc>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0c6      	beq.n	8004a2e <_vfiprintf_r+0x156>
 8004aa0:	9105      	str	r1, [sp, #20]
 8004aa2:	e7c4      	b.n	8004a2e <_vfiprintf_r+0x156>
 8004aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e7f0      	b.n	8004a90 <_vfiprintf_r+0x1b8>
 8004aae:	ab03      	add	r3, sp, #12
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <_vfiprintf_r+0x228>)
 8004ab6:	a904      	add	r1, sp, #16
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f3af 8000 	nop.w
 8004abe:	4607      	mov	r7, r0
 8004ac0:	1c78      	adds	r0, r7, #1
 8004ac2:	d1d6      	bne.n	8004a72 <_vfiprintf_r+0x19a>
 8004ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ac6:	07d9      	lsls	r1, r3, #31
 8004ac8:	d405      	bmi.n	8004ad6 <_vfiprintf_r+0x1fe>
 8004aca:	89ab      	ldrh	r3, [r5, #12]
 8004acc:	059a      	lsls	r2, r3, #22
 8004ace:	d402      	bmi.n	8004ad6 <_vfiprintf_r+0x1fe>
 8004ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ad2:	f7ff fed7 	bl	8004884 <__retarget_lock_release_recursive>
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	065b      	lsls	r3, r3, #25
 8004ada:	f53f af1f 	bmi.w	800491c <_vfiprintf_r+0x44>
 8004ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ae0:	e71e      	b.n	8004920 <_vfiprintf_r+0x48>
 8004ae2:	ab03      	add	r3, sp, #12
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	462a      	mov	r2, r5
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <_vfiprintf_r+0x228>)
 8004aea:	a904      	add	r1, sp, #16
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 f91b 	bl	8004d28 <_printf_i>
 8004af2:	e7e4      	b.n	8004abe <_vfiprintf_r+0x1e6>
 8004af4:	080055c8 	.word	0x080055c8
 8004af8:	080055d2 	.word	0x080055d2
 8004afc:	00000000 	.word	0x00000000
 8004b00:	080048b5 	.word	0x080048b5
 8004b04:	080055ce 	.word	0x080055ce

08004b08 <sbrk_aligned>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b48 <sbrk_aligned+0x40>)
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	6831      	ldr	r1, [r6, #0]
 8004b10:	4605      	mov	r5, r0
 8004b12:	b911      	cbnz	r1, 8004b1a <sbrk_aligned+0x12>
 8004b14:	f000 fc70 	bl	80053f8 <_sbrk_r>
 8004b18:	6030      	str	r0, [r6, #0]
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f000 fc6b 	bl	80053f8 <_sbrk_r>
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	d103      	bne.n	8004b2e <sbrk_aligned+0x26>
 8004b26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
 8004b2e:	1cc4      	adds	r4, r0, #3
 8004b30:	f024 0403 	bic.w	r4, r4, #3
 8004b34:	42a0      	cmp	r0, r4
 8004b36:	d0f8      	beq.n	8004b2a <sbrk_aligned+0x22>
 8004b38:	1a21      	subs	r1, r4, r0
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 fc5c 	bl	80053f8 <_sbrk_r>
 8004b40:	3001      	adds	r0, #1
 8004b42:	d1f2      	bne.n	8004b2a <sbrk_aligned+0x22>
 8004b44:	e7ef      	b.n	8004b26 <sbrk_aligned+0x1e>
 8004b46:	bf00      	nop
 8004b48:	200002a8 	.word	0x200002a8

08004b4c <_malloc_r>:
 8004b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b50:	1ccd      	adds	r5, r1, #3
 8004b52:	f025 0503 	bic.w	r5, r5, #3
 8004b56:	3508      	adds	r5, #8
 8004b58:	2d0c      	cmp	r5, #12
 8004b5a:	bf38      	it	cc
 8004b5c:	250c      	movcc	r5, #12
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	4606      	mov	r6, r0
 8004b62:	db01      	blt.n	8004b68 <_malloc_r+0x1c>
 8004b64:	42a9      	cmp	r1, r5
 8004b66:	d904      	bls.n	8004b72 <_malloc_r+0x26>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c48 <_malloc_r+0xfc>
 8004b76:	f000 faa3 	bl	80050c0 <__malloc_lock>
 8004b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7e:	461c      	mov	r4, r3
 8004b80:	bb44      	cbnz	r4, 8004bd4 <_malloc_r+0x88>
 8004b82:	4629      	mov	r1, r5
 8004b84:	4630      	mov	r0, r6
 8004b86:	f7ff ffbf 	bl	8004b08 <sbrk_aligned>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	d158      	bne.n	8004c42 <_malloc_r+0xf6>
 8004b90:	f8d8 4000 	ldr.w	r4, [r8]
 8004b94:	4627      	mov	r7, r4
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	d143      	bne.n	8004c22 <_malloc_r+0xd6>
 8004b9a:	2c00      	cmp	r4, #0
 8004b9c:	d04b      	beq.n	8004c36 <_malloc_r+0xea>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	eb04 0903 	add.w	r9, r4, r3
 8004ba8:	f000 fc26 	bl	80053f8 <_sbrk_r>
 8004bac:	4581      	cmp	r9, r0
 8004bae:	d142      	bne.n	8004c36 <_malloc_r+0xea>
 8004bb0:	6821      	ldr	r1, [r4, #0]
 8004bb2:	1a6d      	subs	r5, r5, r1
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7ff ffa6 	bl	8004b08 <sbrk_aligned>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d03a      	beq.n	8004c36 <_malloc_r+0xea>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	442b      	add	r3, r5
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	bb62      	cbnz	r2, 8004c28 <_malloc_r+0xdc>
 8004bce:	f8c8 7000 	str.w	r7, [r8]
 8004bd2:	e00f      	b.n	8004bf4 <_malloc_r+0xa8>
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	1b52      	subs	r2, r2, r5
 8004bd8:	d420      	bmi.n	8004c1c <_malloc_r+0xd0>
 8004bda:	2a0b      	cmp	r2, #11
 8004bdc:	d917      	bls.n	8004c0e <_malloc_r+0xc2>
 8004bde:	1961      	adds	r1, r4, r5
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	6025      	str	r5, [r4, #0]
 8004be4:	bf18      	it	ne
 8004be6:	6059      	strne	r1, [r3, #4]
 8004be8:	6863      	ldr	r3, [r4, #4]
 8004bea:	bf08      	it	eq
 8004bec:	f8c8 1000 	streq.w	r1, [r8]
 8004bf0:	5162      	str	r2, [r4, r5]
 8004bf2:	604b      	str	r3, [r1, #4]
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 fa69 	bl	80050cc <__malloc_unlock>
 8004bfa:	f104 000b 	add.w	r0, r4, #11
 8004bfe:	1d23      	adds	r3, r4, #4
 8004c00:	f020 0007 	bic.w	r0, r0, #7
 8004c04:	1ac2      	subs	r2, r0, r3
 8004c06:	bf1c      	itt	ne
 8004c08:	1a1b      	subne	r3, r3, r0
 8004c0a:	50a3      	strne	r3, [r4, r2]
 8004c0c:	e7af      	b.n	8004b6e <_malloc_r+0x22>
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	bf0c      	ite	eq
 8004c14:	f8c8 2000 	streq.w	r2, [r8]
 8004c18:	605a      	strne	r2, [r3, #4]
 8004c1a:	e7eb      	b.n	8004bf4 <_malloc_r+0xa8>
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	6864      	ldr	r4, [r4, #4]
 8004c20:	e7ae      	b.n	8004b80 <_malloc_r+0x34>
 8004c22:	463c      	mov	r4, r7
 8004c24:	687f      	ldr	r7, [r7, #4]
 8004c26:	e7b6      	b.n	8004b96 <_malloc_r+0x4a>
 8004c28:	461a      	mov	r2, r3
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d1fb      	bne.n	8004c28 <_malloc_r+0xdc>
 8004c30:	2300      	movs	r3, #0
 8004c32:	6053      	str	r3, [r2, #4]
 8004c34:	e7de      	b.n	8004bf4 <_malloc_r+0xa8>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f000 fa46 	bl	80050cc <__malloc_unlock>
 8004c40:	e794      	b.n	8004b6c <_malloc_r+0x20>
 8004c42:	6005      	str	r5, [r0, #0]
 8004c44:	e7d6      	b.n	8004bf4 <_malloc_r+0xa8>
 8004c46:	bf00      	nop
 8004c48:	200002ac 	.word	0x200002ac

08004c4c <_printf_common>:
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	4616      	mov	r6, r2
 8004c52:	4698      	mov	r8, r3
 8004c54:	688a      	ldr	r2, [r1, #8]
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	bfb8      	it	lt
 8004c60:	4613      	movlt	r3, r2
 8004c62:	6033      	str	r3, [r6, #0]
 8004c64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c68:	4607      	mov	r7, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	b10a      	cbz	r2, 8004c72 <_printf_common+0x26>
 8004c6e:	3301      	adds	r3, #1
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	0699      	lsls	r1, r3, #26
 8004c76:	bf42      	ittt	mi
 8004c78:	6833      	ldrmi	r3, [r6, #0]
 8004c7a:	3302      	addmi	r3, #2
 8004c7c:	6033      	strmi	r3, [r6, #0]
 8004c7e:	6825      	ldr	r5, [r4, #0]
 8004c80:	f015 0506 	ands.w	r5, r5, #6
 8004c84:	d106      	bne.n	8004c94 <_printf_common+0x48>
 8004c86:	f104 0a19 	add.w	sl, r4, #25
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	6832      	ldr	r2, [r6, #0]
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dc26      	bgt.n	8004ce2 <_printf_common+0x96>
 8004c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	3b00      	subs	r3, #0
 8004c9c:	bf18      	it	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	0692      	lsls	r2, r2, #26
 8004ca2:	d42b      	bmi.n	8004cfc <_printf_common+0xb0>
 8004ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ca8:	4641      	mov	r1, r8
 8004caa:	4638      	mov	r0, r7
 8004cac:	47c8      	blx	r9
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d01e      	beq.n	8004cf0 <_printf_common+0xa4>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	6922      	ldr	r2, [r4, #16]
 8004cb6:	f003 0306 	and.w	r3, r3, #6
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	bf02      	ittt	eq
 8004cbe:	68e5      	ldreq	r5, [r4, #12]
 8004cc0:	6833      	ldreq	r3, [r6, #0]
 8004cc2:	1aed      	subeq	r5, r5, r3
 8004cc4:	68a3      	ldr	r3, [r4, #8]
 8004cc6:	bf0c      	ite	eq
 8004cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ccc:	2500      	movne	r5, #0
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	bfc4      	itt	gt
 8004cd2:	1a9b      	subgt	r3, r3, r2
 8004cd4:	18ed      	addgt	r5, r5, r3
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	341a      	adds	r4, #26
 8004cda:	42b5      	cmp	r5, r6
 8004cdc:	d11a      	bne.n	8004d14 <_printf_common+0xc8>
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e008      	b.n	8004cf4 <_printf_common+0xa8>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4652      	mov	r2, sl
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	4638      	mov	r0, r7
 8004cea:	47c8      	blx	r9
 8004cec:	3001      	adds	r0, #1
 8004cee:	d103      	bne.n	8004cf8 <_printf_common+0xac>
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	3501      	adds	r5, #1
 8004cfa:	e7c6      	b.n	8004c8a <_printf_common+0x3e>
 8004cfc:	18e1      	adds	r1, r4, r3
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	2030      	movs	r0, #48	@ 0x30
 8004d02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d06:	4422      	add	r2, r4
 8004d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d10:	3302      	adds	r3, #2
 8004d12:	e7c7      	b.n	8004ca4 <_printf_common+0x58>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4622      	mov	r2, r4
 8004d18:	4641      	mov	r1, r8
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	47c8      	blx	r9
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d0e6      	beq.n	8004cf0 <_printf_common+0xa4>
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7d9      	b.n	8004cda <_printf_common+0x8e>
	...

08004d28 <_printf_i>:
 8004d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	7e0f      	ldrb	r7, [r1, #24]
 8004d2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d30:	2f78      	cmp	r7, #120	@ 0x78
 8004d32:	4691      	mov	r9, r2
 8004d34:	4680      	mov	r8, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	469a      	mov	sl, r3
 8004d3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d3e:	d807      	bhi.n	8004d50 <_printf_i+0x28>
 8004d40:	2f62      	cmp	r7, #98	@ 0x62
 8004d42:	d80a      	bhi.n	8004d5a <_printf_i+0x32>
 8004d44:	2f00      	cmp	r7, #0
 8004d46:	f000 80d2 	beq.w	8004eee <_printf_i+0x1c6>
 8004d4a:	2f58      	cmp	r7, #88	@ 0x58
 8004d4c:	f000 80b9 	beq.w	8004ec2 <_printf_i+0x19a>
 8004d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d58:	e03a      	b.n	8004dd0 <_printf_i+0xa8>
 8004d5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d5e:	2b15      	cmp	r3, #21
 8004d60:	d8f6      	bhi.n	8004d50 <_printf_i+0x28>
 8004d62:	a101      	add	r1, pc, #4	@ (adr r1, 8004d68 <_printf_i+0x40>)
 8004d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d68:	08004dc1 	.word	0x08004dc1
 8004d6c:	08004dd5 	.word	0x08004dd5
 8004d70:	08004d51 	.word	0x08004d51
 8004d74:	08004d51 	.word	0x08004d51
 8004d78:	08004d51 	.word	0x08004d51
 8004d7c:	08004d51 	.word	0x08004d51
 8004d80:	08004dd5 	.word	0x08004dd5
 8004d84:	08004d51 	.word	0x08004d51
 8004d88:	08004d51 	.word	0x08004d51
 8004d8c:	08004d51 	.word	0x08004d51
 8004d90:	08004d51 	.word	0x08004d51
 8004d94:	08004ed5 	.word	0x08004ed5
 8004d98:	08004dff 	.word	0x08004dff
 8004d9c:	08004e8f 	.word	0x08004e8f
 8004da0:	08004d51 	.word	0x08004d51
 8004da4:	08004d51 	.word	0x08004d51
 8004da8:	08004ef7 	.word	0x08004ef7
 8004dac:	08004d51 	.word	0x08004d51
 8004db0:	08004dff 	.word	0x08004dff
 8004db4:	08004d51 	.word	0x08004d51
 8004db8:	08004d51 	.word	0x08004d51
 8004dbc:	08004e97 	.word	0x08004e97
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6032      	str	r2, [r6, #0]
 8004dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e09d      	b.n	8004f10 <_printf_i+0x1e8>
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	1d19      	adds	r1, r3, #4
 8004dda:	6031      	str	r1, [r6, #0]
 8004ddc:	0606      	lsls	r6, r0, #24
 8004dde:	d501      	bpl.n	8004de4 <_printf_i+0xbc>
 8004de0:	681d      	ldr	r5, [r3, #0]
 8004de2:	e003      	b.n	8004dec <_printf_i+0xc4>
 8004de4:	0645      	lsls	r5, r0, #25
 8004de6:	d5fb      	bpl.n	8004de0 <_printf_i+0xb8>
 8004de8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dec:	2d00      	cmp	r5, #0
 8004dee:	da03      	bge.n	8004df8 <_printf_i+0xd0>
 8004df0:	232d      	movs	r3, #45	@ 0x2d
 8004df2:	426d      	negs	r5, r5
 8004df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004df8:	4859      	ldr	r0, [pc, #356]	@ (8004f60 <_printf_i+0x238>)
 8004dfa:	230a      	movs	r3, #10
 8004dfc:	e011      	b.n	8004e22 <_printf_i+0xfa>
 8004dfe:	6821      	ldr	r1, [r4, #0]
 8004e00:	6833      	ldr	r3, [r6, #0]
 8004e02:	0608      	lsls	r0, r1, #24
 8004e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e08:	d402      	bmi.n	8004e10 <_printf_i+0xe8>
 8004e0a:	0649      	lsls	r1, r1, #25
 8004e0c:	bf48      	it	mi
 8004e0e:	b2ad      	uxthmi	r5, r5
 8004e10:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e12:	4853      	ldr	r0, [pc, #332]	@ (8004f60 <_printf_i+0x238>)
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	bf14      	ite	ne
 8004e18:	230a      	movne	r3, #10
 8004e1a:	2308      	moveq	r3, #8
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e22:	6866      	ldr	r6, [r4, #4]
 8004e24:	60a6      	str	r6, [r4, #8]
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	bfa2      	ittt	ge
 8004e2a:	6821      	ldrge	r1, [r4, #0]
 8004e2c:	f021 0104 	bicge.w	r1, r1, #4
 8004e30:	6021      	strge	r1, [r4, #0]
 8004e32:	b90d      	cbnz	r5, 8004e38 <_printf_i+0x110>
 8004e34:	2e00      	cmp	r6, #0
 8004e36:	d04b      	beq.n	8004ed0 <_printf_i+0x1a8>
 8004e38:	4616      	mov	r6, r2
 8004e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e42:	5dc7      	ldrb	r7, [r0, r7]
 8004e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e48:	462f      	mov	r7, r5
 8004e4a:	42bb      	cmp	r3, r7
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	d9f4      	bls.n	8004e3a <_printf_i+0x112>
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d10b      	bne.n	8004e6c <_printf_i+0x144>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	07df      	lsls	r7, r3, #31
 8004e58:	d508      	bpl.n	8004e6c <_printf_i+0x144>
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	6861      	ldr	r1, [r4, #4]
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	bfde      	ittt	le
 8004e62:	2330      	movle	r3, #48	@ 0x30
 8004e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e68:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e6c:	1b92      	subs	r2, r2, r6
 8004e6e:	6122      	str	r2, [r4, #16]
 8004e70:	f8cd a000 	str.w	sl, [sp]
 8004e74:	464b      	mov	r3, r9
 8004e76:	aa03      	add	r2, sp, #12
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	f7ff fee6 	bl	8004c4c <_printf_common>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d14a      	bne.n	8004f1a <_printf_i+0x1f2>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e88:	b004      	add	sp, #16
 8004e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f043 0320 	orr.w	r3, r3, #32
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	4833      	ldr	r0, [pc, #204]	@ (8004f64 <_printf_i+0x23c>)
 8004e98:	2778      	movs	r7, #120	@ 0x78
 8004e9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	6831      	ldr	r1, [r6, #0]
 8004ea2:	061f      	lsls	r7, r3, #24
 8004ea4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ea8:	d402      	bmi.n	8004eb0 <_printf_i+0x188>
 8004eaa:	065f      	lsls	r7, r3, #25
 8004eac:	bf48      	it	mi
 8004eae:	b2ad      	uxthmi	r5, r5
 8004eb0:	6031      	str	r1, [r6, #0]
 8004eb2:	07d9      	lsls	r1, r3, #31
 8004eb4:	bf44      	itt	mi
 8004eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eba:	6023      	strmi	r3, [r4, #0]
 8004ebc:	b11d      	cbz	r5, 8004ec6 <_printf_i+0x19e>
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	e7ac      	b.n	8004e1c <_printf_i+0xf4>
 8004ec2:	4827      	ldr	r0, [pc, #156]	@ (8004f60 <_printf_i+0x238>)
 8004ec4:	e7e9      	b.n	8004e9a <_printf_i+0x172>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f023 0320 	bic.w	r3, r3, #32
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	e7f6      	b.n	8004ebe <_printf_i+0x196>
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	e7bd      	b.n	8004e50 <_printf_i+0x128>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	6961      	ldr	r1, [r4, #20]
 8004eda:	1d18      	adds	r0, r3, #4
 8004edc:	6030      	str	r0, [r6, #0]
 8004ede:	062e      	lsls	r6, r5, #24
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0x1c0>
 8004ee4:	6019      	str	r1, [r3, #0]
 8004ee6:	e002      	b.n	8004eee <_printf_i+0x1c6>
 8004ee8:	0668      	lsls	r0, r5, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0x1bc>
 8004eec:	8019      	strh	r1, [r3, #0]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	4616      	mov	r6, r2
 8004ef4:	e7bc      	b.n	8004e70 <_printf_i+0x148>
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	1d1a      	adds	r2, r3, #4
 8004efa:	6032      	str	r2, [r6, #0]
 8004efc:	681e      	ldr	r6, [r3, #0]
 8004efe:	6862      	ldr	r2, [r4, #4]
 8004f00:	2100      	movs	r1, #0
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7fb f964 	bl	80001d0 <memchr>
 8004f08:	b108      	cbz	r0, 8004f0e <_printf_i+0x1e6>
 8004f0a:	1b80      	subs	r0, r0, r6
 8004f0c:	6060      	str	r0, [r4, #4]
 8004f0e:	6863      	ldr	r3, [r4, #4]
 8004f10:	6123      	str	r3, [r4, #16]
 8004f12:	2300      	movs	r3, #0
 8004f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f18:	e7aa      	b.n	8004e70 <_printf_i+0x148>
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	47d0      	blx	sl
 8004f24:	3001      	adds	r0, #1
 8004f26:	d0ad      	beq.n	8004e84 <_printf_i+0x15c>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	079b      	lsls	r3, r3, #30
 8004f2c:	d413      	bmi.n	8004f56 <_printf_i+0x22e>
 8004f2e:	68e0      	ldr	r0, [r4, #12]
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	4298      	cmp	r0, r3
 8004f34:	bfb8      	it	lt
 8004f36:	4618      	movlt	r0, r3
 8004f38:	e7a6      	b.n	8004e88 <_printf_i+0x160>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4632      	mov	r2, r6
 8004f3e:	4649      	mov	r1, r9
 8004f40:	4640      	mov	r0, r8
 8004f42:	47d0      	blx	sl
 8004f44:	3001      	adds	r0, #1
 8004f46:	d09d      	beq.n	8004e84 <_printf_i+0x15c>
 8004f48:	3501      	adds	r5, #1
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	9903      	ldr	r1, [sp, #12]
 8004f4e:	1a5b      	subs	r3, r3, r1
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dcf2      	bgt.n	8004f3a <_printf_i+0x212>
 8004f54:	e7eb      	b.n	8004f2e <_printf_i+0x206>
 8004f56:	2500      	movs	r5, #0
 8004f58:	f104 0619 	add.w	r6, r4, #25
 8004f5c:	e7f5      	b.n	8004f4a <_printf_i+0x222>
 8004f5e:	bf00      	nop
 8004f60:	080055d9 	.word	0x080055d9
 8004f64:	080055ea 	.word	0x080055ea

08004f68 <__sflush_r>:
 8004f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f70:	0716      	lsls	r6, r2, #28
 8004f72:	4605      	mov	r5, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	d454      	bmi.n	8005022 <__sflush_r+0xba>
 8004f78:	684b      	ldr	r3, [r1, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dc02      	bgt.n	8004f84 <__sflush_r+0x1c>
 8004f7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dd48      	ble.n	8005016 <__sflush_r+0xae>
 8004f84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f86:	2e00      	cmp	r6, #0
 8004f88:	d045      	beq.n	8005016 <__sflush_r+0xae>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f90:	682f      	ldr	r7, [r5, #0]
 8004f92:	6a21      	ldr	r1, [r4, #32]
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	d030      	beq.n	8004ffa <__sflush_r+0x92>
 8004f98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	0759      	lsls	r1, r3, #29
 8004f9e:	d505      	bpl.n	8004fac <__sflush_r+0x44>
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	1ad2      	subs	r2, r2, r3
 8004fa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fa6:	b10b      	cbz	r3, 8004fac <__sflush_r+0x44>
 8004fa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004faa:	1ad2      	subs	r2, r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fb0:	6a21      	ldr	r1, [r4, #32]
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b0      	blx	r6
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	d106      	bne.n	8004fca <__sflush_r+0x62>
 8004fbc:	6829      	ldr	r1, [r5, #0]
 8004fbe:	291d      	cmp	r1, #29
 8004fc0:	d82b      	bhi.n	800501a <__sflush_r+0xb2>
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <__sflush_r+0x104>)
 8004fc4:	410a      	asrs	r2, r1
 8004fc6:	07d6      	lsls	r6, r2, #31
 8004fc8:	d427      	bmi.n	800501a <__sflush_r+0xb2>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6062      	str	r2, [r4, #4]
 8004fce:	04d9      	lsls	r1, r3, #19
 8004fd0:	6922      	ldr	r2, [r4, #16]
 8004fd2:	6022      	str	r2, [r4, #0]
 8004fd4:	d504      	bpl.n	8004fe0 <__sflush_r+0x78>
 8004fd6:	1c42      	adds	r2, r0, #1
 8004fd8:	d101      	bne.n	8004fde <__sflush_r+0x76>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	b903      	cbnz	r3, 8004fe0 <__sflush_r+0x78>
 8004fde:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fe2:	602f      	str	r7, [r5, #0]
 8004fe4:	b1b9      	cbz	r1, 8005016 <__sflush_r+0xae>
 8004fe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fea:	4299      	cmp	r1, r3
 8004fec:	d002      	beq.n	8004ff4 <__sflush_r+0x8c>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 fa24 	bl	800543c <_free_r>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ff8:	e00d      	b.n	8005016 <__sflush_r+0xae>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b0      	blx	r6
 8005000:	4602      	mov	r2, r0
 8005002:	1c50      	adds	r0, r2, #1
 8005004:	d1c9      	bne.n	8004f9a <__sflush_r+0x32>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0c6      	beq.n	8004f9a <__sflush_r+0x32>
 800500c:	2b1d      	cmp	r3, #29
 800500e:	d001      	beq.n	8005014 <__sflush_r+0xac>
 8005010:	2b16      	cmp	r3, #22
 8005012:	d11e      	bne.n	8005052 <__sflush_r+0xea>
 8005014:	602f      	str	r7, [r5, #0]
 8005016:	2000      	movs	r0, #0
 8005018:	e022      	b.n	8005060 <__sflush_r+0xf8>
 800501a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800501e:	b21b      	sxth	r3, r3
 8005020:	e01b      	b.n	800505a <__sflush_r+0xf2>
 8005022:	690f      	ldr	r7, [r1, #16]
 8005024:	2f00      	cmp	r7, #0
 8005026:	d0f6      	beq.n	8005016 <__sflush_r+0xae>
 8005028:	0793      	lsls	r3, r2, #30
 800502a:	680e      	ldr	r6, [r1, #0]
 800502c:	bf08      	it	eq
 800502e:	694b      	ldreq	r3, [r1, #20]
 8005030:	600f      	str	r7, [r1, #0]
 8005032:	bf18      	it	ne
 8005034:	2300      	movne	r3, #0
 8005036:	eba6 0807 	sub.w	r8, r6, r7
 800503a:	608b      	str	r3, [r1, #8]
 800503c:	f1b8 0f00 	cmp.w	r8, #0
 8005040:	dde9      	ble.n	8005016 <__sflush_r+0xae>
 8005042:	6a21      	ldr	r1, [r4, #32]
 8005044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005046:	4643      	mov	r3, r8
 8005048:	463a      	mov	r2, r7
 800504a:	4628      	mov	r0, r5
 800504c:	47b0      	blx	r6
 800504e:	2800      	cmp	r0, #0
 8005050:	dc08      	bgt.n	8005064 <__sflush_r+0xfc>
 8005052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800505a:	81a3      	strh	r3, [r4, #12]
 800505c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005064:	4407      	add	r7, r0
 8005066:	eba8 0800 	sub.w	r8, r8, r0
 800506a:	e7e7      	b.n	800503c <__sflush_r+0xd4>
 800506c:	dfbffffe 	.word	0xdfbffffe

08005070 <_fflush_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	4605      	mov	r5, r0
 8005076:	460c      	mov	r4, r1
 8005078:	b913      	cbnz	r3, 8005080 <_fflush_r+0x10>
 800507a:	2500      	movs	r5, #0
 800507c:	4628      	mov	r0, r5
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	b118      	cbz	r0, 800508a <_fflush_r+0x1a>
 8005082:	6a03      	ldr	r3, [r0, #32]
 8005084:	b90b      	cbnz	r3, 800508a <_fflush_r+0x1a>
 8005086:	f7ff fb23 	bl	80046d0 <__sinit>
 800508a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f3      	beq.n	800507a <_fflush_r+0xa>
 8005092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005094:	07d0      	lsls	r0, r2, #31
 8005096:	d404      	bmi.n	80050a2 <_fflush_r+0x32>
 8005098:	0599      	lsls	r1, r3, #22
 800509a:	d402      	bmi.n	80050a2 <_fflush_r+0x32>
 800509c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800509e:	f7ff fbf0 	bl	8004882 <__retarget_lock_acquire_recursive>
 80050a2:	4628      	mov	r0, r5
 80050a4:	4621      	mov	r1, r4
 80050a6:	f7ff ff5f 	bl	8004f68 <__sflush_r>
 80050aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050ac:	07da      	lsls	r2, r3, #31
 80050ae:	4605      	mov	r5, r0
 80050b0:	d4e4      	bmi.n	800507c <_fflush_r+0xc>
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	059b      	lsls	r3, r3, #22
 80050b6:	d4e1      	bmi.n	800507c <_fflush_r+0xc>
 80050b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ba:	f7ff fbe3 	bl	8004884 <__retarget_lock_release_recursive>
 80050be:	e7dd      	b.n	800507c <_fflush_r+0xc>

080050c0 <__malloc_lock>:
 80050c0:	4801      	ldr	r0, [pc, #4]	@ (80050c8 <__malloc_lock+0x8>)
 80050c2:	f7ff bbde 	b.w	8004882 <__retarget_lock_acquire_recursive>
 80050c6:	bf00      	nop
 80050c8:	200002a4 	.word	0x200002a4

080050cc <__malloc_unlock>:
 80050cc:	4801      	ldr	r0, [pc, #4]	@ (80050d4 <__malloc_unlock+0x8>)
 80050ce:	f7ff bbd9 	b.w	8004884 <__retarget_lock_release_recursive>
 80050d2:	bf00      	nop
 80050d4:	200002a4 	.word	0x200002a4

080050d8 <__sread>:
 80050d8:	b510      	push	{r4, lr}
 80050da:	460c      	mov	r4, r1
 80050dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e0:	f000 f978 	bl	80053d4 <_read_r>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	bfab      	itete	ge
 80050e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050ea:	89a3      	ldrhlt	r3, [r4, #12]
 80050ec:	181b      	addge	r3, r3, r0
 80050ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050f2:	bfac      	ite	ge
 80050f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050f6:	81a3      	strhlt	r3, [r4, #12]
 80050f8:	bd10      	pop	{r4, pc}

080050fa <__swrite>:
 80050fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fe:	461f      	mov	r7, r3
 8005100:	898b      	ldrh	r3, [r1, #12]
 8005102:	05db      	lsls	r3, r3, #23
 8005104:	4605      	mov	r5, r0
 8005106:	460c      	mov	r4, r1
 8005108:	4616      	mov	r6, r2
 800510a:	d505      	bpl.n	8005118 <__swrite+0x1e>
 800510c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005110:	2302      	movs	r3, #2
 8005112:	2200      	movs	r2, #0
 8005114:	f000 f94c 	bl	80053b0 <_lseek_r>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800511e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	4632      	mov	r2, r6
 8005126:	463b      	mov	r3, r7
 8005128:	4628      	mov	r0, r5
 800512a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512e:	f000 b973 	b.w	8005418 <_write_r>

08005132 <__sseek>:
 8005132:	b510      	push	{r4, lr}
 8005134:	460c      	mov	r4, r1
 8005136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513a:	f000 f939 	bl	80053b0 <_lseek_r>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	bf15      	itete	ne
 8005144:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005146:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800514a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800514e:	81a3      	strheq	r3, [r4, #12]
 8005150:	bf18      	it	ne
 8005152:	81a3      	strhne	r3, [r4, #12]
 8005154:	bd10      	pop	{r4, pc}

08005156 <__sclose>:
 8005156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800515a:	f000 b8f7 	b.w	800534c <_close_r>

0800515e <__swbuf_r>:
 800515e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005160:	460e      	mov	r6, r1
 8005162:	4614      	mov	r4, r2
 8005164:	4605      	mov	r5, r0
 8005166:	b118      	cbz	r0, 8005170 <__swbuf_r+0x12>
 8005168:	6a03      	ldr	r3, [r0, #32]
 800516a:	b90b      	cbnz	r3, 8005170 <__swbuf_r+0x12>
 800516c:	f7ff fab0 	bl	80046d0 <__sinit>
 8005170:	69a3      	ldr	r3, [r4, #24]
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	071a      	lsls	r2, r3, #28
 8005178:	d501      	bpl.n	800517e <__swbuf_r+0x20>
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	b943      	cbnz	r3, 8005190 <__swbuf_r+0x32>
 800517e:	4621      	mov	r1, r4
 8005180:	4628      	mov	r0, r5
 8005182:	f000 f82b 	bl	80051dc <__swsetup_r>
 8005186:	b118      	cbz	r0, 8005190 <__swbuf_r+0x32>
 8005188:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800518c:	4638      	mov	r0, r7
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	6922      	ldr	r2, [r4, #16]
 8005194:	1a98      	subs	r0, r3, r2
 8005196:	6963      	ldr	r3, [r4, #20]
 8005198:	b2f6      	uxtb	r6, r6
 800519a:	4283      	cmp	r3, r0
 800519c:	4637      	mov	r7, r6
 800519e:	dc05      	bgt.n	80051ac <__swbuf_r+0x4e>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7ff ff64 	bl	8005070 <_fflush_r>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d1ed      	bne.n	8005188 <__swbuf_r+0x2a>
 80051ac:	68a3      	ldr	r3, [r4, #8]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	60a3      	str	r3, [r4, #8]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	6022      	str	r2, [r4, #0]
 80051b8:	701e      	strb	r6, [r3, #0]
 80051ba:	6962      	ldr	r2, [r4, #20]
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	429a      	cmp	r2, r3
 80051c0:	d004      	beq.n	80051cc <__swbuf_r+0x6e>
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	07db      	lsls	r3, r3, #31
 80051c6:	d5e1      	bpl.n	800518c <__swbuf_r+0x2e>
 80051c8:	2e0a      	cmp	r6, #10
 80051ca:	d1df      	bne.n	800518c <__swbuf_r+0x2e>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4628      	mov	r0, r5
 80051d0:	f7ff ff4e 	bl	8005070 <_fflush_r>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d0d9      	beq.n	800518c <__swbuf_r+0x2e>
 80051d8:	e7d6      	b.n	8005188 <__swbuf_r+0x2a>
	...

080051dc <__swsetup_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4b29      	ldr	r3, [pc, #164]	@ (8005284 <__swsetup_r+0xa8>)
 80051e0:	4605      	mov	r5, r0
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	460c      	mov	r4, r1
 80051e6:	b118      	cbz	r0, 80051f0 <__swsetup_r+0x14>
 80051e8:	6a03      	ldr	r3, [r0, #32]
 80051ea:	b90b      	cbnz	r3, 80051f0 <__swsetup_r+0x14>
 80051ec:	f7ff fa70 	bl	80046d0 <__sinit>
 80051f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f4:	0719      	lsls	r1, r3, #28
 80051f6:	d422      	bmi.n	800523e <__swsetup_r+0x62>
 80051f8:	06da      	lsls	r2, r3, #27
 80051fa:	d407      	bmi.n	800520c <__swsetup_r+0x30>
 80051fc:	2209      	movs	r2, #9
 80051fe:	602a      	str	r2, [r5, #0]
 8005200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005204:	81a3      	strh	r3, [r4, #12]
 8005206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800520a:	e033      	b.n	8005274 <__swsetup_r+0x98>
 800520c:	0758      	lsls	r0, r3, #29
 800520e:	d512      	bpl.n	8005236 <__swsetup_r+0x5a>
 8005210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005212:	b141      	cbz	r1, 8005226 <__swsetup_r+0x4a>
 8005214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005218:	4299      	cmp	r1, r3
 800521a:	d002      	beq.n	8005222 <__swsetup_r+0x46>
 800521c:	4628      	mov	r0, r5
 800521e:	f000 f90d 	bl	800543c <_free_r>
 8005222:	2300      	movs	r3, #0
 8005224:	6363      	str	r3, [r4, #52]	@ 0x34
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	2300      	movs	r3, #0
 8005230:	6063      	str	r3, [r4, #4]
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f043 0308 	orr.w	r3, r3, #8
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	b94b      	cbnz	r3, 8005256 <__swsetup_r+0x7a>
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524c:	d003      	beq.n	8005256 <__swsetup_r+0x7a>
 800524e:	4621      	mov	r1, r4
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f83f 	bl	80052d4 <__smakebuf_r>
 8005256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525a:	f013 0201 	ands.w	r2, r3, #1
 800525e:	d00a      	beq.n	8005276 <__swsetup_r+0x9a>
 8005260:	2200      	movs	r2, #0
 8005262:	60a2      	str	r2, [r4, #8]
 8005264:	6962      	ldr	r2, [r4, #20]
 8005266:	4252      	negs	r2, r2
 8005268:	61a2      	str	r2, [r4, #24]
 800526a:	6922      	ldr	r2, [r4, #16]
 800526c:	b942      	cbnz	r2, 8005280 <__swsetup_r+0xa4>
 800526e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005272:	d1c5      	bne.n	8005200 <__swsetup_r+0x24>
 8005274:	bd38      	pop	{r3, r4, r5, pc}
 8005276:	0799      	lsls	r1, r3, #30
 8005278:	bf58      	it	pl
 800527a:	6962      	ldrpl	r2, [r4, #20]
 800527c:	60a2      	str	r2, [r4, #8]
 800527e:	e7f4      	b.n	800526a <__swsetup_r+0x8e>
 8005280:	2000      	movs	r0, #0
 8005282:	e7f7      	b.n	8005274 <__swsetup_r+0x98>
 8005284:	20000018 	.word	0x20000018

08005288 <__swhatbuf_r>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	460c      	mov	r4, r1
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	2900      	cmp	r1, #0
 8005292:	b096      	sub	sp, #88	@ 0x58
 8005294:	4615      	mov	r5, r2
 8005296:	461e      	mov	r6, r3
 8005298:	da0d      	bge.n	80052b6 <__swhatbuf_r+0x2e>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	bf14      	ite	ne
 80052a6:	2340      	movne	r3, #64	@ 0x40
 80052a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052ac:	2000      	movs	r0, #0
 80052ae:	6031      	str	r1, [r6, #0]
 80052b0:	602b      	str	r3, [r5, #0]
 80052b2:	b016      	add	sp, #88	@ 0x58
 80052b4:	bd70      	pop	{r4, r5, r6, pc}
 80052b6:	466a      	mov	r2, sp
 80052b8:	f000 f858 	bl	800536c <_fstat_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	dbec      	blt.n	800529a <__swhatbuf_r+0x12>
 80052c0:	9901      	ldr	r1, [sp, #4]
 80052c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052ca:	4259      	negs	r1, r3
 80052cc:	4159      	adcs	r1, r3
 80052ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d2:	e7eb      	b.n	80052ac <__swhatbuf_r+0x24>

080052d4 <__smakebuf_r>:
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052d8:	079d      	lsls	r5, r3, #30
 80052da:	4606      	mov	r6, r0
 80052dc:	460c      	mov	r4, r1
 80052de:	d507      	bpl.n	80052f0 <__smakebuf_r+0x1c>
 80052e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	2301      	movs	r3, #1
 80052ea:	6163      	str	r3, [r4, #20]
 80052ec:	b003      	add	sp, #12
 80052ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f0:	ab01      	add	r3, sp, #4
 80052f2:	466a      	mov	r2, sp
 80052f4:	f7ff ffc8 	bl	8005288 <__swhatbuf_r>
 80052f8:	9f00      	ldr	r7, [sp, #0]
 80052fa:	4605      	mov	r5, r0
 80052fc:	4639      	mov	r1, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff fc24 	bl	8004b4c <_malloc_r>
 8005304:	b948      	cbnz	r0, 800531a <__smakebuf_r+0x46>
 8005306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530a:	059a      	lsls	r2, r3, #22
 800530c:	d4ee      	bmi.n	80052ec <__smakebuf_r+0x18>
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	f043 0302 	orr.w	r3, r3, #2
 8005316:	81a3      	strh	r3, [r4, #12]
 8005318:	e7e2      	b.n	80052e0 <__smakebuf_r+0xc>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	6020      	str	r0, [r4, #0]
 800531e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	9b01      	ldr	r3, [sp, #4]
 8005326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800532a:	b15b      	cbz	r3, 8005344 <__smakebuf_r+0x70>
 800532c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f82d 	bl	8005390 <_isatty_r>
 8005336:	b128      	cbz	r0, 8005344 <__smakebuf_r+0x70>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	431d      	orrs	r5, r3
 8005348:	81a5      	strh	r5, [r4, #12]
 800534a:	e7cf      	b.n	80052ec <__smakebuf_r+0x18>

0800534c <_close_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4d06      	ldr	r5, [pc, #24]	@ (8005368 <_close_r+0x1c>)
 8005350:	2300      	movs	r3, #0
 8005352:	4604      	mov	r4, r0
 8005354:	4608      	mov	r0, r1
 8005356:	602b      	str	r3, [r5, #0]
 8005358:	f7fb fe45 	bl	8000fe6 <_close>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_close_r+0x1a>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	b103      	cbz	r3, 8005366 <_close_r+0x1a>
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	200002b0 	.word	0x200002b0

0800536c <_fstat_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4d07      	ldr	r5, [pc, #28]	@ (800538c <_fstat_r+0x20>)
 8005370:	2300      	movs	r3, #0
 8005372:	4604      	mov	r4, r0
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	f7fb fe40 	bl	8000ffe <_fstat>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	d102      	bne.n	8005388 <_fstat_r+0x1c>
 8005382:	682b      	ldr	r3, [r5, #0]
 8005384:	b103      	cbz	r3, 8005388 <_fstat_r+0x1c>
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	bd38      	pop	{r3, r4, r5, pc}
 800538a:	bf00      	nop
 800538c:	200002b0 	.word	0x200002b0

08005390 <_isatty_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d06      	ldr	r5, [pc, #24]	@ (80053ac <_isatty_r+0x1c>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	f7fb fe3f 	bl	800101e <_isatty>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_isatty_r+0x1a>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_isatty_r+0x1a>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	200002b0 	.word	0x200002b0

080053b0 <_lseek_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d07      	ldr	r5, [pc, #28]	@ (80053d0 <_lseek_r+0x20>)
 80053b4:	4604      	mov	r4, r0
 80053b6:	4608      	mov	r0, r1
 80053b8:	4611      	mov	r1, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fb fe38 	bl	8001034 <_lseek>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_lseek_r+0x1e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_lseek_r+0x1e>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	200002b0 	.word	0x200002b0

080053d4 <_read_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d07      	ldr	r5, [pc, #28]	@ (80053f4 <_read_r+0x20>)
 80053d8:	4604      	mov	r4, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	4611      	mov	r1, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	602a      	str	r2, [r5, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fb fdc6 	bl	8000f74 <_read>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_read_r+0x1e>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_read_r+0x1e>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	200002b0 	.word	0x200002b0

080053f8 <_sbrk_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4d06      	ldr	r5, [pc, #24]	@ (8005414 <_sbrk_r+0x1c>)
 80053fc:	2300      	movs	r3, #0
 80053fe:	4604      	mov	r4, r0
 8005400:	4608      	mov	r0, r1
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	f7fb fe24 	bl	8001050 <_sbrk>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d102      	bne.n	8005412 <_sbrk_r+0x1a>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	b103      	cbz	r3, 8005412 <_sbrk_r+0x1a>
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	200002b0 	.word	0x200002b0

08005418 <_write_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4d07      	ldr	r5, [pc, #28]	@ (8005438 <_write_r+0x20>)
 800541c:	4604      	mov	r4, r0
 800541e:	4608      	mov	r0, r1
 8005420:	4611      	mov	r1, r2
 8005422:	2200      	movs	r2, #0
 8005424:	602a      	str	r2, [r5, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	f7fb fdc1 	bl	8000fae <_write>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_write_r+0x1e>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	b103      	cbz	r3, 8005436 <_write_r+0x1e>
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	200002b0 	.word	0x200002b0

0800543c <_free_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4605      	mov	r5, r0
 8005440:	2900      	cmp	r1, #0
 8005442:	d041      	beq.n	80054c8 <_free_r+0x8c>
 8005444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005448:	1f0c      	subs	r4, r1, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	bfb8      	it	lt
 800544e:	18e4      	addlt	r4, r4, r3
 8005450:	f7ff fe36 	bl	80050c0 <__malloc_lock>
 8005454:	4a1d      	ldr	r2, [pc, #116]	@ (80054cc <_free_r+0x90>)
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	b933      	cbnz	r3, 8005468 <_free_r+0x2c>
 800545a:	6063      	str	r3, [r4, #4]
 800545c:	6014      	str	r4, [r2, #0]
 800545e:	4628      	mov	r0, r5
 8005460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005464:	f7ff be32 	b.w	80050cc <__malloc_unlock>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d908      	bls.n	800547e <_free_r+0x42>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1809      	addeq	r1, r1, r0
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	e7ed      	b.n	800545a <_free_r+0x1e>
 800547e:	461a      	mov	r2, r3
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b10b      	cbz	r3, 8005488 <_free_r+0x4c>
 8005484:	42a3      	cmp	r3, r4
 8005486:	d9fa      	bls.n	800547e <_free_r+0x42>
 8005488:	6811      	ldr	r1, [r2, #0]
 800548a:	1850      	adds	r0, r2, r1
 800548c:	42a0      	cmp	r0, r4
 800548e:	d10b      	bne.n	80054a8 <_free_r+0x6c>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	4401      	add	r1, r0
 8005494:	1850      	adds	r0, r2, r1
 8005496:	4283      	cmp	r3, r0
 8005498:	6011      	str	r1, [r2, #0]
 800549a:	d1e0      	bne.n	800545e <_free_r+0x22>
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	6053      	str	r3, [r2, #4]
 80054a2:	4408      	add	r0, r1
 80054a4:	6010      	str	r0, [r2, #0]
 80054a6:	e7da      	b.n	800545e <_free_r+0x22>
 80054a8:	d902      	bls.n	80054b0 <_free_r+0x74>
 80054aa:	230c      	movs	r3, #12
 80054ac:	602b      	str	r3, [r5, #0]
 80054ae:	e7d6      	b.n	800545e <_free_r+0x22>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	1821      	adds	r1, r4, r0
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf04      	itt	eq
 80054b8:	6819      	ldreq	r1, [r3, #0]
 80054ba:	685b      	ldreq	r3, [r3, #4]
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	bf04      	itt	eq
 80054c0:	1809      	addeq	r1, r1, r0
 80054c2:	6021      	streq	r1, [r4, #0]
 80054c4:	6054      	str	r4, [r2, #4]
 80054c6:	e7ca      	b.n	800545e <_free_r+0x22>
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
 80054ca:	bf00      	nop
 80054cc:	200002ac 	.word	0x200002ac

080054d0 <_init>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr

080054dc <_fini>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr
