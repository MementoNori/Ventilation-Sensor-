
sen54_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000545c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080055ec  080055ec  000065ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005788  08005788  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005788  08005788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005790  08005790  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005794  08005794  00006794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005798  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08005800  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005800  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5db  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002093  00000000  00000000  00015673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00017708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c4  00000000  00000000  000183b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002745a  00000000  00000000  00018d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010246  00000000  00000000  000401ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebe55  00000000  00000000  00050414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  0013c2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055d4 	.word	0x080055d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080055d4 	.word	0x080055d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

PUTCHAR_PROTOTYPE
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f003 fb45 	bl	8003c00 <HAL_UART_Transmit>
    return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000d8 	.word	0x200000d8

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a0      	sub	sp, #128	@ 0x80
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fe54 	bl	8001236 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f959 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fa19 	bl	80009c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f9a7 	bl	80008e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f9e5 	bl	8000968 <MX_USART1_UART_Init>
  } else {
      printf("Sensor init failed.\r\n");
  }*/


  if (sen54_read_measurements(&hi2c1, sensor_data, sizeof(sensor_data)) == HAL_OK) {
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	223c      	movs	r2, #60	@ 0x3c
 80005a2:	4619      	mov	r1, r3
 80005a4:	489b      	ldr	r0, [pc, #620]	@ (8000814 <main+0x290>)
 80005a6:	f000 fc0d 	bl	8000dc4 <sen54_read_measurements>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d113      	bne.n	80005d8 <main+0x54>
      /*printf("Measurement received:\r\n");*/

      for (int i = 0; i < sizeof(sensor_data); i++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005b4:	e00a      	b.n	80005cc <main+0x48>
          printf("%02X ", sensor_data[i]);
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4619      	mov	r1, r3
 80005c0:	4895      	ldr	r0, [pc, #596]	@ (8000818 <main+0x294>)
 80005c2:	f004 f93d 	bl	8004840 <iprintf>
      for (int i = 0; i < sizeof(sensor_data); i++) {
 80005c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005c8:	3301      	adds	r3, #1
 80005ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80005d0:	d9f1      	bls.n	80005b6 <main+0x32>
      }
      printf("\r\n");
 80005d2:	4892      	ldr	r0, [pc, #584]	@ (800081c <main+0x298>)
 80005d4:	f004 f99c 	bl	8004910 <puts>
  /*else {
      printf("Measurement read failed\r\n");
  }*/


  if (sen54_read_measurements(&hi2c1, sensor_data, sizeof(sensor_data)) == HAL_OK) {
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	223c      	movs	r2, #60	@ 0x3c
 80005dc:	4619      	mov	r1, r3
 80005de:	488d      	ldr	r0, [pc, #564]	@ (8000814 <main+0x290>)
 80005e0:	f000 fbf0 	bl	8000dc4 <sen54_read_measurements>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f040 80db 	bne.w	80007a2 <main+0x21e>

	      /*for (int i = 0; i < sizeof(sensor_data); i++) {
	          printf("%02X ", sensor_data[i]);
	      }*/

	      printf("Mass Concentration PM1.0:\r\n");
 80005ec:	488c      	ldr	r0, [pc, #560]	@ (8000820 <main+0x29c>)
 80005ee:	f004 f98f 	bl	8004910 <puts>
	      for (int i = 0; i < 2; i++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80005f6:	e00a      	b.n	800060e <main+0x8a>
	      	  printf("%02X ", sensor_data[i]);
 80005f8:	1d3a      	adds	r2, r7, #4
 80005fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	4885      	ldr	r0, [pc, #532]	@ (8000818 <main+0x294>)
 8000604:	f004 f91c 	bl	8004840 <iprintf>
	      for (int i = 0; i < 2; i++) {
 8000608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800060a:	3301      	adds	r3, #1
 800060c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800060e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000610:	2b01      	cmp	r3, #1
 8000612:	ddf1      	ble.n	80005f8 <main+0x74>
	      }
	      printf("\r\n");
 8000614:	4881      	ldr	r0, [pc, #516]	@ (800081c <main+0x298>)
 8000616:	f004 f97b 	bl	8004910 <puts>


	      printf("Mass Concentration PM2.5:\r\n");
 800061a:	4882      	ldr	r0, [pc, #520]	@ (8000824 <main+0x2a0>)
 800061c:	f004 f978 	bl	8004910 <puts>
	      for (int i = 3; i < 5; i++) {
 8000620:	2303      	movs	r3, #3
 8000622:	677b      	str	r3, [r7, #116]	@ 0x74
 8000624:	e00a      	b.n	800063c <main+0xb8>
	    	  printf("%02X ", sensor_data[i]);
 8000626:	1d3a      	adds	r2, r7, #4
 8000628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	4879      	ldr	r0, [pc, #484]	@ (8000818 <main+0x294>)
 8000632:	f004 f905 	bl	8004840 <iprintf>
	      for (int i = 3; i < 5; i++) {
 8000636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000638:	3301      	adds	r3, #1
 800063a:	677b      	str	r3, [r7, #116]	@ 0x74
 800063c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800063e:	2b04      	cmp	r3, #4
 8000640:	ddf1      	ble.n	8000626 <main+0xa2>
	      }
	      printf("\r\n");
 8000642:	4876      	ldr	r0, [pc, #472]	@ (800081c <main+0x298>)
 8000644:	f004 f964 	bl	8004910 <puts>

	      printf("Mass Concentration PM4.0:\r\n");
 8000648:	4877      	ldr	r0, [pc, #476]	@ (8000828 <main+0x2a4>)
 800064a:	f004 f961 	bl	8004910 <puts>
	      for (int i = 6; i < 8; i++) {
 800064e:	2306      	movs	r3, #6
 8000650:	673b      	str	r3, [r7, #112]	@ 0x70
 8000652:	e00a      	b.n	800066a <main+0xe6>
	    	  printf("%02X ", sensor_data[i]);
 8000654:	1d3a      	adds	r2, r7, #4
 8000656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	486e      	ldr	r0, [pc, #440]	@ (8000818 <main+0x294>)
 8000660:	f004 f8ee 	bl	8004840 <iprintf>
	      for (int i = 6; i < 8; i++) {
 8000664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000666:	3301      	adds	r3, #1
 8000668:	673b      	str	r3, [r7, #112]	@ 0x70
 800066a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800066c:	2b07      	cmp	r3, #7
 800066e:	ddf1      	ble.n	8000654 <main+0xd0>
	      }
	      printf("\r\n");
 8000670:	486a      	ldr	r0, [pc, #424]	@ (800081c <main+0x298>)
 8000672:	f004 f94d 	bl	8004910 <puts>

	      printf("Mass Concentration PM10:\r\n");
 8000676:	486d      	ldr	r0, [pc, #436]	@ (800082c <main+0x2a8>)
 8000678:	f004 f94a 	bl	8004910 <puts>
	      for (int i = 9; i < 11; i++) {
 800067c:	2309      	movs	r3, #9
 800067e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000680:	e00a      	b.n	8000698 <main+0x114>
	    	  printf("%02X ", sensor_data[i]);
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	4862      	ldr	r0, [pc, #392]	@ (8000818 <main+0x294>)
 800068e:	f004 f8d7 	bl	8004840 <iprintf>
	      for (int i = 9; i < 11; i++) {
 8000692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000694:	3301      	adds	r3, #1
 8000696:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800069a:	2b0a      	cmp	r3, #10
 800069c:	ddf1      	ble.n	8000682 <main+0xfe>
	      }
	      printf("\r\n");
 800069e:	485f      	ldr	r0, [pc, #380]	@ (800081c <main+0x298>)
 80006a0:	f004 f936 	bl	8004910 <puts>


	      printf("Compensated Ambient Humidity:\r\n");
 80006a4:	4862      	ldr	r0, [pc, #392]	@ (8000830 <main+0x2ac>)
 80006a6:	f004 f933 	bl	8004910 <puts>
	      for (int i = 12; i < 14; i++) {
 80006aa:	230c      	movs	r3, #12
 80006ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80006ae:	e00a      	b.n	80006c6 <main+0x142>
	    	  printf("%02X ", sensor_data[i]);
 80006b0:	1d3a      	adds	r2, r7, #4
 80006b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4857      	ldr	r0, [pc, #348]	@ (8000818 <main+0x294>)
 80006bc:	f004 f8c0 	bl	8004840 <iprintf>
	      for (int i = 12; i < 14; i++) {
 80006c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006c2:	3301      	adds	r3, #1
 80006c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80006c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006c8:	2b0d      	cmp	r3, #13
 80006ca:	ddf1      	ble.n	80006b0 <main+0x12c>
	      }
	      printf("\r\n");
 80006cc:	4853      	ldr	r0, [pc, #332]	@ (800081c <main+0x298>)
 80006ce:	f004 f91f 	bl	8004910 <puts>

	      printf("Compensated Ambient Temperature:\r\n");
 80006d2:	4858      	ldr	r0, [pc, #352]	@ (8000834 <main+0x2b0>)
 80006d4:	f004 f91c 	bl	8004910 <puts>
	      for (int i = 15; i < 17; i++) {
 80006d8:	230f      	movs	r3, #15
 80006da:	667b      	str	r3, [r7, #100]	@ 0x64
 80006dc:	e00a      	b.n	80006f4 <main+0x170>
	          printf("%02X ", sensor_data[i]);
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	484b      	ldr	r0, [pc, #300]	@ (8000818 <main+0x294>)
 80006ea:	f004 f8a9 	bl	8004840 <iprintf>
	      for (int i = 15; i < 17; i++) {
 80006ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006f0:	3301      	adds	r3, #1
 80006f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80006f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006f6:	2b10      	cmp	r3, #16
 80006f8:	ddf1      	ble.n	80006de <main+0x15a>
	      }
	      uint16_t raw_temp = ((uint16_t)sensor_data[15 * 3] << 8) | sensor_data[15 * 3 + 1];
 80006fa:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b21a      	sxth	r2, r3
 8000702:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000706:	b21b      	sxth	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b21b      	sxth	r3, r3
 800070c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	      float temperature_celsius = raw_temp / 200.0f;
 8000710:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8000838 <main+0x2b4>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	      int temp_int = (int)(temperature_celsius + 0.5f);
 8000728:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800072c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000738:	ee17 3a90 	vmov	r3, s15
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	      printf("\r\nTemperature: %.d °C\r\n", temp_int);
 800073e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000740:	483e      	ldr	r0, [pc, #248]	@ (800083c <main+0x2b8>)
 8000742:	f004 f87d 	bl	8004840 <iprintf>


	      printf("VOC Index:\r\n");
 8000746:	483e      	ldr	r0, [pc, #248]	@ (8000840 <main+0x2bc>)
 8000748:	f004 f8e2 	bl	8004910 <puts>
	      for (int i = 18; i < 20; i++) {
 800074c:	2312      	movs	r3, #18
 800074e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000750:	e00a      	b.n	8000768 <main+0x1e4>
	    	  printf("%02X ", sensor_data[i]);
 8000752:	1d3a      	adds	r2, r7, #4
 8000754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4619      	mov	r1, r3
 800075c:	482e      	ldr	r0, [pc, #184]	@ (8000818 <main+0x294>)
 800075e:	f004 f86f 	bl	8004840 <iprintf>
	      for (int i = 18; i < 20; i++) {
 8000762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000764:	3301      	adds	r3, #1
 8000766:	663b      	str	r3, [r7, #96]	@ 0x60
 8000768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800076a:	2b13      	cmp	r3, #19
 800076c:	ddf1      	ble.n	8000752 <main+0x1ce>
	      }
	      printf("\r\n");
 800076e:	482b      	ldr	r0, [pc, #172]	@ (800081c <main+0x298>)
 8000770:	f004 f8ce 	bl	8004910 <puts>

	      printf("VOC Index:\r\n");
 8000774:	4832      	ldr	r0, [pc, #200]	@ (8000840 <main+0x2bc>)
 8000776:	f004 f8cb 	bl	8004910 <puts>
	      for (int i = 21; i < 23; i++) {
 800077a:	2315      	movs	r3, #21
 800077c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800077e:	e00a      	b.n	8000796 <main+0x212>
	    	  printf("%02X ", sensor_data[i]);
 8000780:	1d3a      	adds	r2, r7, #4
 8000782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	4823      	ldr	r0, [pc, #140]	@ (8000818 <main+0x294>)
 800078c:	f004 f858 	bl	8004840 <iprintf>
	      for (int i = 21; i < 23; i++) {
 8000790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000792:	3301      	adds	r3, #1
 8000794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000798:	2b16      	cmp	r3, #22
 800079a:	ddf1      	ble.n	8000780 <main+0x1fc>
	      }
	      printf("\r\n");
 800079c:	481f      	ldr	r0, [pc, #124]	@ (800081c <main+0x298>)
 800079e:	f004 f8b7 	bl	8004910 <puts>
    /* USER CODE END WHILE */



    /* USER CODE BEGIN 3 */
	  printf("Compensated Ambient Temperature:\r\n");
 80007a2:	4824      	ldr	r0, [pc, #144]	@ (8000834 <main+0x2b0>)
 80007a4:	f004 f8b4 	bl	8004910 <puts>
	  for (int i = 15; i < 17; i++) {
 80007a8:	230f      	movs	r3, #15
 80007aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80007ac:	e00a      	b.n	80007c4 <main+0x240>
		  printf("%02X ", sensor_data[i]);
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007b2:	4413      	add	r3, r2
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4817      	ldr	r0, [pc, #92]	@ (8000818 <main+0x294>)
 80007ba:	f004 f841 	bl	8004840 <iprintf>
	  for (int i = 15; i < 17; i++) {
 80007be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007c0:	3301      	adds	r3, #1
 80007c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80007c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007c6:	2b10      	cmp	r3, #16
 80007c8:	ddf1      	ble.n	80007ae <main+0x22a>
	  }
	  uint16_t raw_temp = ((uint16_t)sensor_data[15] << 8) | sensor_data[16];
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	7d3b      	ldrb	r3, [r7, #20]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	  float temperature_celsius = raw_temp / 200.0f;
 80007dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000838 <main+0x2b4>
 80007ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	  int temp_int = (int)(temperature_celsius + 0.5f);
 80007f4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80007f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80007fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000804:	ee17 3a90 	vmov	r3, s15
 8000808:	643b      	str	r3, [r7, #64]	@ 0x40
	  printf("\r\nTemperature: %.d °C\r\n", temp_int);
 800080a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <main+0x2b8>)
 800080e:	f004 f817 	bl	8004840 <iprintf>
  {
 8000812:	e7c6      	b.n	80007a2 <main+0x21e>
 8000814:	20000084 	.word	0x20000084
 8000818:	080055ec 	.word	0x080055ec
 800081c:	080055f4 	.word	0x080055f4
 8000820:	080055f8 	.word	0x080055f8
 8000824:	08005614 	.word	0x08005614
 8000828:	08005630 	.word	0x08005630
 800082c:	0800564c 	.word	0x0800564c
 8000830:	08005668 	.word	0x08005668
 8000834:	08005688 	.word	0x08005688
 8000838:	43480000 	.word	0x43480000
 800083c:	080056ac 	.word	0x080056ac
 8000840:	080056c8 	.word	0x080056c8

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b096      	sub	sp, #88	@ 0x58
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2244      	movs	r2, #68	@ 0x44
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f004 f864 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000866:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800086a:	f001 fe69 	bl	8002540 <HAL_PWREx_ControlVoltageScaling>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000874:	f000 faa0 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000878:	2310      	movs	r3, #16
 800087a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000884:	2360      	movs	r3, #96	@ 0x60
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800088c:	2301      	movs	r3, #1
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000894:	2328      	movs	r3, #40	@ 0x28
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000898:	2307      	movs	r3, #7
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fe9f 	bl	80025ec <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008b4:	f000 fa80 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	2104      	movs	r1, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fa67 	bl	8002da4 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008dc:	f000 fa6c 	bl	8000db8 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3758      	adds	r7, #88	@ 0x58
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <MX_I2C1_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <MX_I2C1_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_I2C1_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <MX_I2C1_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_I2C1_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_I2C1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	@ (800095c <MX_I2C1_Init+0x74>)
 8000924:	f001 f817 	bl	8001956 <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800092e:	f000 fa43 	bl	8000db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <MX_I2C1_Init+0x74>)
 8000936:	f001 fd5d 	bl	80023f4 <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fa3a 	bl	8000db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_I2C1_Init+0x74>)
 8000948:	f001 fd9f 	bl	800248a <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 fa31 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000084 	.word	0x20000084
 8000960:	40005400 	.word	0x40005400
 8000964:	10d19ce4 	.word	0x10d19ce4

08000968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <MX_USART1_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 80009ac:	f003 f8da 	bl	8003b64 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f9ff 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000d8 	.word	0x200000d8
 80009c4:	40013800 	.word	0x40013800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4bbc      	ldr	r3, [pc, #752]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4abb      	ldr	r2, [pc, #748]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4bb9      	ldr	r3, [pc, #740]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4bb6      	ldr	r3, [pc, #728]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4ab5      	ldr	r2, [pc, #724]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4bb3      	ldr	r3, [pc, #716]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4bb0      	ldr	r3, [pc, #704]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4aaf      	ldr	r2, [pc, #700]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4bad      	ldr	r3, [pc, #692]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	4baa      	ldr	r3, [pc, #680]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4aa9      	ldr	r2, [pc, #676]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4ba7      	ldr	r3, [pc, #668]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4ba4      	ldr	r3, [pc, #656]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4aa3      	ldr	r2, [pc, #652]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4ba1      	ldr	r3, [pc, #644]	@ (8000cd0 <MX_GPIO_Init+0x308>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a56:	2200      	movs	r2, #0
 8000a58:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a5c:	489d      	ldr	r0, [pc, #628]	@ (8000cd4 <MX_GPIO_Init+0x30c>)
 8000a5e:	f000 ff3f 	bl	80018e0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_RST_GPIO_Port, ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a68:	489b      	ldr	r0, [pc, #620]	@ (8000cd8 <MX_GPIO_Init+0x310>)
 8000a6a:	f000 ff39 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a74:	4899      	ldr	r0, [pc, #612]	@ (8000cdc <MX_GPIO_Init+0x314>)
 8000a76:	f000 ff33 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a80:	4896      	ldr	r0, [pc, #600]	@ (8000cdc <MX_GPIO_Init+0x314>)
 8000a82:	f000 ff2d 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a8c:	4894      	ldr	r0, [pc, #592]	@ (8000ce0 <MX_GPIO_Init+0x318>)
 8000a8e:	f000 ff27 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f000 ff20 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	488b      	ldr	r0, [pc, #556]	@ (8000cd4 <MX_GPIO_Init+0x30c>)
 8000aa6:	f000 ff1b 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000aaa:	233f      	movs	r3, #63	@ 0x3f
 8000aac:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aae:	230b      	movs	r3, #11
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4888      	ldr	r0, [pc, #544]	@ (8000ce0 <MX_GPIO_Init+0x318>)
 8000abe:	f000 fd65 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f000 fd54 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af4:	2307      	movs	r3, #7
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b02:	f000 fd43 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b06:	2310      	movs	r3, #16
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b0a:	230b      	movs	r3, #11
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1c:	f000 fd36 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b20:	23e0      	movs	r3, #224	@ 0xe0
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b30:	2305      	movs	r3, #5
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3e:	f000 fd25 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b42:	2301      	movs	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	485f      	ldr	r0, [pc, #380]	@ (8000cd4 <MX_GPIO_Init+0x30c>)
 8000b58:	f000 fd18 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b60:	230b      	movs	r3, #11
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4859      	ldr	r0, [pc, #356]	@ (8000cd4 <MX_GPIO_Init+0x30c>)
 8000b70:	f000 fd0c 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b74:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b78:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4851      	ldr	r0, [pc, #324]	@ (8000cd4 <MX_GPIO_Init+0x30c>)
 8000b8e:	f000 fcfd 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000b92:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	484a      	ldr	r0, [pc, #296]	@ (8000cd8 <MX_GPIO_Init+0x310>)
 8000bb0:	f000 fcec 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : ISM43362_RST_Pin */
  GPIO_InitStruct.Pin = ISM43362_RST_Pin;
 8000bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ISM43362_RST_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4842      	ldr	r0, [pc, #264]	@ (8000cd8 <MX_GPIO_Init+0x310>)
 8000bce:	f000 fcdd 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000bd2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000bd6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000be4:	230a      	movs	r3, #10
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	483a      	ldr	r0, [pc, #232]	@ (8000cd8 <MX_GPIO_Init+0x310>)
 8000bf0:	f000 fccc 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000bf4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c06:	2304      	movs	r3, #4
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4830      	ldr	r0, [pc, #192]	@ (8000cd4 <MX_GPIO_Init+0x30c>)
 8000c12:	f000 fcbb 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000c16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	482a      	ldr	r0, [pc, #168]	@ (8000cdc <MX_GPIO_Init+0x314>)
 8000c34:	f000 fcaa 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c38:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c3c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4823      	ldr	r0, [pc, #140]	@ (8000cdc <MX_GPIO_Init+0x314>)
 8000c50:	f000 fc9c 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c54:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481b      	ldr	r0, [pc, #108]	@ (8000cdc <MX_GPIO_Init+0x314>)
 8000c6e:	f000 fc8d 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4815      	ldr	r0, [pc, #84]	@ (8000ce0 <MX_GPIO_Init+0x318>)
 8000c8c:	f000 fc7e 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c90:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <MX_GPIO_Init+0x318>)
 8000ca8:	f000 fc70 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000cac:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc8:	f000 fc60 	bl	800158c <HAL_GPIO_Init>
 8000ccc:	e00a      	b.n	8000ce4 <MX_GPIO_Init+0x31c>
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	48001000 	.word	0x48001000
 8000cdc:	48000c00 	.word	0x48000c00
 8000ce0:	48000800 	.word	0x48000800

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f000 fc46 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000d00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d12:	230a      	movs	r3, #10
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d20:	f000 fc34 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000d24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d36:	2306      	movs	r3, #6
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481b      	ldr	r0, [pc, #108]	@ (8000db0 <MX_GPIO_Init+0x3e8>)
 8000d42:	f000 fc23 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d56:	2305      	movs	r3, #5
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <MX_GPIO_Init+0x3ec>)
 8000d62:	f000 fc13 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin;
 8000d66:	2318      	movs	r3, #24
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d76:	2307      	movs	r3, #7
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <MX_GPIO_Init+0x3ec>)
 8000d82:	f000 fc03 	bl	800158c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2017      	movs	r0, #23
 8000d8c:	f000 fbc7 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d90:	2017      	movs	r0, #23
 8000d92:	f000 fbe0 	bl	8001556 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2028      	movs	r0, #40	@ 0x28
 8000d9c:	f000 fbbf 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da0:	2028      	movs	r0, #40	@ 0x28
 8000da2:	f000 fbd8 	bl	8001556 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	48000800 	.word	0x48000800
 8000db4:	48000c00 	.word	0x48000c00

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <sen54_read_measurements>:
    return status;
}

// Read raw measurement data into buffer
HAL_StatusTypeDef sen54_read_measurements(I2C_HandleTypeDef *hi2c, uint8_t *buffer, uint16_t len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    // Request data from sensor
    status = HAL_I2C_Master_Transmit(hi2c, SEN54_I2C_ADDR, (uint8_t*)read_measurement_cmd, sizeof(read_measurement_cmd), HAL_MAX_DELAY);
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2302      	movs	r3, #2
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <sen54_read_measurements+0x54>)
 8000ddc:	21d2      	movs	r1, #210	@ 0xd2
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f000 fe54 	bl	8001a8c <HAL_I2C_Master_Transmit>
 8000de4:	4603      	mov	r3, r0
 8000de6:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <sen54_read_measurements+0x2e>
        return status;
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	e00e      	b.n	8000e10 <sen54_read_measurements+0x4c>
    }

    // Wait briefly before reading
    HAL_Delay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f000 fa94 	bl	8001320 <HAL_Delay>

    // Read sensor response into buffer
    status = HAL_I2C_Master_Receive(hi2c, SEN54_I2C_ADDR, buffer, len, HAL_MAX_DELAY);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	21d2      	movs	r1, #210	@ 0xd2
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f000 ff59 	bl	8001cbc <HAL_I2C_Master_Receive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	75fb      	strb	r3, [r7, #23]
    return status;
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	08005708 	.word	0x08005708

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ac      	sub	sp, #176	@ 0xb0
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2288      	movs	r2, #136	@ 0x88
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fd4b 	bl	8004920 <memset>
  if(hi2c->Instance==I2C1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <HAL_I2C_MspInit+0xb0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d13b      	bne.n	8000f0c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e94:	2340      	movs	r3, #64	@ 0x40
 8000e96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 f9a3 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eac:	f7ff ff84 	bl	8000db8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_I2C_MspInit+0xb4>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <HAL_I2C_MspInit+0xb4>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <HAL_I2C_MspInit+0xb4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|ARD_D14_Pin;
 8000ec8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed0:	2312      	movs	r3, #18
 8000ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eec:	4619      	mov	r1, r3
 8000eee:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <HAL_I2C_MspInit+0xb8>)
 8000ef0:	f000 fb4c 	bl	800158c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_I2C_MspInit+0xb4>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <HAL_I2C_MspInit+0xb4>)
 8000efa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_I2C_MspInit+0xb4>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f0c:	bf00      	nop
 8000f0e:	37b0      	adds	r7, #176	@ 0xb0
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40005400 	.word	0x40005400
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ac      	sub	sp, #176	@ 0xb0
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2288      	movs	r2, #136	@ 0x88
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fced 	bl	8004920 <memset>
  if(huart->Instance==USART1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <HAL_UART_MspInit+0xb0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d13a      	bne.n	8000fc6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 f945 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff ff26 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f70:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f76:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9c:	23c0      	movs	r3, #192	@ 0xc0
 8000f9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <HAL_UART_MspInit+0xb8>)
 8000fc2:	f000 fae3 	bl	800158c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fc6:	bf00      	nop
 8000fc8:	37b0      	adds	r7, #176	@ 0xb0
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 f955 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}

0800103a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800103e:	2080      	movs	r0, #128	@ 0x80
 8001040:	f000 fc66 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001044:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001048:	f000 fc62 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001054:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001058:	f000 fc5a 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800105c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001060:	f000 fc56 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001064:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001068:	f000 fc52 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800106c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001070:	f000 fc4e 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e00a      	b.n	80010a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800108a:	f3af 8000 	nop.w
 800108e:	4601      	mov	r1, r0
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	60ba      	str	r2, [r7, #8]
 8001096:	b2ca      	uxtb	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf0      	blt.n	800108a <_read+0x12>
  }

  return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e009      	b.n	80010d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa47 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf1      	blt.n	80010c4 <_write+0x12>
  }
  return len;
 80010e0:	687b      	ldr	r3, [r7, #4]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_close>:

int _close(int file)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001112:	605a      	str	r2, [r3, #4]
  return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_isatty>:

int _isatty(int file)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f003 fbd4 	bl	8004930 <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20018000 	.word	0x20018000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	20000160 	.word	0x20000160
 80011bc:	200002b8 	.word	0x200002b8

080011c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800121c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff ffea 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	@ (8001224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	@ (8001230 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f003 fb93 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001216:	f7ff f9b5 	bl	8000584 <main>

0800121a <LoopForever>:

LoopForever:
    b LoopForever
 800121a:	e7fe      	b.n	800121a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800121c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001228:	08005798 	.word	0x08005798
  ldr r2, =_sbss
 800122c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001230:	200002b4 	.word	0x200002b4

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>

08001236 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f961 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f80e 	bl	8001268 <HAL_InitTick>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	e001      	b.n	800125c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001258:	f7ff fde0 	bl	8000e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125c:	79fb      	ldrb	r3, [r7, #7]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d023      	beq.n	80012c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_InitTick+0x70>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f96d 	bl	8001572 <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d809      	bhi.n	80012b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ac:	f000 f937 	bl	800151e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_InitTick+0x74>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e007      	b.n	80012c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e004      	b.n	80012c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e001      	b.n	80012c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008
 8001304:	20000164 	.word	0x20000164

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000164 	.word	0x20000164

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	e17f      	b.n	800189c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8171 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x40>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d118      	bne.n	800166c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	6939      	ldr	r1, [r7, #16]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80ac 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b5f      	ldr	r3, [pc, #380]	@ (80018bc <HAL_GPIO_Init+0x330>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	4a5e      	ldr	r2, [pc, #376]	@ (80018bc <HAL_GPIO_Init+0x330>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	@ 0x60
 800174a:	4b5c      	ldr	r3, [pc, #368]	@ (80018bc <HAL_GPIO_Init+0x330>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001756:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HAL_GPIO_Init+0x334>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001780:	d025      	beq.n	80017ce <HAL_GPIO_Init+0x242>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	@ (80018c4 <HAL_GPIO_Init+0x338>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x23e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4e      	ldr	r2, [pc, #312]	@ (80018c8 <HAL_GPIO_Init+0x33c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x23a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4d      	ldr	r2, [pc, #308]	@ (80018cc <HAL_GPIO_Init+0x340>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x236>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4c      	ldr	r2, [pc, #304]	@ (80018d0 <HAL_GPIO_Init+0x344>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x232>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	@ (80018d4 <HAL_GPIO_Init+0x348>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x22e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4a      	ldr	r2, [pc, #296]	@ (80018d8 <HAL_GPIO_Init+0x34c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x22a>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ce:	2300      	movs	r3, #0
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e0:	4937      	ldr	r1, [pc, #220]	@ (80018c0 <HAL_GPIO_Init+0x334>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <HAL_GPIO_Init+0x350>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001812:	4a32      	ldr	r2, [pc, #200]	@ (80018dc <HAL_GPIO_Init+0x350>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <HAL_GPIO_Init+0x350>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183c:	4a27      	ldr	r2, [pc, #156]	@ (80018dc <HAL_GPIO_Init+0x350>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <HAL_GPIO_Init+0x350>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001866:	4a1d      	ldr	r2, [pc, #116]	@ (80018dc <HAL_GPIO_Init+0x350>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_GPIO_Init+0x350>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001890:	4a12      	ldr	r2, [pc, #72]	@ (80018dc <HAL_GPIO_Init+0x350>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f47f ae78 	bne.w	800159c <HAL_GPIO_Init+0x10>
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48000c00 	.word	0x48000c00
 80018d0:	48001000 	.word	0x48001000
 80018d4:	48001400 	.word	0x48001400
 80018d8:	48001800 	.word	0x48001800
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f806 	bl	8001940 <HAL_GPIO_EXTI_Callback>
  }
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e08d      	b.n	8001a84 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d106      	bne.n	8001982 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fa71 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2224      	movs	r2, #36	@ 0x24
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d107      	bne.n	80019d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e006      	b.n	80019de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d108      	bne.n	80019f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	e007      	b.n	8001a08 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69d9      	ldr	r1, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	461a      	mov	r2, r3
 8001a98:	460b      	mov	r3, r1
 8001a9a:	817b      	strh	r3, [r7, #10]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	f040 80fd 	bne.w	8001ca8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_I2C_Master_Transmit+0x30>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e0f6      	b.n	8001caa <HAL_I2C_Master_Transmit+0x21e>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ac4:	f7ff fc20 	bl	8001308 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2319      	movs	r3, #25
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fa0a 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0e1      	b.n	8001caa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2221      	movs	r2, #33	@ 0x21
 8001aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2210      	movs	r2, #16
 8001af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	893a      	ldrh	r2, [r7, #8]
 8001b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2bff      	cmp	r3, #255	@ 0xff
 8001b16:	d906      	bls.n	8001b26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e007      	b.n	8001b36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d024      	beq.n	8001b88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	8979      	ldrh	r1, [r7, #10]
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb4 <HAL_I2C_Master_Transmit+0x228>)
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fc05 	bl	8002390 <I2C_TransferConfig>
 8001b86:	e066      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	8979      	ldrh	r1, [r7, #10]
 8001b90:	4b48      	ldr	r3, [pc, #288]	@ (8001cb4 <HAL_I2C_Master_Transmit+0x228>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fbfa 	bl	8002390 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b9c:	e05b      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f9fd 	bl	8001fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07b      	b.n	8001caa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d034      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0x1ca>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d130      	bne.n	8001c56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2180      	movs	r1, #128	@ 0x80
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f976 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e04d      	b.n	8001caa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2bff      	cmp	r3, #255	@ 0xff
 8001c16:	d90e      	bls.n	8001c36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	22ff      	movs	r2, #255	@ 0xff
 8001c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	8979      	ldrh	r1, [r7, #10]
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fbae 	bl	8002390 <I2C_TransferConfig>
 8001c34:	e00f      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	8979      	ldrh	r1, [r7, #10]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fb9d 	bl	8002390 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d19e      	bne.n	8001b9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	6a39      	ldr	r1, [r7, #32]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f9e3 	bl	8002030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e01a      	b.n	8001caa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6859      	ldr	r1, [r3, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_I2C_Master_Transmit+0x22c>)
 8001c88:	400b      	ands	r3, r1
 8001c8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001ca8:	2302      	movs	r3, #2
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	80002000 	.word	0x80002000
 8001cb8:	fe00e800 	.word	0xfe00e800

08001cbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	817b      	strh	r3, [r7, #10]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	f040 80db 	bne.w	8001e94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_I2C_Master_Receive+0x30>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0d4      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fb08 	bl	8001308 <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2319      	movs	r3, #25
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f8f2 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0bf      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2222      	movs	r2, #34	@ 0x22
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2210      	movs	r2, #16
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	893a      	ldrh	r2, [r7, #8]
 8001d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2bff      	cmp	r3, #255	@ 0xff
 8001d46:	d90e      	bls.n	8001d66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	8979      	ldrh	r1, [r7, #10]
 8001d56:	4b52      	ldr	r3, [pc, #328]	@ (8001ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fb16 	bl	8002390 <I2C_TransferConfig>
 8001d64:	e06d      	b.n	8001e42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	8979      	ldrh	r1, [r7, #10]
 8001d78:	4b49      	ldr	r3, [pc, #292]	@ (8001ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 fb05 	bl	8002390 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d86:	e05c      	b.n	8001e42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6a39      	ldr	r1, [r7, #32]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f993 	bl	80020b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e07c      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d034      	beq.n	8001e42 <HAL_I2C_Master_Receive+0x186>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d130      	bne.n	8001e42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2200      	movs	r2, #0
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f880 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e04d      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2bff      	cmp	r3, #255	@ 0xff
 8001e02:	d90e      	bls.n	8001e22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	22ff      	movs	r2, #255	@ 0xff
 8001e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fab8 	bl	8002390 <I2C_TransferConfig>
 8001e20:	e00f      	b.n	8001e42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 faa7 	bl	8002390 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d19d      	bne.n	8001d88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	6a39      	ldr	r1, [r7, #32]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f8ed 	bl	8002030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e01a      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_I2C_Master_Receive+0x1e8>)
 8001e74:	400b      	ands	r3, r1
 8001e76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	80002400 	.word	0x80002400
 8001ea4:	fe00e800 	.word	0xfe00e800

08001ea8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d103      	bne.n	8001ec6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d007      	beq.n	8001ee4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	619a      	str	r2, [r3, #24]
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f00:	e03b      	b.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f962 	bl	80021d0 <I2C_IsErrorOccurred>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e041      	b.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f1c:	d02d      	beq.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1e:	f7ff f9f3 	bl	8001308 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d302      	bcc.n	8001f34 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d122      	bne.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d113      	bne.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f043 0220 	orr.w	r2, r3, #32
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4013      	ands	r3, r2
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d0b4      	beq.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fae:	e033      	b.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f90b 	bl	80021d0 <I2C_IsErrorOccurred>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e031      	b.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fca:	d025      	beq.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7ff f99c 	bl	8001308 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d11a      	bne.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d013      	beq.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d1c4      	bne.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800203c:	e02f      	b.n	800209e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f8c4 	bl	80021d0 <I2C_IsErrorOccurred>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e02d      	b.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7ff f959 	bl	8001308 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11a      	bne.n	800209e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b20      	cmp	r3, #32
 8002074:	d013      	beq.n	800209e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e007      	b.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d1c8      	bne.n	800203e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80020c8:	e071      	b.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f87e 	bl	80021d0 <I2C_IsErrorOccurred>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d13b      	bne.n	8002164 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d138      	bne.n	8002164 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d105      	bne.n	800210c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b10      	cmp	r3, #16
 8002118:	d121      	bne.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2210      	movs	r2, #16
 8002120:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2204      	movs	r2, #4
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2220      	movs	r2, #32
 800212e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800213c:	400b      	ands	r3, r1
 800213e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	75fb      	strb	r3, [r7, #23]
 800215c:	e002      	b.n	8002164 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002164:	f7ff f8d0 	bl	8001308 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	429a      	cmp	r2, r3
 8002172:	d302      	bcc.n	800217a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d119      	bne.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d116      	bne.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00f      	beq.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d002      	beq.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d083      	beq.n	80020ca <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	fe00e800 	.word	0xfe00e800

080021d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d068      	beq.n	80022ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2210      	movs	r2, #16
 8002202:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002204:	e049      	b.n	800229a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800220c:	d045      	beq.n	800229a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7ff f87b 	bl	8001308 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_IsErrorOccurred+0x54>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d13a      	bne.n	800229a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002236:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002246:	d121      	bne.n	800228c <I2C_IsErrorOccurred+0xbc>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800224e:	d01d      	beq.n	800228c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b20      	cmp	r3, #32
 8002254:	d01a      	beq.n	800228c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002264:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002266:	f7ff f84f 	bl	8001308 <HAL_GetTick>
 800226a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226c:	e00e      	b.n	800228c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800226e:	f7ff f84b 	bl	8001308 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b19      	cmp	r3, #25
 800227a:	d907      	bls.n	800228c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f043 0320 	orr.w	r3, r3, #32
 8002282:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800228a:	e006      	b.n	800229a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d1e9      	bne.n	800226e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d003      	beq.n	80022b0 <I2C_IsErrorOccurred+0xe0>
 80022a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0aa      	beq.n	8002206 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002312:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800233c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01c      	beq.n	800237e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fdaf 	bl	8001ea8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <I2C_IsErrorOccurred+0x1bc>)
 8002356:	400b      	ands	r3, r1
 8002358:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800237e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002382:	4618      	mov	r0, r3
 8002384:	3728      	adds	r7, #40	@ 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	fe00e800 	.word	0xfe00e800

08002390 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	4613      	mov	r3, r2
 80023a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023a8:	7a7b      	ldrb	r3, [r7, #9]
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	0d5b      	lsrs	r3, r3, #21
 80023ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <I2C_TransferConfig+0x60>)
 80023d0:	430b      	orrs	r3, r1
 80023d2:	43db      	mvns	r3, r3
 80023d4:	ea02 0103 	and.w	r1, r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	03ff63ff 	.word	0x03ff63ff

080023f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b20      	cmp	r3, #32
 8002408:	d138      	bne.n	800247c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002414:	2302      	movs	r3, #2
 8002416:	e032      	b.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	@ 0x24
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002446:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	d139      	bne.n	8002514 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e033      	b.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	@ 0x24
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002528:	4b04      	ldr	r3, [pc, #16]	@ (800253c <HAL_PWREx_GetVoltageRange+0x18>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000

08002540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800254e:	d130      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002550:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800255c:	d038      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800255e:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002566:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002568:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800256e:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2232      	movs	r2, #50	@ 0x32
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9b      	lsrs	r3, r3, #18
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002584:	e002      	b.n	800258c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002598:	d102      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f2      	bne.n	8002586 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a0:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ac:	d110      	bne.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e00f      	b.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025be:	d007      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025c8:	4a05      	ldr	r2, [pc, #20]	@ (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000
 80025e4:	20000000 	.word	0x20000000
 80025e8:	431bde83 	.word	0x431bde83

080025ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e3ca      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b97      	ldr	r3, [pc, #604]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b94      	ldr	r3, [pc, #592]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80e4 	beq.w	80027e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_RCC_OscConfig+0x4a>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f040 808b 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 8087 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002636:	4b89      	ldr	r3, [pc, #548]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x62>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e3a2      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	4b82      	ldr	r3, [pc, #520]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_RCC_OscConfig+0x7c>
 800265e:	4b7f      	ldr	r3, [pc, #508]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002666:	e005      	b.n	8002674 <HAL_RCC_OscConfig+0x88>
 8002668:	4b7c      	ldr	r3, [pc, #496]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002674:	4293      	cmp	r3, r2
 8002676:	d223      	bcs.n	80026c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fd55 	bl	800312c <RCC_SetFlashLatencyFromMSIRange>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e383      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268c:	4b73      	ldr	r3, [pc, #460]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a72      	ldr	r2, [pc, #456]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002692:	f043 0308 	orr.w	r3, r3, #8
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b70      	ldr	r3, [pc, #448]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	496d      	ldr	r1, [pc, #436]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026aa:	4b6c      	ldr	r3, [pc, #432]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	4968      	ldr	r1, [pc, #416]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
 80026be:	e025      	b.n	800270c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c0:	4b66      	ldr	r3, [pc, #408]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b63      	ldr	r3, [pc, #396]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4960      	ldr	r1, [pc, #384]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026de:	4b5f      	ldr	r3, [pc, #380]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	495b      	ldr	r1, [pc, #364]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fd15 	bl	800312c <RCC_SetFlashLatencyFromMSIRange>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e343      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270c:	f000 fc4a 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b52      	ldr	r3, [pc, #328]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4950      	ldr	r1, [pc, #320]	@ (8002860 <HAL_RCC_OscConfig+0x274>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	4a4e      	ldr	r2, [pc, #312]	@ (8002864 <HAL_RCC_OscConfig+0x278>)
 800272a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800272c:	4b4e      	ldr	r3, [pc, #312]	@ (8002868 <HAL_RCC_OscConfig+0x27c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fd99 	bl	8001268 <HAL_InitTick>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d052      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	e327      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d032      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274c:	4b43      	ldr	r3, [pc, #268]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a42      	ldr	r2, [pc, #264]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002758:	f7fe fdd6 	bl	8001308 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002760:	f7fe fdd2 	bl	8001308 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e310      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002772:	4b3a      	ldr	r3, [pc, #232]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b37      	ldr	r3, [pc, #220]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a36      	ldr	r2, [pc, #216]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b34      	ldr	r3, [pc, #208]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4931      	ldr	r1, [pc, #196]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279c:	4b2f      	ldr	r3, [pc, #188]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	492c      	ldr	r1, [pc, #176]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e01a      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a29      	ldr	r2, [pc, #164]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027be:	f7fe fda3 	bl	8001308 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c6:	f7fe fd9f 	bl	8001308 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e2dd      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d8:	4b20      	ldr	r3, [pc, #128]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1da>
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d074      	beq.n	80028de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x21a>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d10e      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d064      	beq.n	80028dc <HAL_RCC_OscConfig+0x2f0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d160      	bne.n	80028dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e2ba      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x24a>
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e026      	b.n	8002884 <HAL_RCC_OscConfig+0x298>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800283e:	d115      	bne.n	800286c <HAL_RCC_OscConfig+0x280>
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a05      	ldr	r2, [pc, #20]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002846:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a02      	ldr	r2, [pc, #8]	@ (800285c <HAL_RCC_OscConfig+0x270>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x298>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	0800570c 	.word	0x0800570c
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004
 800286c:	4ba0      	ldr	r3, [pc, #640]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a9f      	ldr	r2, [pc, #636]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b9d      	ldr	r3, [pc, #628]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a9c      	ldr	r2, [pc, #624]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fd3c 	bl	8001308 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fd38 	bl	8001308 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e276      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	4b92      	ldr	r3, [pc, #584]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x2a8>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fd28 	bl	8001308 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fd24 	bl	8001308 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e262      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	4b88      	ldr	r3, [pc, #544]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d0>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d060      	beq.n	80029ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x310>
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d119      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d116      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fc:	4b7c      	ldr	r3, [pc, #496]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x328>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e23f      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b76      	ldr	r3, [pc, #472]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4973      	ldr	r1, [pc, #460]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002928:	e040      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d023      	beq.n	800297a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002932:	4b6f      	ldr	r3, [pc, #444]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fce3 	bl	8001308 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fcdf 	bl	8001308 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e21d      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	4b65      	ldr	r3, [pc, #404]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b62      	ldr	r3, [pc, #392]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	495f      	ldr	r1, [pc, #380]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e018      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b5d      	ldr	r3, [pc, #372]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5c      	ldr	r2, [pc, #368]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fcbf 	bl	8001308 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7fe fcbb 	bl	8001308 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1f9      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a0:	4b53      	ldr	r3, [pc, #332]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d03c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01c      	beq.n	80029fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c0:	4b4b      	ldr	r3, [pc, #300]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c6:	4a4a      	ldr	r2, [pc, #296]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fc9a 	bl	8001308 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe fc96 	bl	8001308 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1d4      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ea:	4b41      	ldr	r3, [pc, #260]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ef      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
 80029f8:	e01b      	b.n	8002a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b3d      	ldr	r3, [pc, #244]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a00:	4a3b      	ldr	r2, [pc, #236]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fc7d 	bl	8001308 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe fc79 	bl	8001308 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1b7      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	4b32      	ldr	r3, [pc, #200]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a6 	beq.w	8002b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a44:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	4a26      	ldr	r2, [pc, #152]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a5c:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d118      	bne.n	8002aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a78:	4b1e      	ldr	r3, [pc, #120]	@ (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a84:	f7fe fc40 	bl	8001308 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe fc3c 	bl	8001308 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e17a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d8>
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac2:	e029      	b.n	8002b18 <HAL_RCC_OscConfig+0x52c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d115      	bne.n	8002af8 <HAL_RCC_OscConfig+0x50c>
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad2:	4a07      	ldr	r2, [pc, #28]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae2:	4a03      	ldr	r2, [pc, #12]	@ (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x52c>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	4a9b      	ldr	r2, [pc, #620]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b08:	4b98      	ldr	r3, [pc, #608]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	4a97      	ldr	r2, [pc, #604]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d016      	beq.n	8002b4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe fbf2 	bl	8001308 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe fbee 	bl	8001308 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e12a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ed      	beq.n	8002b28 <HAL_RCC_OscConfig+0x53c>
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fbdb 	bl	8001308 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe fbd7 	bl	8001308 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e113      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ed      	bne.n	8002b56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b7a      	ldr	r3, [pc, #488]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	4a79      	ldr	r2, [pc, #484]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80fe 	beq.w	8002d92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	f040 80d0 	bne.w	8002d40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ba0:	4b72      	ldr	r3, [pc, #456]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d130      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d127      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002be0:	2a07      	cmp	r2, #7
 8002be2:	bf14      	ite	ne
 8002be4:	2201      	movne	r2, #1
 8002be6:	2200      	moveq	r2, #0
 8002be8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d06e      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d069      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c1c:	4b53      	ldr	r3, [pc, #332]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c28:	4b50      	ldr	r3, [pc, #320]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0ad      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c38:	4b4c      	ldr	r3, [pc, #304]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c44:	f7fe fb60 	bl	8001308 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fb5c 	bl	8001308 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e09a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5e:	4b43      	ldr	r3, [pc, #268]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	4b40      	ldr	r3, [pc, #256]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	4b40      	ldr	r3, [pc, #256]	@ (8002d70 <HAL_RCC_OscConfig+0x784>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c84:	0212      	lsls	r2, r2, #8
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0552      	lsls	r2, r2, #21
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0652      	lsls	r2, r2, #25
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ca4:	0912      	lsrs	r2, r2, #4
 8002ca6:	0452      	lsls	r2, r2, #17
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4930      	ldr	r1, [pc, #192]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc8:	f7fe fb1e 	bl	8001308 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fb1a 	bl	8001308 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e058      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	4b22      	ldr	r3, [pc, #136]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cee:	e050      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e04f      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d148      	bne.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d00:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a19      	ldr	r2, [pc, #100]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a16      	ldr	r2, [pc, #88]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d18:	f7fe faf6 	bl	8001308 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe faf2 	bl	8001308 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e030      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x734>
 8002d3e:	e028      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d023      	beq.n	8002d8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a08      	ldr	r2, [pc, #32]	@ (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe fad9 	bl	8001308 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d58:	e00c      	b.n	8002d74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe fad5 	bl	8001308 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d905      	bls.n	8002d74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e013      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d74:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ec      	bne.n	8002d5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4905      	ldr	r1, [pc, #20]	@ (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_OscConfig+0x7b4>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
 8002d8c:	e001      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	feeefffc 	.word	0xfeeefffc

08002da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0e7      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b75      	ldr	r3, [pc, #468]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b72      	ldr	r3, [pc, #456]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4970      	ldr	r1, [pc, #448]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cf      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	4b66      	ldr	r3, [pc, #408]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d908      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4960      	ldr	r1, [pc, #384]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d04c      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0a6      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e42:	4b54      	ldr	r3, [pc, #336]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e09a      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e08e      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e086      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7a:	4b46      	ldr	r3, [pc, #280]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4943      	ldr	r1, [pc, #268]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fa3c 	bl	8001308 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe fa38 	bl	8001308 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e06e      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 020c 	and.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1eb      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d208      	bcs.n	8002eea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	492b      	ldr	r1, [pc, #172]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eea:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d210      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef8:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	4923      	ldr	r1, [pc, #140]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e036      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f26:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4918      	ldr	r1, [pc, #96]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4910      	ldr	r1, [pc, #64]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f58:	f000 f824 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	490b      	ldr	r1, [pc, #44]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f4>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	4a09      	ldr	r2, [pc, #36]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f8>)
 8002f76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe f973 	bl	8001268 <HAL_InitTick>
 8002f82:	4603      	mov	r3, r0
 8002f84:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f86:	7afb      	ldrb	r3, [r7, #11]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40021000 	.word	0x40021000
 8002f98:	0800570c 	.word	0x0800570c
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d121      	bne.n	8003016 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d11e      	bne.n	8003016 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fd8:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe4:	4b31      	ldr	r3, [pc, #196]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e005      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003000:	4a2b      	ldr	r2, [pc, #172]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003014:	e00a      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d102      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800301c:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e004      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d101      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003028:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800302a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d134      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003032:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0xa6>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d003      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0xac>
 8003048:	e005      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800304c:	617b      	str	r3, [r7, #20]
      break;
 800304e:	e005      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003052:	617b      	str	r3, [r7, #20]
      break;
 8003054:	e002      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	617b      	str	r3, [r7, #20]
      break;
 800305a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	3301      	adds	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	fb03 f202 	mul.w	r2, r3, r2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003082:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0e5b      	lsrs	r3, r3, #25
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800309c:	69bb      	ldr	r3, [r7, #24]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08005724 	.word	0x08005724
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4904      	ldr	r1, [pc, #16]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	0800571c 	.word	0x0800571c

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003104:	f7ff ffda 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4904      	ldr	r1, [pc, #16]	@ (8003128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	0800571c 	.word	0x0800571c

0800312c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003138:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003144:	f7ff f9ee 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 8003148:	6178      	str	r0, [r7, #20]
 800314a:	e014      	b.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	4a24      	ldr	r2, [pc, #144]	@ (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003156:	6593      	str	r3, [r2, #88]	@ 0x58
 8003158:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003164:	f7ff f9de 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 8003168:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	4a1d      	ldr	r2, [pc, #116]	@ (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003174:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800317c:	d10b      	bne.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b80      	cmp	r3, #128	@ 0x80
 8003182:	d919      	bls.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2ba0      	cmp	r3, #160	@ 0xa0
 8003188:	d902      	bls.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800318a:	2302      	movs	r3, #2
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	e013      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003190:	2301      	movs	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e010      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	@ 0x80
 800319a:	d902      	bls.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800319c:	2303      	movs	r3, #3
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e00a      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	@ 0x80
 80031a6:	d102      	bne.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a8:	2302      	movs	r3, #2
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e004      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b70      	cmp	r3, #112	@ 0x70
 80031b2:	d101      	bne.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b4:	2301      	movs	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0207 	bic.w	r2, r3, #7
 80031c0:	4909      	ldr	r1, [pc, #36]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031c8:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003204:	2b00      	cmp	r3, #0
 8003206:	d041      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800320c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003210:	d02a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003212:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003216:	d824      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003218:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800321e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003222:	d81e      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322c:	d010      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800322e:	e018      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003230:	4b86      	ldr	r3, [pc, #536]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a85      	ldr	r2, [pc, #532]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323c:	e015      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fabb 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324e:	e00c      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3320      	adds	r3, #32
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fba6 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003260:	e003      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	74fb      	strb	r3, [r7, #19]
      break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003270:	4b76      	ldr	r3, [pc, #472]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800327e:	4973      	ldr	r1, [pc, #460]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003286:	e001      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d041      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800329c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032a0:	d02a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032a6:	d824      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ac:	d008      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032b2:	d81e      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032bc:	d010      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032be:	e018      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c0:	4b62      	ldr	r3, [pc, #392]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a61      	ldr	r2, [pc, #388]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032cc:	e015      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fa73 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032de:	e00c      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3320      	adds	r3, #32
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fb5e 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	74fb      	strb	r3, [r7, #19]
      break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003300:	4b52      	ldr	r3, [pc, #328]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003306:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800330e:	494f      	ldr	r1, [pc, #316]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003316:	e001      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a0 	beq.w	800346a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800332e:	4b47      	ldr	r3, [pc, #284]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800333e:	2300      	movs	r3, #0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	4b41      	ldr	r3, [pc, #260]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	4a40      	ldr	r2, [pc, #256]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003350:	4b3e      	ldr	r3, [pc, #248]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335c:	2301      	movs	r3, #1
 800335e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003360:	4b3b      	ldr	r3, [pc, #236]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3a      	ldr	r2, [pc, #232]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800336c:	f7fd ffcc 	bl	8001308 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003372:	e009      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003374:	f7fd ffc8 	bl	8001308 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	74fb      	strb	r3, [r7, #19]
        break;
 8003386:	e005      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003388:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ef      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d15c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800339a:	4b2c      	ldr	r3, [pc, #176]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01f      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d019      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033b8:	4b24      	ldr	r3, [pc, #144]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033c4:	4b21      	ldr	r3, [pc, #132]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	4a20      	ldr	r2, [pc, #128]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033d4:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033da:	4a1c      	ldr	r2, [pc, #112]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033e4:	4a19      	ldr	r2, [pc, #100]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fd ff87 	bl	8001308 <HAL_GetTick>
 80033fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fc:	e00b      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd ff83 	bl	8001308 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d902      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	74fb      	strb	r3, [r7, #19]
            break;
 8003414:	e006      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ec      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342a:	4b08      	ldr	r3, [pc, #32]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800343a:	4904      	ldr	r1, [pc, #16]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003442:	e009      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003458:	7c7b      	ldrb	r3, [r7, #17]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b9e      	ldr	r3, [pc, #632]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003462:	4a9d      	ldr	r2, [pc, #628]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003468:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003476:	4b98      	ldr	r3, [pc, #608]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347c:	f023 0203 	bic.w	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	4994      	ldr	r1, [pc, #592]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003498:	4b8f      	ldr	r3, [pc, #572]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349e:	f023 020c 	bic.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a6:	498c      	ldr	r1, [pc, #560]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ba:	4b87      	ldr	r3, [pc, #540]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4983      	ldr	r1, [pc, #524]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034dc:	4b7e      	ldr	r3, [pc, #504]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	497b      	ldr	r1, [pc, #492]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034fe:	4b76      	ldr	r3, [pc, #472]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350c:	4972      	ldr	r1, [pc, #456]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003520:	4b6d      	ldr	r3, [pc, #436]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003526:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	496a      	ldr	r1, [pc, #424]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003542:	4b65      	ldr	r3, [pc, #404]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003548:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003550:	4961      	ldr	r1, [pc, #388]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003564:	4b5c      	ldr	r3, [pc, #368]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003572:	4959      	ldr	r1, [pc, #356]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003586:	4b54      	ldr	r3, [pc, #336]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003594:	4950      	ldr	r1, [pc, #320]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a8:	4b4b      	ldr	r3, [pc, #300]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	4948      	ldr	r1, [pc, #288]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ca:	4b43      	ldr	r3, [pc, #268]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	493f      	ldr	r1, [pc, #252]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d028      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ec:	4b3a      	ldr	r3, [pc, #232]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fa:	4937      	ldr	r1, [pc, #220]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360a:	d106      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360c:	4b32      	ldr	r3, [pc, #200]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a31      	ldr	r2, [pc, #196]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003616:	60d3      	str	r3, [r2, #12]
 8003618:	e011      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800361e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003622:	d10c      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f8c8 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d028      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800364a:	4b23      	ldr	r3, [pc, #140]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	491f      	ldr	r1, [pc, #124]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003668:	d106      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366a:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a1a      	ldr	r2, [pc, #104]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003674:	60d3      	str	r3, [r2, #12]
 8003676:	e011      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003680:	d10c      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f899 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02b      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b6:	4908      	ldr	r1, [pc, #32]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036c6:	d109      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c8:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a02      	ldr	r2, [pc, #8]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e014      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f867 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02f      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800370c:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800371a:	4928      	ldr	r1, [pc, #160]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800372a:	d10d      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f844 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d014      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	74bb      	strb	r3, [r7, #18]
 8003746:	e011      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003750:	d10c      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3320      	adds	r3, #32
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f925 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003778:	4b10      	ldr	r3, [pc, #64]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003786:	490d      	ldr	r1, [pc, #52]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800379a:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037aa:	4904      	ldr	r1, [pc, #16]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000

080037c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ce:	4b75      	ldr	r3, [pc, #468]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037da:	4b72      	ldr	r3, [pc, #456]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0203 	and.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d10d      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
       ||
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037f2:	4b6c      	ldr	r3, [pc, #432]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
       ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d047      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	e044      	b.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d018      	beq.n	8003846 <RCCEx_PLLSAI1_Config+0x86>
 8003814:	2b03      	cmp	r3, #3
 8003816:	d825      	bhi.n	8003864 <RCCEx_PLLSAI1_Config+0xa4>
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <RCCEx_PLLSAI1_Config+0x62>
 800381c:	2b02      	cmp	r3, #2
 800381e:	d009      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x74>
 8003820:	e020      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003822:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003832:	e01a      	b.n	800386a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003834:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d116      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003844:	e013      	b.n	800386e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003846:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003852:	4b54      	ldr	r3, [pc, #336]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003862:	e006      	b.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e004      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003872:	bf00      	nop
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	430b      	orrs	r3, r1
 8003890:	4944      	ldr	r1, [pc, #272]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d17d      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800389c:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a40      	ldr	r2, [pc, #256]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fd fd2e 	bl	8001308 <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ae:	e009      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b0:	f7fd fd2a 	bl	8001308 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	73fb      	strb	r3, [r7, #15]
        break;
 80038c2:	e005      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c4:	4b37      	ldr	r3, [pc, #220]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1ef      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d160      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038dc:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	0211      	lsls	r1, r2, #8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68d2      	ldr	r2, [r2, #12]
 80038f2:	0912      	lsrs	r2, r2, #4
 80038f4:	0452      	lsls	r2, r2, #17
 80038f6:	430a      	orrs	r2, r1
 80038f8:	492a      	ldr	r1, [pc, #168]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
 80038fe:	e027      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d112      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003906:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800390e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6892      	ldr	r2, [r2, #8]
 8003916:	0211      	lsls	r1, r2, #8
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6912      	ldr	r2, [r2, #16]
 800391c:	0852      	lsrs	r2, r2, #1
 800391e:	3a01      	subs	r2, #1
 8003920:	0552      	lsls	r2, r2, #21
 8003922:	430a      	orrs	r2, r1
 8003924:	491f      	ldr	r1, [pc, #124]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
 800392a:	e011      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003934:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
 800393c:	0211      	lsls	r1, r2, #8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6952      	ldr	r2, [r2, #20]
 8003942:	0852      	lsrs	r2, r2, #1
 8003944:	3a01      	subs	r2, #1
 8003946:	0652      	lsls	r2, r2, #25
 8003948:	430a      	orrs	r2, r1
 800394a:	4916      	ldr	r1, [pc, #88]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a13      	ldr	r2, [pc, #76]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800395a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fcd4 	bl	8001308 <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003962:	e009      	b.n	8003978 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003964:	f7fd fcd0 	bl	8001308 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d902      	bls.n	8003978 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	73fb      	strb	r3, [r7, #15]
          break;
 8003976:	e005      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ef      	beq.n	8003964 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000

080039a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039c2:	4b67      	ldr	r3, [pc, #412]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d10d      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
       ||
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039da:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d047      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e044      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d018      	beq.n	8003a2e <RCCEx_PLLSAI2_Config+0x86>
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d825      	bhi.n	8003a4c <RCCEx_PLLSAI2_Config+0xa4>
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d002      	beq.n	8003a0a <RCCEx_PLLSAI2_Config+0x62>
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d009      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x74>
 8003a08:	e020      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a0a:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e01a      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a1c:	4b50      	ldr	r3, [pc, #320]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2c:	e013      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a3a:	4b49      	ldr	r3, [pc, #292]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a4a:	e006      	b.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e004      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a62:	4b3f      	ldr	r3, [pc, #252]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	430b      	orrs	r3, r1
 8003a78:	4939      	ldr	r1, [pc, #228]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d167      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a84:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a35      	ldr	r2, [pc, #212]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fd fc3a 	bl	8001308 <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a98:	f7fd fc36 	bl	8001308 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aaa:	e005      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aac:	4b2c      	ldr	r3, [pc, #176]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ef      	bne.n	8003a98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d14a      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac4:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6892      	ldr	r2, [r2, #8]
 8003ad4:	0211      	lsls	r1, r2, #8
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	0912      	lsrs	r2, r2, #4
 8003adc:	0452      	lsls	r2, r2, #17
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	491f      	ldr	r1, [pc, #124]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	614b      	str	r3, [r1, #20]
 8003ae6:	e011      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003af0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6912      	ldr	r2, [r2, #16]
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	0652      	lsls	r2, r2, #25
 8003b04:	430a      	orrs	r2, r1
 8003b06:	4916      	ldr	r1, [pc, #88]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fbf6 	bl	8001308 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1e:	e009      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b20:	f7fd fbf2 	bl	8001308 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	73fb      	strb	r3, [r7, #15]
          break;
 8003b32:	e005      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e040      	b.n	8003bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd f9ca 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	@ 0x24
 8003b90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fb6a 	bl	8004284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8af 	bl	8003d14 <UART_SetConfig>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e01b      	b.n	8003bf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fbe9 	bl	80043c8 <UART_CheckIdleState>
 8003bf6:	4603      	mov	r3, r0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d177      	bne.n	8003d08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_UART_Transmit+0x24>
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e070      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2221      	movs	r2, #33	@ 0x21
 8003c34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c36:	f7fd fb67 	bl	8001308 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c54:	d108      	bne.n	8003c68 <HAL_UART_Transmit+0x68>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e003      	b.n	8003c70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c70:	e02f      	b.n	8003cd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	@ 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fc4b 	bl	8004518 <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e03b      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	3302      	adds	r3, #2
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e007      	b.n	8003cc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1c9      	bne.n	8003c72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	@ 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fc15 	bl	8004518 <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e005      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d18:	b08a      	sub	sp, #40	@ 0x28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4ba4      	ldr	r3, [pc, #656]	@ (8003fd4 <UART_SetConfig+0x2c0>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a99      	ldr	r2, [pc, #612]	@ (8003fd8 <UART_SetConfig+0x2c4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a90      	ldr	r2, [pc, #576]	@ (8003fdc <UART_SetConfig+0x2c8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d126      	bne.n	8003dec <UART_SetConfig+0xd8>
 8003d9e:	4b90      	ldr	r3, [pc, #576]	@ (8003fe0 <UART_SetConfig+0x2cc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d81b      	bhi.n	8003de4 <UART_SetConfig+0xd0>
 8003dac:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <UART_SetConfig+0xa0>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd5 	.word	0x08003dd5
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dca:	e116      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd2:	e112      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dda:	e10e      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de2:	e10a      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dea:	e106      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe4 <UART_SetConfig+0x2d0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d138      	bne.n	8003e68 <UART_SetConfig+0x154>
 8003df6:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe0 <UART_SetConfig+0x2cc>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	d82d      	bhi.n	8003e60 <UART_SetConfig+0x14c>
 8003e04:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0xf8>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e61 	.word	0x08003e61
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e49 	.word	0x08003e49
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e46:	e0d8      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4e:	e0d4      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003e50:	2304      	movs	r3, #4
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e0d0      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003e58:	2308      	movs	r3, #8
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e0cc      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e0c8      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fe8 <UART_SetConfig+0x2d4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d125      	bne.n	8003ebe <UART_SetConfig+0x1aa>
 8003e72:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe0 <UART_SetConfig+0x2cc>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e7c:	2b30      	cmp	r3, #48	@ 0x30
 8003e7e:	d016      	beq.n	8003eae <UART_SetConfig+0x19a>
 8003e80:	2b30      	cmp	r3, #48	@ 0x30
 8003e82:	d818      	bhi.n	8003eb6 <UART_SetConfig+0x1a2>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d00a      	beq.n	8003e9e <UART_SetConfig+0x18a>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d814      	bhi.n	8003eb6 <UART_SetConfig+0x1a2>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <UART_SetConfig+0x182>
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d008      	beq.n	8003ea6 <UART_SetConfig+0x192>
 8003e94:	e00f      	b.n	8003eb6 <UART_SetConfig+0x1a2>
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9c:	e0ad      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea4:	e0a9      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eac:	e0a5      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb4:	e0a1      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebc:	e09d      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8003fec <UART_SetConfig+0x2d8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d125      	bne.n	8003f14 <UART_SetConfig+0x200>
 8003ec8:	4b45      	ldr	r3, [pc, #276]	@ (8003fe0 <UART_SetConfig+0x2cc>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ed4:	d016      	beq.n	8003f04 <UART_SetConfig+0x1f0>
 8003ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ed8:	d818      	bhi.n	8003f0c <UART_SetConfig+0x1f8>
 8003eda:	2b80      	cmp	r3, #128	@ 0x80
 8003edc:	d00a      	beq.n	8003ef4 <UART_SetConfig+0x1e0>
 8003ede:	2b80      	cmp	r3, #128	@ 0x80
 8003ee0:	d814      	bhi.n	8003f0c <UART_SetConfig+0x1f8>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <UART_SetConfig+0x1d8>
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d008      	beq.n	8003efc <UART_SetConfig+0x1e8>
 8003eea:	e00f      	b.n	8003f0c <UART_SetConfig+0x1f8>
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef2:	e082      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efa:	e07e      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e07a      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e076      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f12:	e072      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a35      	ldr	r2, [pc, #212]	@ (8003ff0 <UART_SetConfig+0x2dc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d12a      	bne.n	8003f74 <UART_SetConfig+0x260>
 8003f1e:	4b30      	ldr	r3, [pc, #192]	@ (8003fe0 <UART_SetConfig+0x2cc>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f2c:	d01a      	beq.n	8003f64 <UART_SetConfig+0x250>
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f32:	d81b      	bhi.n	8003f6c <UART_SetConfig+0x258>
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f38:	d00c      	beq.n	8003f54 <UART_SetConfig+0x240>
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3e:	d815      	bhi.n	8003f6c <UART_SetConfig+0x258>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <UART_SetConfig+0x238>
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f48:	d008      	beq.n	8003f5c <UART_SetConfig+0x248>
 8003f4a:	e00f      	b.n	8003f6c <UART_SetConfig+0x258>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f52:	e052      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f54:	2302      	movs	r3, #2
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5a:	e04e      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f62:	e04a      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f64:	2308      	movs	r3, #8
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6a:	e046      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f72:	e042      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	@ (8003fd8 <UART_SetConfig+0x2c4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d13a      	bne.n	8003ff4 <UART_SetConfig+0x2e0>
 8003f7e:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <UART_SetConfig+0x2cc>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f8c:	d01a      	beq.n	8003fc4 <UART_SetConfig+0x2b0>
 8003f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f92:	d81b      	bhi.n	8003fcc <UART_SetConfig+0x2b8>
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f98:	d00c      	beq.n	8003fb4 <UART_SetConfig+0x2a0>
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9e:	d815      	bhi.n	8003fcc <UART_SetConfig+0x2b8>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <UART_SetConfig+0x298>
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa8:	d008      	beq.n	8003fbc <UART_SetConfig+0x2a8>
 8003faa:	e00f      	b.n	8003fcc <UART_SetConfig+0x2b8>
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e022      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e01e      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e01a      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e016      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e012      	b.n	8003ffa <UART_SetConfig+0x2e6>
 8003fd4:	efff69f3 	.word	0xefff69f3
 8003fd8:	40008000 	.word	0x40008000
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40004400 	.word	0x40004400
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	40004c00 	.word	0x40004c00
 8003ff0:	40005000 	.word	0x40005000
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a9f      	ldr	r2, [pc, #636]	@ (800427c <UART_SetConfig+0x568>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d17a      	bne.n	80040fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004008:	2b08      	cmp	r3, #8
 800400a:	d824      	bhi.n	8004056 <UART_SetConfig+0x342>
 800400c:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <UART_SetConfig+0x300>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004039 	.word	0x08004039
 8004018:	08004057 	.word	0x08004057
 800401c:	08004041 	.word	0x08004041
 8004020:	08004057 	.word	0x08004057
 8004024:	08004047 	.word	0x08004047
 8004028:	08004057 	.word	0x08004057
 800402c:	08004057 	.word	0x08004057
 8004030:	08004057 	.word	0x08004057
 8004034:	0800404f 	.word	0x0800404f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7ff f84c 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 800403c:	61f8      	str	r0, [r7, #28]
        break;
 800403e:	e010      	b.n	8004062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004040:	4b8f      	ldr	r3, [pc, #572]	@ (8004280 <UART_SetConfig+0x56c>)
 8004042:	61fb      	str	r3, [r7, #28]
        break;
 8004044:	e00d      	b.n	8004062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004046:	f7fe ffad 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 800404a:	61f8      	str	r0, [r7, #28]
        break;
 800404c:	e009      	b.n	8004062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004052:	61fb      	str	r3, [r7, #28]
        break;
 8004054:	e005      	b.n	8004062 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80fb 	beq.w	8004260 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	429a      	cmp	r2, r3
 8004078:	d305      	bcc.n	8004086 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	429a      	cmp	r2, r3
 8004084:	d903      	bls.n	800408e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800408c:	e0e8      	b.n	8004260 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2200      	movs	r2, #0
 8004092:	461c      	mov	r4, r3
 8004094:	4615      	mov	r5, r2
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	022b      	lsls	r3, r5, #8
 80040a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040a4:	0222      	lsls	r2, r4, #8
 80040a6:	68f9      	ldr	r1, [r7, #12]
 80040a8:	6849      	ldr	r1, [r1, #4]
 80040aa:	0849      	lsrs	r1, r1, #1
 80040ac:	2000      	movs	r0, #0
 80040ae:	4688      	mov	r8, r1
 80040b0:	4681      	mov	r9, r0
 80040b2:	eb12 0a08 	adds.w	sl, r2, r8
 80040b6:	eb43 0b09 	adc.w	fp, r3, r9
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c8:	4650      	mov	r0, sl
 80040ca:	4659      	mov	r1, fp
 80040cc:	f7fc f8d0 	bl	8000270 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4613      	mov	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040de:	d308      	bcc.n	80040f2 <UART_SetConfig+0x3de>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e6:	d204      	bcs.n	80040f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e0b6      	b.n	8004260 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040f8:	e0b2      	b.n	8004260 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004102:	d15e      	bne.n	80041c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004108:	2b08      	cmp	r3, #8
 800410a:	d828      	bhi.n	800415e <UART_SetConfig+0x44a>
 800410c:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <UART_SetConfig+0x400>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004139 	.word	0x08004139
 8004118:	08004141 	.word	0x08004141
 800411c:	08004149 	.word	0x08004149
 8004120:	0800415f 	.word	0x0800415f
 8004124:	0800414f 	.word	0x0800414f
 8004128:	0800415f 	.word	0x0800415f
 800412c:	0800415f 	.word	0x0800415f
 8004130:	0800415f 	.word	0x0800415f
 8004134:	08004157 	.word	0x08004157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fe ffcc 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 800413c:	61f8      	str	r0, [r7, #28]
        break;
 800413e:	e014      	b.n	800416a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004140:	f7fe ffde 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004144:	61f8      	str	r0, [r7, #28]
        break;
 8004146:	e010      	b.n	800416a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004148:	4b4d      	ldr	r3, [pc, #308]	@ (8004280 <UART_SetConfig+0x56c>)
 800414a:	61fb      	str	r3, [r7, #28]
        break;
 800414c:	e00d      	b.n	800416a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414e:	f7fe ff29 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004152:	61f8      	str	r0, [r7, #28]
        break;
 8004154:	e009      	b.n	800416a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415a:	61fb      	str	r3, [r7, #28]
        break;
 800415c:	e005      	b.n	800416a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d077      	beq.n	8004260 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005a      	lsls	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	441a      	add	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b0f      	cmp	r3, #15
 800418a:	d916      	bls.n	80041ba <UART_SetConfig+0x4a6>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004192:	d212      	bcs.n	80041ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f023 030f 	bic.w	r3, r3, #15
 800419c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	085b      	lsrs	r3, r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	8afb      	ldrh	r3, [r7, #22]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	8afa      	ldrh	r2, [r7, #22]
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	e052      	b.n	8004260 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041c0:	e04e      	b.n	8004260 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d827      	bhi.n	800421a <UART_SetConfig+0x506>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <UART_SetConfig+0x4bc>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004205 	.word	0x08004205
 80041dc:	0800421b 	.word	0x0800421b
 80041e0:	0800420b 	.word	0x0800420b
 80041e4:	0800421b 	.word	0x0800421b
 80041e8:	0800421b 	.word	0x0800421b
 80041ec:	0800421b 	.word	0x0800421b
 80041f0:	08004213 	.word	0x08004213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f4:	f7fe ff6e 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80041f8:	61f8      	str	r0, [r7, #28]
        break;
 80041fa:	e014      	b.n	8004226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041fc:	f7fe ff80 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004200:	61f8      	str	r0, [r7, #28]
        break;
 8004202:	e010      	b.n	8004226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004204:	4b1e      	ldr	r3, [pc, #120]	@ (8004280 <UART_SetConfig+0x56c>)
 8004206:	61fb      	str	r3, [r7, #28]
        break;
 8004208:	e00d      	b.n	8004226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420a:	f7fe fecb 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 800420e:	61f8      	str	r0, [r7, #28]
        break;
 8004210:	e009      	b.n	8004226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004216:	61fb      	str	r3, [r7, #28]
        break;
 8004218:	e005      	b.n	8004226 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004224:	bf00      	nop
    }

    if (pclk != 0U)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d019      	beq.n	8004260 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	085a      	lsrs	r2, r3, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	441a      	add	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	d909      	bls.n	800425a <UART_SetConfig+0x546>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424c:	d205      	bcs.n	800425a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60da      	str	r2, [r3, #12]
 8004258:	e002      	b.n	8004260 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800426c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004270:	4618      	mov	r0, r3
 8004272:	3728      	adds	r7, #40	@ 0x28
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427a:	bf00      	nop
 800427c:	40008000 	.word	0x40008000
 8004280:	00f42400 	.word	0x00f42400

08004284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01a      	beq.n	800439a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004382:	d10a      	bne.n	800439a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b098      	sub	sp, #96	@ 0x60
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043d8:	f7fc ff96 	bl	8001308 <HAL_GetTick>
 80043dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d12e      	bne.n	800444a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f4:	2200      	movs	r2, #0
 80043f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f88c 	bl	8004518 <UART_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d021      	beq.n	800444a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441a:	653b      	str	r3, [r7, #80]	@ 0x50
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004424:	647b      	str	r3, [r7, #68]	@ 0x44
 8004426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800442a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e062      	b.n	8004510 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b04      	cmp	r3, #4
 8004456:	d149      	bne.n	80044ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004460:	2200      	movs	r2, #0
 8004462:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f856 	bl	8004518 <UART_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d03c      	beq.n	80044ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	623b      	str	r3, [r7, #32]
   return(result);
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004490:	633b      	str	r3, [r7, #48]	@ 0x30
 8004492:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800449e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e6      	bne.n	8004472 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c4:	61fa      	str	r2, [r7, #28]
 80044c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	617b      	str	r3, [r7, #20]
   return(result);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e011      	b.n	8004510 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3758      	adds	r7, #88	@ 0x58
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004528:	e04f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004530:	d04b      	beq.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fc fee9 	bl	8001308 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <UART_WaitOnFlagUntilTimeout+0x30>
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e04e      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d037      	beq.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b80      	cmp	r3, #128	@ 0x80
 800455e:	d034      	beq.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b40      	cmp	r3, #64	@ 0x40
 8004564:	d031      	beq.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b08      	cmp	r3, #8
 8004572:	d110      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2208      	movs	r2, #8
 800457a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f838 	bl	80045f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2208      	movs	r2, #8
 8004586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e029      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045a4:	d111      	bne.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f81e 	bl	80045f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e00f      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4013      	ands	r3, r2
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d0a0      	beq.n	800452a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b095      	sub	sp, #84	@ 0x54
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800460e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004618:	643b      	str	r3, [r7, #64]	@ 0x40
 800461a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800461e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e6      	bne.n	80045fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	61fb      	str	r3, [r7, #28]
   return(result);
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3308      	adds	r3, #8
 800464a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800464c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800464e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e5      	bne.n	800462c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004664:	2b01      	cmp	r3, #1
 8004666:	d118      	bne.n	800469a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	60bb      	str	r3, [r7, #8]
   return(result);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f023 0310 	bic.w	r3, r3, #16
 800467c:	647b      	str	r3, [r7, #68]	@ 0x44
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6979      	ldr	r1, [r7, #20]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	613b      	str	r3, [r7, #16]
   return(result);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e6      	bne.n	8004668 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ae:	bf00      	nop
 80046b0:	3754      	adds	r7, #84	@ 0x54
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <std>:
 80046bc:	2300      	movs	r3, #0
 80046be:	b510      	push	{r4, lr}
 80046c0:	4604      	mov	r4, r0
 80046c2:	e9c0 3300 	strd	r3, r3, [r0]
 80046c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046ca:	6083      	str	r3, [r0, #8]
 80046cc:	8181      	strh	r1, [r0, #12]
 80046ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80046d0:	81c2      	strh	r2, [r0, #14]
 80046d2:	6183      	str	r3, [r0, #24]
 80046d4:	4619      	mov	r1, r3
 80046d6:	2208      	movs	r2, #8
 80046d8:	305c      	adds	r0, #92	@ 0x5c
 80046da:	f000 f921 	bl	8004920 <memset>
 80046de:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <std+0x58>)
 80046e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80046e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <std+0x5c>)
 80046e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <std+0x60>)
 80046e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <std+0x64>)
 80046ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80046ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <std+0x68>)
 80046f0:	6224      	str	r4, [r4, #32]
 80046f2:	429c      	cmp	r4, r3
 80046f4:	d006      	beq.n	8004704 <std+0x48>
 80046f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046fa:	4294      	cmp	r4, r2
 80046fc:	d002      	beq.n	8004704 <std+0x48>
 80046fe:	33d0      	adds	r3, #208	@ 0xd0
 8004700:	429c      	cmp	r4, r3
 8004702:	d105      	bne.n	8004710 <std+0x54>
 8004704:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800470c:	f000 b93a 	b.w	8004984 <__retarget_lock_init_recursive>
 8004710:	bd10      	pop	{r4, pc}
 8004712:	bf00      	nop
 8004714:	080051dd 	.word	0x080051dd
 8004718:	080051ff 	.word	0x080051ff
 800471c:	08005237 	.word	0x08005237
 8004720:	0800525b 	.word	0x0800525b
 8004724:	20000168 	.word	0x20000168

08004728 <stdio_exit_handler>:
 8004728:	4a02      	ldr	r2, [pc, #8]	@ (8004734 <stdio_exit_handler+0xc>)
 800472a:	4903      	ldr	r1, [pc, #12]	@ (8004738 <stdio_exit_handler+0x10>)
 800472c:	4803      	ldr	r0, [pc, #12]	@ (800473c <stdio_exit_handler+0x14>)
 800472e:	f000 b869 	b.w	8004804 <_fwalk_sglue>
 8004732:	bf00      	nop
 8004734:	2000000c 	.word	0x2000000c
 8004738:	08005175 	.word	0x08005175
 800473c:	2000001c 	.word	0x2000001c

08004740 <cleanup_stdio>:
 8004740:	6841      	ldr	r1, [r0, #4]
 8004742:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <cleanup_stdio+0x34>)
 8004744:	4299      	cmp	r1, r3
 8004746:	b510      	push	{r4, lr}
 8004748:	4604      	mov	r4, r0
 800474a:	d001      	beq.n	8004750 <cleanup_stdio+0x10>
 800474c:	f000 fd12 	bl	8005174 <_fflush_r>
 8004750:	68a1      	ldr	r1, [r4, #8]
 8004752:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <cleanup_stdio+0x38>)
 8004754:	4299      	cmp	r1, r3
 8004756:	d002      	beq.n	800475e <cleanup_stdio+0x1e>
 8004758:	4620      	mov	r0, r4
 800475a:	f000 fd0b 	bl	8005174 <_fflush_r>
 800475e:	68e1      	ldr	r1, [r4, #12]
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <cleanup_stdio+0x3c>)
 8004762:	4299      	cmp	r1, r3
 8004764:	d004      	beq.n	8004770 <cleanup_stdio+0x30>
 8004766:	4620      	mov	r0, r4
 8004768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800476c:	f000 bd02 	b.w	8005174 <_fflush_r>
 8004770:	bd10      	pop	{r4, pc}
 8004772:	bf00      	nop
 8004774:	20000168 	.word	0x20000168
 8004778:	200001d0 	.word	0x200001d0
 800477c:	20000238 	.word	0x20000238

08004780 <global_stdio_init.part.0>:
 8004780:	b510      	push	{r4, lr}
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <global_stdio_init.part.0+0x30>)
 8004784:	4c0b      	ldr	r4, [pc, #44]	@ (80047b4 <global_stdio_init.part.0+0x34>)
 8004786:	4a0c      	ldr	r2, [pc, #48]	@ (80047b8 <global_stdio_init.part.0+0x38>)
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	4620      	mov	r0, r4
 800478c:	2200      	movs	r2, #0
 800478e:	2104      	movs	r1, #4
 8004790:	f7ff ff94 	bl	80046bc <std>
 8004794:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004798:	2201      	movs	r2, #1
 800479a:	2109      	movs	r1, #9
 800479c:	f7ff ff8e 	bl	80046bc <std>
 80047a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047a4:	2202      	movs	r2, #2
 80047a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047aa:	2112      	movs	r1, #18
 80047ac:	f7ff bf86 	b.w	80046bc <std>
 80047b0:	200002a0 	.word	0x200002a0
 80047b4:	20000168 	.word	0x20000168
 80047b8:	08004729 	.word	0x08004729

080047bc <__sfp_lock_acquire>:
 80047bc:	4801      	ldr	r0, [pc, #4]	@ (80047c4 <__sfp_lock_acquire+0x8>)
 80047be:	f000 b8e2 	b.w	8004986 <__retarget_lock_acquire_recursive>
 80047c2:	bf00      	nop
 80047c4:	200002a5 	.word	0x200002a5

080047c8 <__sfp_lock_release>:
 80047c8:	4801      	ldr	r0, [pc, #4]	@ (80047d0 <__sfp_lock_release+0x8>)
 80047ca:	f000 b8dd 	b.w	8004988 <__retarget_lock_release_recursive>
 80047ce:	bf00      	nop
 80047d0:	200002a5 	.word	0x200002a5

080047d4 <__sinit>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4604      	mov	r4, r0
 80047d8:	f7ff fff0 	bl	80047bc <__sfp_lock_acquire>
 80047dc:	6a23      	ldr	r3, [r4, #32]
 80047de:	b11b      	cbz	r3, 80047e8 <__sinit+0x14>
 80047e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e4:	f7ff bff0 	b.w	80047c8 <__sfp_lock_release>
 80047e8:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <__sinit+0x28>)
 80047ea:	6223      	str	r3, [r4, #32]
 80047ec:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <__sinit+0x2c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f5      	bne.n	80047e0 <__sinit+0xc>
 80047f4:	f7ff ffc4 	bl	8004780 <global_stdio_init.part.0>
 80047f8:	e7f2      	b.n	80047e0 <__sinit+0xc>
 80047fa:	bf00      	nop
 80047fc:	08004741 	.word	0x08004741
 8004800:	200002a0 	.word	0x200002a0

08004804 <_fwalk_sglue>:
 8004804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004808:	4607      	mov	r7, r0
 800480a:	4688      	mov	r8, r1
 800480c:	4614      	mov	r4, r2
 800480e:	2600      	movs	r6, #0
 8004810:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004814:	f1b9 0901 	subs.w	r9, r9, #1
 8004818:	d505      	bpl.n	8004826 <_fwalk_sglue+0x22>
 800481a:	6824      	ldr	r4, [r4, #0]
 800481c:	2c00      	cmp	r4, #0
 800481e:	d1f7      	bne.n	8004810 <_fwalk_sglue+0xc>
 8004820:	4630      	mov	r0, r6
 8004822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004826:	89ab      	ldrh	r3, [r5, #12]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d907      	bls.n	800483c <_fwalk_sglue+0x38>
 800482c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004830:	3301      	adds	r3, #1
 8004832:	d003      	beq.n	800483c <_fwalk_sglue+0x38>
 8004834:	4629      	mov	r1, r5
 8004836:	4638      	mov	r0, r7
 8004838:	47c0      	blx	r8
 800483a:	4306      	orrs	r6, r0
 800483c:	3568      	adds	r5, #104	@ 0x68
 800483e:	e7e9      	b.n	8004814 <_fwalk_sglue+0x10>

08004840 <iprintf>:
 8004840:	b40f      	push	{r0, r1, r2, r3}
 8004842:	b507      	push	{r0, r1, r2, lr}
 8004844:	4906      	ldr	r1, [pc, #24]	@ (8004860 <iprintf+0x20>)
 8004846:	ab04      	add	r3, sp, #16
 8004848:	6808      	ldr	r0, [r1, #0]
 800484a:	f853 2b04 	ldr.w	r2, [r3], #4
 800484e:	6881      	ldr	r1, [r0, #8]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	f000 f8c3 	bl	80049dc <_vfiprintf_r>
 8004856:	b003      	add	sp, #12
 8004858:	f85d eb04 	ldr.w	lr, [sp], #4
 800485c:	b004      	add	sp, #16
 800485e:	4770      	bx	lr
 8004860:	20000018 	.word	0x20000018

08004864 <_puts_r>:
 8004864:	6a03      	ldr	r3, [r0, #32]
 8004866:	b570      	push	{r4, r5, r6, lr}
 8004868:	6884      	ldr	r4, [r0, #8]
 800486a:	4605      	mov	r5, r0
 800486c:	460e      	mov	r6, r1
 800486e:	b90b      	cbnz	r3, 8004874 <_puts_r+0x10>
 8004870:	f7ff ffb0 	bl	80047d4 <__sinit>
 8004874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004876:	07db      	lsls	r3, r3, #31
 8004878:	d405      	bmi.n	8004886 <_puts_r+0x22>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	0598      	lsls	r0, r3, #22
 800487e:	d402      	bmi.n	8004886 <_puts_r+0x22>
 8004880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004882:	f000 f880 	bl	8004986 <__retarget_lock_acquire_recursive>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	0719      	lsls	r1, r3, #28
 800488a:	d502      	bpl.n	8004892 <_puts_r+0x2e>
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d135      	bne.n	80048fe <_puts_r+0x9a>
 8004892:	4621      	mov	r1, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 fd23 	bl	80052e0 <__swsetup_r>
 800489a:	b380      	cbz	r0, 80048fe <_puts_r+0x9a>
 800489c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80048a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048a2:	07da      	lsls	r2, r3, #31
 80048a4:	d405      	bmi.n	80048b2 <_puts_r+0x4e>
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	059b      	lsls	r3, r3, #22
 80048aa:	d402      	bmi.n	80048b2 <_puts_r+0x4e>
 80048ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048ae:	f000 f86b 	bl	8004988 <__retarget_lock_release_recursive>
 80048b2:	4628      	mov	r0, r5
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da04      	bge.n	80048c4 <_puts_r+0x60>
 80048ba:	69a2      	ldr	r2, [r4, #24]
 80048bc:	429a      	cmp	r2, r3
 80048be:	dc17      	bgt.n	80048f0 <_puts_r+0x8c>
 80048c0:	290a      	cmp	r1, #10
 80048c2:	d015      	beq.n	80048f0 <_puts_r+0x8c>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	6022      	str	r2, [r4, #0]
 80048ca:	7019      	strb	r1, [r3, #0]
 80048cc:	68a3      	ldr	r3, [r4, #8]
 80048ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048d2:	3b01      	subs	r3, #1
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	2900      	cmp	r1, #0
 80048d8:	d1ed      	bne.n	80048b6 <_puts_r+0x52>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da11      	bge.n	8004902 <_puts_r+0x9e>
 80048de:	4622      	mov	r2, r4
 80048e0:	210a      	movs	r1, #10
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 fcbd 	bl	8005262 <__swbuf_r>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d0d7      	beq.n	800489c <_puts_r+0x38>
 80048ec:	250a      	movs	r5, #10
 80048ee:	e7d7      	b.n	80048a0 <_puts_r+0x3c>
 80048f0:	4622      	mov	r2, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 fcb5 	bl	8005262 <__swbuf_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d1e7      	bne.n	80048cc <_puts_r+0x68>
 80048fc:	e7ce      	b.n	800489c <_puts_r+0x38>
 80048fe:	3e01      	subs	r6, #1
 8004900:	e7e4      	b.n	80048cc <_puts_r+0x68>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	220a      	movs	r2, #10
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e7ee      	b.n	80048ec <_puts_r+0x88>
	...

08004910 <puts>:
 8004910:	4b02      	ldr	r3, [pc, #8]	@ (800491c <puts+0xc>)
 8004912:	4601      	mov	r1, r0
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	f7ff bfa5 	b.w	8004864 <_puts_r>
 800491a:	bf00      	nop
 800491c:	20000018 	.word	0x20000018

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <__errno>:
 8004930:	4b01      	ldr	r3, [pc, #4]	@ (8004938 <__errno+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000018 	.word	0x20000018

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4d0d      	ldr	r5, [pc, #52]	@ (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	@ (8004978 <__libc_init_array+0x3c>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2600      	movs	r6, #0
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4d0b      	ldr	r5, [pc, #44]	@ (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	@ (8004980 <__libc_init_array+0x44>)
 8004950:	f000 fe40 	bl	80055d4 <_init>
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2600      	movs	r6, #0
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	08005790 	.word	0x08005790
 8004978:	08005790 	.word	0x08005790
 800497c:	08005790 	.word	0x08005790
 8004980:	08005794 	.word	0x08005794

08004984 <__retarget_lock_init_recursive>:
 8004984:	4770      	bx	lr

08004986 <__retarget_lock_acquire_recursive>:
 8004986:	4770      	bx	lr

08004988 <__retarget_lock_release_recursive>:
 8004988:	4770      	bx	lr

0800498a <__sfputc_r>:
 800498a:	6893      	ldr	r3, [r2, #8]
 800498c:	3b01      	subs	r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	b410      	push	{r4}
 8004992:	6093      	str	r3, [r2, #8]
 8004994:	da08      	bge.n	80049a8 <__sfputc_r+0x1e>
 8004996:	6994      	ldr	r4, [r2, #24]
 8004998:	42a3      	cmp	r3, r4
 800499a:	db01      	blt.n	80049a0 <__sfputc_r+0x16>
 800499c:	290a      	cmp	r1, #10
 800499e:	d103      	bne.n	80049a8 <__sfputc_r+0x1e>
 80049a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049a4:	f000 bc5d 	b.w	8005262 <__swbuf_r>
 80049a8:	6813      	ldr	r3, [r2, #0]
 80049aa:	1c58      	adds	r0, r3, #1
 80049ac:	6010      	str	r0, [r2, #0]
 80049ae:	7019      	strb	r1, [r3, #0]
 80049b0:	4608      	mov	r0, r1
 80049b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <__sfputs_r>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	4606      	mov	r6, r0
 80049bc:	460f      	mov	r7, r1
 80049be:	4614      	mov	r4, r2
 80049c0:	18d5      	adds	r5, r2, r3
 80049c2:	42ac      	cmp	r4, r5
 80049c4:	d101      	bne.n	80049ca <__sfputs_r+0x12>
 80049c6:	2000      	movs	r0, #0
 80049c8:	e007      	b.n	80049da <__sfputs_r+0x22>
 80049ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ce:	463a      	mov	r2, r7
 80049d0:	4630      	mov	r0, r6
 80049d2:	f7ff ffda 	bl	800498a <__sfputc_r>
 80049d6:	1c43      	adds	r3, r0, #1
 80049d8:	d1f3      	bne.n	80049c2 <__sfputs_r+0xa>
 80049da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049dc <_vfiprintf_r>:
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	460d      	mov	r5, r1
 80049e2:	b09d      	sub	sp, #116	@ 0x74
 80049e4:	4614      	mov	r4, r2
 80049e6:	4698      	mov	r8, r3
 80049e8:	4606      	mov	r6, r0
 80049ea:	b118      	cbz	r0, 80049f4 <_vfiprintf_r+0x18>
 80049ec:	6a03      	ldr	r3, [r0, #32]
 80049ee:	b90b      	cbnz	r3, 80049f4 <_vfiprintf_r+0x18>
 80049f0:	f7ff fef0 	bl	80047d4 <__sinit>
 80049f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049f6:	07d9      	lsls	r1, r3, #31
 80049f8:	d405      	bmi.n	8004a06 <_vfiprintf_r+0x2a>
 80049fa:	89ab      	ldrh	r3, [r5, #12]
 80049fc:	059a      	lsls	r2, r3, #22
 80049fe:	d402      	bmi.n	8004a06 <_vfiprintf_r+0x2a>
 8004a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a02:	f7ff ffc0 	bl	8004986 <__retarget_lock_acquire_recursive>
 8004a06:	89ab      	ldrh	r3, [r5, #12]
 8004a08:	071b      	lsls	r3, r3, #28
 8004a0a:	d501      	bpl.n	8004a10 <_vfiprintf_r+0x34>
 8004a0c:	692b      	ldr	r3, [r5, #16]
 8004a0e:	b99b      	cbnz	r3, 8004a38 <_vfiprintf_r+0x5c>
 8004a10:	4629      	mov	r1, r5
 8004a12:	4630      	mov	r0, r6
 8004a14:	f000 fc64 	bl	80052e0 <__swsetup_r>
 8004a18:	b170      	cbz	r0, 8004a38 <_vfiprintf_r+0x5c>
 8004a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a1c:	07dc      	lsls	r4, r3, #31
 8004a1e:	d504      	bpl.n	8004a2a <_vfiprintf_r+0x4e>
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a24:	b01d      	add	sp, #116	@ 0x74
 8004a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	0598      	lsls	r0, r3, #22
 8004a2e:	d4f7      	bmi.n	8004a20 <_vfiprintf_r+0x44>
 8004a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a32:	f7ff ffa9 	bl	8004988 <__retarget_lock_release_recursive>
 8004a36:	e7f3      	b.n	8004a20 <_vfiprintf_r+0x44>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a46:	2330      	movs	r3, #48	@ 0x30
 8004a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004bf8 <_vfiprintf_r+0x21c>
 8004a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a50:	f04f 0901 	mov.w	r9, #1
 8004a54:	4623      	mov	r3, r4
 8004a56:	469a      	mov	sl, r3
 8004a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a5c:	b10a      	cbz	r2, 8004a62 <_vfiprintf_r+0x86>
 8004a5e:	2a25      	cmp	r2, #37	@ 0x25
 8004a60:	d1f9      	bne.n	8004a56 <_vfiprintf_r+0x7a>
 8004a62:	ebba 0b04 	subs.w	fp, sl, r4
 8004a66:	d00b      	beq.n	8004a80 <_vfiprintf_r+0xa4>
 8004a68:	465b      	mov	r3, fp
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f7ff ffa2 	bl	80049b8 <__sfputs_r>
 8004a74:	3001      	adds	r0, #1
 8004a76:	f000 80a7 	beq.w	8004bc8 <_vfiprintf_r+0x1ec>
 8004a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a7c:	445a      	add	r2, fp
 8004a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a80:	f89a 3000 	ldrb.w	r3, [sl]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 809f 	beq.w	8004bc8 <_vfiprintf_r+0x1ec>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a94:	f10a 0a01 	add.w	sl, sl, #1
 8004a98:	9304      	str	r3, [sp, #16]
 8004a9a:	9307      	str	r3, [sp, #28]
 8004a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aa2:	4654      	mov	r4, sl
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aaa:	4853      	ldr	r0, [pc, #332]	@ (8004bf8 <_vfiprintf_r+0x21c>)
 8004aac:	f7fb fb90 	bl	80001d0 <memchr>
 8004ab0:	9a04      	ldr	r2, [sp, #16]
 8004ab2:	b9d8      	cbnz	r0, 8004aec <_vfiprintf_r+0x110>
 8004ab4:	06d1      	lsls	r1, r2, #27
 8004ab6:	bf44      	itt	mi
 8004ab8:	2320      	movmi	r3, #32
 8004aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004abe:	0713      	lsls	r3, r2, #28
 8004ac0:	bf44      	itt	mi
 8004ac2:	232b      	movmi	r3, #43	@ 0x2b
 8004ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8004acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ace:	d015      	beq.n	8004afc <_vfiprintf_r+0x120>
 8004ad0:	9a07      	ldr	r2, [sp, #28]
 8004ad2:	4654      	mov	r4, sl
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f04f 0c0a 	mov.w	ip, #10
 8004ada:	4621      	mov	r1, r4
 8004adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae0:	3b30      	subs	r3, #48	@ 0x30
 8004ae2:	2b09      	cmp	r3, #9
 8004ae4:	d94b      	bls.n	8004b7e <_vfiprintf_r+0x1a2>
 8004ae6:	b1b0      	cbz	r0, 8004b16 <_vfiprintf_r+0x13a>
 8004ae8:	9207      	str	r2, [sp, #28]
 8004aea:	e014      	b.n	8004b16 <_vfiprintf_r+0x13a>
 8004aec:	eba0 0308 	sub.w	r3, r0, r8
 8004af0:	fa09 f303 	lsl.w	r3, r9, r3
 8004af4:	4313      	orrs	r3, r2
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	46a2      	mov	sl, r4
 8004afa:	e7d2      	b.n	8004aa2 <_vfiprintf_r+0xc6>
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	1d19      	adds	r1, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	9103      	str	r1, [sp, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bfbb      	ittet	lt
 8004b08:	425b      	neglt	r3, r3
 8004b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8004b0e:	9307      	strge	r3, [sp, #28]
 8004b10:	9307      	strlt	r3, [sp, #28]
 8004b12:	bfb8      	it	lt
 8004b14:	9204      	strlt	r2, [sp, #16]
 8004b16:	7823      	ldrb	r3, [r4, #0]
 8004b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b1a:	d10a      	bne.n	8004b32 <_vfiprintf_r+0x156>
 8004b1c:	7863      	ldrb	r3, [r4, #1]
 8004b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b20:	d132      	bne.n	8004b88 <_vfiprintf_r+0x1ac>
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	9203      	str	r2, [sp, #12]
 8004b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b2e:	3402      	adds	r4, #2
 8004b30:	9305      	str	r3, [sp, #20]
 8004b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c08 <_vfiprintf_r+0x22c>
 8004b36:	7821      	ldrb	r1, [r4, #0]
 8004b38:	2203      	movs	r2, #3
 8004b3a:	4650      	mov	r0, sl
 8004b3c:	f7fb fb48 	bl	80001d0 <memchr>
 8004b40:	b138      	cbz	r0, 8004b52 <_vfiprintf_r+0x176>
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	eba0 000a 	sub.w	r0, r0, sl
 8004b48:	2240      	movs	r2, #64	@ 0x40
 8004b4a:	4082      	lsls	r2, r0
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	3401      	adds	r4, #1
 8004b50:	9304      	str	r3, [sp, #16]
 8004b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b56:	4829      	ldr	r0, [pc, #164]	@ (8004bfc <_vfiprintf_r+0x220>)
 8004b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b5c:	2206      	movs	r2, #6
 8004b5e:	f7fb fb37 	bl	80001d0 <memchr>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d03f      	beq.n	8004be6 <_vfiprintf_r+0x20a>
 8004b66:	4b26      	ldr	r3, [pc, #152]	@ (8004c00 <_vfiprintf_r+0x224>)
 8004b68:	bb1b      	cbnz	r3, 8004bb2 <_vfiprintf_r+0x1d6>
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	3307      	adds	r3, #7
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	3308      	adds	r3, #8
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b78:	443b      	add	r3, r7
 8004b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7c:	e76a      	b.n	8004a54 <_vfiprintf_r+0x78>
 8004b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b82:	460c      	mov	r4, r1
 8004b84:	2001      	movs	r0, #1
 8004b86:	e7a8      	b.n	8004ada <_vfiprintf_r+0xfe>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	3401      	adds	r4, #1
 8004b8c:	9305      	str	r3, [sp, #20]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f04f 0c0a 	mov.w	ip, #10
 8004b94:	4620      	mov	r0, r4
 8004b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b9a:	3a30      	subs	r2, #48	@ 0x30
 8004b9c:	2a09      	cmp	r2, #9
 8004b9e:	d903      	bls.n	8004ba8 <_vfiprintf_r+0x1cc>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0c6      	beq.n	8004b32 <_vfiprintf_r+0x156>
 8004ba4:	9105      	str	r1, [sp, #20]
 8004ba6:	e7c4      	b.n	8004b32 <_vfiprintf_r+0x156>
 8004ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bac:	4604      	mov	r4, r0
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e7f0      	b.n	8004b94 <_vfiprintf_r+0x1b8>
 8004bb2:	ab03      	add	r3, sp, #12
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	462a      	mov	r2, r5
 8004bb8:	4b12      	ldr	r3, [pc, #72]	@ (8004c04 <_vfiprintf_r+0x228>)
 8004bba:	a904      	add	r1, sp, #16
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f3af 8000 	nop.w
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	1c78      	adds	r0, r7, #1
 8004bc6:	d1d6      	bne.n	8004b76 <_vfiprintf_r+0x19a>
 8004bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bca:	07d9      	lsls	r1, r3, #31
 8004bcc:	d405      	bmi.n	8004bda <_vfiprintf_r+0x1fe>
 8004bce:	89ab      	ldrh	r3, [r5, #12]
 8004bd0:	059a      	lsls	r2, r3, #22
 8004bd2:	d402      	bmi.n	8004bda <_vfiprintf_r+0x1fe>
 8004bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bd6:	f7ff fed7 	bl	8004988 <__retarget_lock_release_recursive>
 8004bda:	89ab      	ldrh	r3, [r5, #12]
 8004bdc:	065b      	lsls	r3, r3, #25
 8004bde:	f53f af1f 	bmi.w	8004a20 <_vfiprintf_r+0x44>
 8004be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004be4:	e71e      	b.n	8004a24 <_vfiprintf_r+0x48>
 8004be6:	ab03      	add	r3, sp, #12
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	462a      	mov	r2, r5
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <_vfiprintf_r+0x228>)
 8004bee:	a904      	add	r1, sp, #16
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f91b 	bl	8004e2c <_printf_i>
 8004bf6:	e7e4      	b.n	8004bc2 <_vfiprintf_r+0x1e6>
 8004bf8:	08005754 	.word	0x08005754
 8004bfc:	0800575e 	.word	0x0800575e
 8004c00:	00000000 	.word	0x00000000
 8004c04:	080049b9 	.word	0x080049b9
 8004c08:	0800575a 	.word	0x0800575a

08004c0c <sbrk_aligned>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c4c <sbrk_aligned+0x40>)
 8004c10:	460c      	mov	r4, r1
 8004c12:	6831      	ldr	r1, [r6, #0]
 8004c14:	4605      	mov	r5, r0
 8004c16:	b911      	cbnz	r1, 8004c1e <sbrk_aligned+0x12>
 8004c18:	f000 fc70 	bl	80054fc <_sbrk_r>
 8004c1c:	6030      	str	r0, [r6, #0]
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 fc6b 	bl	80054fc <_sbrk_r>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	d103      	bne.n	8004c32 <sbrk_aligned+0x26>
 8004c2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c2e:	4620      	mov	r0, r4
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	1cc4      	adds	r4, r0, #3
 8004c34:	f024 0403 	bic.w	r4, r4, #3
 8004c38:	42a0      	cmp	r0, r4
 8004c3a:	d0f8      	beq.n	8004c2e <sbrk_aligned+0x22>
 8004c3c:	1a21      	subs	r1, r4, r0
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 fc5c 	bl	80054fc <_sbrk_r>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d1f2      	bne.n	8004c2e <sbrk_aligned+0x22>
 8004c48:	e7ef      	b.n	8004c2a <sbrk_aligned+0x1e>
 8004c4a:	bf00      	nop
 8004c4c:	200002a8 	.word	0x200002a8

08004c50 <_malloc_r>:
 8004c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c54:	1ccd      	adds	r5, r1, #3
 8004c56:	f025 0503 	bic.w	r5, r5, #3
 8004c5a:	3508      	adds	r5, #8
 8004c5c:	2d0c      	cmp	r5, #12
 8004c5e:	bf38      	it	cc
 8004c60:	250c      	movcc	r5, #12
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	4606      	mov	r6, r0
 8004c66:	db01      	blt.n	8004c6c <_malloc_r+0x1c>
 8004c68:	42a9      	cmp	r1, r5
 8004c6a:	d904      	bls.n	8004c76 <_malloc_r+0x26>
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	6033      	str	r3, [r6, #0]
 8004c70:	2000      	movs	r0, #0
 8004c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d4c <_malloc_r+0xfc>
 8004c7a:	f000 faa3 	bl	80051c4 <__malloc_lock>
 8004c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c82:	461c      	mov	r4, r3
 8004c84:	bb44      	cbnz	r4, 8004cd8 <_malloc_r+0x88>
 8004c86:	4629      	mov	r1, r5
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f7ff ffbf 	bl	8004c0c <sbrk_aligned>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	4604      	mov	r4, r0
 8004c92:	d158      	bne.n	8004d46 <_malloc_r+0xf6>
 8004c94:	f8d8 4000 	ldr.w	r4, [r8]
 8004c98:	4627      	mov	r7, r4
 8004c9a:	2f00      	cmp	r7, #0
 8004c9c:	d143      	bne.n	8004d26 <_malloc_r+0xd6>
 8004c9e:	2c00      	cmp	r4, #0
 8004ca0:	d04b      	beq.n	8004d3a <_malloc_r+0xea>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	eb04 0903 	add.w	r9, r4, r3
 8004cac:	f000 fc26 	bl	80054fc <_sbrk_r>
 8004cb0:	4581      	cmp	r9, r0
 8004cb2:	d142      	bne.n	8004d3a <_malloc_r+0xea>
 8004cb4:	6821      	ldr	r1, [r4, #0]
 8004cb6:	1a6d      	subs	r5, r5, r1
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7ff ffa6 	bl	8004c0c <sbrk_aligned>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d03a      	beq.n	8004d3a <_malloc_r+0xea>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	442b      	add	r3, r5
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	f8d8 3000 	ldr.w	r3, [r8]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	bb62      	cbnz	r2, 8004d2c <_malloc_r+0xdc>
 8004cd2:	f8c8 7000 	str.w	r7, [r8]
 8004cd6:	e00f      	b.n	8004cf8 <_malloc_r+0xa8>
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	1b52      	subs	r2, r2, r5
 8004cdc:	d420      	bmi.n	8004d20 <_malloc_r+0xd0>
 8004cde:	2a0b      	cmp	r2, #11
 8004ce0:	d917      	bls.n	8004d12 <_malloc_r+0xc2>
 8004ce2:	1961      	adds	r1, r4, r5
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	6025      	str	r5, [r4, #0]
 8004ce8:	bf18      	it	ne
 8004cea:	6059      	strne	r1, [r3, #4]
 8004cec:	6863      	ldr	r3, [r4, #4]
 8004cee:	bf08      	it	eq
 8004cf0:	f8c8 1000 	streq.w	r1, [r8]
 8004cf4:	5162      	str	r2, [r4, r5]
 8004cf6:	604b      	str	r3, [r1, #4]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 fa69 	bl	80051d0 <__malloc_unlock>
 8004cfe:	f104 000b 	add.w	r0, r4, #11
 8004d02:	1d23      	adds	r3, r4, #4
 8004d04:	f020 0007 	bic.w	r0, r0, #7
 8004d08:	1ac2      	subs	r2, r0, r3
 8004d0a:	bf1c      	itt	ne
 8004d0c:	1a1b      	subne	r3, r3, r0
 8004d0e:	50a3      	strne	r3, [r4, r2]
 8004d10:	e7af      	b.n	8004c72 <_malloc_r+0x22>
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	bf0c      	ite	eq
 8004d18:	f8c8 2000 	streq.w	r2, [r8]
 8004d1c:	605a      	strne	r2, [r3, #4]
 8004d1e:	e7eb      	b.n	8004cf8 <_malloc_r+0xa8>
 8004d20:	4623      	mov	r3, r4
 8004d22:	6864      	ldr	r4, [r4, #4]
 8004d24:	e7ae      	b.n	8004c84 <_malloc_r+0x34>
 8004d26:	463c      	mov	r4, r7
 8004d28:	687f      	ldr	r7, [r7, #4]
 8004d2a:	e7b6      	b.n	8004c9a <_malloc_r+0x4a>
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d1fb      	bne.n	8004d2c <_malloc_r+0xdc>
 8004d34:	2300      	movs	r3, #0
 8004d36:	6053      	str	r3, [r2, #4]
 8004d38:	e7de      	b.n	8004cf8 <_malloc_r+0xa8>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 fa46 	bl	80051d0 <__malloc_unlock>
 8004d44:	e794      	b.n	8004c70 <_malloc_r+0x20>
 8004d46:	6005      	str	r5, [r0, #0]
 8004d48:	e7d6      	b.n	8004cf8 <_malloc_r+0xa8>
 8004d4a:	bf00      	nop
 8004d4c:	200002ac 	.word	0x200002ac

08004d50 <_printf_common>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	4616      	mov	r6, r2
 8004d56:	4698      	mov	r8, r3
 8004d58:	688a      	ldr	r2, [r1, #8]
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bfb8      	it	lt
 8004d64:	4613      	movlt	r3, r2
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d6c:	4607      	mov	r7, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	b10a      	cbz	r2, 8004d76 <_printf_common+0x26>
 8004d72:	3301      	adds	r3, #1
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	0699      	lsls	r1, r3, #26
 8004d7a:	bf42      	ittt	mi
 8004d7c:	6833      	ldrmi	r3, [r6, #0]
 8004d7e:	3302      	addmi	r3, #2
 8004d80:	6033      	strmi	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	f015 0506 	ands.w	r5, r5, #6
 8004d88:	d106      	bne.n	8004d98 <_printf_common+0x48>
 8004d8a:	f104 0a19 	add.w	sl, r4, #25
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dc26      	bgt.n	8004de6 <_printf_common+0x96>
 8004d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	3b00      	subs	r3, #0
 8004da0:	bf18      	it	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d42b      	bmi.n	8004e00 <_printf_common+0xb0>
 8004da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dac:	4641      	mov	r1, r8
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c8      	blx	r9
 8004db2:	3001      	adds	r0, #1
 8004db4:	d01e      	beq.n	8004df4 <_printf_common+0xa4>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf02      	ittt	eq
 8004dc2:	68e5      	ldreq	r5, [r4, #12]
 8004dc4:	6833      	ldreq	r3, [r6, #0]
 8004dc6:	1aed      	subeq	r5, r5, r3
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	bf0c      	ite	eq
 8004dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd0:	2500      	movne	r5, #0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bfc4      	itt	gt
 8004dd6:	1a9b      	subgt	r3, r3, r2
 8004dd8:	18ed      	addgt	r5, r5, r3
 8004dda:	2600      	movs	r6, #0
 8004ddc:	341a      	adds	r4, #26
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d11a      	bne.n	8004e18 <_printf_common+0xc8>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e008      	b.n	8004df8 <_printf_common+0xa8>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4641      	mov	r1, r8
 8004dec:	4638      	mov	r0, r7
 8004dee:	47c8      	blx	r9
 8004df0:	3001      	adds	r0, #1
 8004df2:	d103      	bne.n	8004dfc <_printf_common+0xac>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	e7c6      	b.n	8004d8e <_printf_common+0x3e>
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	2030      	movs	r0, #48	@ 0x30
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e0a:	4422      	add	r2, r4
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e14:	3302      	adds	r3, #2
 8004e16:	e7c7      	b.n	8004da8 <_printf_common+0x58>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c8      	blx	r9
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0e6      	beq.n	8004df4 <_printf_common+0xa4>
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7d9      	b.n	8004dde <_printf_common+0x8e>
	...

08004e2c <_printf_i>:
 8004e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	7e0f      	ldrb	r7, [r1, #24]
 8004e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e34:	2f78      	cmp	r7, #120	@ 0x78
 8004e36:	4691      	mov	r9, r2
 8004e38:	4680      	mov	r8, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e42:	d807      	bhi.n	8004e54 <_printf_i+0x28>
 8004e44:	2f62      	cmp	r7, #98	@ 0x62
 8004e46:	d80a      	bhi.n	8004e5e <_printf_i+0x32>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80d2 	beq.w	8004ff2 <_printf_i+0x1c6>
 8004e4e:	2f58      	cmp	r7, #88	@ 0x58
 8004e50:	f000 80b9 	beq.w	8004fc6 <_printf_i+0x19a>
 8004e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e5c:	e03a      	b.n	8004ed4 <_printf_i+0xa8>
 8004e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e62:	2b15      	cmp	r3, #21
 8004e64:	d8f6      	bhi.n	8004e54 <_printf_i+0x28>
 8004e66:	a101      	add	r1, pc, #4	@ (adr r1, 8004e6c <_printf_i+0x40>)
 8004e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004e55 	.word	0x08004e55
 8004e78:	08004e55 	.word	0x08004e55
 8004e7c:	08004e55 	.word	0x08004e55
 8004e80:	08004e55 	.word	0x08004e55
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e55 	.word	0x08004e55
 8004e8c:	08004e55 	.word	0x08004e55
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004fd9 	.word	0x08004fd9
 8004e9c:	08004f03 	.word	0x08004f03
 8004ea0:	08004f93 	.word	0x08004f93
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004ffb 	.word	0x08004ffb
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004f03 	.word	0x08004f03
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f9b 	.word	0x08004f9b
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09d      	b.n	8005014 <_printf_i+0x1e8>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	6031      	str	r1, [r6, #0]
 8004ee0:	0606      	lsls	r6, r0, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xbc>
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	e003      	b.n	8004ef0 <_printf_i+0xc4>
 8004ee8:	0645      	lsls	r5, r0, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xb8>
 8004eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xd0>
 8004ef4:	232d      	movs	r3, #45	@ 0x2d
 8004ef6:	426d      	negs	r5, r5
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efc:	4859      	ldr	r0, [pc, #356]	@ (8005064 <_printf_i+0x238>)
 8004efe:	230a      	movs	r3, #10
 8004f00:	e011      	b.n	8004f26 <_printf_i+0xfa>
 8004f02:	6821      	ldr	r1, [r4, #0]
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	0608      	lsls	r0, r1, #24
 8004f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f0c:	d402      	bmi.n	8004f14 <_printf_i+0xe8>
 8004f0e:	0649      	lsls	r1, r1, #25
 8004f10:	bf48      	it	mi
 8004f12:	b2ad      	uxthmi	r5, r5
 8004f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f16:	4853      	ldr	r0, [pc, #332]	@ (8005064 <_printf_i+0x238>)
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	bf14      	ite	ne
 8004f1c:	230a      	movne	r3, #10
 8004f1e:	2308      	moveq	r3, #8
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f26:	6866      	ldr	r6, [r4, #4]
 8004f28:	60a6      	str	r6, [r4, #8]
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	bfa2      	ittt	ge
 8004f2e:	6821      	ldrge	r1, [r4, #0]
 8004f30:	f021 0104 	bicge.w	r1, r1, #4
 8004f34:	6021      	strge	r1, [r4, #0]
 8004f36:	b90d      	cbnz	r5, 8004f3c <_printf_i+0x110>
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	d04b      	beq.n	8004fd4 <_printf_i+0x1a8>
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f42:	fb03 5711 	mls	r7, r3, r1, r5
 8004f46:	5dc7      	ldrb	r7, [r0, r7]
 8004f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f4c:	462f      	mov	r7, r5
 8004f4e:	42bb      	cmp	r3, r7
 8004f50:	460d      	mov	r5, r1
 8004f52:	d9f4      	bls.n	8004f3e <_printf_i+0x112>
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d10b      	bne.n	8004f70 <_printf_i+0x144>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	07df      	lsls	r7, r3, #31
 8004f5c:	d508      	bpl.n	8004f70 <_printf_i+0x144>
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	6861      	ldr	r1, [r4, #4]
 8004f62:	4299      	cmp	r1, r3
 8004f64:	bfde      	ittt	le
 8004f66:	2330      	movle	r3, #48	@ 0x30
 8004f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f70:	1b92      	subs	r2, r2, r6
 8004f72:	6122      	str	r2, [r4, #16]
 8004f74:	f8cd a000 	str.w	sl, [sp]
 8004f78:	464b      	mov	r3, r9
 8004f7a:	aa03      	add	r2, sp, #12
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4640      	mov	r0, r8
 8004f80:	f7ff fee6 	bl	8004d50 <_printf_common>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d14a      	bne.n	800501e <_printf_i+0x1f2>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f8c:	b004      	add	sp, #16
 8004f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	4833      	ldr	r0, [pc, #204]	@ (8005068 <_printf_i+0x23c>)
 8004f9c:	2778      	movs	r7, #120	@ 0x78
 8004f9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	6831      	ldr	r1, [r6, #0]
 8004fa6:	061f      	lsls	r7, r3, #24
 8004fa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fac:	d402      	bmi.n	8004fb4 <_printf_i+0x188>
 8004fae:	065f      	lsls	r7, r3, #25
 8004fb0:	bf48      	it	mi
 8004fb2:	b2ad      	uxthmi	r5, r5
 8004fb4:	6031      	str	r1, [r6, #0]
 8004fb6:	07d9      	lsls	r1, r3, #31
 8004fb8:	bf44      	itt	mi
 8004fba:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbe:	6023      	strmi	r3, [r4, #0]
 8004fc0:	b11d      	cbz	r5, 8004fca <_printf_i+0x19e>
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	e7ac      	b.n	8004f20 <_printf_i+0xf4>
 8004fc6:	4827      	ldr	r0, [pc, #156]	@ (8005064 <_printf_i+0x238>)
 8004fc8:	e7e9      	b.n	8004f9e <_printf_i+0x172>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f023 0320 	bic.w	r3, r3, #32
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	e7f6      	b.n	8004fc2 <_printf_i+0x196>
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	e7bd      	b.n	8004f54 <_printf_i+0x128>
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	6961      	ldr	r1, [r4, #20]
 8004fde:	1d18      	adds	r0, r3, #4
 8004fe0:	6030      	str	r0, [r6, #0]
 8004fe2:	062e      	lsls	r6, r5, #24
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	d501      	bpl.n	8004fec <_printf_i+0x1c0>
 8004fe8:	6019      	str	r1, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <_printf_i+0x1c6>
 8004fec:	0668      	lsls	r0, r5, #25
 8004fee:	d5fb      	bpl.n	8004fe8 <_printf_i+0x1bc>
 8004ff0:	8019      	strh	r1, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	e7bc      	b.n	8004f74 <_printf_i+0x148>
 8004ffa:	6833      	ldr	r3, [r6, #0]
 8004ffc:	1d1a      	adds	r2, r3, #4
 8004ffe:	6032      	str	r2, [r6, #0]
 8005000:	681e      	ldr	r6, [r3, #0]
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	2100      	movs	r1, #0
 8005006:	4630      	mov	r0, r6
 8005008:	f7fb f8e2 	bl	80001d0 <memchr>
 800500c:	b108      	cbz	r0, 8005012 <_printf_i+0x1e6>
 800500e:	1b80      	subs	r0, r0, r6
 8005010:	6060      	str	r0, [r4, #4]
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	2300      	movs	r3, #0
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501c:	e7aa      	b.n	8004f74 <_printf_i+0x148>
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d0ad      	beq.n	8004f88 <_printf_i+0x15c>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	079b      	lsls	r3, r3, #30
 8005030:	d413      	bmi.n	800505a <_printf_i+0x22e>
 8005032:	68e0      	ldr	r0, [r4, #12]
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	4298      	cmp	r0, r3
 8005038:	bfb8      	it	lt
 800503a:	4618      	movlt	r0, r3
 800503c:	e7a6      	b.n	8004f8c <_printf_i+0x160>
 800503e:	2301      	movs	r3, #1
 8005040:	4632      	mov	r2, r6
 8005042:	4649      	mov	r1, r9
 8005044:	4640      	mov	r0, r8
 8005046:	47d0      	blx	sl
 8005048:	3001      	adds	r0, #1
 800504a:	d09d      	beq.n	8004f88 <_printf_i+0x15c>
 800504c:	3501      	adds	r5, #1
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	9903      	ldr	r1, [sp, #12]
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	42ab      	cmp	r3, r5
 8005056:	dcf2      	bgt.n	800503e <_printf_i+0x212>
 8005058:	e7eb      	b.n	8005032 <_printf_i+0x206>
 800505a:	2500      	movs	r5, #0
 800505c:	f104 0619 	add.w	r6, r4, #25
 8005060:	e7f5      	b.n	800504e <_printf_i+0x222>
 8005062:	bf00      	nop
 8005064:	08005765 	.word	0x08005765
 8005068:	08005776 	.word	0x08005776

0800506c <__sflush_r>:
 800506c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005074:	0716      	lsls	r6, r2, #28
 8005076:	4605      	mov	r5, r0
 8005078:	460c      	mov	r4, r1
 800507a:	d454      	bmi.n	8005126 <__sflush_r+0xba>
 800507c:	684b      	ldr	r3, [r1, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	dc02      	bgt.n	8005088 <__sflush_r+0x1c>
 8005082:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	dd48      	ble.n	800511a <__sflush_r+0xae>
 8005088:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800508a:	2e00      	cmp	r6, #0
 800508c:	d045      	beq.n	800511a <__sflush_r+0xae>
 800508e:	2300      	movs	r3, #0
 8005090:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005094:	682f      	ldr	r7, [r5, #0]
 8005096:	6a21      	ldr	r1, [r4, #32]
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	d030      	beq.n	80050fe <__sflush_r+0x92>
 800509c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	0759      	lsls	r1, r3, #29
 80050a2:	d505      	bpl.n	80050b0 <__sflush_r+0x44>
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050aa:	b10b      	cbz	r3, 80050b0 <__sflush_r+0x44>
 80050ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050b4:	6a21      	ldr	r1, [r4, #32]
 80050b6:	4628      	mov	r0, r5
 80050b8:	47b0      	blx	r6
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	d106      	bne.n	80050ce <__sflush_r+0x62>
 80050c0:	6829      	ldr	r1, [r5, #0]
 80050c2:	291d      	cmp	r1, #29
 80050c4:	d82b      	bhi.n	800511e <__sflush_r+0xb2>
 80050c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005170 <__sflush_r+0x104>)
 80050c8:	410a      	asrs	r2, r1
 80050ca:	07d6      	lsls	r6, r2, #31
 80050cc:	d427      	bmi.n	800511e <__sflush_r+0xb2>
 80050ce:	2200      	movs	r2, #0
 80050d0:	6062      	str	r2, [r4, #4]
 80050d2:	04d9      	lsls	r1, r3, #19
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	6022      	str	r2, [r4, #0]
 80050d8:	d504      	bpl.n	80050e4 <__sflush_r+0x78>
 80050da:	1c42      	adds	r2, r0, #1
 80050dc:	d101      	bne.n	80050e2 <__sflush_r+0x76>
 80050de:	682b      	ldr	r3, [r5, #0]
 80050e0:	b903      	cbnz	r3, 80050e4 <__sflush_r+0x78>
 80050e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80050e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050e6:	602f      	str	r7, [r5, #0]
 80050e8:	b1b9      	cbz	r1, 800511a <__sflush_r+0xae>
 80050ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050ee:	4299      	cmp	r1, r3
 80050f0:	d002      	beq.n	80050f8 <__sflush_r+0x8c>
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fa24 	bl	8005540 <_free_r>
 80050f8:	2300      	movs	r3, #0
 80050fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80050fc:	e00d      	b.n	800511a <__sflush_r+0xae>
 80050fe:	2301      	movs	r3, #1
 8005100:	4628      	mov	r0, r5
 8005102:	47b0      	blx	r6
 8005104:	4602      	mov	r2, r0
 8005106:	1c50      	adds	r0, r2, #1
 8005108:	d1c9      	bne.n	800509e <__sflush_r+0x32>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0c6      	beq.n	800509e <__sflush_r+0x32>
 8005110:	2b1d      	cmp	r3, #29
 8005112:	d001      	beq.n	8005118 <__sflush_r+0xac>
 8005114:	2b16      	cmp	r3, #22
 8005116:	d11e      	bne.n	8005156 <__sflush_r+0xea>
 8005118:	602f      	str	r7, [r5, #0]
 800511a:	2000      	movs	r0, #0
 800511c:	e022      	b.n	8005164 <__sflush_r+0xf8>
 800511e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005122:	b21b      	sxth	r3, r3
 8005124:	e01b      	b.n	800515e <__sflush_r+0xf2>
 8005126:	690f      	ldr	r7, [r1, #16]
 8005128:	2f00      	cmp	r7, #0
 800512a:	d0f6      	beq.n	800511a <__sflush_r+0xae>
 800512c:	0793      	lsls	r3, r2, #30
 800512e:	680e      	ldr	r6, [r1, #0]
 8005130:	bf08      	it	eq
 8005132:	694b      	ldreq	r3, [r1, #20]
 8005134:	600f      	str	r7, [r1, #0]
 8005136:	bf18      	it	ne
 8005138:	2300      	movne	r3, #0
 800513a:	eba6 0807 	sub.w	r8, r6, r7
 800513e:	608b      	str	r3, [r1, #8]
 8005140:	f1b8 0f00 	cmp.w	r8, #0
 8005144:	dde9      	ble.n	800511a <__sflush_r+0xae>
 8005146:	6a21      	ldr	r1, [r4, #32]
 8005148:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800514a:	4643      	mov	r3, r8
 800514c:	463a      	mov	r2, r7
 800514e:	4628      	mov	r0, r5
 8005150:	47b0      	blx	r6
 8005152:	2800      	cmp	r0, #0
 8005154:	dc08      	bgt.n	8005168 <__sflush_r+0xfc>
 8005156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005168:	4407      	add	r7, r0
 800516a:	eba8 0800 	sub.w	r8, r8, r0
 800516e:	e7e7      	b.n	8005140 <__sflush_r+0xd4>
 8005170:	dfbffffe 	.word	0xdfbffffe

08005174 <_fflush_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	690b      	ldr	r3, [r1, #16]
 8005178:	4605      	mov	r5, r0
 800517a:	460c      	mov	r4, r1
 800517c:	b913      	cbnz	r3, 8005184 <_fflush_r+0x10>
 800517e:	2500      	movs	r5, #0
 8005180:	4628      	mov	r0, r5
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	b118      	cbz	r0, 800518e <_fflush_r+0x1a>
 8005186:	6a03      	ldr	r3, [r0, #32]
 8005188:	b90b      	cbnz	r3, 800518e <_fflush_r+0x1a>
 800518a:	f7ff fb23 	bl	80047d4 <__sinit>
 800518e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f3      	beq.n	800517e <_fflush_r+0xa>
 8005196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005198:	07d0      	lsls	r0, r2, #31
 800519a:	d404      	bmi.n	80051a6 <_fflush_r+0x32>
 800519c:	0599      	lsls	r1, r3, #22
 800519e:	d402      	bmi.n	80051a6 <_fflush_r+0x32>
 80051a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051a2:	f7ff fbf0 	bl	8004986 <__retarget_lock_acquire_recursive>
 80051a6:	4628      	mov	r0, r5
 80051a8:	4621      	mov	r1, r4
 80051aa:	f7ff ff5f 	bl	800506c <__sflush_r>
 80051ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051b0:	07da      	lsls	r2, r3, #31
 80051b2:	4605      	mov	r5, r0
 80051b4:	d4e4      	bmi.n	8005180 <_fflush_r+0xc>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	059b      	lsls	r3, r3, #22
 80051ba:	d4e1      	bmi.n	8005180 <_fflush_r+0xc>
 80051bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051be:	f7ff fbe3 	bl	8004988 <__retarget_lock_release_recursive>
 80051c2:	e7dd      	b.n	8005180 <_fflush_r+0xc>

080051c4 <__malloc_lock>:
 80051c4:	4801      	ldr	r0, [pc, #4]	@ (80051cc <__malloc_lock+0x8>)
 80051c6:	f7ff bbde 	b.w	8004986 <__retarget_lock_acquire_recursive>
 80051ca:	bf00      	nop
 80051cc:	200002a4 	.word	0x200002a4

080051d0 <__malloc_unlock>:
 80051d0:	4801      	ldr	r0, [pc, #4]	@ (80051d8 <__malloc_unlock+0x8>)
 80051d2:	f7ff bbd9 	b.w	8004988 <__retarget_lock_release_recursive>
 80051d6:	bf00      	nop
 80051d8:	200002a4 	.word	0x200002a4

080051dc <__sread>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	460c      	mov	r4, r1
 80051e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e4:	f000 f978 	bl	80054d8 <_read_r>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	bfab      	itete	ge
 80051ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051ee:	89a3      	ldrhlt	r3, [r4, #12]
 80051f0:	181b      	addge	r3, r3, r0
 80051f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051f6:	bfac      	ite	ge
 80051f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051fa:	81a3      	strhlt	r3, [r4, #12]
 80051fc:	bd10      	pop	{r4, pc}

080051fe <__swrite>:
 80051fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005202:	461f      	mov	r7, r3
 8005204:	898b      	ldrh	r3, [r1, #12]
 8005206:	05db      	lsls	r3, r3, #23
 8005208:	4605      	mov	r5, r0
 800520a:	460c      	mov	r4, r1
 800520c:	4616      	mov	r6, r2
 800520e:	d505      	bpl.n	800521c <__swrite+0x1e>
 8005210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005214:	2302      	movs	r3, #2
 8005216:	2200      	movs	r2, #0
 8005218:	f000 f94c 	bl	80054b4 <_lseek_r>
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005226:	81a3      	strh	r3, [r4, #12]
 8005228:	4632      	mov	r2, r6
 800522a:	463b      	mov	r3, r7
 800522c:	4628      	mov	r0, r5
 800522e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005232:	f000 b973 	b.w	800551c <_write_r>

08005236 <__sseek>:
 8005236:	b510      	push	{r4, lr}
 8005238:	460c      	mov	r4, r1
 800523a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523e:	f000 f939 	bl	80054b4 <_lseek_r>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	bf15      	itete	ne
 8005248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800524a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800524e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005252:	81a3      	strheq	r3, [r4, #12]
 8005254:	bf18      	it	ne
 8005256:	81a3      	strhne	r3, [r4, #12]
 8005258:	bd10      	pop	{r4, pc}

0800525a <__sclose>:
 800525a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525e:	f000 b8f7 	b.w	8005450 <_close_r>

08005262 <__swbuf_r>:
 8005262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005264:	460e      	mov	r6, r1
 8005266:	4614      	mov	r4, r2
 8005268:	4605      	mov	r5, r0
 800526a:	b118      	cbz	r0, 8005274 <__swbuf_r+0x12>
 800526c:	6a03      	ldr	r3, [r0, #32]
 800526e:	b90b      	cbnz	r3, 8005274 <__swbuf_r+0x12>
 8005270:	f7ff fab0 	bl	80047d4 <__sinit>
 8005274:	69a3      	ldr	r3, [r4, #24]
 8005276:	60a3      	str	r3, [r4, #8]
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	071a      	lsls	r2, r3, #28
 800527c:	d501      	bpl.n	8005282 <__swbuf_r+0x20>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	b943      	cbnz	r3, 8005294 <__swbuf_r+0x32>
 8005282:	4621      	mov	r1, r4
 8005284:	4628      	mov	r0, r5
 8005286:	f000 f82b 	bl	80052e0 <__swsetup_r>
 800528a:	b118      	cbz	r0, 8005294 <__swbuf_r+0x32>
 800528c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005290:	4638      	mov	r0, r7
 8005292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	6922      	ldr	r2, [r4, #16]
 8005298:	1a98      	subs	r0, r3, r2
 800529a:	6963      	ldr	r3, [r4, #20]
 800529c:	b2f6      	uxtb	r6, r6
 800529e:	4283      	cmp	r3, r0
 80052a0:	4637      	mov	r7, r6
 80052a2:	dc05      	bgt.n	80052b0 <__swbuf_r+0x4e>
 80052a4:	4621      	mov	r1, r4
 80052a6:	4628      	mov	r0, r5
 80052a8:	f7ff ff64 	bl	8005174 <_fflush_r>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d1ed      	bne.n	800528c <__swbuf_r+0x2a>
 80052b0:	68a3      	ldr	r3, [r4, #8]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	6022      	str	r2, [r4, #0]
 80052bc:	701e      	strb	r6, [r3, #0]
 80052be:	6962      	ldr	r2, [r4, #20]
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d004      	beq.n	80052d0 <__swbuf_r+0x6e>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	07db      	lsls	r3, r3, #31
 80052ca:	d5e1      	bpl.n	8005290 <__swbuf_r+0x2e>
 80052cc:	2e0a      	cmp	r6, #10
 80052ce:	d1df      	bne.n	8005290 <__swbuf_r+0x2e>
 80052d0:	4621      	mov	r1, r4
 80052d2:	4628      	mov	r0, r5
 80052d4:	f7ff ff4e 	bl	8005174 <_fflush_r>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d0d9      	beq.n	8005290 <__swbuf_r+0x2e>
 80052dc:	e7d6      	b.n	800528c <__swbuf_r+0x2a>
	...

080052e0 <__swsetup_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4b29      	ldr	r3, [pc, #164]	@ (8005388 <__swsetup_r+0xa8>)
 80052e4:	4605      	mov	r5, r0
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	460c      	mov	r4, r1
 80052ea:	b118      	cbz	r0, 80052f4 <__swsetup_r+0x14>
 80052ec:	6a03      	ldr	r3, [r0, #32]
 80052ee:	b90b      	cbnz	r3, 80052f4 <__swsetup_r+0x14>
 80052f0:	f7ff fa70 	bl	80047d4 <__sinit>
 80052f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f8:	0719      	lsls	r1, r3, #28
 80052fa:	d422      	bmi.n	8005342 <__swsetup_r+0x62>
 80052fc:	06da      	lsls	r2, r3, #27
 80052fe:	d407      	bmi.n	8005310 <__swsetup_r+0x30>
 8005300:	2209      	movs	r2, #9
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800530e:	e033      	b.n	8005378 <__swsetup_r+0x98>
 8005310:	0758      	lsls	r0, r3, #29
 8005312:	d512      	bpl.n	800533a <__swsetup_r+0x5a>
 8005314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005316:	b141      	cbz	r1, 800532a <__swsetup_r+0x4a>
 8005318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800531c:	4299      	cmp	r1, r3
 800531e:	d002      	beq.n	8005326 <__swsetup_r+0x46>
 8005320:	4628      	mov	r0, r5
 8005322:	f000 f90d 	bl	8005540 <_free_r>
 8005326:	2300      	movs	r3, #0
 8005328:	6363      	str	r3, [r4, #52]	@ 0x34
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	2300      	movs	r3, #0
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	f043 0308 	orr.w	r3, r3, #8
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	b94b      	cbnz	r3, 800535a <__swsetup_r+0x7a>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800534c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005350:	d003      	beq.n	800535a <__swsetup_r+0x7a>
 8005352:	4621      	mov	r1, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f83f 	bl	80053d8 <__smakebuf_r>
 800535a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535e:	f013 0201 	ands.w	r2, r3, #1
 8005362:	d00a      	beq.n	800537a <__swsetup_r+0x9a>
 8005364:	2200      	movs	r2, #0
 8005366:	60a2      	str	r2, [r4, #8]
 8005368:	6962      	ldr	r2, [r4, #20]
 800536a:	4252      	negs	r2, r2
 800536c:	61a2      	str	r2, [r4, #24]
 800536e:	6922      	ldr	r2, [r4, #16]
 8005370:	b942      	cbnz	r2, 8005384 <__swsetup_r+0xa4>
 8005372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005376:	d1c5      	bne.n	8005304 <__swsetup_r+0x24>
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	0799      	lsls	r1, r3, #30
 800537c:	bf58      	it	pl
 800537e:	6962      	ldrpl	r2, [r4, #20]
 8005380:	60a2      	str	r2, [r4, #8]
 8005382:	e7f4      	b.n	800536e <__swsetup_r+0x8e>
 8005384:	2000      	movs	r0, #0
 8005386:	e7f7      	b.n	8005378 <__swsetup_r+0x98>
 8005388:	20000018 	.word	0x20000018

0800538c <__swhatbuf_r>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	460c      	mov	r4, r1
 8005390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005394:	2900      	cmp	r1, #0
 8005396:	b096      	sub	sp, #88	@ 0x58
 8005398:	4615      	mov	r5, r2
 800539a:	461e      	mov	r6, r3
 800539c:	da0d      	bge.n	80053ba <__swhatbuf_r+0x2e>
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	bf14      	ite	ne
 80053aa:	2340      	movne	r3, #64	@ 0x40
 80053ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053b0:	2000      	movs	r0, #0
 80053b2:	6031      	str	r1, [r6, #0]
 80053b4:	602b      	str	r3, [r5, #0]
 80053b6:	b016      	add	sp, #88	@ 0x58
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
 80053ba:	466a      	mov	r2, sp
 80053bc:	f000 f858 	bl	8005470 <_fstat_r>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	dbec      	blt.n	800539e <__swhatbuf_r+0x12>
 80053c4:	9901      	ldr	r1, [sp, #4]
 80053c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053ce:	4259      	negs	r1, r3
 80053d0:	4159      	adcs	r1, r3
 80053d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053d6:	e7eb      	b.n	80053b0 <__swhatbuf_r+0x24>

080053d8 <__smakebuf_r>:
 80053d8:	898b      	ldrh	r3, [r1, #12]
 80053da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053dc:	079d      	lsls	r5, r3, #30
 80053de:	4606      	mov	r6, r0
 80053e0:	460c      	mov	r4, r1
 80053e2:	d507      	bpl.n	80053f4 <__smakebuf_r+0x1c>
 80053e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	6123      	str	r3, [r4, #16]
 80053ec:	2301      	movs	r3, #1
 80053ee:	6163      	str	r3, [r4, #20]
 80053f0:	b003      	add	sp, #12
 80053f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f4:	ab01      	add	r3, sp, #4
 80053f6:	466a      	mov	r2, sp
 80053f8:	f7ff ffc8 	bl	800538c <__swhatbuf_r>
 80053fc:	9f00      	ldr	r7, [sp, #0]
 80053fe:	4605      	mov	r5, r0
 8005400:	4639      	mov	r1, r7
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff fc24 	bl	8004c50 <_malloc_r>
 8005408:	b948      	cbnz	r0, 800541e <__smakebuf_r+0x46>
 800540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540e:	059a      	lsls	r2, r3, #22
 8005410:	d4ee      	bmi.n	80053f0 <__smakebuf_r+0x18>
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	e7e2      	b.n	80053e4 <__smakebuf_r+0xc>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	6020      	str	r0, [r4, #0]
 8005422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800542e:	b15b      	cbz	r3, 8005448 <__smakebuf_r+0x70>
 8005430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005434:	4630      	mov	r0, r6
 8005436:	f000 f82d 	bl	8005494 <_isatty_r>
 800543a:	b128      	cbz	r0, 8005448 <__smakebuf_r+0x70>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	431d      	orrs	r5, r3
 800544c:	81a5      	strh	r5, [r4, #12]
 800544e:	e7cf      	b.n	80053f0 <__smakebuf_r+0x18>

08005450 <_close_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	@ (800546c <_close_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fb fe45 	bl	80010ea <_close>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_close_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_close_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	200002b0 	.word	0x200002b0

08005470 <_fstat_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d07      	ldr	r5, [pc, #28]	@ (8005490 <_fstat_r+0x20>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	f7fb fe40 	bl	8001102 <_fstat>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d102      	bne.n	800548c <_fstat_r+0x1c>
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	b103      	cbz	r3, 800548c <_fstat_r+0x1c>
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	bf00      	nop
 8005490:	200002b0 	.word	0x200002b0

08005494 <_isatty_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d06      	ldr	r5, [pc, #24]	@ (80054b0 <_isatty_r+0x1c>)
 8005498:	2300      	movs	r3, #0
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f7fb fe3f 	bl	8001122 <_isatty>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_isatty_r+0x1a>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_isatty_r+0x1a>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	200002b0 	.word	0x200002b0

080054b4 <_lseek_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	@ (80054d4 <_lseek_r+0x20>)
 80054b8:	4604      	mov	r4, r0
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	2200      	movs	r2, #0
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fb fe38 	bl	8001138 <_lseek>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_lseek_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_lseek_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	200002b0 	.word	0x200002b0

080054d8 <_read_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	@ (80054f8 <_read_r+0x20>)
 80054dc:	4604      	mov	r4, r0
 80054de:	4608      	mov	r0, r1
 80054e0:	4611      	mov	r1, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	602a      	str	r2, [r5, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7fb fdc6 	bl	8001078 <_read>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_read_r+0x1e>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_read_r+0x1e>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	200002b0 	.word	0x200002b0

080054fc <_sbrk_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d06      	ldr	r5, [pc, #24]	@ (8005518 <_sbrk_r+0x1c>)
 8005500:	2300      	movs	r3, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fb fe24 	bl	8001154 <_sbrk>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_sbrk_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_sbrk_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	200002b0 	.word	0x200002b0

0800551c <_write_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	@ (800553c <_write_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fb fdc1 	bl	80010b2 <_write>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_write_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_write_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	200002b0 	.word	0x200002b0

08005540 <_free_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4605      	mov	r5, r0
 8005544:	2900      	cmp	r1, #0
 8005546:	d041      	beq.n	80055cc <_free_r+0x8c>
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f0c      	subs	r4, r1, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfb8      	it	lt
 8005552:	18e4      	addlt	r4, r4, r3
 8005554:	f7ff fe36 	bl	80051c4 <__malloc_lock>
 8005558:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <_free_r+0x90>)
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	b933      	cbnz	r3, 800556c <_free_r+0x2c>
 800555e:	6063      	str	r3, [r4, #4]
 8005560:	6014      	str	r4, [r2, #0]
 8005562:	4628      	mov	r0, r5
 8005564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005568:	f7ff be32 	b.w	80051d0 <__malloc_unlock>
 800556c:	42a3      	cmp	r3, r4
 800556e:	d908      	bls.n	8005582 <_free_r+0x42>
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	1821      	adds	r1, r4, r0
 8005574:	428b      	cmp	r3, r1
 8005576:	bf01      	itttt	eq
 8005578:	6819      	ldreq	r1, [r3, #0]
 800557a:	685b      	ldreq	r3, [r3, #4]
 800557c:	1809      	addeq	r1, r1, r0
 800557e:	6021      	streq	r1, [r4, #0]
 8005580:	e7ed      	b.n	800555e <_free_r+0x1e>
 8005582:	461a      	mov	r2, r3
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b10b      	cbz	r3, 800558c <_free_r+0x4c>
 8005588:	42a3      	cmp	r3, r4
 800558a:	d9fa      	bls.n	8005582 <_free_r+0x42>
 800558c:	6811      	ldr	r1, [r2, #0]
 800558e:	1850      	adds	r0, r2, r1
 8005590:	42a0      	cmp	r0, r4
 8005592:	d10b      	bne.n	80055ac <_free_r+0x6c>
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	4401      	add	r1, r0
 8005598:	1850      	adds	r0, r2, r1
 800559a:	4283      	cmp	r3, r0
 800559c:	6011      	str	r1, [r2, #0]
 800559e:	d1e0      	bne.n	8005562 <_free_r+0x22>
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	6053      	str	r3, [r2, #4]
 80055a6:	4408      	add	r0, r1
 80055a8:	6010      	str	r0, [r2, #0]
 80055aa:	e7da      	b.n	8005562 <_free_r+0x22>
 80055ac:	d902      	bls.n	80055b4 <_free_r+0x74>
 80055ae:	230c      	movs	r3, #12
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	e7d6      	b.n	8005562 <_free_r+0x22>
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	1821      	adds	r1, r4, r0
 80055b8:	428b      	cmp	r3, r1
 80055ba:	bf04      	itt	eq
 80055bc:	6819      	ldreq	r1, [r3, #0]
 80055be:	685b      	ldreq	r3, [r3, #4]
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	bf04      	itt	eq
 80055c4:	1809      	addeq	r1, r1, r0
 80055c6:	6021      	streq	r1, [r4, #0]
 80055c8:	6054      	str	r4, [r2, #4]
 80055ca:	e7ca      	b.n	8005562 <_free_r+0x22>
 80055cc:	bd38      	pop	{r3, r4, r5, pc}
 80055ce:	bf00      	nop
 80055d0:	200002ac 	.word	0x200002ac

080055d4 <_init>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	bf00      	nop
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr

080055e0 <_fini>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr
