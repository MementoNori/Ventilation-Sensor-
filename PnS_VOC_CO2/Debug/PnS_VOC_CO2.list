
PnS_VOC_CO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08006b10  08006b10  00007b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da8  08006da8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006da8  08006da8  00007da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db0  08006db0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db0  08006db0  00007db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006db4  08006db4  00007db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006db8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  08006e20  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08006e20  000082bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e25  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f13  00000000  00000000  0001aebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d67  00000000  00000000  0001ef58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028488  00000000  00000000  0001fcbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016344  00000000  00000000  00048147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecca2  00000000  00000000  0005e48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b12d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f8c  00000000  00000000  0014b170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001500fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006af8 	.word	0x08006af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006af8 	.word	0x08006af8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <buzzer_on>:
#include "buzzer.h"

void buzzer_on(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <buzzer_on+0x14>)
 800057a:	f002 fa79 	bl	8002a70 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400

08000588 <buzzer_off>:

void buzzer_off(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <buzzer_off+0x14>)
 8000592:	f002 fa6d 	bl	8002a70 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	48000400 	.word	0x48000400

080005a0 <HAL_Delay_us>:
#include "buzzer.h"         // damit du buzzer_on/off benutzen kannst
//#include "stm32f1xx_hal.h"  // oder je nach deiner MCU-Serie


void HAL_Delay_us(uint32_t us)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    // HCLK ist 4 MHz, also gibt es 4 Taktzyklen pro Mikrosekunde
    uint32_t delay_cycles = 4;  // Taktzyklen pro Mikrosekunde bei 4 MHz
 80005a8:	2304      	movs	r3, #4
 80005aa:	613b      	str	r3, [r7, #16]

    volatile uint32_t delay_count;
    for (uint32_t i = 0; i < us; i++) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	e00c      	b.n	80005cc <HAL_Delay_us+0x2c>
        // Eine Schleife für jede Mikrosekunde
        for (delay_count = 0; delay_count < delay_cycles; delay_count++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e002      	b.n	80005be <HAL_Delay_us+0x1e>
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d8f8      	bhi.n	80005b8 <HAL_Delay_us+0x18>
    for (uint32_t i = 0; i < us; i++) {
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3ee      	bcc.n	80005b2 <HAL_Delay_us+0x12>
            // Ein leerer Loop als Verzögerung
        }
    }
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	371c      	adds	r7, #28
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <play_note>:

static const char notes[] = "ccggaagffeeddc ";
static const uint32_t beats[] = { 1,1,1,1,1,1,2,1,1,1,1,1,1,2,4 };
static const uint32_t tempo = 300;

void play_note(char note, uint32_t duration_ms) {
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b090      	sub	sp, #64	@ 0x40
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
    // Notennamen mit zugehörigen Tonhöhen
	const char names[] = { 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'C', 'D', 'E', 'G' }; // Hinweis: G = gis (G♯)
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <play_note+0xac>)
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f8:	c303      	stmia	r3!, {r0, r1}
 80005fa:	801a      	strh	r2, [r3, #0]
 80005fc:	3302      	adds	r3, #2
 80005fe:	0c12      	lsrs	r2, r2, #16
 8000600:	701a      	strb	r2, [r3, #0]
	const uint16_t tones[] = {
 8000602:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <play_note+0xb0>)
 8000604:	f107 040c 	add.w	r4, r7, #12
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000612:	6020      	str	r0, [r4, #0]
 8000614:	3404      	adds	r4, #4
 8000616:	8021      	strh	r1, [r4, #0]
		1204  // G = gis (415.30 Hz)
	};



    for (int i = 0; i < 8; i++) {
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800061c:	e032      	b.n	8000684 <play_note+0xa0>
        if (names[i] == note) {
 800061e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	79fa      	ldrb	r2, [r7, #7]
 800062a:	429a      	cmp	r2, r3
 800062c:	d127      	bne.n	800067e <play_note+0x9a>
            uint16_t tone = tones[i];
 800062e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	3340      	adds	r3, #64	@ 0x40
 8000634:	443b      	add	r3, r7
 8000636:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800063a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            uint32_t cycles = (duration_ms * 1000L) / (tone * 2);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000642:	fb02 f303 	mul.w	r3, r2, r3
 8000646:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000648:	0052      	lsls	r2, r2, #1
 800064a:	fbb3 f3f2 	udiv	r3, r3, r2
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
            for (uint32_t j = 0; j < cycles; j++) {
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000654:	e00e      	b.n	8000674 <play_note+0x90>
                buzzer_on();
 8000656:	f7ff ff8b 	bl	8000570 <buzzer_on>
                HAL_Delay_us(tone);   // eigene Mikrosekunden-Funktion nötig!
 800065a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff9f 	bl	80005a0 <HAL_Delay_us>
                buzzer_off();
 8000662:	f7ff ff91 	bl	8000588 <buzzer_off>
                HAL_Delay_us(tone);
 8000666:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff99 	bl	80005a0 <HAL_Delay_us>
            for (uint32_t j = 0; j < cycles; j++) {
 800066e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000670:	3301      	adds	r3, #1
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000678:	429a      	cmp	r2, r3
 800067a:	d3ec      	bcc.n	8000656 <play_note+0x72>
            }
            return;
 800067c:	e005      	b.n	800068a <play_note+0xa6>
    for (int i = 0; i < 8; i++) {
 800067e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000680:	3301      	adds	r3, #1
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000686:	2b07      	cmp	r3, #7
 8000688:	ddc9      	ble.n	800061e <play_note+0x3a>
        }
    }
}
 800068a:	3740      	adds	r7, #64	@ 0x40
 800068c:	46bd      	mov	sp, r7
 800068e:	bdb0      	pop	{r4, r5, r7, pc}
 8000690:	08006b10 	.word	0x08006b10
 8000694:	08006b1c 	.word	0x08006b1c

08000698 <LCD_setReg>:


#define I2C_RGB_ADDR  0xC4
#define I2C_LCD_ADDR  0x7C

static void LCD_setReg(unsigned char reg, unsigned char val){
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {reg, val};
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	733b      	strb	r3, [r7, #12]
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_RGB_ADDR, (uint8_t*)data, 2, 1000);
 80006b0:	f107 020c 	add.w	r2, r7, #12
 80006b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2302      	movs	r3, #2
 80006bc:	21c4      	movs	r1, #196	@ 0xc4
 80006be:	4803      	ldr	r0, [pc, #12]	@ (80006cc <LCD_setReg+0x34>)
 80006c0:	f002 fa8a 	bl	8002bd8 <HAL_I2C_Master_Transmit>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000008c 	.word	0x2000008c

080006d0 <i2c_send_byteS>:
 *	->	as shown above (if required)
 *
*/
/*************************************************************************/
static void i2c_send_byteS(uint8_t *data, uint32_t len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_LCD_ADDR, (uint8_t*)data, len, 1000);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	217c      	movs	r1, #124	@ 0x7c
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <i2c_send_byteS+0x28>)
 80006ea:	f002 fa75 	bl	8002bd8 <HAL_I2C_Master_Transmit>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c

080006fc <LCD_begin>:
 *					function with MCU related delay function.
 *
*/
/*************************************************************************/

void LCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	460b      	mov	r3, r1
 8000708:	71bb      	strb	r3, [r7, #6]
 800070a:	4613      	mov	r3, r2
 800070c:	717b      	strb	r3, [r7, #5]
	if (lines > 1) {
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d906      	bls.n	8000722 <LCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8000714:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <LCD_begin+0xe8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <LCD_begin+0xe8>)
 8000720:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8000722:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <LCD_begin+0xec>)
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8000728:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <LCD_begin+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 800072e:	797b      	ldrb	r3, [r7, #5]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d009      	beq.n	8000748 <LCD_begin+0x4c>
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d106      	bne.n	8000748 <LCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <LCD_begin+0xe8>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <LCD_begin+0xe8>)
 8000746:	701a      	strb	r2, [r3, #0]

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50 msec

    HAL_Delay(50);	// 50-msec delay
 8000748:	2032      	movs	r0, #50	@ 0x32
 800074a:	f001 fedd 	bl	8002508 <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <LCD_begin+0xe8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f8bd 	bl	80008d8 <LCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800075e:	2005      	movs	r0, #5
 8000760:	f001 fed2 	bl	8002508 <HAL_Delay>

    // second try
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <LCD_begin+0xe8>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	f043 0320 	orr.w	r3, r3, #32
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f8b2 	bl	80008d8 <LCD_command>
    HAL_Delay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f001 fec7 	bl	8002508 <HAL_Delay>

    // third go
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <LCD_begin+0xe8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f8a7 	bl	80008d8 <LCD_command>


    // finally, set # lines, font size, etc.
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <LCD_begin+0xe8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f89f 	bl	80008d8 <LCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <LCD_begin+0xf4>)
 800079c:	2204      	movs	r2, #4
 800079e:	701a      	strb	r2, [r3, #0]
    LCD_display();
 80007a0:	f000 f834 	bl	800080c <LCD_display>

    // clear it off
    LCD_clear();
 80007a4:	f000 f828 	bl	80007f8 <LCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <LCD_begin+0xf8>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    LCD_command(LCD_ENTRYMODESET | _displaymode);
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <LCD_begin+0xf8>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f88d 	bl	80008d8 <LCD_command>

    // backlight init
    LCD_setReg(0, 0);
 80007be:	2100      	movs	r1, #0
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ff69 	bl	8000698 <LCD_setReg>
    LCD_setReg(1, 0);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ff65 	bl	8000698 <LCD_setReg>
    LCD_setReg(0x08, 0xAA);     // all led control by pwm
 80007ce:	21aa      	movs	r1, #170	@ 0xaa
 80007d0:	2008      	movs	r0, #8
 80007d2:	f7ff ff61 	bl	8000698 <LCD_setReg>

    LCD_setColorWhite();
 80007d6:	f000 f8ae 	bl	8000936 <LCD_setColorWhite>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000084 	.word	0x20000084
 80007e8:	20000087 	.word	0x20000087
 80007ec:	20000088 	.word	0x20000088
 80007f0:	20000085 	.word	0x20000085
 80007f4:	20000086 	.word	0x20000086

080007f8 <LCD_clear>:

void LCD_clear(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	LCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 f86b 	bl	80008d8 <LCD_command>
	HAL_Delay(2); // this command takes a long time!
 8000802:	2002      	movs	r0, #2
 8000804:	f001 fe80 	bl	8002508 <HAL_Delay>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <LCD_display>:

void LCD_noDisplay(void){
    _displaycontrol &= ~LCD_DISPLAYON;
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <LCD_display+0x28>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <LCD_display+0x28>)
 800081c:	701a      	strb	r2, [r3, #0]
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 800081e:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <LCD_display+0x28>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f855 	bl	80008d8 <LCD_command>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000085 	.word	0x20000085

08000838 <LCD_setCursor>:
    {
        dta[i+1] = charmap[i];
    }
    i2c_send_byteS(dta, 9);
}
void LCD_setCursor(uint8_t col, uint8_t row){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <LCD_setCursor+0x20>
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000854:	b2db      	uxtb	r3, r3
 8000856:	e003      	b.n	8000860 <LCD_setCursor+0x28>
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800085e:	b2db      	uxtb	r3, r3
 8000860:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8000862:	2380      	movs	r3, #128	@ 0x80
 8000864:	733b      	strb	r3, [r7, #12]
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff2d 	bl	80006d0 <i2c_send_byteS>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <LCD_write>:

void LCD_write(uint8_t value){
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 8000888:	2340      	movs	r3, #64	@ 0x40
 800088a:	733b      	strb	r3, [r7, #12]
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2102      	movs	r1, #2
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff1a 	bl	80006d0 <i2c_send_byteS>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <LCD_print>:

void LCD_print(char* data, uint8_t size){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 80008b0:	e00a      	b.n	80008c8 <LCD_print+0x24>
		LCD_write(data[0]);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffe1 	bl	800087e <LCD_write>
		data++;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3301      	adds	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
		size--;
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f1      	bne.n	80008b2 <LCD_print+0xe>
	}
}
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <LCD_command>:

void LCD_command(uint8_t value){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	733b      	strb	r3, [r7, #12]
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2102      	movs	r1, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff feed 	bl	80006d0 <i2c_send_byteS>
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <LCD_setRGB>:

// color control
void LCD_setRGB(unsigned char r, unsigned char g, unsigned char b){
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	460b      	mov	r3, r1
 800090a:	71bb      	strb	r3, [r7, #6]
 800090c:	4613      	mov	r3, r2
 800090e:	717b      	strb	r3, [r7, #5]
	LCD_setReg(REG_RED, r);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4619      	mov	r1, r3
 8000914:	2004      	movs	r0, #4
 8000916:	f7ff febf 	bl	8000698 <LCD_setReg>
    LCD_setReg(REG_GREEN, g);
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	4619      	mov	r1, r3
 800091e:	2003      	movs	r0, #3
 8000920:	f7ff feba 	bl	8000698 <LCD_setReg>
    LCD_setReg(REG_BLUE, b);
 8000924:	797b      	ldrb	r3, [r7, #5]
 8000926:	4619      	mov	r1, r3
 8000928:	2002      	movs	r0, #2
 800092a:	f7ff feb5 	bl	8000698 <LCD_setReg>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <LCD_setColorWhite>:

void LCD_setColorAll(void){
	LCD_setRGB(0, 0, 0);
}

void LCD_setColorWhite(void){
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
	LCD_setRGB(255, 255, 255);
 800093a:	22ff      	movs	r2, #255	@ 0xff
 800093c:	21ff      	movs	r1, #255	@ 0xff
 800093e:	20ff      	movs	r0, #255	@ 0xff
 8000940:	f7ff ffdd 	bl	80008fe <LCD_setRGB>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000950:	1d39      	adds	r1, r7, #4
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	2201      	movs	r2, #1
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <__io_putchar+0x20>)
 800095a:	f004 f9f7 	bl	8004d4c <HAL_UART_Transmit>
    return ch;
 800095e:	687b      	ldr	r3, [r7, #4]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000e0 	.word	0x200000e0

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b5b0      	push	{r4, r5, r7, lr}
 800096e:	b0ee      	sub	sp, #440	@ 0x1b8
 8000970:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f001 fd54 	bl	800241e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 fdcf 	bl	8001518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 fe8f 	bl	800169c <MX_GPIO_Init>
  MX_I2C1_Init();
 800097e:	f000 fe1d 	bl	80015bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000982:	f000 fe5b 	bl	800163c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //start communication with sensor

  HAL_Delay(10);
 8000986:	200a      	movs	r0, #10
 8000988:	f001 fdbe 	bl	8002508 <HAL_Delay>
  //Display initialization
  LCD_begin(16,2,0);
 800098c:	2200      	movs	r2, #0
 800098e:	2102      	movs	r1, #2
 8000990:	2010      	movs	r0, #16
 8000992:	f7ff feb3 	bl	80006fc <LCD_begin>
  LCD_setColorWhite();
 8000996:	f7ff ffce 	bl	8000936 <LCD_setColorWhite>
  //first I2C initialization
  sgp30_iaq_init();
 800099a:	f001 fb3d 	bl	8002018 <sgp30_iaq_init>
  HAL_Delay(1000);
 800099e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a2:	f001 fdb1 	bl	8002508 <HAL_Delay>
  uint8_t sensor_data[60];  // Buffer large enough for full data

   uint8_t buffer[48];
   sen5x_get_product_name(buffer, 48);
 80009a6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80009aa:	2130      	movs	r1, #48	@ 0x30
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 ffa7 	bl	8001900 <sen5x_get_product_name>
   int16_t error = sen5x_device_reset();
 80009b2:	f000 ffe9 	bl	8001988 <sen5x_device_reset>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
   error = sen5x_start_measurement();
 80009bc:	f000 fef0 	bl	80017a0 <sen5x_start_measurement>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
   uint16_t mass_concentration_pm10p0;
   int16_t ambient_humidity;
   int16_t ambient_temperature;
   int16_t voc_index;
   int16_t nox_index;
   uint8_t cur_screen = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
   uint32_t last_switch = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0



   HAL_Delay(1000);
 80009d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d6:	f001 fd97 	bl	8002508 <HAL_Delay>

   error = sen5x_read_measured_values(
 80009da:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 80009de:	f107 0286 	add.w	r2, r7, #134	@ 0x86
 80009e2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80009e6:	f107 008a 	add.w	r0, r7, #138	@ 0x8a
 80009ea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009ee:	9303      	str	r3, [sp, #12]
 80009f0:	f107 037e 	add.w	r3, r7, #126	@ 0x7e
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f107 0382 	add.w	r3, r7, #130	@ 0x82
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4623      	mov	r3, r4
 8000a04:	f000 fef1 	bl	80017ea <sen5x_read_measured_values>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
       &mass_concentration_pm1p0, &mass_concentration_pm2p5,
       &mass_concentration_pm4p0, &mass_concentration_pm10p0,
       &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);

   if (sen54_init(&hi2c1) == HAL_OK)
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <main+0xd8>)
 8000a10:	f000 fe7a 	bl	8001708 <sen54_init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d103      	bne.n	8000a22 <main+0xb6>
   {
       printf("Sensor initialized.\r\n");
 8000a1a:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <main+0xdc>)
 8000a1c:	f005 f81e 	bl	8005a5c <puts>
 8000a20:	e002      	b.n	8000a28 <main+0xbc>
   } else {
       printf("Sensor init failed.\r\n");
 8000a22:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <main+0xe0>)
 8000a24:	f005 f81a 	bl	8005a5c <puts>
   }


   if (sen54_read_measurements(&hi2c1, sensor_data, sizeof(sensor_data)) == HAL_OK) {
 8000a28:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000a2c:	223c      	movs	r2, #60	@ 0x3c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <main+0xd8>)
 8000a32:	f000 fe89 	bl	8001748 <sen54_read_measurements>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11f      	bne.n	8000a7c <main+0x110>
       /*printf("Measurement received:\r\n");*/

       for (int i = 0; i < sizeof(sensor_data); i++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000a42:	e014      	b.n	8000a6e <main+0x102>
 8000a44:	2000008c 	.word	0x2000008c
 8000a48:	08006b34 	.word	0x08006b34
 8000a4c:	08006b4c 	.word	0x08006b4c
           printf("%02X ", sensor_data[i]);
 8000a50:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8000a54:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000a58:	4413      	add	r3, r2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	48d3      	ldr	r0, [pc, #844]	@ (8000dac <main+0x440>)
 8000a60:	f004 ff94 	bl	800598c <iprintf>
       for (int i = 0; i < sizeof(sensor_data); i++) {
 8000a64:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000a68:	3301      	adds	r3, #1
 8000a6a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000a6e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000a72:	2b3b      	cmp	r3, #59	@ 0x3b
 8000a74:	d9ec      	bls.n	8000a50 <main+0xe4>
       }
       printf("\r\n");
 8000a76:	48ce      	ldr	r0, [pc, #824]	@ (8000db0 <main+0x444>)
 8000a78:	f004 fff0 	bl	8005a5c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //measurement of values
	  uint16_t co2, tvoc, pm25;
	  float temp = 0.0f, hum= 0.0f;
 8000a7c:	f04f 0300 	mov.w	r3, #0
 8000a80:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	  char buffer[17];



	  //reading VOC and CO2 values
	  sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 8000a8c:	f107 027a 	add.w	r2, r7, #122	@ 0x7a
 8000a90:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 faa1 	bl	8001fde <sgp30_measure_iaq_blocking_read>
	            printf("%02X ", sensor_data[i]);
	        }
	        printf("\r\n");
	  }
*/
	  if (sen54_read_measurements(&hi2c1, sensor_data, sizeof(sensor_data)) == HAL_OK) {
 8000a9c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000aa0:	223c      	movs	r2, #60	@ 0x3c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	48c3      	ldr	r0, [pc, #780]	@ (8000db4 <main+0x448>)
 8000aa6:	f000 fe4f 	bl	8001748 <sen54_read_measurements>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f040 814b 	bne.w	8000d48 <main+0x3dc>

	  	      printf("\r\n");
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <main+0x444>)
 8000ab4:	f004 ffd2 	bl	8005a5c <puts>
	  	      uint16_t raw_mc_1 = ((uint16_t)sensor_data[0] << 8) | sensor_data[1];
 8000ab8:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	f8a7 318a 	strh.w	r3, [r7, #394]	@ 0x18a
	  	      mass_concentration_pm1p0 = raw_mc_1/10.0f;
 8000ace:	f8b7 318a 	ldrh.w	r3, [r7, #394]	@ 0x18a
 8000ad2:	ee07 3a90 	vmov	s15, r3
 8000ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ada:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae6:	ee17 3a90 	vmov	r3, s15
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000af0:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8000af4:	801a      	strh	r2, [r3, #0]
	  	      int mc_1_int = (int)(mass_concentration_pm1p0 + 0.5f);
 8000af6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000afa:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b08:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b14:	ee17 3a90 	vmov	r3, s15
 8000b18:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	  	      printf("\r\nMass Concentration PM1.0: %.d °C\r\n", mc_1_int);
 8000b1c:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8000b20:	48a5      	ldr	r0, [pc, #660]	@ (8000db8 <main+0x44c>)
 8000b22:	f004 ff33 	bl	800598c <iprintf>

	  	      printf("\r\n");
 8000b26:	48a2      	ldr	r0, [pc, #648]	@ (8000db0 <main+0x444>)
 8000b28:	f004 ff98 	bl	8005a5c <puts>
	  	      uint16_t raw_mc_25 = ((uint16_t)sensor_data[3] << 8) | sensor_data[4];
 8000b2c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	f8a7 3182 	strh.w	r3, [r7, #386]	@ 0x182
	  	      mass_concentration_pm2p5 = raw_mc_25/10.0f;
 8000b42:	f8b7 3182 	ldrh.w	r3, [r7, #386]	@ 0x182
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b4e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b5a:	ee17 3a90 	vmov	r3, s15
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000b64:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b68:	801a      	strh	r2, [r3, #0]
	  	      int mc_25_int = (int)(mass_concentration_pm2p5 + 0.5f);
 8000b6a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000b6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b88:	ee17 3a90 	vmov	r3, s15
 8000b8c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	  	      printf("\r\nMass Concentration PM2.5: %.d °C\r\n", mc_25_int);
 8000b90:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 8000b94:	4889      	ldr	r0, [pc, #548]	@ (8000dbc <main+0x450>)
 8000b96:	f004 fef9 	bl	800598c <iprintf>

	  	      printf("\r\n");
 8000b9a:	4885      	ldr	r0, [pc, #532]	@ (8000db0 <main+0x444>)
 8000b9c:	f004 ff5e 	bl	8005a5c <puts>
	  	      uint16_t raw_mc_4 = ((uint16_t)sensor_data[6] << 8) | sensor_data[7];
 8000ba0:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
	  	      mass_concentration_pm4p0 = raw_mc_4/10.0f;
 8000bb6:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bce:	ee17 3a90 	vmov	r3, s15
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000bd8:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8000bdc:	801a      	strh	r2, [r3, #0]
	  	      int mc_4_int = (int)(mass_concentration_pm4p0 + 0.5f);
 8000bde:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000be2:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfc:	ee17 3a90 	vmov	r3, s15
 8000c00:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
	  	      printf("\r\nMass Concentration PM4.0: %.d °C\r\n", mc_4_int);
 8000c04:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000c08:	486d      	ldr	r0, [pc, #436]	@ (8000dc0 <main+0x454>)
 8000c0a:	f004 febf 	bl	800598c <iprintf>

	  	      printf("\r\n");
 8000c0e:	4868      	ldr	r0, [pc, #416]	@ (8000db0 <main+0x444>)
 8000c10:	f004 ff24 	bl	8005a5c <puts>
	  	      uint16_t raw_mc_10 = ((uint16_t)sensor_data[9] << 8) | sensor_data[10];
 8000c14:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
	  	      mass_concentration_pm10p0 = raw_mc_10/10.0f;
 8000c2a:	f8b7 3172 	ldrh.w	r3, [r7, #370]	@ 0x172
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c36:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000c3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c42:	ee17 3a90 	vmov	r3, s15
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000c4c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000c50:	801a      	strh	r2, [r3, #0]
	  	      int mc_10_int = (int)(mass_concentration_pm10p0 + 0.5f);
 8000c52:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000c56:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	ee07 3a90 	vmov	s15, r3
 8000c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c70:	ee17 3a90 	vmov	r3, s15
 8000c74:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
	  	      printf("\r\nMass Concentration PM10.0: %.d °C\r\n", mc_10_int);
 8000c78:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000c7c:	4851      	ldr	r0, [pc, #324]	@ (8000dc4 <main+0x458>)
 8000c7e:	f004 fe85 	bl	800598c <iprintf>

	  	      printf("\r\n");
 8000c82:	484b      	ldr	r0, [pc, #300]	@ (8000db0 <main+0x444>)
 8000c84:	f004 feea 	bl	8005a5c <puts>
	  	      uint16_t raw_hum = ((uint16_t)sensor_data[12] << 8) | sensor_data[13];
 8000c88:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	f8a7 316a 	strh.w	r3, [r7, #362]	@ 0x16a
	  	      ambient_humidity = raw_hum/100.0f;
 8000c9e:	f8b7 316a 	ldrh.w	r3, [r7, #362]	@ 0x16a
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000caa:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8000dc8 <main+0x45c>
 8000cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb6:	ee17 3a90 	vmov	r3, s15
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000cc0:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8000cc4:	801a      	strh	r2, [r3, #0]
	  	      int hum_int = (int)(ambient_humidity + 0.5f);
 8000cc6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000cca:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	ee07 3a90 	vmov	s15, r3
 8000cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000cde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce6:	ee17 3a90 	vmov	r3, s15
 8000cea:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
	  	      printf("\r\nAmbient Humidity: %.d %\r\n", hum_int);
 8000cee:	f8d7 1164 	ldr.w	r1, [r7, #356]	@ 0x164
 8000cf2:	4836      	ldr	r0, [pc, #216]	@ (8000dcc <main+0x460>)
 8000cf4:	f004 fe4a 	bl	800598c <iprintf>

	  	      uint16_t raw_temp = ((uint16_t)sensor_data[15] << 8) | sensor_data[16];
 8000cf8:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
	  	      float room_temperature = raw_temp / 200.0f;
 8000d0e:	f8b7 3162 	ldrh.w	r3, [r7, #354]	@ 0x162
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d1a:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000dd0 <main+0x464>
 8000d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d22:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
	  	      int temp_int = (int)(room_temperature + 0.5f);
 8000d26:	edd7 7a57 	vldr	s15, [r7, #348]	@ 0x15c
 8000d2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d36:	ee17 3a90 	vmov	r3, s15
 8000d3a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	  	      printf("\r\nAmbient Temperature: %.d °C\r\n", temp_int);
 8000d3e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8000d42:	4824      	ldr	r0, [pc, #144]	@ (8000dd4 <main+0x468>)
 8000d44:	f004 fe22 	bl	800598c <iprintf>


	  	  }


	  HAL_Delay(1000); //read every second
 8000d48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d4c:	f001 fbdc 	bl	8002508 <HAL_Delay>

	  //cycling through the data on screen
	  if (HAL_GetTick() - last_switch >= 3000) {
 8000d50:	f001 fbce 	bl	80024f0 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000d60:	4293      	cmp	r3, r2
 8000d62:	f240 8155 	bls.w	8001010 <main+0x6a4>
	          last_switch = HAL_GetTick();
 8000d66:	f001 fbc3 	bl	80024f0 <HAL_GetTick>
 8000d6a:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
	          cur_screen = (cur_screen + 1) % 3;
 8000d6e:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <main+0x46c>)
 8000d76:	fb83 3102 	smull	r3, r1, r3, r2
 8000d7a:	17d3      	asrs	r3, r2, #31
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	440b      	add	r3, r1
 8000d84:	1ad1      	subs	r1, r2, r3
 8000d86:	460b      	mov	r3, r1
 8000d88:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7

	          //clear and update LCD
	          LCD_clear();
 8000d8c:	f7ff fd34 	bl	80007f8 <LCD_clear>
			  switch(cur_screen){
 8000d90:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	f000 80ef 	beq.w	8000f78 <main+0x60c>
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	f300 8138 	bgt.w	8001010 <main+0x6a4>
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d01b      	beq.n	8000ddc <main+0x470>
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d052      	beq.n	8000e4e <main+0x4e2>
 8000da8:	e132      	b.n	8001010 <main+0x6a4>
 8000daa:	bf00      	nop
 8000dac:	08006b64 	.word	0x08006b64
 8000db0:	08006b6c 	.word	0x08006b6c
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	08006b70 	.word	0x08006b70
 8000dbc:	08006b98 	.word	0x08006b98
 8000dc0:	08006bc0 	.word	0x08006bc0
 8000dc4:	08006be8 	.word	0x08006be8
 8000dc8:	42c80000 	.word	0x42c80000
 8000dcc:	08006c10 	.word	0x08006c10
 8000dd0:	43480000 	.word	0x43480000
 8000dd4:	08006c2c 	.word	0x08006c2c
 8000dd8:	55555556 	.word	0x55555556
				  case 0:
					  LCD_setCursor(0, 0);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fd2a 	bl	8000838 <LCD_setCursor>
					  snprintf(buffer, sizeof(buffer), "CO2: %u ppm", co2);
 8000de4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000de8:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000df2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f60 <main+0x5f4>)
 8000df4:	2111      	movs	r1, #17
 8000df6:	f004 fe39 	bl	8005a6c <sniprintf>
					  LCD_print(buffer, strlen(buffer));
 8000dfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e6 	bl	80001d0 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fd48 	bl	80008a4 <LCD_print>

					  LCD_setCursor(0, 1);
 8000e14:	2101      	movs	r1, #1
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fd0e 	bl	8000838 <LCD_setCursor>
					  snprintf(buffer, sizeof(buffer), "TVOC: %u ppb", tvoc);
 8000e1c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000e20:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8000f64 <main+0x5f8>)
 8000e2c:	2111      	movs	r1, #17
 8000e2e:	f004 fe1d 	bl	8005a6c <sniprintf>
					  LCD_print(buffer, strlen(buffer));
 8000e32:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f9ca 	bl	80001d0 <strlen>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fd2c 	bl	80008a4 <LCD_print>
					  break;
 8000e4c:	e0e0      	b.n	8001010 <main+0x6a4>
				  case 1:
					  LCD_setCursor(0, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fcf1 	bl	8000838 <LCD_setCursor>
					  uint16_t raw_temp = ((uint16_t)sensor_data[15] << 8) | sensor_data[16];
 8000e56:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
					  float room_temperature = raw_temp / 200.0f;
 8000e6c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000f68 <main+0x5fc>
 8000e7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e80:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
					  int temp_int = (int)(room_temperature + 0.5f);
 8000e84:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8000e88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e94:	ee17 3a90 	vmov	r3, s15
 8000e98:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					  snprintf(buffer, sizeof(buffer), "T: %d C", temp_int);
 8000e9c:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000ea0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000ea4:	4a31      	ldr	r2, [pc, #196]	@ (8000f6c <main+0x600>)
 8000ea6:	2111      	movs	r1, #17
 8000ea8:	f004 fde0 	bl	8005a6c <sniprintf>
					  LCD_print(buffer, strlen(buffer));
 8000eac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff f98d 	bl	80001d0 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fcef 	bl	80008a4 <LCD_print>

					  LCD_setCursor(0, 1);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fcb5 	bl	8000838 <LCD_setCursor>
					  //int hum_int = (int)(hum + 0.5f);
					  uint16_t raw_hum = ((uint16_t)sensor_data[12] << 8) | sensor_data[13];
 8000ece:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
					  ambient_humidity = raw_hum/100.0f;
 8000ee4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef0:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000f70 <main+0x604>
 8000ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efc:	ee17 3a90 	vmov	r3, s15
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000f06:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8000f0a:	801a      	strh	r2, [r3, #0]
					  int hum_int = (int)(ambient_humidity + 0.5f);
 8000f0c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000f10:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2c:	ee17 3a90 	vmov	r3, s15
 8000f30:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
					  snprintf(buffer, sizeof(buffer), "RH: %d %%", hum_int);
 8000f34:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000f38:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <main+0x608>)
 8000f3e:	2111      	movs	r1, #17
 8000f40:	f004 fd94 	bl	8005a6c <sniprintf>
					  LCD_print(buffer, strlen(buffer));
 8000f44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f941 	bl	80001d0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fca3 	bl	80008a4 <LCD_print>
					  break;
 8000f5e:	e057      	b.n	8001010 <main+0x6a4>
 8000f60:	08006c50 	.word	0x08006c50
 8000f64:	08006c5c 	.word	0x08006c5c
 8000f68:	43480000 	.word	0x43480000
 8000f6c:	08006c6c 	.word	0x08006c6c
 8000f70:	42c80000 	.word	0x42c80000
 8000f74:	08006c74 	.word	0x08006c74
				  case 2:
					  LCD_setCursor(0, 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fc5c 	bl	8000838 <LCD_setCursor>
					  uint16_t raw_mc_25 = ((uint16_t)sensor_data[3] << 8) | sensor_data[4];
 8000f80:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156
					  mass_concentration_pm2p5 = raw_mc_25/10.0f;
 8000f96:	f8b7 3156 	ldrh.w	r3, [r7, #342]	@ 0x156
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000fb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fbc:	801a      	strh	r2, [r3, #0]
					  int mc_25_int = (int)(mass_concentration_pm2p5 + 0.5f);
 8000fbe:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000fc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fdc:	ee17 3a90 	vmov	r3, s15
 8000fe0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
					  snprintf(buffer, sizeof(buffer), "PM2.5: %u ug/m3", mc_25_int);
 8000fe4:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000fe8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000fec:	4aba      	ldr	r2, [pc, #744]	@ (80012d8 <main+0x96c>)
 8000fee:	2111      	movs	r1, #17
 8000ff0:	f004 fd3c 	bl	8005a6c <sniprintf>
					  LCD_print(buffer, strlen(buffer));
 8000ff4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8e9 	bl	80001d0 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b2da      	uxtb	r2, r3
 8001002:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fc4b 	bl	80008a4 <LCD_print>
					  break;
 800100e:	bf00      	nop
			  }


	  }

	  uint16_t raw_temp = ((uint16_t)sensor_data[15] << 8) | sensor_data[16];
 8001010:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
	 					  float room_temperature = raw_temp / 200.0f;
 8001026:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001032:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 80012dc <main+0x970>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
	 					  int temp_int = (int)(room_temperature + 0.5f);
 800103e:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8001042:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800104a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104e:	ee17 3a90 	vmov	r3, s15
 8001052:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	  uint16_t raw_hum = ((uint16_t)sensor_data[12] << 8) | sensor_data[13];
 8001056:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	  ambient_humidity = raw_hum/100.0f;
 800106c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001078:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80012fc <main+0x990>
 800107c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001084:	ee17 3a90 	vmov	r3, s15
 8001088:	b21a      	sxth	r2, r3
 800108a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800108e:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8001092:	801a      	strh	r2, [r3, #0]
	  int hum_int = (int)(ambient_humidity + 0.5f);
 8001094:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001098:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	  uint16_t raw_mc_25 = ((uint16_t)sensor_data[3] << 8) | sensor_data[4];
 80010bc:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	  mass_concentration_pm2p5 = raw_mc_25/10.0f;
 80010d2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010de:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ea:	ee17 3a90 	vmov	r3, s15
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80010f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010f8:	801a      	strh	r2, [r3, #0]
	  int mc_25_int = (int)(mass_concentration_pm2p5 + 0.5f);
 80010fa:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80010fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 3a90 	vmov	r3, s15
 800111c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	  //Check Lüften conditions
	  if (co2>1000|| tvoc>300||mass_concentration_pm2p5>35 || room_temperature>30.0f || ambient_humidity > 60.0f){
 8001120:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001124:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800112e:	d820      	bhi.n	8001172 <main+0x806>
 8001130:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001134:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800113e:	d818      	bhi.n	8001172 <main+0x806>
 8001140:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001144:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	2b23      	cmp	r3, #35	@ 0x23
 800114c:	d811      	bhi.n	8001172 <main+0x806>
 800114e:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8001152:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	dc08      	bgt.n	8001172 <main+0x806>
 8001160:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001164:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	2b3c      	cmp	r3, #60	@ 0x3c
 800116e:	f340 81b5 	ble.w	80014dc <main+0xb70>

		 //Twinkle Twinkle little star

		  int length = 15;
 8001172:	230f      	movs	r3, #15
 8001174:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  char notes[] = "ccggaagffeeddc ";
 8001178:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800117c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001180:	4a57      	ldr	r2, [pc, #348]	@ (80012e0 <main+0x974>)
 8001182:	461c      	mov	r4, r3
 8001184:	4613      	mov	r3, r2
 8001186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  int beats[]  = {1,1,1,1,1,1,2,1,1,1,1,1,1,2,4};
 800118c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001190:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001194:	4a53      	ldr	r2, [pc, #332]	@ (80012e4 <main+0x978>)
 8001196:	461c      	mov	r4, r3
 8001198:	4615      	mov	r5, r2
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  int tempo = 300;
 80011ae:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80011b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		    	  int beats[] = {1,1,1,2,1,1,4};
		    	  int tempo = 300;
	*/


		for (int i = 0; i < length; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80011bc:	e17d      	b.n	80014ba <main+0xb4e>
		  LCD_clear();
 80011be:	f7ff fb1b 	bl	80007f8 <LCD_clear>
		  LCD_setCursor(0, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fb37 	bl	8000838 <LCD_setCursor>
		  snprintf(buffer, sizeof(buffer), "LUEFTEN!");
 80011ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ce:	4a46      	ldr	r2, [pc, #280]	@ (80012e8 <main+0x97c>)
 80011d0:	2111      	movs	r1, #17
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fc4a 	bl	8005a6c <sniprintf>
		  LCD_print(buffer, strlen(buffer));
 80011d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011dc:	4618      	mov	r0, r3
 80011de:	f7fe fff7 	bl	80001d0 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fb59 	bl	80008a4 <LCD_print>
		  sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 80011f2:	f107 027a 	add.w	r2, r7, #122	@ 0x7a
 80011f6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 feee 	bl	8001fde <sgp30_measure_iaq_blocking_read>

		  LCD_setCursor(0, 1);
 8001202:	2101      	movs	r1, #1
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fb17 	bl	8000838 <LCD_setCursor>
		  if (co2 > 1000) {
 800120a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800120e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001218:	d90b      	bls.n	8001232 <main+0x8c6>
		          snprintf(buffer, sizeof(buffer), "CO2: %u ppm", co2);
 800121a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800121e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001228:	4a30      	ldr	r2, [pc, #192]	@ (80012ec <main+0x980>)
 800122a:	2111      	movs	r1, #17
 800122c:	f004 fc1e 	bl	8005a6c <sniprintf>
 8001230:	e0f8      	b.n	8001424 <main+0xab8>
		      }
		  else if (tvoc > 300) {
 8001232:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001236:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001240:	d90b      	bls.n	800125a <main+0x8ee>
		          snprintf(buffer, sizeof(buffer), "TVOC: %u ppb", tvoc);
 8001242:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001246:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001250:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <main+0x984>)
 8001252:	2111      	movs	r1, #17
 8001254:	f004 fc0a 	bl	8005a6c <sniprintf>
 8001258:	e0e4      	b.n	8001424 <main+0xab8>
		      }
		  else if (room_temperature > 50.0f || room_temperature < 18.0f) {
 800125a:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 800125e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80012f4 <main+0x988>
 8001262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dc08      	bgt.n	800127e <main+0x912>
 800126c:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8001270:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8001274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	d540      	bpl.n	8001300 <main+0x994>
			  uint16_t raw_temp = ((uint16_t)sensor_data[15] << 8) | sensor_data[16];
 800127e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21b      	sxth	r3, r3
 8001290:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
			  float room_temperature = raw_temp / 200.0f;
 8001294:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80012dc <main+0x970>
 80012a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a8:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
			  int temp_int = (int)(room_temperature + 0.5f);
 80012ac:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80012b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80012b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012bc:	ee17 3a90 	vmov	r3, s15
 80012c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
			  snprintf(buffer, sizeof(buffer), "T: %d C", temp_int);
 80012c4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80012c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <main+0x98c>)
 80012ce:	2111      	movs	r1, #17
 80012d0:	f004 fbcc 	bl	8005a6c <sniprintf>
		  else if (room_temperature > 50.0f || room_temperature < 18.0f) {
 80012d4:	e0a6      	b.n	8001424 <main+0xab8>
 80012d6:	bf00      	nop
 80012d8:	08006c80 	.word	0x08006c80
 80012dc:	43480000 	.word	0x43480000
 80012e0:	08006cb8 	.word	0x08006cb8
 80012e4:	08006cc8 	.word	0x08006cc8
 80012e8:	08006c90 	.word	0x08006c90
 80012ec:	08006c50 	.word	0x08006c50
 80012f0:	08006c5c 	.word	0x08006c5c
 80012f4:	42480000 	.word	0x42480000
 80012f8:	08006c6c 	.word	0x08006c6c
 80012fc:	42c80000 	.word	0x42c80000
		      }
		  else if (ambient_humidity  > 60.0f) {
 8001300:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001304:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	2b3c      	cmp	r3, #60	@ 0x3c
 800130e:	dd48      	ble.n	80013a2 <main+0xa36>
			  uint16_t raw_hum = ((uint16_t)sensor_data[12] << 8) | sensor_data[13];
 8001310:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			  ambient_humidity = raw_hum/100.0f;
 8001326:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	ed5f 6a0e 	vldr	s13, [pc, #-56]	@ 80012fc <main+0x990>
 8001336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133e:	ee17 3a90 	vmov	r3, s15
 8001342:	b21a      	sxth	r2, r3
 8001344:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001348:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 800134c:	801a      	strh	r2, [r3, #0]
			  int hum_int = (int)(ambient_humidity + 0.5f);
 800134e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001352:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
			  snprintf(buffer, sizeof(buffer), "RH: %d %%", hum_int);
 8001376:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800137a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800137e:	4a63      	ldr	r2, [pc, #396]	@ (800150c <main+0xba0>)
 8001380:	2111      	movs	r1, #17
 8001382:	f004 fb73 	bl	8005a6c <sniprintf>
			  LCD_print(buffer, strlen(buffer));
 8001386:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff20 	bl	80001d0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b2da      	uxtb	r2, r3
 8001394:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fa82 	bl	80008a4 <LCD_print>
 80013a0:	e040      	b.n	8001424 <main+0xab8>
		  		      }
		  else if (mass_concentration_pm2p5 > 35) {
 80013a2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80013a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	2b23      	cmp	r3, #35	@ 0x23
 80013ae:	d939      	bls.n	8001424 <main+0xab8>
			  uint16_t raw_mc_25 = ((uint16_t)sensor_data[3] << 8) | sensor_data[4];
 80013b0:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
			  mass_concentration_pm2p5 = raw_mc_25/10.0f;
 80013c6:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013de:	ee17 3a90 	vmov	r3, s15
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80013e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013ec:	801a      	strh	r2, [r3, #0]
			  int mc_25_int = (int)(mass_concentration_pm2p5 + 0.5f);
 80013ee:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80013f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001400:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 3a90 	vmov	r3, s15
 8001410:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
			  snprintf(buffer, sizeof(buffer), "PM2.5: %u ug/m3", mc_25_int);
 8001414:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001418:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800141c:	4a3c      	ldr	r2, [pc, #240]	@ (8001510 <main+0xba4>)
 800141e:	2111      	movs	r1, #17
 8001420:	f004 fb24 	bl	8005a6c <sniprintf>
		  }
		  LCD_print(buffer, strlen(buffer));
 8001424:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed1 	bl	80001d0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b2da      	uxtb	r2, r3
 8001432:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fa33 	bl	80008a4 <LCD_print>

		  if (notes[i] == ' ') {
 800143e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001442:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 8001446:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b20      	cmp	r3, #32
 8001450:	d10f      	bne.n	8001472 <main+0xb06>
		  					HAL_Delay(beats[i] * tempo);
 8001452:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001456:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800145a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800145e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001462:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f001 f84c 	bl	8002508 <HAL_Delay>
 8001470:	e016      	b.n	80014a0 <main+0xb34>
		  				}
		  else {
		  					play_note(notes[i], beats[i] * tempo);
 8001472:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001476:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 800147a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800147e:	4413      	add	r3, r2
 8001480:	7818      	ldrb	r0, [r3, #0]
 8001482:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001486:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800148a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff f8a2 	bl	80005e4 <play_note>
		  				}
		  				HAL_Delay(tempo / 2);
 80014a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80014a4:	0fda      	lsrs	r2, r3, #31
 80014a6:	4413      	add	r3, r2
 80014a8:	105b      	asrs	r3, r3, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 f82c 	bl	8002508 <HAL_Delay>
		for (int i = 0; i < length; i++) {
 80014b0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80014b4:	3301      	adds	r3, #1
 80014b6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80014ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014c2:	429a      	cmp	r2, r3
 80014c4:	f6ff ae7b 	blt.w	80011be <main+0x852>
		}
		  HAL_Delay(3000);
 80014c8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014cc:	f001 f81c 	bl	8002508 <HAL_Delay>
		  LCD_clear();
 80014d0:	f7ff f992 	bl	80007f8 <LCD_clear>
		  HAL_Delay(3000);
 80014d4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014d8:	f001 f816 	bl	8002508 <HAL_Delay>
	  }


	  //printf("CO2: %d ppm, TVOC: %d ppb\r\n", co2, tvoc);
	  int16_t ret = sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 80014dc:	f107 027a 	add.w	r2, r7, #122	@ 0x7a
 80014e0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fd79 	bl	8001fde <sgp30_measure_iaq_blocking_read>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	  if (ret != 0) {
 80014f2:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f43f aac0 	beq.w	8000a7c <main+0x110>
	      printf("SGP30 I2C read error: %d\r\n", ret);
 80014fc:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8001500:	4619      	mov	r1, r3
 8001502:	4804      	ldr	r0, [pc, #16]	@ (8001514 <main+0xba8>)
 8001504:	f004 fa42 	bl	800598c <iprintf>
  {
 8001508:	f7ff bab8 	b.w	8000a7c <main+0x110>
 800150c:	08006c74 	.word	0x08006c74
 8001510:	08006c80 	.word	0x08006c80
 8001514:	08006c9c 	.word	0x08006c9c

08001518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b096      	sub	sp, #88	@ 0x58
 800151c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2244      	movs	r2, #68	@ 0x44
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fbac 	bl	8005c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800153a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800153e:	f002 f8a5 	bl	800368c <HAL_PWREx_ControlVoltageScaling>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001548:	f000 f8d8 	bl	80016fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800154c:	2310      	movs	r3, #16
 800154e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001550:	2301      	movs	r3, #1
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001558:	2360      	movs	r3, #96	@ 0x60
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155c:	2302      	movs	r3, #2
 800155e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001560:	2301      	movs	r3, #1
 8001562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001564:	2301      	movs	r3, #1
 8001566:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001568:	2328      	movs	r3, #40	@ 0x28
 800156a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800156c:	2307      	movs	r3, #7
 800156e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001574:	2302      	movs	r3, #2
 8001576:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4618      	mov	r0, r3
 800157e:	f002 f8db 	bl	8003738 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001588:	f000 f8b8 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158c:	230f      	movs	r3, #15
 800158e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2303      	movs	r3, #3
 8001592:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	2104      	movs	r1, #4
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fca3 	bl	8003ef0 <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015b0:	f000 f8a4 	bl	80016fc <Error_Handler>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3758      	adds	r7, #88	@ 0x58
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <MX_I2C1_Init+0x78>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <MX_I2C1_Init+0x7c>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015cc:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d2:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015de:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f6:	480e      	ldr	r0, [pc, #56]	@ (8001630 <MX_I2C1_Init+0x74>)
 80015f8:	f001 fa52 	bl	8002aa0 <HAL_I2C_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001602:	f000 f87b 	bl	80016fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <MX_I2C1_Init+0x74>)
 800160a:	f001 ff99 	bl	8003540 <HAL_I2CEx_ConfigAnalogFilter>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001614:	f000 f872 	bl	80016fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001618:	2100      	movs	r1, #0
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_I2C1_Init+0x74>)
 800161c:	f001 ffdb 	bl	80035d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001626:	f000 f869 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000008c 	.word	0x2000008c
 8001634:	40005400 	.word	0x40005400
 8001638:	10d19ce4 	.word	0x10d19ce4

0800163c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001642:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <MX_USART1_UART_Init+0x5c>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001680:	f003 fb16 	bl	8004cb0 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800168a:	f000 f837 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000e0 	.word	0x200000e0
 8001698:	40013800 	.word	0x40013800

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_GPIO_Init+0x58>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <MX_GPIO_Init+0x58>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016bc:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <MX_GPIO_Init+0x58>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2101      	movs	r1, #1
 80016cc:	480a      	ldr	r0, [pc, #40]	@ (80016f8 <MX_GPIO_Init+0x5c>)
 80016ce:	f001 f9cf 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80016d2:	2301      	movs	r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <MX_GPIO_Init+0x5c>)
 80016e8:	f001 f818 	bl	800271c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	48000400 	.word	0x48000400

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <Error_Handler+0x8>

08001708 <sen54_init>:
// SEN54 command to read measured values
static const uint8_t read_measurement_cmd[] = { 0x03, 0xC4 };

// Initialization function: sends command to start measurements
HAL_StatusTypeDef sen54_init(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af02      	add	r7, sp, #8
 800170e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(hi2c, SEN54_I2C_ADDR, (uint8_t*)start_measurement_cmd, sizeof(start_measurement_cmd), HAL_MAX_DELAY);
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2302      	movs	r3, #2
 8001718:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <sen54_init+0x38>)
 800171a:	21d2      	movs	r1, #210	@ 0xd2
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f001 fa5b 	bl	8002bd8 <HAL_I2C_Master_Transmit>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);  // Give sensor time to start measuring
 8001726:	2064      	movs	r0, #100	@ 0x64
 8001728:	f000 feee 	bl	8002508 <HAL_Delay>

    printf("Sending to I2C address 0x%02X\r\n", SEN54_I2C_ADDR);
 800172c:	21d2      	movs	r1, #210	@ 0xd2
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <sen54_init+0x3c>)
 8001730:	f004 f92c 	bl	800598c <iprintf>


    return status;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08006d24 	.word	0x08006d24
 8001744:	08006d04 	.word	0x08006d04

08001748 <sen54_read_measurements>:

// Read raw measurement data into buffer
HAL_StatusTypeDef sen54_read_measurements(I2C_HandleTypeDef *hi2c, uint8_t *buffer, uint16_t len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	4613      	mov	r3, r2
 8001754:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    // Request data from sensor
    status = HAL_I2C_Master_Transmit(hi2c, SEN54_I2C_ADDR, (uint8_t*)read_measurement_cmd, sizeof(read_measurement_cmd), HAL_MAX_DELAY);
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2302      	movs	r3, #2
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <sen54_read_measurements+0x54>)
 8001760:	21d2      	movs	r1, #210	@ 0xd2
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f001 fa38 	bl	8002bd8 <HAL_I2C_Master_Transmit>
 8001768:	4603      	mov	r3, r0
 800176a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <sen54_read_measurements+0x2e>
        return status;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	e00e      	b.n	8001794 <sen54_read_measurements+0x4c>
    }

    // Wait briefly before reading
    HAL_Delay(10);
 8001776:	200a      	movs	r0, #10
 8001778:	f000 fec6 	bl	8002508 <HAL_Delay>

    // Read sensor response into buffer
    status = HAL_I2C_Master_Receive(hi2c, SEN54_I2C_ADDR, buffer, len, HAL_MAX_DELAY);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f04f 32ff 	mov.w	r2, #4294967295
 8001782:	9200      	str	r2, [sp, #0]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	21d2      	movs	r1, #210	@ 0xd2
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f001 fb3d 	bl	8002e08 <HAL_I2C_Master_Receive>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
    return status;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	08006d28 	.word	0x08006d28

080017a0 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 80017aa:	88f9      	ldrh	r1, [r7, #6]
 80017ac:	463b      	mov	r3, r7
 80017ae:	2221      	movs	r2, #33	@ 0x21
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fadb 	bl	8001d6c <sensirion_i2c_add_command_to_buffer>
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80017ba:	88fa      	ldrh	r2, [r7, #6]
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	2069      	movs	r0, #105	@ 0x69
 80017c2:	f000 faf6 	bl	8001db2 <sensirion_i2c_write_data>
 80017c6:	4603      	mov	r3, r0
 80017c8:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80017ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <sen5x_start_measurement+0x38>
        return error;
 80017d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017d6:	e004      	b.n	80017e2 <sen5x_start_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 80017d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017dc:	f000 fba8 	bl	8001f30 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b08c      	sub	sp, #48	@ 0x30
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 80017fc:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	f44f 7271 	mov.w	r2, #964	@ 0x3c4
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fab0 	bl	8001d6c <sensirion_i2c_add_command_to_buffer>
 800180c:	4603      	mov	r3, r0
 800180e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8001810:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	2069      	movs	r0, #105	@ 0x69
 800181a:	f000 faca 	bl	8001db2 <sensirion_i2c_write_data>
 800181e:	4603      	mov	r3, r0
 8001820:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (error) {
 8001822:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <sen5x_read_measured_values+0x46>
        return error;
 800182a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800182e:	e063      	b.n	80018f8 <sen5x_read_measured_values+0x10e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8001830:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001834:	f000 fb7c 	bl	8001f30 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2210      	movs	r2, #16
 800183e:	4619      	mov	r1, r3
 8001840:	2069      	movs	r0, #105	@ 0x69
 8001842:	f000 fac9 	bl	8001dd8 <sensirion_i2c_read_data_inplace>
 8001846:	4603      	mov	r3, r0
 8001848:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (error) {
 800184a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <sen5x_read_measured_values+0x6e>
        return error;
 8001852:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001856:	e04f      	b.n	80018f8 <sen5x_read_measured_values+0x10e>
    }
    *mass_concentration_pm1p0 = sensirion_bytes_to_uint16_t(&buffer[0]);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f8bb 	bl	80019d8 <sensirion_bytes_to_uint16_t>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_bytes_to_uint16_t(&buffer[2]);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	3302      	adds	r3, #2
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f8b1 	bl	80019d8 <sensirion_bytes_to_uint16_t>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_bytes_to_uint16_t(&buffer[4]);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	3304      	adds	r3, #4
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f8a7 	bl	80019d8 <sensirion_bytes_to_uint16_t>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_bytes_to_uint16_t(&buffer[6]);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	3306      	adds	r3, #6
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f89d 	bl	80019d8 <sensirion_bytes_to_uint16_t>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	3308      	adds	r3, #8
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f8a8 	bl	8001a02 <sensirion_common_bytes_to_int16_t>
 80018b2:	4603      	mov	r3, r0
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b8:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	330a      	adds	r3, #10
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f89e 	bl	8001a02 <sensirion_common_bytes_to_int16_t>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018cc:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	330c      	adds	r3, #12
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f894 	bl	8001a02 <sensirion_common_bytes_to_int16_t>
 80018da:	4603      	mov	r3, r0
 80018dc:	b21a      	sxth	r2, r3
 80018de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018e0:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	330e      	adds	r3, #14
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f88a 	bl	8001a02 <sensirion_common_bytes_to_int16_t>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f4:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3730      	adds	r7, #48	@ 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b090      	sub	sp, #64	@ 0x40
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8001910:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	f24d 0214 	movw	r2, #53268	@ 0xd014
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fa26 	bl	8001d6c <sensirion_i2c_add_command_to_buffer>
 8001920:	4603      	mov	r3, r0
 8001922:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8001924:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4619      	mov	r1, r3
 800192c:	2069      	movs	r0, #105	@ 0x69
 800192e:	f000 fa40 	bl	8001db2 <sensirion_i2c_write_data>
 8001932:	4603      	mov	r3, r0
 8001934:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (error) {
 8001936:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <sen5x_get_product_name+0x44>
        return error;
 800193e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001942:	e01c      	b.n	800197e <sen5x_get_product_name+0x7e>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8001944:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001948:	f000 faf2 	bl	8001f30 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2220      	movs	r2, #32
 8001952:	4619      	mov	r1, r3
 8001954:	2069      	movs	r0, #105	@ 0x69
 8001956:	f000 fa3f 	bl	8001dd8 <sensirion_i2c_read_data_inplace>
 800195a:	4603      	mov	r3, r0
 800195c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (error) {
 800195e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <sen5x_get_product_name+0x6c>
        return error;
 8001966:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800196a:	e008      	b.n	800197e <sen5x_get_product_name+0x7e>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	b29a      	uxth	r2, r3
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f850 	bl	8001a1c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3740      	adds	r7, #64	@ 0x40
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8001992:	88f9      	ldrh	r1, [r7, #6]
 8001994:	463b      	mov	r3, r7
 8001996:	f24d 3204 	movw	r2, #54020	@ 0xd304
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f9e6 	bl	8001d6c <sensirion_i2c_add_command_to_buffer>
 80019a0:	4603      	mov	r3, r0
 80019a2:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	463b      	mov	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	2069      	movs	r0, #105	@ 0x69
 80019ac:	f000 fa01 	bl	8001db2 <sensirion_i2c_write_data>
 80019b0:	4603      	mov	r3, r0
 80019b2:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80019b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <sen5x_device_reset+0x3a>
        return error;
 80019bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019c0:	e003      	b.n	80019ca <sen5x_device_reset+0x42>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 80019c2:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <sen5x_device_reset+0x4c>)
 80019c4:	f000 fab4 	bl	8001f30 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	00030d40 	.word	0x00030d40

080019d8 <sensirion_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	b29b      	uxth	r3, r3
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <sensirion_common_bytes_to_int16_t>:
uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
}

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_bytes_to_uint16_t(bytes);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffe4 	bl	80019d8 <sensirion_bytes_to_uint16_t>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b21b      	sxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	82fb      	strh	r3, [r7, #22]
 8001a2e:	e00a      	b.n	8001a46 <sensirion_common_copy_bytes+0x2a>
        destination[i] = source[i];
 8001a30:	8afb      	ldrh	r3, [r7, #22]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	441a      	add	r2, r3
 8001a36:	8afb      	ldrh	r3, [r7, #22]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	440b      	add	r3, r1
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	3301      	adds	r3, #1
 8001a44:	82fb      	strh	r3, [r7, #22]
 8001a46:	8afa      	ldrh	r2, [r7, #22]
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3f0      	bcc.n	8001a30 <sensirion_common_copy_bytes+0x14>
    }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    // IMPLEMENT
	HAL_Delay((useconds + 999)/ 1000);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <sensirion_sleep_usec+0x24>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fd48 	bl	8002508 <HAL_Delay>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001a90:	23ff      	movs	r3, #255	@ 0xff
 8001a92:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	81fb      	strh	r3, [r7, #14]
 8001a98:	e021      	b.n	8001ade <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8001a9a:	89fb      	ldrh	r3, [r7, #14]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	7b7b      	ldrb	r3, [r7, #13]
 8001aa4:	4053      	eors	r3, r2
 8001aa6:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	733b      	strb	r3, [r7, #12]
 8001aac:	e011      	b.n	8001ad2 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8001aae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da07      	bge.n	8001ac6 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	737b      	strb	r3, [r7, #13]
 8001ac4:	e002      	b.n	8001acc <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8001ac6:	7b7b      	ldrb	r3, [r7, #13]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001acc:	7b3b      	ldrb	r3, [r7, #12]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	733b      	strb	r3, [r7, #12]
 8001ad2:	7b3b      	ldrb	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ea      	bne.n	8001aae <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	3301      	adds	r3, #1
 8001adc:	81fb      	strh	r3, [r7, #14]
 8001ade:	89fa      	ldrh	r2, [r7, #14]
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3d9      	bcc.n	8001a9a <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8001ae6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffbb 	bl	8001a84 <sensirion_i2c_generate_crc>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	787b      	ldrb	r3, [r7, #1]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d002      	beq.n	8001b1e <sensirion_i2c_check_crc+0x2a>
        return CRC_ERROR;
 8001b18:	f06f 0301 	mvn.w	r3, #1
 8001b1c:	e000      	b.n	8001b20 <sensirion_i2c_check_crc+0x2c>
    return NO_ERROR;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <sensirion_i2c_fill_cmd_send_buf>:
    return sensirion_i2c_hal_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_i2c_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                         const uint16_t* args,
                                         uint8_t num_args) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    uint16_t idx = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	8abb      	ldrh	r3, [r7, #20]
 8001b48:	1c59      	adds	r1, r3, #1
 8001b4a:	82b9      	strh	r1, [r7, #20]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	440b      	add	r3, r1
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8001b56:	8abb      	ldrh	r3, [r7, #20]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	82ba      	strh	r2, [r7, #20]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	897a      	ldrh	r2, [r7, #10]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	75fb      	strb	r3, [r7, #23]
 8001b6c:	e030      	b.n	8001bd0 <sensirion_i2c_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	8abb      	ldrh	r3, [r7, #20]
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	82b9      	strh	r1, [r7, #20]
 8001b82:	4619      	mov	r1, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	440b      	add	r3, r1
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	881a      	ldrh	r2, [r3, #0]
 8001b96:	8abb      	ldrh	r3, [r7, #20]
 8001b98:	1c59      	adds	r1, r3, #1
 8001b9a:	82b9      	strh	r1, [r7, #20]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	440b      	add	r3, r1
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

        uint8_t crc = sensirion_i2c_generate_crc((uint8_t*)&buf[idx - 2],
 8001ba6:	8abb      	ldrh	r3, [r7, #20]
 8001ba8:	3b02      	subs	r3, #2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff67 	bl	8001a84 <sensirion_i2c_generate_crc>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	74fb      	strb	r3, [r7, #19]
                                                 SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8001bba:	8abb      	ldrh	r3, [r7, #20]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	82ba      	strh	r2, [r7, #20]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	7cfa      	ldrb	r2, [r7, #19]
 8001bc8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
 8001bd0:	7dfa      	ldrb	r2, [r7, #23]
 8001bd2:	7a7b      	ldrb	r3, [r7, #9]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3ca      	bcc.n	8001b6e <sensirion_i2c_fill_cmd_send_buf+0x46>
    }
    return idx;
 8001bd8:	8abb      	ldrh	r3, [r7, #20]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b096      	sub	sp, #88	@ 0x58
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	6039      	str	r1, [r7, #0]
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8001bf2:	88bb      	ldrh	r3, [r7, #4]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ret = sensirion_i2c_hal_read(address, buf8, size);
 8001c04:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f947 	bl	8001ea0 <sensirion_i2c_hal_read>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    if (ret != NO_ERROR)
 8001c18:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8001c20:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c24:	e047      	b.n	8001cb6 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8001c32:	e039      	b.n	8001ca8 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_i2c_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001c34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001c38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c3a:	18d0      	adds	r0, r2, r3
                                      buf8[i + SENSIRION_WORD_SIZE]);
 8001c3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001c40:	3302      	adds	r3, #2
 8001c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c44:	4413      	add	r3, r2
        ret = sensirion_i2c_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	f7ff ff52 	bl	8001af4 <sensirion_i2c_check_crc>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (ret != NO_ERROR)
 8001c56:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8001c5e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c62:	e028      	b.n	8001cb6 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8001c64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c6a:	441a      	add	r2, r3
 8001c6c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001c70:	1c59      	adds	r1, r3, #1
 8001c72:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8001c76:	4619      	mov	r1, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	440b      	add	r3, r1
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8001c80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001c84:	3301      	adds	r3, #1
 8001c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c88:	441a      	add	r2, r3
 8001c8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8001c94:	4619      	mov	r1, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	440b      	add	r3, r1
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001c9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001ca2:	3303      	adds	r3, #3
 8001ca4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001ca8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001cac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3bf      	bcc.n	8001c34 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3758      	adds	r7, #88	@ 0x58
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	6039      	str	r1, [r7, #0]
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8001cce:	88ba      	ldrh	r2, [r7, #4]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff84 	bl	8001be2 <sensirion_i2c_read_words_as_bytes>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 8001cde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <sensirion_i2c_read_words+0x2e>
        return ret;
 8001ce6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cea:	e020      	b.n	8001d2e <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e017      	b.n	8001d22 <sensirion_i2c_read_words+0x64>
        const uint8_t* word_bytes = (uint8_t*)&data_words[i];
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3301      	adds	r3, #1
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b219      	sxth	r1, r3
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	b28a      	uxth	r2, r1
 8001d1a:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	88ba      	ldrh	r2, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8e2      	bhi.n	8001cf2 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460a      	mov	r2, r1
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	4613      	mov	r3, r2
 8001d44:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_i2c_fill_cmd_send_buf(buf, command, NULL, 0);
 8001d46:	88b9      	ldrh	r1, [r7, #4]
 8001d48:	f107 000c 	add.w	r0, r7, #12
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f7ff feea 	bl	8001b28 <sensirion_i2c_fill_cmd_send_buf>
    return sensirion_i2c_hal_write(address, buf, SENSIRION_COMMAND_SIZE);
 8001d54:	f107 010c 	add.w	r1, r7, #12
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f8c3 	bl	8001ee8 <sensirion_i2c_hal_write>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8001d7c:	883b      	ldrh	r3, [r7, #0]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	8079      	strh	r1, [r7, #2]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	440b      	add	r3, r1
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	807a      	strh	r2, [r7, #2]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	883a      	ldrh	r2, [r7, #0]
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]
    return offset;
 8001da4:	887b      	ldrh	r3, [r7, #2]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	6039      	str	r1, [r7, #0]
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001dc2:	88ba      	ldrh	r2, [r7, #4]
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f88d 	bl	8001ee8 <sensirion_i2c_hal_write>
 8001dce:	4603      	mov	r3, r0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	4613      	mov	r3, r2
 8001de6:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001de8:	88bb      	ldrh	r3, [r7, #4]
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	0052      	lsls	r2, r2, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <sensirion_i2c_read_data_inplace+0x30>
        return BYTE_NUM_ERROR;
 8001e02:	f06f 0302 	mvn.w	r3, #2
 8001e06:	e047      	b.n	8001e98 <sensirion_i2c_read_data_inplace+0xc0>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001e08:	897a      	ldrh	r2, [r7, #10]
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f846 	bl	8001ea0 <sensirion_i2c_hal_read>
 8001e14:	4603      	mov	r3, r0
 8001e16:	813b      	strh	r3, [r7, #8]
    if (error) {
 8001e18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <sensirion_i2c_read_data_inplace+0x4e>
        return error;
 8001e20:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e24:	e038      	b.n	8001e98 <sensirion_i2c_read_data_inplace+0xc0>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	81fb      	strh	r3, [r7, #14]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	81bb      	strh	r3, [r7, #12]
 8001e2e:	e02e      	b.n	8001e8e <sensirion_i2c_read_data_inplace+0xb6>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	3302      	adds	r3, #2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	2102      	movs	r1, #2
 8001e44:	f7ff fe56 	bl	8001af4 <sensirion_i2c_check_crc>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	813b      	strh	r3, [r7, #8]
        if (error) {
 8001e4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <sensirion_i2c_read_data_inplace+0x82>
            return error;
 8001e54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e58:	e01e      	b.n	8001e98 <sensirion_i2c_read_data_inplace+0xc0>
        }
        buffer[j++] = buffer[i];
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	441a      	add	r2, r3
 8001e60:	89bb      	ldrh	r3, [r7, #12]
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	81b9      	strh	r1, [r7, #12]
 8001e66:	4619      	mov	r1, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	3301      	adds	r3, #1
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	441a      	add	r2, r3
 8001e78:	89bb      	ldrh	r3, [r7, #12]
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	81b9      	strh	r1, [r7, #12]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	440b      	add	r3, r1
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	3303      	adds	r3, #3
 8001e8c:	81fb      	strh	r3, [r7, #14]
 8001e8e:	89fa      	ldrh	r2, [r7, #14]
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3cc      	bcc.n	8001e30 <sensirion_i2c_read_data_inplace+0x58>
    }

    return NO_ERROR;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(&hi2c1, (address << 1), data, count, HAL_MAX_DELAY);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	88bb      	ldrh	r3, [r7, #4]
 8001eba:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebe:	9200      	str	r2, [sp, #0]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4808      	ldr	r0, [pc, #32]	@ (8001ee4 <sensirion_i2c_hal_read+0x44>)
 8001ec4:	f000 ffa0 	bl	8002e08 <HAL_I2C_Master_Receive>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
	if (hal_status == HAL_OK) {
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <sensirion_i2c_hal_read+0x36>
		return 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e001      	b.n	8001eda <sensirion_i2c_hal_read+0x3a>
	}
	else {
		return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000008c 	.word	0x2000008c

08001ee8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(&hi2c1, (address << 1), (uint8_t*)data, count, HAL_MAX_DELAY);
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	b299      	uxth	r1, r3
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	f04f 32ff 	mov.w	r2, #4294967295
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	4808      	ldr	r0, [pc, #32]	@ (8001f2c <sensirion_i2c_hal_write+0x44>)
 8001f0c:	f000 fe64 	bl	8002bd8 <HAL_I2C_Master_Transmit>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
    if (hal_status == HAL_OK) {
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <sensirion_i2c_hal_write+0x36>
        return 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e001      	b.n	8001f22 <sensirion_i2c_hal_write+0x3a>
    } else {
        return -1;  // Generic error
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000008c 	.word	0x2000008c

08001f30 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	if (useconds < 1000) {
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f3e:	d215      	bcs.n	8001f6c <sensirion_i2c_hal_sleep_usec+0x3c>
		uint32_t ticks = (SystemCoreClock / 1000000) * useconds / 5;
 8001f40:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <sensirion_i2c_hal_sleep_usec+0x54>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <sensirion_i2c_hal_sleep_usec+0x58>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9b      	lsrs	r3, r3, #18
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	4a0e      	ldr	r2, [pc, #56]	@ (8001f8c <sensirion_i2c_hal_sleep_usec+0x5c>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	60fb      	str	r3, [r7, #12]
		while (ticks--) {
 8001f5c:	e000      	b.n	8001f60 <sensirion_i2c_hal_sleep_usec+0x30>
			__NOP();
 8001f5e:	bf00      	nop
		while (ticks--) {
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	60fa      	str	r2, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <sensirion_i2c_hal_sleep_usec+0x2e>
		}
	}
	else {
		HAL_Delay(useconds / 1000);
	}
}
 8001f6a:	e007      	b.n	8001f7c <sensirion_i2c_hal_sleep_usec+0x4c>
		HAL_Delay(useconds / 1000);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <sensirion_i2c_hal_sleep_usec+0x60>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fac6 	bl	8002508 <HAL_Delay>
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000000 	.word	0x20000000
 8001f88:	431bde83 	.word	0x431bde83
 8001f8c:	cccccccd 	.word	0xcccccccd
 8001f90:	10624dd3 	.word	0x10624dd3

08001f94 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8001f98:	2358      	movs	r3, #88	@ 0x58
 8001f9a:	f242 0108 	movw	r1, #8200	@ 0x2008
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fec9 	bl	8001d36 <sensirion_i2c_write_cmd>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm) {
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8001fb4:	2058      	movs	r0, #88	@ 0x58
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	2202      	movs	r2, #2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7ff fe7e 	bl	8001cbe <sensirion_i2c_read_words>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 8001fc6:	897a      	ldrh	r2, [r7, #10]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8001fcc:	893a      	ldrh	r2, [r7, #8]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	801a      	strh	r2, [r3, #0]

    return ret;
 8001fd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t* tvoc_ppb,
                                        uint16_t* co2_eq_ppm) {
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8001fe8:	f7ff ffd4 	bl	8001f94 <sgp30_measure_iaq>
 8001fec:	4603      	mov	r3, r0
 8001fee:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8001ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 8001ff8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ffc:	e008      	b.n	8002010 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8001ffe:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8002002:	f7ff fd2b 	bl	8001a5c <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffce 	bl	8001faa <sgp30_read_iaq>
 800200e:	4603      	mov	r3, r0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 800201e:	2358      	movs	r3, #88	@ 0x58
 8002020:	f242 0103 	movw	r1, #8195	@ 0x2003
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fe86 	bl	8001d36 <sensirion_i2c_write_cmd>
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 800202e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002032:	f7ff fd13 	bl	8001a5c <sensirion_sleep_usec>
    return ret;
 8002036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <HAL_MspInit+0x44>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	4a0e      	ldr	r2, [pc, #56]	@ (8002088 <HAL_MspInit+0x44>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6613      	str	r3, [r2, #96]	@ 0x60
 8002056:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_MspInit+0x44>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_MspInit+0x44>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_MspInit+0x44>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206c:	6593      	str	r3, [r2, #88]	@ 0x58
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_MspInit+0x44>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0ac      	sub	sp, #176	@ 0xb0
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2288      	movs	r2, #136	@ 0x88
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fde9 	bl	8005c84 <memset>
  if(hi2c->Instance==I2C1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <HAL_I2C_MspInit+0xb0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d13b      	bne.n	8002134 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020bc:	2340      	movs	r3, #64	@ 0x40
 80020be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 f935 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020d4:	f7ff fb12 	bl	80016fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_I2C_MspInit+0xb4>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <HAL_I2C_MspInit+0xb4>)
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e4:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <HAL_I2C_MspInit+0xb4>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80020f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f8:	2312      	movs	r3, #18
 80020fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800210a:	2304      	movs	r3, #4
 800210c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002114:	4619      	mov	r1, r3
 8002116:	480b      	ldr	r0, [pc, #44]	@ (8002144 <HAL_I2C_MspInit+0xb8>)
 8002118:	f000 fb00 	bl	800271c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <HAL_I2C_MspInit+0xb4>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <HAL_I2C_MspInit+0xb4>)
 8002122:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002126:	6593      	str	r3, [r2, #88]	@ 0x58
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <HAL_I2C_MspInit+0xb4>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002134:	bf00      	nop
 8002136:	37b0      	adds	r7, #176	@ 0xb0
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40005400 	.word	0x40005400
 8002140:	40021000 	.word	0x40021000
 8002144:	48000400 	.word	0x48000400

08002148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0ac      	sub	sp, #176	@ 0xb0
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2288      	movs	r2, #136	@ 0x88
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fd8b 	bl	8005c84 <memset>
  if(huart->Instance==USART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a21      	ldr	r2, [pc, #132]	@ (80021f8 <HAL_UART_MspInit+0xb0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d13a      	bne.n	80021ee <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800217c:	2300      	movs	r3, #0
 800217e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4618      	mov	r0, r3
 8002186:	f002 f8d7 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002190:	f7ff fab4 	bl	80016fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_UART_MspInit+0xb4>)
 8002196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002198:	4a18      	ldr	r2, [pc, #96]	@ (80021fc <HAL_UART_MspInit+0xb4>)
 800219a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800219e:	6613      	str	r3, [r2, #96]	@ 0x60
 80021a0:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <HAL_UART_MspInit+0xb4>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <HAL_UART_MspInit+0xb4>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <HAL_UART_MspInit+0xb4>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b8:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <HAL_UART_MspInit+0xb4>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c4:	23c0      	movs	r3, #192	@ 0xc0
 80021c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021dc:	2307      	movs	r3, #7
 80021de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	@ (8002200 <HAL_UART_MspInit+0xb8>)
 80021ea:	f000 fa97 	bl	800271c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80021ee:	bf00      	nop
 80021f0:	37b0      	adds	r7, #176	@ 0xb0
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40021000 	.word	0x40021000
 8002200:	48000400 	.word	0x48000400

08002204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <NMI_Handler+0x4>

0800220c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <MemManage_Handler+0x4>

0800221c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <UsageFault_Handler+0x4>

0800222c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800225a:	f000 f935 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}

08002262 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e00a      	b.n	800228a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002274:	f3af 8000 	nop.w
 8002278:	4601      	mov	r1, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	60ba      	str	r2, [r7, #8]
 8002280:	b2ca      	uxtb	r2, r1
 8002282:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	dbf0      	blt.n	8002274 <_read+0x12>
  }

  return len;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e009      	b.n	80022c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	60ba      	str	r2, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fb46 	bl	8000948 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dbf1      	blt.n	80022ae <_write+0x12>
  }
  return len;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_close>:

int _close(int file)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022fc:	605a      	str	r2, [r3, #4]
  return 0;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_isatty>:

int _isatty(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800236c:	f003 fcd8 	bl	8005d20 <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002382:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	@ (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20018000 	.word	0x20018000
 800239c:	00000400 	.word	0x00000400
 80023a0:	20000168 	.word	0x20000168
 80023a4:	200002c0 	.word	0x200002c0

080023a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <SystemInit+0x20>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <SystemInit+0x20>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d0:	f7ff ffea 	bl	80023a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	@ (8002408 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002418 <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fa:	f003 fc97 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fe:	f7fe fab5 	bl	800096c <main>

08002402 <LoopForever>:

LoopForever:
    b LoopForever
 8002402:	e7fe      	b.n	8002402 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002404:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002410:	08006db8 	.word	0x08006db8
  ldr r2, =_sbss
 8002414:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002418:	200002bc 	.word	0x200002bc

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>

0800241e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002428:	2003      	movs	r0, #3
 800242a:	f000 f943 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800242e:	2000      	movs	r0, #0
 8002430:	f000 f80e 	bl	8002450 <HAL_InitTick>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	e001      	b.n	8002444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002440:	f7ff fe00 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002444:	79fb      	ldrb	r3, [r7, #7]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_InitTick+0x6c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002464:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_InitTick+0x70>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_InitTick+0x6c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002472:	fbb3 f3f1 	udiv	r3, r3, r1
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f941 	bl	8002702 <HAL_SYSTICK_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d809      	bhi.n	80024a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 f919 	bl	80026ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002498:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <HAL_InitTick+0x74>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e007      	b.n	80024b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e004      	b.n	80024b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e001      	b.n	80024b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000008 	.word	0x20000008
 80024ec:	2000016c 	.word	0x2000016c

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000016c 	.word	0x2000016c

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_Delay+0x44>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffde 	bl	80024f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	@ 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff47 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff5c 	bl	8002598 <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff8e 	bl	8002608 <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5d 	bl	80025b4 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffb0 	bl	8002670 <SysTick_Config>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272a:	e17f      	b.n	8002a2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8171 	beq.w	8002a26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d005      	beq.n	800275c <HAL_GPIO_Init+0x40>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d130      	bne.n	80027be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002792:	2201      	movs	r2, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0201 	and.w	r2, r3, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d118      	bne.n	80027fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	08db      	lsrs	r3, r3, #3
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	6939      	ldr	r1, [r7, #16]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80ac 	beq.w	8002a26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	4b5f      	ldr	r3, [pc, #380]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80028da:	4b5c      	ldr	r3, [pc, #368]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 80028dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a50 <HAL_GPIO_Init+0x334>)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002910:	d025      	beq.n	800295e <HAL_GPIO_Init+0x242>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4f      	ldr	r2, [pc, #316]	@ (8002a54 <HAL_GPIO_Init+0x338>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <HAL_GPIO_Init+0x23e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a58 <HAL_GPIO_Init+0x33c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0x23a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4d      	ldr	r2, [pc, #308]	@ (8002a5c <HAL_GPIO_Init+0x340>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x236>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a60 <HAL_GPIO_Init+0x344>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00d      	beq.n	800294e <HAL_GPIO_Init+0x232>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4b      	ldr	r2, [pc, #300]	@ (8002a64 <HAL_GPIO_Init+0x348>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <HAL_GPIO_Init+0x22e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a68 <HAL_GPIO_Init+0x34c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_GPIO_Init+0x22a>
 8002942:	2306      	movs	r3, #6
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x244>
 8002946:	2307      	movs	r3, #7
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x244>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x244>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x244>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x244>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x244>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x244>
 800295e:	2300      	movs	r3, #0
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002970:	4937      	ldr	r1, [pc, #220]	@ (8002a50 <HAL_GPIO_Init+0x334>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800297e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029a2:	4a32      	ldr	r2, [pc, #200]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029a8:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029cc:	4a27      	ldr	r2, [pc, #156]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029d2:	4b26      	ldr	r3, [pc, #152]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029f6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a20:	4a12      	ldr	r2, [pc, #72]	@ (8002a6c <HAL_GPIO_Init+0x350>)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f47f ae78 	bne.w	800272c <HAL_GPIO_Init+0x10>
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	48000400 	.word	0x48000400
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	48000c00 	.word	0x48000c00
 8002a60:	48001000 	.word	0x48001000
 8002a64:	48001400 	.word	0x48001400
 8002a68:	48001800 	.word	0x48001800
 8002a6c:	40010400 	.word	0x40010400

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08d      	b.n	8002bce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fae0 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	@ 0x24
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002af0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e006      	b.n	8002b28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d108      	bne.n	8002b42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	e007      	b.n	8002b52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69d9      	ldr	r1, [r3, #28]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	461a      	mov	r2, r3
 8002be4:	460b      	mov	r3, r1
 8002be6:	817b      	strh	r3, [r7, #10]
 8002be8:	4613      	mov	r3, r2
 8002bea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	f040 80fd 	bne.w	8002df4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_I2C_Master_Transmit+0x30>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0f6      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x21e>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c10:	f7ff fc6e 	bl	80024f0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2319      	movs	r3, #25
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fa0a 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0e1      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	@ 0x21
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2bff      	cmp	r3, #255	@ 0xff
 8002c62:	d906      	bls.n	8002c72 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	22ff      	movs	r2, #255	@ 0xff
 8002c68:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e007      	b.n	8002c82 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c80:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	8979      	ldrh	r1, [r7, #10]
 8002cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e00 <HAL_I2C_Master_Transmit+0x228>)
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fc05 	bl	80034dc <I2C_TransferConfig>
 8002cd2:	e066      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	4b48      	ldr	r3, [pc, #288]	@ (8002e00 <HAL_I2C_Master_Transmit+0x228>)
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fbfa 	bl	80034dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ce8:	e05b      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	6a39      	ldr	r1, [r7, #32]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f9fd 	bl	80030ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07b      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d034      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0x1ca>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d130      	bne.n	8002da2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2180      	movs	r1, #128	@ 0x80
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f976 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e04d      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2bff      	cmp	r3, #255	@ 0xff
 8002d62:	d90e      	bls.n	8002d82 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	22ff      	movs	r2, #255	@ 0xff
 8002d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fbae 	bl	80034dc <I2C_TransferConfig>
 8002d80:	e00f      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fb9d 	bl	80034dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d19e      	bne.n	8002cea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f9e3 	bl	800317c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01a      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <HAL_I2C_Master_Transmit+0x22c>)
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	80002000 	.word	0x80002000
 8002e04:	fe00e800 	.word	0xfe00e800

08002e08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	f040 80db 	bne.w	8002fe0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_Master_Receive+0x30>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0d4      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e40:	f7ff fb56 	bl	80024f0 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2319      	movs	r3, #25
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f8f2 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0bf      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2222      	movs	r2, #34	@ 0x22
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2bff      	cmp	r3, #255	@ 0xff
 8002e92:	d90e      	bls.n	8002eb2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	4b52      	ldr	r3, [pc, #328]	@ (8002fec <HAL_I2C_Master_Receive+0x1e4>)
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fb16 	bl	80034dc <I2C_TransferConfig>
 8002eb0:	e06d      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	4b49      	ldr	r3, [pc, #292]	@ (8002fec <HAL_I2C_Master_Receive+0x1e4>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fb05 	bl	80034dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ed2:	e05c      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	6a39      	ldr	r1, [r7, #32]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f993 	bl	8003204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e07c      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d034      	beq.n	8002f8e <HAL_I2C_Master_Receive+0x186>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d130      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2180      	movs	r1, #128	@ 0x80
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f880 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e04d      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2bff      	cmp	r3, #255	@ 0xff
 8002f4e:	d90e      	bls.n	8002f6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	@ 0xff
 8002f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	8979      	ldrh	r1, [r7, #10]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fab8 	bl	80034dc <I2C_TransferConfig>
 8002f6c:	e00f      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 faa7 	bl	80034dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d19d      	bne.n	8002ed4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6a39      	ldr	r1, [r7, #32]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f8ed 	bl	800317c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e01a      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <HAL_I2C_Master_Receive+0x1e8>)
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	80002400 	.word	0x80002400
 8002ff0:	fe00e800 	.word	0xfe00e800

08002ff4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d103      	bne.n	8003012 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d007      	beq.n	8003030 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	619a      	str	r2, [r3, #24]
  }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800304c:	e03b      	b.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f962 	bl	800331c <I2C_IsErrorOccurred>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e041      	b.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d02d      	beq.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7ff fa41 	bl	80024f0 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_WaitOnFlagUntilTimeout+0x44>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d122      	bne.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4013      	ands	r3, r2
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	429a      	cmp	r2, r3
 800309c:	d113      	bne.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d0b4      	beq.n	800304e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030fa:	e033      	b.n	8003164 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f90b 	bl	800331c <I2C_IsErrorOccurred>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e031      	b.n	8003174 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d025      	beq.n	8003164 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003118:	f7ff f9ea 	bl	80024f0 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	d302      	bcc.n	800312e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11a      	bne.n	8003164 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d013      	beq.n	8003164 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e007      	b.n	8003174 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d1c4      	bne.n	80030fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003188:	e02f      	b.n	80031ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f8c4 	bl	800331c <I2C_IsErrorOccurred>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e02d      	b.n	80031fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7ff f9a7 	bl	80024f0 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11a      	bne.n	80031ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d013      	beq.n	80031ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e007      	b.n	80031fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d1c8      	bne.n	800318a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003214:	e071      	b.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f87e 	bl	800331c <I2C_IsErrorOccurred>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b20      	cmp	r3, #32
 8003236:	d13b      	bne.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d138      	bne.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d105      	bne.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b10      	cmp	r3, #16
 8003264:	d121      	bne.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2210      	movs	r2, #16
 800326c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2204      	movs	r2, #4
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2220      	movs	r2, #32
 800327a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003288:	400b      	ands	r3, r1
 800328a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
 80032a8:	e002      	b.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80032b0:	f7ff f91e 	bl	80024f0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d119      	bne.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d116      	bne.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d00f      	beq.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d002      	beq.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d083      	beq.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	fe00e800 	.word	0xfe00e800

0800331c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d068      	beq.n	800341a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2210      	movs	r2, #16
 800334e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003350:	e049      	b.n	80033e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d045      	beq.n	80033e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7ff f8c9 	bl	80024f0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <I2C_IsErrorOccurred+0x54>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d13a      	bne.n	80033e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003382:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003392:	d121      	bne.n	80033d8 <I2C_IsErrorOccurred+0xbc>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800339a:	d01d      	beq.n	80033d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d01a      	beq.n	80033d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033b2:	f7ff f89d 	bl	80024f0 <HAL_GetTick>
 80033b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b8:	e00e      	b.n	80033d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ba:	f7ff f899 	bl	80024f0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b19      	cmp	r3, #25
 80033c6:	d907      	bls.n	80033d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f043 0320 	orr.w	r3, r3, #32
 80033ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033d6:	e006      	b.n	80033e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d1e9      	bne.n	80033ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d003      	beq.n	80033fc <I2C_IsErrorOccurred+0xe0>
 80033f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0aa      	beq.n	8003352 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003400:	2b00      	cmp	r3, #0
 8003402:	d103      	bne.n	800340c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2220      	movs	r2, #32
 800340a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800343c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800345e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01c      	beq.n	80034ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff fdaf 	bl	8002ff4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <I2C_IsErrorOccurred+0x1bc>)
 80034a2:	400b      	ands	r3, r1
 80034a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3728      	adds	r7, #40	@ 0x28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	fe00e800 	.word	0xfe00e800

080034dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	817b      	strh	r3, [r7, #10]
 80034ea:	4613      	mov	r3, r2
 80034ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034f4:	7a7b      	ldrb	r3, [r7, #9]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	4313      	orrs	r3, r2
 8003506:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800350a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	0d5b      	lsrs	r3, r3, #21
 8003516:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800351a:	4b08      	ldr	r3, [pc, #32]	@ (800353c <I2C_TransferConfig+0x60>)
 800351c:	430b      	orrs	r3, r1
 800351e:	43db      	mvns	r3, r3
 8003520:	ea02 0103 	and.w	r1, r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	03ff63ff 	.word	0x03ff63ff

08003540 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b20      	cmp	r3, #32
 8003554:	d138      	bne.n	80035c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003560:	2302      	movs	r3, #2
 8003562:	e032      	b.n	80035ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	@ 0x24
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003592:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6819      	ldr	r1, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d139      	bne.n	8003660 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e033      	b.n	8003662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2224      	movs	r2, #36	@ 0x24
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003628:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <HAL_PWREx_GetVoltageRange+0x18>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40007000 	.word	0x40007000

0800368c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369a:	d130      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800369c:	4b23      	ldr	r3, [pc, #140]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a8:	d038      	beq.n	800371c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036aa:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036b2:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2232      	movs	r2, #50	@ 0x32
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9b      	lsrs	r3, r3, #18
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d0:	e002      	b.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d8:	4b14      	ldr	r3, [pc, #80]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e4:	d102      	bne.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f2      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ec:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f8:	d110      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e00f      	b.n	800371e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370a:	d007      	beq.n	800371c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800370c:	4b07      	ldr	r3, [pc, #28]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003714:	4a05      	ldr	r2, [pc, #20]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800371a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40007000 	.word	0x40007000
 8003730:	20000000 	.word	0x20000000
 8003734:	431bde83 	.word	0x431bde83

08003738 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e3ca      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374a:	4b97      	ldr	r3, [pc, #604]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003754:	4b94      	ldr	r3, [pc, #592]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80e4 	beq.w	8003934 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_RCC_OscConfig+0x4a>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	f040 808b 	bne.w	8003890 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 8087 	bne.w	8003890 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003782:	4b89      	ldr	r3, [pc, #548]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e3a2      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	4b82      	ldr	r3, [pc, #520]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_RCC_OscConfig+0x7c>
 80037aa:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b2:	e005      	b.n	80037c0 <HAL_RCC_OscConfig+0x88>
 80037b4:	4b7c      	ldr	r3, [pc, #496]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d223      	bcs.n	800380c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fd55 	bl	8004278 <RCC_SetFlashLatencyFromMSIRange>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e383      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d8:	4b73      	ldr	r3, [pc, #460]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a72      	ldr	r2, [pc, #456]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037de:	f043 0308 	orr.w	r3, r3, #8
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b70      	ldr	r3, [pc, #448]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	496d      	ldr	r1, [pc, #436]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f6:	4b6c      	ldr	r3, [pc, #432]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	4968      	ldr	r1, [pc, #416]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
 800380a:	e025      	b.n	8003858 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380c:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003812:	f043 0308 	orr.w	r3, r3, #8
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b63      	ldr	r3, [pc, #396]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4960      	ldr	r1, [pc, #384]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800382a:	4b5f      	ldr	r3, [pc, #380]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	495b      	ldr	r1, [pc, #364]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fd15 	bl	8004278 <RCC_SetFlashLatencyFromMSIRange>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e343      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003858:	f000 fc4a 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b52      	ldr	r3, [pc, #328]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	4950      	ldr	r1, [pc, #320]	@ (80039ac <HAL_RCC_OscConfig+0x274>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	4a4e      	ldr	r2, [pc, #312]	@ (80039b0 <HAL_RCC_OscConfig+0x278>)
 8003876:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003878:	4b4e      	ldr	r3, [pc, #312]	@ (80039b4 <HAL_RCC_OscConfig+0x27c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fde7 	bl	8002450 <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d052      	beq.n	8003932 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	e327      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d032      	beq.n	80038fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003898:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a42      	ldr	r2, [pc, #264]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a4:	f7fe fe24 	bl	80024f0 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ac:	f7fe fe20 	bl	80024f0 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e310      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038be:	4b3a      	ldr	r3, [pc, #232]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ca:	4b37      	ldr	r3, [pc, #220]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a36      	ldr	r2, [pc, #216]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4931      	ldr	r1, [pc, #196]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e8:	4b2f      	ldr	r3, [pc, #188]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	492c      	ldr	r1, [pc, #176]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	e01a      	b.n	8003934 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038fe:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a29      	ldr	r2, [pc, #164]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800390a:	f7fe fdf1 	bl	80024f0 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003912:	f7fe fded 	bl	80024f0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e2dd      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x1da>
 8003930:	e000      	b.n	8003934 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003932:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d074      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b08      	cmp	r3, #8
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x21a>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b0c      	cmp	r3, #12
 800394a:	d10e      	bne.n	800396a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d10b      	bne.n	800396a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d064      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2f0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d160      	bne.n	8003a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e2ba      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x24a>
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0b      	ldr	r2, [pc, #44]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e026      	b.n	80039d0 <HAL_RCC_OscConfig+0x298>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800398a:	d115      	bne.n	80039b8 <HAL_RCC_OscConfig+0x280>
 800398c:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a05      	ldr	r2, [pc, #20]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003992:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a02      	ldr	r2, [pc, #8]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e014      	b.n	80039d0 <HAL_RCC_OscConfig+0x298>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08006d2c 	.word	0x08006d2c
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004
 80039b8:	4ba0      	ldr	r3, [pc, #640]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a9f      	ldr	r2, [pc, #636]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b9d      	ldr	r3, [pc, #628]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a9c      	ldr	r2, [pc, #624]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fd8a 	bl	80024f0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fe fd86 	bl	80024f0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	@ 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e276      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f2:	4b92      	ldr	r3, [pc, #584]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2a8>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fd76 	bl	80024f0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fe fd72 	bl	80024f0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e262      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1a:	4b88      	ldr	r3, [pc, #544]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2d0>
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d060      	beq.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_OscConfig+0x310>
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d119      	bne.n	8003a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d116      	bne.n	8003a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a48:	4b7c      	ldr	r3, [pc, #496]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_OscConfig+0x328>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e23f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b76      	ldr	r3, [pc, #472]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	4973      	ldr	r1, [pc, #460]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a74:	e040      	b.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d023      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6e      	ldr	r2, [pc, #440]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fd31 	bl	80024f0 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fe fd2d 	bl	80024f0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e21d      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa4:	4b65      	ldr	r3, [pc, #404]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b62      	ldr	r3, [pc, #392]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	495f      	ldr	r1, [pc, #380]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	e018      	b.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a5c      	ldr	r2, [pc, #368]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fd0d 	bl	80024f0 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe fd09 	bl	80024f0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1f9      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aec:	4b53      	ldr	r3, [pc, #332]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d03c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b12:	4a4a      	ldr	r2, [pc, #296]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fe fce8 	bl	80024f0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b24:	f7fe fce4 	bl	80024f0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1d4      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b36:	4b41      	ldr	r3, [pc, #260]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ef      	beq.n	8003b24 <HAL_RCC_OscConfig+0x3ec>
 8003b44:	e01b      	b.n	8003b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b46:	4b3d      	ldr	r3, [pc, #244]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fe fccb 	bl	80024f0 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fcc7 	bl	80024f0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1b7      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b70:	4b32      	ldr	r3, [pc, #200]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ef      	bne.n	8003b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80a6 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b90:	4b2a      	ldr	r3, [pc, #168]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b27      	ldr	r3, [pc, #156]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	4a26      	ldr	r2, [pc, #152]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ba8:	4b24      	ldr	r3, [pc, #144]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb8:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d118      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd0:	f7fe fc8e 	bl	80024f0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fe fc8a 	bl	80024f0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e17a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bea:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCC_OscConfig+0x4d8>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c0e:	e029      	b.n	8003c64 <HAL_RCC_OscConfig+0x52c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d115      	bne.n	8003c44 <HAL_RCC_OscConfig+0x50c>
 8003c18:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	4a07      	ldr	r2, [pc, #28]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	4a03      	ldr	r2, [pc, #12]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c38:	e014      	b.n	8003c64 <HAL_RCC_OscConfig+0x52c>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40007000 	.word	0x40007000
 8003c44:	4b9c      	ldr	r3, [pc, #624]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	4a9b      	ldr	r2, [pc, #620]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c54:	4b98      	ldr	r3, [pc, #608]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a97      	ldr	r2, [pc, #604]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d016      	beq.n	8003c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fe fc40 	bl	80024f0 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fe fc3c 	bl	80024f0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e12a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ed      	beq.n	8003c74 <HAL_RCC_OscConfig+0x53c>
 8003c98:	e015      	b.n	8003cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fc29 	bl	80024f0 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fe fc25 	bl	80024f0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e113      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ed      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	4a79      	ldr	r2, [pc, #484]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80fe 	beq.w	8003ede <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f040 80d0 	bne.w	8003e8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cec:	4b72      	ldr	r3, [pc, #456]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d130      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d127      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d11f      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d2c:	2a07      	cmp	r2, #7
 8003d2e:	bf14      	ite	ne
 8003d30:	2201      	movne	r2, #1
 8003d32:	2200      	moveq	r2, #0
 8003d34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d113      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	3b01      	subs	r3, #1
 8003d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d06e      	beq.n	8003e40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d069      	beq.n	8003e3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d68:	4b53      	ldr	r3, [pc, #332]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d74:	4b50      	ldr	r3, [pc, #320]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0ad      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d84:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a4b      	ldr	r2, [pc, #300]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d90:	f7fe fbae 	bl	80024f0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe fbaa 	bl	80024f0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e09a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003daa:	4b43      	ldr	r3, [pc, #268]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db6:	4b40      	ldr	r3, [pc, #256]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	4b40      	ldr	r3, [pc, #256]	@ (8003ebc <HAL_RCC_OscConfig+0x784>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003dd0:	0212      	lsls	r2, r2, #8
 8003dd2:	4311      	orrs	r1, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dd8:	0852      	lsrs	r2, r2, #1
 8003dda:	3a01      	subs	r2, #1
 8003ddc:	0552      	lsls	r2, r2, #21
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003de4:	0852      	lsrs	r2, r2, #1
 8003de6:	3a01      	subs	r2, #1
 8003de8:	0652      	lsls	r2, r2, #25
 8003dea:	4311      	orrs	r1, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003df0:	0912      	lsrs	r2, r2, #4
 8003df2:	0452      	lsls	r2, r2, #17
 8003df4:	430a      	orrs	r2, r1
 8003df6:	4930      	ldr	r1, [pc, #192]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e08:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e14:	f7fe fb6c 	bl	80024f0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fe fb68 	bl	80024f0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e058      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b22      	ldr	r3, [pc, #136]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3a:	e050      	b.n	8003ede <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e04f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e40:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d148      	bne.n	8003ede <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a19      	ldr	r2, [pc, #100]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e58:	4b17      	ldr	r3, [pc, #92]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a16      	ldr	r2, [pc, #88]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e64:	f7fe fb44 	bl	80024f0 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fe fb40 	bl	80024f0 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e030      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x734>
 8003e8a:	e028      	b.n	8003ede <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d023      	beq.n	8003eda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a08      	ldr	r2, [pc, #32]	@ (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fe fb27 	bl	80024f0 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fe fb23 	bl	80024f0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d905      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e013      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_OscConfig+0x7b0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ec      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_RCC_OscConfig+0x7b0>)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	4905      	ldr	r1, [pc, #20]	@ (8003ee8 <HAL_RCC_OscConfig+0x7b0>)
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_OscConfig+0x7b4>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
 8003ed8:	e001      	b.n	8003ede <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	feeefffc 	.word	0xfeeefffc

08003ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0e7      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f04:	4b75      	ldr	r3, [pc, #468]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d910      	bls.n	8003f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b72      	ldr	r3, [pc, #456]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 0207 	bic.w	r2, r3, #7
 8003f1a:	4970      	ldr	r1, [pc, #448]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b6e      	ldr	r3, [pc, #440]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0cf      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d010      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4b66      	ldr	r3, [pc, #408]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d908      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b63      	ldr	r3, [pc, #396]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4960      	ldr	r1, [pc, #384]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04c      	beq.n	8004008 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b5a      	ldr	r3, [pc, #360]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d121      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0a6      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f8e:	4b54      	ldr	r3, [pc, #336]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d115      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e09a      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e08e      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e086      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fc6:	4b46      	ldr	r3, [pc, #280]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4943      	ldr	r1, [pc, #268]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd8:	f7fe fa8a 	bl	80024f0 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe0:	f7fe fa86 	bl	80024f0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e06e      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 020c 	and.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	429a      	cmp	r2, r3
 8004006:	d1eb      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d010      	beq.n	8004036 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	4b31      	ldr	r3, [pc, #196]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004020:	429a      	cmp	r2, r3
 8004022:	d208      	bcs.n	8004036 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	492b      	ldr	r1, [pc, #172]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004036:	4b29      	ldr	r3, [pc, #164]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d210      	bcs.n	8004066 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004044:	4b25      	ldr	r3, [pc, #148]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 0207 	bic.w	r2, r3, #7
 800404c:	4923      	ldr	r1, [pc, #140]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004054:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e036      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004072:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4918      	ldr	r1, [pc, #96]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004090:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4910      	ldr	r1, [pc, #64]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040a4:	f000 f824 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	490b      	ldr	r1, [pc, #44]	@ (80040e4 <HAL_RCC_ClockConfig+0x1f4>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
 80040c0:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <HAL_RCC_ClockConfig+0x1f8>)
 80040c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040c4:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_ClockConfig+0x1fc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe f9c1 	bl	8002450 <HAL_InitTick>
 80040ce:	4603      	mov	r3, r0
 80040d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80040d2:	7afb      	ldrb	r3, [r7, #11]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40022000 	.word	0x40022000
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08006d2c 	.word	0x08006d2c
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	@ 0x24
 80040f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fe:	4b3e      	ldr	r3, [pc, #248]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004108:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d121      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d11e      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004124:	4b34      	ldr	r3, [pc, #208]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004130:	4b31      	ldr	r3, [pc, #196]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	e005      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004140:	4b2d      	ldr	r3, [pc, #180]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800414c:	4a2b      	ldr	r2, [pc, #172]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10d      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d102      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004168:	4b25      	ldr	r3, [pc, #148]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e004      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d101      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004174:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x114>)
 8004176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d134      	bne.n	80041e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800417e:	4b1e      	ldr	r3, [pc, #120]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d003      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0xa6>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d003      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0xac>
 8004194:	e005      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004196:	4b1a      	ldr	r3, [pc, #104]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 8004198:	617b      	str	r3, [r7, #20]
      break;
 800419a:	e005      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800419c:	4b19      	ldr	r3, [pc, #100]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x114>)
 800419e:	617b      	str	r3, [r7, #20]
      break;
 80041a0:	e002      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	617b      	str	r3, [r7, #20]
      break;
 80041a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041a8:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	3301      	adds	r3, #1
 80041b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041b6:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	fb03 f202 	mul.w	r2, r3, r2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ce:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	0e5b      	lsrs	r3, r3, #25
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	3301      	adds	r3, #1
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041e8:	69bb      	ldr	r3, [r7, #24]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	@ 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	08006d44 	.word	0x08006d44
 8004200:	00f42400 	.word	0x00f42400
 8004204:	007a1200 	.word	0x007a1200

08004208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800420c:	4b03      	ldr	r3, [pc, #12]	@ (800421c <HAL_RCC_GetHCLKFreq+0x14>)
 800420e:	681b      	ldr	r3, [r3, #0]
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000000 	.word	0x20000000

08004220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004224:	f7ff fff0 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4904      	ldr	r1, [pc, #16]	@ (8004248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	08006d3c 	.word	0x08006d3c

0800424c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004250:	f7ff ffda 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0adb      	lsrs	r3, r3, #11
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4904      	ldr	r1, [pc, #16]	@ (8004274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	08006d3c 	.word	0x08006d3c

08004278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004284:	4b2a      	ldr	r3, [pc, #168]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004290:	f7ff f9ee 	bl	8003670 <HAL_PWREx_GetVoltageRange>
 8004294:	6178      	str	r0, [r7, #20]
 8004296:	e014      	b.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004298:	4b25      	ldr	r3, [pc, #148]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	4a24      	ldr	r2, [pc, #144]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a4:	4b22      	ldr	r3, [pc, #136]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042b0:	f7ff f9de 	bl	8003670 <HAL_PWREx_GetVoltageRange>
 80042b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c8:	d10b      	bne.n	80042e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b80      	cmp	r3, #128	@ 0x80
 80042ce:	d919      	bls.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80042d4:	d902      	bls.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d6:	2302      	movs	r3, #2
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e013      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042dc:	2301      	movs	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e010      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b80      	cmp	r3, #128	@ 0x80
 80042e6:	d902      	bls.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042e8:	2303      	movs	r3, #3
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e00a      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b80      	cmp	r3, #128	@ 0x80
 80042f2:	d102      	bne.n	80042fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042f4:	2302      	movs	r3, #2
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	e004      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b70      	cmp	r3, #112	@ 0x70
 80042fe:	d101      	bne.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004300:	2301      	movs	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004304:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 0207 	bic.w	r2, r3, #7
 800430c:	4909      	ldr	r1, [pc, #36]	@ (8004334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004314:	4b07      	ldr	r3, [pc, #28]	@ (8004334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	40022000 	.word	0x40022000

08004338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004340:	2300      	movs	r3, #0
 8004342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004344:	2300      	movs	r3, #0
 8004346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004350:	2b00      	cmp	r3, #0
 8004352:	d041      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004358:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800435c:	d02a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800435e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004362:	d824      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004364:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004368:	d008      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800436a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800436e:	d81e      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004378:	d010      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800437a:	e018      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800437c:	4b86      	ldr	r3, [pc, #536]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a85      	ldr	r2, [pc, #532]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004386:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004388:	e015      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fabb 	bl	800490c <RCCEx_PLLSAI1_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800439a:	e00c      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3320      	adds	r3, #32
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fba6 	bl	8004af4 <RCCEx_PLLSAI2_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ac:	e003      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	74fb      	strb	r3, [r7, #19]
      break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043bc:	4b76      	ldr	r3, [pc, #472]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ca:	4973      	ldr	r1, [pc, #460]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d041      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043ec:	d02a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043f2:	d824      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043f8:	d008      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043fe:	d81e      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004408:	d010      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800440a:	e018      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800440c:	4b62      	ldr	r3, [pc, #392]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a61      	ldr	r2, [pc, #388]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004416:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004418:	e015      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fa73 	bl	800490c <RCCEx_PLLSAI1_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800442a:	e00c      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3320      	adds	r3, #32
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fb5e 	bl	8004af4 <RCCEx_PLLSAI2_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	74fb      	strb	r3, [r7, #19]
      break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800444c:	4b52      	ldr	r3, [pc, #328]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800445a:	494f      	ldr	r1, [pc, #316]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004462:	e001      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a0 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800447a:	4b47      	ldr	r3, [pc, #284]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b41      	ldr	r3, [pc, #260]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	4a40      	ldr	r2, [pc, #256]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	@ 0x58
 800449c:	4b3e      	ldr	r3, [pc, #248]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ac:	4b3b      	ldr	r3, [pc, #236]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3a      	ldr	r2, [pc, #232]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044b8:	f7fe f81a 	bl	80024f0 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044be:	e009      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fe f816 	bl	80024f0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	74fb      	strb	r3, [r7, #19]
        break;
 80044d2:	e005      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d4:	4b31      	ldr	r3, [pc, #196]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ef      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15c      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01f      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	429a      	cmp	r2, r3
 8004502:	d019      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004504:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004510:	4b21      	ldr	r3, [pc, #132]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004516:	4a20      	ldr	r2, [pc, #128]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004520:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004526:	4a1c      	ldr	r2, [pc, #112]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fd ffd5 	bl	80024f0 <HAL_GetTick>
 8004546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004548:	e00b      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fd ffd1 	bl	80024f0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d902      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	74fb      	strb	r3, [r7, #19]
            break;
 8004560:	e006      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ec      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004586:	4904      	ldr	r1, [pc, #16]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800458e:	e009      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
 8004594:	e006      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a4:	7c7b      	ldrb	r3, [r7, #17]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	4a9d      	ldr	r2, [pc, #628]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c2:	4b98      	ldr	r3, [pc, #608]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	f023 0203 	bic.w	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	4994      	ldr	r1, [pc, #592]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f023 020c 	bic.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f2:	498c      	ldr	r1, [pc, #560]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004606:	4b87      	ldr	r3, [pc, #540]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	4983      	ldr	r1, [pc, #524]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004628:	4b7e      	ldr	r3, [pc, #504]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	497b      	ldr	r1, [pc, #492]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800464a:	4b76      	ldr	r3, [pc, #472]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004658:	4972      	ldr	r1, [pc, #456]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466c:	4b6d      	ldr	r3, [pc, #436]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467a:	496a      	ldr	r1, [pc, #424]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468e:	4b65      	ldr	r3, [pc, #404]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469c:	4961      	ldr	r1, [pc, #388]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046be:	4959      	ldr	r1, [pc, #356]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d2:	4b54      	ldr	r3, [pc, #336]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e0:	4950      	ldr	r1, [pc, #320]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	4948      	ldr	r1, [pc, #288]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004716:	4b43      	ldr	r3, [pc, #268]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	493f      	ldr	r1, [pc, #252]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d028      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004738:	4b3a      	ldr	r3, [pc, #232]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004746:	4937      	ldr	r1, [pc, #220]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004756:	d106      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004758:	4b32      	ldr	r3, [pc, #200]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a31      	ldr	r2, [pc, #196]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004762:	60d3      	str	r3, [r2, #12]
 8004764:	e011      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800476e:	d10c      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f8c8 	bl	800490c <RCCEx_PLLSAI1_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d028      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004796:	4b23      	ldr	r3, [pc, #140]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a4:	491f      	ldr	r1, [pc, #124]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c0:	60d3      	str	r3, [r2, #12]
 80047c2:	e011      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	2101      	movs	r1, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 f899 	bl	800490c <RCCEx_PLLSAI1_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004802:	4908      	ldr	r1, [pc, #32]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004812:	d109      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a02      	ldr	r2, [pc, #8]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481e:	60d3      	str	r3, [r2, #12]
 8004820:	e014      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800482c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f867 	bl	800490c <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004858:	4b2b      	ldr	r3, [pc, #172]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004866:	4928      	ldr	r1, [pc, #160]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004876:	d10d      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2102      	movs	r1, #2
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f844 	bl	800490c <RCCEx_PLLSAI1_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d014      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	74bb      	strb	r3, [r7, #18]
 8004892:	e011      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800489c:	d10c      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3320      	adds	r3, #32
 80048a2:	2102      	movs	r1, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f925 	bl	8004af4 <RCCEx_PLLSAI2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048c4:	4b10      	ldr	r3, [pc, #64]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048d2:	490d      	ldr	r1, [pc, #52]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048e6:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f6:	4904      	ldr	r1, [pc, #16]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000

0800490c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800491a:	4b75      	ldr	r3, [pc, #468]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d018      	beq.n	8004958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004926:	4b72      	ldr	r3, [pc, #456]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0203 	and.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d10d      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
       ||
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800493e:	4b6c      	ldr	r3, [pc, #432]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
       ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d047      	beq.n	80049e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
 8004956:	e044      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d018      	beq.n	8004992 <RCCEx_PLLSAI1_Config+0x86>
 8004960:	2b03      	cmp	r3, #3
 8004962:	d825      	bhi.n	80049b0 <RCCEx_PLLSAI1_Config+0xa4>
 8004964:	2b01      	cmp	r3, #1
 8004966:	d002      	beq.n	800496e <RCCEx_PLLSAI1_Config+0x62>
 8004968:	2b02      	cmp	r3, #2
 800496a:	d009      	beq.n	8004980 <RCCEx_PLLSAI1_Config+0x74>
 800496c:	e020      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800496e:	4b60      	ldr	r3, [pc, #384]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497e:	e01a      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004980:	4b5b      	ldr	r3, [pc, #364]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004988:	2b00      	cmp	r3, #0
 800498a:	d116      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004990:	e013      	b.n	80049ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004992:	4b57      	ldr	r3, [pc, #348]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800499e:	4b54      	ldr	r3, [pc, #336]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ae:	e006      	b.n	80049be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e004      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b6:	bf00      	nop
 80049b8:	e002      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ba:	bf00      	nop
 80049bc:	e000      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049be:	bf00      	nop
    }

    if(status == HAL_OK)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10d      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049c6:	4b4a      	ldr	r3, [pc, #296]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	430b      	orrs	r3, r1
 80049dc:	4944      	ldr	r1, [pc, #272]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d17d      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049e8:	4b41      	ldr	r3, [pc, #260]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a40      	ldr	r2, [pc, #256]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f4:	f7fd fd7c 	bl	80024f0 <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049fa:	e009      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fc:	f7fd fd78 	bl	80024f0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a0e:	e005      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a10:	4b37      	ldr	r3, [pc, #220]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1ef      	bne.n	80049fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d160      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d111      	bne.n	8004a4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a28:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6892      	ldr	r2, [r2, #8]
 8004a38:	0211      	lsls	r1, r2, #8
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68d2      	ldr	r2, [r2, #12]
 8004a3e:	0912      	lsrs	r2, r2, #4
 8004a40:	0452      	lsls	r2, r2, #17
 8004a42:	430a      	orrs	r2, r1
 8004a44:	492a      	ldr	r1, [pc, #168]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	610b      	str	r3, [r1, #16]
 8004a4a:	e027      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d112      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a52:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a5a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6892      	ldr	r2, [r2, #8]
 8004a62:	0211      	lsls	r1, r2, #8
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6912      	ldr	r2, [r2, #16]
 8004a68:	0852      	lsrs	r2, r2, #1
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	0552      	lsls	r2, r2, #21
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	491f      	ldr	r1, [pc, #124]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	610b      	str	r3, [r1, #16]
 8004a76:	e011      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a78:	4b1d      	ldr	r3, [pc, #116]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6892      	ldr	r2, [r2, #8]
 8004a88:	0211      	lsls	r1, r2, #8
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6952      	ldr	r2, [r2, #20]
 8004a8e:	0852      	lsrs	r2, r2, #1
 8004a90:	3a01      	subs	r2, #1
 8004a92:	0652      	lsls	r2, r2, #25
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4916      	ldr	r1, [pc, #88]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a9c:	4b14      	ldr	r3, [pc, #80]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fd22 	bl	80024f0 <HAL_GetTick>
 8004aac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aae:	e009      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab0:	f7fd fd1e 	bl	80024f0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d902      	bls.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ac2:	e005      	b.n	8004ad0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ef      	beq.n	8004ab0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	4904      	ldr	r1, [pc, #16]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000

08004af4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b0e:	4b67      	ldr	r3, [pc, #412]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0203 	and.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d10d      	bne.n	8004b3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
       ||
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b26:	4b61      	ldr	r3, [pc, #388]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
       ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d047      	beq.n	8004bca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
 8004b3e:	e044      	b.n	8004bca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d018      	beq.n	8004b7a <RCCEx_PLLSAI2_Config+0x86>
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d825      	bhi.n	8004b98 <RCCEx_PLLSAI2_Config+0xa4>
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d002      	beq.n	8004b56 <RCCEx_PLLSAI2_Config+0x62>
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d009      	beq.n	8004b68 <RCCEx_PLLSAI2_Config+0x74>
 8004b54:	e020      	b.n	8004b98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b56:	4b55      	ldr	r3, [pc, #340]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11d      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b66:	e01a      	b.n	8004b9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b68:	4b50      	ldr	r3, [pc, #320]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d116      	bne.n	8004ba2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b78:	e013      	b.n	8004ba2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b86:	4b49      	ldr	r3, [pc, #292]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b96:	e006      	b.n	8004ba6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b9c:	e004      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e002      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ba6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10d      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bae:	4b3f      	ldr	r3, [pc, #252]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	4939      	ldr	r1, [pc, #228]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d167      	bne.n	8004ca0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bd0:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a35      	ldr	r2, [pc, #212]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bdc:	f7fd fc88 	bl	80024f0 <HAL_GetTick>
 8004be0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004be2:	e009      	b.n	8004bf8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004be4:	f7fd fc84 	bl	80024f0 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d902      	bls.n	8004bf8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bf6:	e005      	b.n	8004c04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ef      	bne.n	8004be4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d14a      	bne.n	8004ca0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d111      	bne.n	8004c34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c10:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6892      	ldr	r2, [r2, #8]
 8004c20:	0211      	lsls	r1, r2, #8
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68d2      	ldr	r2, [r2, #12]
 8004c26:	0912      	lsrs	r2, r2, #4
 8004c28:	0452      	lsls	r2, r2, #17
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	491f      	ldr	r1, [pc, #124]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	614b      	str	r3, [r1, #20]
 8004c32:	e011      	b.n	8004c58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c34:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6912      	ldr	r2, [r2, #16]
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0652      	lsls	r2, r2, #25
 8004c50:	430a      	orrs	r2, r1
 8004c52:	4916      	ldr	r1, [pc, #88]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c58:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fd fc44 	bl	80024f0 <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c6a:	e009      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c6c:	f7fd fc40 	bl	80024f0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d902      	bls.n	8004c80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c7e:	e005      	b.n	8004c8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c80:	4b0a      	ldr	r3, [pc, #40]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ef      	beq.n	8004c6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	4904      	ldr	r1, [pc, #16]	@ (8004cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e040      	b.n	8004d44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd fa38 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2224      	movs	r2, #36	@ 0x24
 8004cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fb6a 	bl	80053d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f8af 	bl	8004e60 <UART_SetConfig>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e01b      	b.n	8004d44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fbe9 	bl	8005514 <UART_CheckIdleState>
 8004d42:	4603      	mov	r3, r0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	@ 0x28
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d177      	bne.n	8004e54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_UART_Transmit+0x24>
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e070      	b.n	8004e56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2221      	movs	r2, #33	@ 0x21
 8004d80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d82:	f7fd fbb5 	bl	80024f0 <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da0:	d108      	bne.n	8004db4 <HAL_UART_Transmit+0x68>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e003      	b.n	8004dbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dbc:	e02f      	b.n	8004e1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2180      	movs	r1, #128	@ 0x80
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fc4b 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e03b      	b.n	8004e56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	881a      	ldrh	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df0:	b292      	uxth	r2, r2
 8004df2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	3302      	adds	r3, #2
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e007      	b.n	8004e0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1c9      	bne.n	8004dbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2140      	movs	r1, #64	@ 0x40
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fc15 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d004      	beq.n	8004e4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e005      	b.n	8004e56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e64:	b08a      	sub	sp, #40	@ 0x28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4ba4      	ldr	r3, [pc, #656]	@ (8005120 <UART_SetConfig+0x2c0>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a99      	ldr	r2, [pc, #612]	@ (8005124 <UART_SetConfig+0x2c4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a90      	ldr	r2, [pc, #576]	@ (8005128 <UART_SetConfig+0x2c8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d126      	bne.n	8004f38 <UART_SetConfig+0xd8>
 8004eea:	4b90      	ldr	r3, [pc, #576]	@ (800512c <UART_SetConfig+0x2cc>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d81b      	bhi.n	8004f30 <UART_SetConfig+0xd0>
 8004ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <UART_SetConfig+0xa0>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e116      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e112      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e10e      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e10a      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e106      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a7c      	ldr	r2, [pc, #496]	@ (8005130 <UART_SetConfig+0x2d0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d138      	bne.n	8004fb4 <UART_SetConfig+0x154>
 8004f42:	4b7a      	ldr	r3, [pc, #488]	@ (800512c <UART_SetConfig+0x2cc>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b0c      	cmp	r3, #12
 8004f4e:	d82d      	bhi.n	8004fac <UART_SetConfig+0x14c>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <UART_SetConfig+0xf8>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004fad 	.word	0x08004fad
 8004f60:	08004fad 	.word	0x08004fad
 8004f64:	08004fad 	.word	0x08004fad
 8004f68:	08004f9d 	.word	0x08004f9d
 8004f6c:	08004fad 	.word	0x08004fad
 8004f70:	08004fad 	.word	0x08004fad
 8004f74:	08004fad 	.word	0x08004fad
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f92:	e0d8      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f94:	2302      	movs	r3, #2
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9a:	e0d4      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa2:	e0d0      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004faa:	e0cc      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	e0c8      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8005134 <UART_SetConfig+0x2d4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d125      	bne.n	800500a <UART_SetConfig+0x1aa>
 8004fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800512c <UART_SetConfig+0x2cc>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fc8:	2b30      	cmp	r3, #48	@ 0x30
 8004fca:	d016      	beq.n	8004ffa <UART_SetConfig+0x19a>
 8004fcc:	2b30      	cmp	r3, #48	@ 0x30
 8004fce:	d818      	bhi.n	8005002 <UART_SetConfig+0x1a2>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d00a      	beq.n	8004fea <UART_SetConfig+0x18a>
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d814      	bhi.n	8005002 <UART_SetConfig+0x1a2>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <UART_SetConfig+0x182>
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d008      	beq.n	8004ff2 <UART_SetConfig+0x192>
 8004fe0:	e00f      	b.n	8005002 <UART_SetConfig+0x1a2>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe8:	e0ad      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fea:	2302      	movs	r3, #2
 8004fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff0:	e0a9      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff8:	e0a5      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005000:	e0a1      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005002:	2310      	movs	r3, #16
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005008:	e09d      	b.n	8005146 <UART_SetConfig+0x2e6>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a4a      	ldr	r2, [pc, #296]	@ (8005138 <UART_SetConfig+0x2d8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d125      	bne.n	8005060 <UART_SetConfig+0x200>
 8005014:	4b45      	ldr	r3, [pc, #276]	@ (800512c <UART_SetConfig+0x2cc>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800501e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005020:	d016      	beq.n	8005050 <UART_SetConfig+0x1f0>
 8005022:	2bc0      	cmp	r3, #192	@ 0xc0
 8005024:	d818      	bhi.n	8005058 <UART_SetConfig+0x1f8>
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d00a      	beq.n	8005040 <UART_SetConfig+0x1e0>
 800502a:	2b80      	cmp	r3, #128	@ 0x80
 800502c:	d814      	bhi.n	8005058 <UART_SetConfig+0x1f8>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <UART_SetConfig+0x1d8>
 8005032:	2b40      	cmp	r3, #64	@ 0x40
 8005034:	d008      	beq.n	8005048 <UART_SetConfig+0x1e8>
 8005036:	e00f      	b.n	8005058 <UART_SetConfig+0x1f8>
 8005038:	2300      	movs	r3, #0
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503e:	e082      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005040:	2302      	movs	r3, #2
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005046:	e07e      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005048:	2304      	movs	r3, #4
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504e:	e07a      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005050:	2308      	movs	r3, #8
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e076      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005058:	2310      	movs	r3, #16
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e072      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a35      	ldr	r2, [pc, #212]	@ (800513c <UART_SetConfig+0x2dc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d12a      	bne.n	80050c0 <UART_SetConfig+0x260>
 800506a:	4b30      	ldr	r3, [pc, #192]	@ (800512c <UART_SetConfig+0x2cc>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005078:	d01a      	beq.n	80050b0 <UART_SetConfig+0x250>
 800507a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507e:	d81b      	bhi.n	80050b8 <UART_SetConfig+0x258>
 8005080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005084:	d00c      	beq.n	80050a0 <UART_SetConfig+0x240>
 8005086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508a:	d815      	bhi.n	80050b8 <UART_SetConfig+0x258>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <UART_SetConfig+0x238>
 8005090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005094:	d008      	beq.n	80050a8 <UART_SetConfig+0x248>
 8005096:	e00f      	b.n	80050b8 <UART_SetConfig+0x258>
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e052      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050a0:	2302      	movs	r3, #2
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e04e      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e04a      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e046      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e042      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <UART_SetConfig+0x2c4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d13a      	bne.n	8005140 <UART_SetConfig+0x2e0>
 80050ca:	4b18      	ldr	r3, [pc, #96]	@ (800512c <UART_SetConfig+0x2cc>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d8:	d01a      	beq.n	8005110 <UART_SetConfig+0x2b0>
 80050da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050de:	d81b      	bhi.n	8005118 <UART_SetConfig+0x2b8>
 80050e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e4:	d00c      	beq.n	8005100 <UART_SetConfig+0x2a0>
 80050e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ea:	d815      	bhi.n	8005118 <UART_SetConfig+0x2b8>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <UART_SetConfig+0x298>
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f4:	d008      	beq.n	8005108 <UART_SetConfig+0x2a8>
 80050f6:	e00f      	b.n	8005118 <UART_SetConfig+0x2b8>
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fe:	e022      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005100:	2302      	movs	r3, #2
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005106:	e01e      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510e:	e01a      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005116:	e016      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511e:	e012      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005120:	efff69f3 	.word	0xefff69f3
 8005124:	40008000 	.word	0x40008000
 8005128:	40013800 	.word	0x40013800
 800512c:	40021000 	.word	0x40021000
 8005130:	40004400 	.word	0x40004400
 8005134:	40004800 	.word	0x40004800
 8005138:	40004c00 	.word	0x40004c00
 800513c:	40005000 	.word	0x40005000
 8005140:	2310      	movs	r3, #16
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a9f      	ldr	r2, [pc, #636]	@ (80053c8 <UART_SetConfig+0x568>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d17a      	bne.n	8005246 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005150:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005154:	2b08      	cmp	r3, #8
 8005156:	d824      	bhi.n	80051a2 <UART_SetConfig+0x342>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0x300>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005185 	.word	0x08005185
 8005164:	080051a3 	.word	0x080051a3
 8005168:	0800518d 	.word	0x0800518d
 800516c:	080051a3 	.word	0x080051a3
 8005170:	08005193 	.word	0x08005193
 8005174:	080051a3 	.word	0x080051a3
 8005178:	080051a3 	.word	0x080051a3
 800517c:	080051a3 	.word	0x080051a3
 8005180:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7ff f84c 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b8f      	ldr	r3, [pc, #572]	@ (80053cc <UART_SetConfig+0x56c>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe ffad 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80fb 	beq.w	80053ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d305      	bcc.n	80051d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d903      	bls.n	80051da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051d8:	e0e8      	b.n	80053ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2200      	movs	r2, #0
 80051de:	461c      	mov	r4, r3
 80051e0:	4615      	mov	r5, r2
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	022b      	lsls	r3, r5, #8
 80051ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051f0:	0222      	lsls	r2, r4, #8
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6849      	ldr	r1, [r1, #4]
 80051f6:	0849      	lsrs	r1, r1, #1
 80051f8:	2000      	movs	r0, #0
 80051fa:	4688      	mov	r8, r1
 80051fc:	4681      	mov	r9, r0
 80051fe:	eb12 0a08 	adds.w	sl, r2, r8
 8005202:	eb43 0b09 	adc.w	fp, r3, r9
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005214:	4650      	mov	r0, sl
 8005216:	4659      	mov	r1, fp
 8005218:	f7fb f832 	bl	8000280 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800522a:	d308      	bcc.n	800523e <UART_SetConfig+0x3de>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005232:	d204      	bcs.n	800523e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	e0b6      	b.n	80053ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005244:	e0b2      	b.n	80053ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800524e:	d15e      	bne.n	800530e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005250:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005254:	2b08      	cmp	r3, #8
 8005256:	d828      	bhi.n	80052aa <UART_SetConfig+0x44a>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0x400>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005285 	.word	0x08005285
 8005264:	0800528d 	.word	0x0800528d
 8005268:	08005295 	.word	0x08005295
 800526c:	080052ab 	.word	0x080052ab
 8005270:	0800529b 	.word	0x0800529b
 8005274:	080052ab 	.word	0x080052ab
 8005278:	080052ab 	.word	0x080052ab
 800527c:	080052ab 	.word	0x080052ab
 8005280:	080052a3 	.word	0x080052a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7fe ffcc 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8005288:	61f8      	str	r0, [r7, #28]
        break;
 800528a:	e014      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800528c:	f7fe ffde 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 8005290:	61f8      	str	r0, [r7, #28]
        break;
 8005292:	e010      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005294:	4b4d      	ldr	r3, [pc, #308]	@ (80053cc <UART_SetConfig+0x56c>)
 8005296:	61fb      	str	r3, [r7, #28]
        break;
 8005298:	e00d      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529a:	f7fe ff29 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 800529e:	61f8      	str	r0, [r7, #28]
        break;
 80052a0:	e009      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052a6:	61fb      	str	r3, [r7, #28]
        break;
 80052a8:	e005      	b.n	80052b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d077      	beq.n	80053ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	005a      	lsls	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	441a      	add	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b0f      	cmp	r3, #15
 80052d6:	d916      	bls.n	8005306 <UART_SetConfig+0x4a6>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052de:	d212      	bcs.n	8005306 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f023 030f 	bic.w	r3, r3, #15
 80052e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	8afb      	ldrh	r3, [r7, #22]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	8afa      	ldrh	r2, [r7, #22]
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	e052      	b.n	80053ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800530c:	e04e      	b.n	80053ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800530e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005312:	2b08      	cmp	r3, #8
 8005314:	d827      	bhi.n	8005366 <UART_SetConfig+0x506>
 8005316:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <UART_SetConfig+0x4bc>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	08005341 	.word	0x08005341
 8005320:	08005349 	.word	0x08005349
 8005324:	08005351 	.word	0x08005351
 8005328:	08005367 	.word	0x08005367
 800532c:	08005357 	.word	0x08005357
 8005330:	08005367 	.word	0x08005367
 8005334:	08005367 	.word	0x08005367
 8005338:	08005367 	.word	0x08005367
 800533c:	0800535f 	.word	0x0800535f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005340:	f7fe ff6e 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8005344:	61f8      	str	r0, [r7, #28]
        break;
 8005346:	e014      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7fe ff80 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 800534c:	61f8      	str	r0, [r7, #28]
        break;
 800534e:	e010      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005350:	4b1e      	ldr	r3, [pc, #120]	@ (80053cc <UART_SetConfig+0x56c>)
 8005352:	61fb      	str	r3, [r7, #28]
        break;
 8005354:	e00d      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005356:	f7fe fecb 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 800535a:	61f8      	str	r0, [r7, #28]
        break;
 800535c:	e009      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005362:	61fb      	str	r3, [r7, #28]
        break;
 8005364:	e005      	b.n	8005372 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005370:	bf00      	nop
    }

    if (pclk != 0U)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d019      	beq.n	80053ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	085a      	lsrs	r2, r3, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d909      	bls.n	80053a6 <UART_SetConfig+0x546>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005398:	d205      	bcs.n	80053a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
 80053a4:	e002      	b.n	80053ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3728      	adds	r7, #40	@ 0x28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c6:	bf00      	nop
 80053c8:	40008000 	.word	0x40008000
 80053cc:	00f42400 	.word	0x00f42400

080053d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01a      	beq.n	80054e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ce:	d10a      	bne.n	80054e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b098      	sub	sp, #96	@ 0x60
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005524:	f7fc ffe4 	bl	80024f0 <HAL_GetTick>
 8005528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b08      	cmp	r3, #8
 8005536:	d12e      	bne.n	8005596 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005540:	2200      	movs	r2, #0
 8005542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f88c 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d021      	beq.n	8005596 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005566:	653b      	str	r3, [r7, #80]	@ 0x50
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005570:	647b      	str	r3, [r7, #68]	@ 0x44
 8005572:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800557e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e062      	b.n	800565c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d149      	bne.n	8005638 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ac:	2200      	movs	r2, #0
 80055ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f856 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03c      	beq.n	8005638 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	623b      	str	r3, [r7, #32]
   return(result);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e6      	bne.n	80055be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	617b      	str	r3, [r7, #20]
   return(result);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e011      	b.n	800565c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3758      	adds	r7, #88	@ 0x58
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	e04f      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d04b      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fc ff37 	bl	80024f0 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <UART_WaitOnFlagUntilTimeout+0x30>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e04e      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d037      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b80      	cmp	r3, #128	@ 0x80
 80056aa:	d034      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b40      	cmp	r3, #64	@ 0x40
 80056b0:	d031      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d110      	bne.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2208      	movs	r2, #8
 80056c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f838 	bl	800573e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2208      	movs	r2, #8
 80056d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e029      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f0:	d111      	bne.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f81e 	bl	800573e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e00f      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	429a      	cmp	r2, r3
 8005732:	d0a0      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573e:	b480      	push	{r7}
 8005740:	b095      	sub	sp, #84	@ 0x54
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800575a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005764:	643b      	str	r3, [r7, #64]	@ 0x40
 8005766:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800576a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	61fb      	str	r3, [r7, #28]
   return(result);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e5      	bne.n	8005778 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d118      	bne.n	80057e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6979      	ldr	r1, [r7, #20]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057fa:	bf00      	nop
 80057fc:	3754      	adds	r7, #84	@ 0x54
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <std>:
 8005808:	2300      	movs	r3, #0
 800580a:	b510      	push	{r4, lr}
 800580c:	4604      	mov	r4, r0
 800580e:	e9c0 3300 	strd	r3, r3, [r0]
 8005812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005816:	6083      	str	r3, [r0, #8]
 8005818:	8181      	strh	r1, [r0, #12]
 800581a:	6643      	str	r3, [r0, #100]	@ 0x64
 800581c:	81c2      	strh	r2, [r0, #14]
 800581e:	6183      	str	r3, [r0, #24]
 8005820:	4619      	mov	r1, r3
 8005822:	2208      	movs	r2, #8
 8005824:	305c      	adds	r0, #92	@ 0x5c
 8005826:	f000 fa2d 	bl	8005c84 <memset>
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <std+0x58>)
 800582c:	6263      	str	r3, [r4, #36]	@ 0x24
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <std+0x5c>)
 8005830:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <std+0x60>)
 8005834:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <std+0x64>)
 8005838:	6323      	str	r3, [r4, #48]	@ 0x30
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <std+0x68>)
 800583c:	6224      	str	r4, [r4, #32]
 800583e:	429c      	cmp	r4, r3
 8005840:	d006      	beq.n	8005850 <std+0x48>
 8005842:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005846:	4294      	cmp	r4, r2
 8005848:	d002      	beq.n	8005850 <std+0x48>
 800584a:	33d0      	adds	r3, #208	@ 0xd0
 800584c:	429c      	cmp	r4, r3
 800584e:	d105      	bne.n	800585c <std+0x54>
 8005850:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005858:	f000 ba8c 	b.w	8005d74 <__retarget_lock_init_recursive>
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	08005ad5 	.word	0x08005ad5
 8005864:	08005af7 	.word	0x08005af7
 8005868:	08005b2f 	.word	0x08005b2f
 800586c:	08005b53 	.word	0x08005b53
 8005870:	20000170 	.word	0x20000170

08005874 <stdio_exit_handler>:
 8005874:	4a02      	ldr	r2, [pc, #8]	@ (8005880 <stdio_exit_handler+0xc>)
 8005876:	4903      	ldr	r1, [pc, #12]	@ (8005884 <stdio_exit_handler+0x10>)
 8005878:	4803      	ldr	r0, [pc, #12]	@ (8005888 <stdio_exit_handler+0x14>)
 800587a:	f000 b869 	b.w	8005950 <_fwalk_sglue>
 800587e:	bf00      	nop
 8005880:	2000000c 	.word	0x2000000c
 8005884:	080068c5 	.word	0x080068c5
 8005888:	2000001c 	.word	0x2000001c

0800588c <cleanup_stdio>:
 800588c:	6841      	ldr	r1, [r0, #4]
 800588e:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <cleanup_stdio+0x34>)
 8005890:	4299      	cmp	r1, r3
 8005892:	b510      	push	{r4, lr}
 8005894:	4604      	mov	r4, r0
 8005896:	d001      	beq.n	800589c <cleanup_stdio+0x10>
 8005898:	f001 f814 	bl	80068c4 <_fflush_r>
 800589c:	68a1      	ldr	r1, [r4, #8]
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <cleanup_stdio+0x38>)
 80058a0:	4299      	cmp	r1, r3
 80058a2:	d002      	beq.n	80058aa <cleanup_stdio+0x1e>
 80058a4:	4620      	mov	r0, r4
 80058a6:	f001 f80d 	bl	80068c4 <_fflush_r>
 80058aa:	68e1      	ldr	r1, [r4, #12]
 80058ac:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <cleanup_stdio+0x3c>)
 80058ae:	4299      	cmp	r1, r3
 80058b0:	d004      	beq.n	80058bc <cleanup_stdio+0x30>
 80058b2:	4620      	mov	r0, r4
 80058b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b8:	f001 b804 	b.w	80068c4 <_fflush_r>
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	bf00      	nop
 80058c0:	20000170 	.word	0x20000170
 80058c4:	200001d8 	.word	0x200001d8
 80058c8:	20000240 	.word	0x20000240

080058cc <global_stdio_init.part.0>:
 80058cc:	b510      	push	{r4, lr}
 80058ce:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <global_stdio_init.part.0+0x30>)
 80058d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005900 <global_stdio_init.part.0+0x34>)
 80058d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005904 <global_stdio_init.part.0+0x38>)
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	4620      	mov	r0, r4
 80058d8:	2200      	movs	r2, #0
 80058da:	2104      	movs	r1, #4
 80058dc:	f7ff ff94 	bl	8005808 <std>
 80058e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058e4:	2201      	movs	r2, #1
 80058e6:	2109      	movs	r1, #9
 80058e8:	f7ff ff8e 	bl	8005808 <std>
 80058ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058f0:	2202      	movs	r2, #2
 80058f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f6:	2112      	movs	r1, #18
 80058f8:	f7ff bf86 	b.w	8005808 <std>
 80058fc:	200002a8 	.word	0x200002a8
 8005900:	20000170 	.word	0x20000170
 8005904:	08005875 	.word	0x08005875

08005908 <__sfp_lock_acquire>:
 8005908:	4801      	ldr	r0, [pc, #4]	@ (8005910 <__sfp_lock_acquire+0x8>)
 800590a:	f000 ba34 	b.w	8005d76 <__retarget_lock_acquire_recursive>
 800590e:	bf00      	nop
 8005910:	200002b1 	.word	0x200002b1

08005914 <__sfp_lock_release>:
 8005914:	4801      	ldr	r0, [pc, #4]	@ (800591c <__sfp_lock_release+0x8>)
 8005916:	f000 ba2f 	b.w	8005d78 <__retarget_lock_release_recursive>
 800591a:	bf00      	nop
 800591c:	200002b1 	.word	0x200002b1

08005920 <__sinit>:
 8005920:	b510      	push	{r4, lr}
 8005922:	4604      	mov	r4, r0
 8005924:	f7ff fff0 	bl	8005908 <__sfp_lock_acquire>
 8005928:	6a23      	ldr	r3, [r4, #32]
 800592a:	b11b      	cbz	r3, 8005934 <__sinit+0x14>
 800592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005930:	f7ff bff0 	b.w	8005914 <__sfp_lock_release>
 8005934:	4b04      	ldr	r3, [pc, #16]	@ (8005948 <__sinit+0x28>)
 8005936:	6223      	str	r3, [r4, #32]
 8005938:	4b04      	ldr	r3, [pc, #16]	@ (800594c <__sinit+0x2c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f5      	bne.n	800592c <__sinit+0xc>
 8005940:	f7ff ffc4 	bl	80058cc <global_stdio_init.part.0>
 8005944:	e7f2      	b.n	800592c <__sinit+0xc>
 8005946:	bf00      	nop
 8005948:	0800588d 	.word	0x0800588d
 800594c:	200002a8 	.word	0x200002a8

08005950 <_fwalk_sglue>:
 8005950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005954:	4607      	mov	r7, r0
 8005956:	4688      	mov	r8, r1
 8005958:	4614      	mov	r4, r2
 800595a:	2600      	movs	r6, #0
 800595c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005960:	f1b9 0901 	subs.w	r9, r9, #1
 8005964:	d505      	bpl.n	8005972 <_fwalk_sglue+0x22>
 8005966:	6824      	ldr	r4, [r4, #0]
 8005968:	2c00      	cmp	r4, #0
 800596a:	d1f7      	bne.n	800595c <_fwalk_sglue+0xc>
 800596c:	4630      	mov	r0, r6
 800596e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005972:	89ab      	ldrh	r3, [r5, #12]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d907      	bls.n	8005988 <_fwalk_sglue+0x38>
 8005978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800597c:	3301      	adds	r3, #1
 800597e:	d003      	beq.n	8005988 <_fwalk_sglue+0x38>
 8005980:	4629      	mov	r1, r5
 8005982:	4638      	mov	r0, r7
 8005984:	47c0      	blx	r8
 8005986:	4306      	orrs	r6, r0
 8005988:	3568      	adds	r5, #104	@ 0x68
 800598a:	e7e9      	b.n	8005960 <_fwalk_sglue+0x10>

0800598c <iprintf>:
 800598c:	b40f      	push	{r0, r1, r2, r3}
 800598e:	b507      	push	{r0, r1, r2, lr}
 8005990:	4906      	ldr	r1, [pc, #24]	@ (80059ac <iprintf+0x20>)
 8005992:	ab04      	add	r3, sp, #16
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	f853 2b04 	ldr.w	r2, [r3], #4
 800599a:	6881      	ldr	r1, [r0, #8]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	f000 fc67 	bl	8006270 <_vfiprintf_r>
 80059a2:	b003      	add	sp, #12
 80059a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059a8:	b004      	add	sp, #16
 80059aa:	4770      	bx	lr
 80059ac:	20000018 	.word	0x20000018

080059b0 <_puts_r>:
 80059b0:	6a03      	ldr	r3, [r0, #32]
 80059b2:	b570      	push	{r4, r5, r6, lr}
 80059b4:	6884      	ldr	r4, [r0, #8]
 80059b6:	4605      	mov	r5, r0
 80059b8:	460e      	mov	r6, r1
 80059ba:	b90b      	cbnz	r3, 80059c0 <_puts_r+0x10>
 80059bc:	f7ff ffb0 	bl	8005920 <__sinit>
 80059c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059c2:	07db      	lsls	r3, r3, #31
 80059c4:	d405      	bmi.n	80059d2 <_puts_r+0x22>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	0598      	lsls	r0, r3, #22
 80059ca:	d402      	bmi.n	80059d2 <_puts_r+0x22>
 80059cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059ce:	f000 f9d2 	bl	8005d76 <__retarget_lock_acquire_recursive>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	0719      	lsls	r1, r3, #28
 80059d6:	d502      	bpl.n	80059de <_puts_r+0x2e>
 80059d8:	6923      	ldr	r3, [r4, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d135      	bne.n	8005a4a <_puts_r+0x9a>
 80059de:	4621      	mov	r1, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f8f9 	bl	8005bd8 <__swsetup_r>
 80059e6:	b380      	cbz	r0, 8005a4a <_puts_r+0x9a>
 80059e8:	f04f 35ff 	mov.w	r5, #4294967295
 80059ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ee:	07da      	lsls	r2, r3, #31
 80059f0:	d405      	bmi.n	80059fe <_puts_r+0x4e>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	059b      	lsls	r3, r3, #22
 80059f6:	d402      	bmi.n	80059fe <_puts_r+0x4e>
 80059f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059fa:	f000 f9bd 	bl	8005d78 <__retarget_lock_release_recursive>
 80059fe:	4628      	mov	r0, r5
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da04      	bge.n	8005a10 <_puts_r+0x60>
 8005a06:	69a2      	ldr	r2, [r4, #24]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	dc17      	bgt.n	8005a3c <_puts_r+0x8c>
 8005a0c:	290a      	cmp	r1, #10
 8005a0e:	d015      	beq.n	8005a3c <_puts_r+0x8c>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	6022      	str	r2, [r4, #0]
 8005a16:	7019      	strb	r1, [r3, #0]
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	60a3      	str	r3, [r4, #8]
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d1ed      	bne.n	8005a02 <_puts_r+0x52>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	da11      	bge.n	8005a4e <_puts_r+0x9e>
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	210a      	movs	r1, #10
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f893 	bl	8005b5a <__swbuf_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d0d7      	beq.n	80059e8 <_puts_r+0x38>
 8005a38:	250a      	movs	r5, #10
 8005a3a:	e7d7      	b.n	80059ec <_puts_r+0x3c>
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f88b 	bl	8005b5a <__swbuf_r>
 8005a44:	3001      	adds	r0, #1
 8005a46:	d1e7      	bne.n	8005a18 <_puts_r+0x68>
 8005a48:	e7ce      	b.n	80059e8 <_puts_r+0x38>
 8005a4a:	3e01      	subs	r6, #1
 8005a4c:	e7e4      	b.n	8005a18 <_puts_r+0x68>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	220a      	movs	r2, #10
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e7ee      	b.n	8005a38 <_puts_r+0x88>
	...

08005a5c <puts>:
 8005a5c:	4b02      	ldr	r3, [pc, #8]	@ (8005a68 <puts+0xc>)
 8005a5e:	4601      	mov	r1, r0
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f7ff bfa5 	b.w	80059b0 <_puts_r>
 8005a66:	bf00      	nop
 8005a68:	20000018 	.word	0x20000018

08005a6c <sniprintf>:
 8005a6c:	b40c      	push	{r2, r3}
 8005a6e:	b530      	push	{r4, r5, lr}
 8005a70:	4b17      	ldr	r3, [pc, #92]	@ (8005ad0 <sniprintf+0x64>)
 8005a72:	1e0c      	subs	r4, r1, #0
 8005a74:	681d      	ldr	r5, [r3, #0]
 8005a76:	b09d      	sub	sp, #116	@ 0x74
 8005a78:	da08      	bge.n	8005a8c <sniprintf+0x20>
 8005a7a:	238b      	movs	r3, #139	@ 0x8b
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a82:	b01d      	add	sp, #116	@ 0x74
 8005a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a88:	b002      	add	sp, #8
 8005a8a:	4770      	bx	lr
 8005a8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005a90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a94:	bf14      	ite	ne
 8005a96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a9a:	4623      	moveq	r3, r4
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	9307      	str	r3, [sp, #28]
 8005aa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005aa4:	9002      	str	r0, [sp, #8]
 8005aa6:	9006      	str	r0, [sp, #24]
 8005aa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005aac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005aae:	ab21      	add	r3, sp, #132	@ 0x84
 8005ab0:	a902      	add	r1, sp, #8
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	f000 fab5 	bl	8006024 <_svfiprintf_r>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	bfbc      	itt	lt
 8005abe:	238b      	movlt	r3, #139	@ 0x8b
 8005ac0:	602b      	strlt	r3, [r5, #0]
 8005ac2:	2c00      	cmp	r4, #0
 8005ac4:	d0dd      	beq.n	8005a82 <sniprintf+0x16>
 8005ac6:	9b02      	ldr	r3, [sp, #8]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e7d9      	b.n	8005a82 <sniprintf+0x16>
 8005ace:	bf00      	nop
 8005ad0:	20000018 	.word	0x20000018

08005ad4 <__sread>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	f000 f8fc 	bl	8005cd8 <_read_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	bfab      	itete	ge
 8005ae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ae8:	181b      	addge	r3, r3, r0
 8005aea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005aee:	bfac      	ite	ge
 8005af0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005af2:	81a3      	strhlt	r3, [r4, #12]
 8005af4:	bd10      	pop	{r4, pc}

08005af6 <__swrite>:
 8005af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afa:	461f      	mov	r7, r3
 8005afc:	898b      	ldrh	r3, [r1, #12]
 8005afe:	05db      	lsls	r3, r3, #23
 8005b00:	4605      	mov	r5, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	4616      	mov	r6, r2
 8005b06:	d505      	bpl.n	8005b14 <__swrite+0x1e>
 8005b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f000 f8d0 	bl	8005cb4 <_lseek_r>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	4632      	mov	r2, r6
 8005b22:	463b      	mov	r3, r7
 8005b24:	4628      	mov	r0, r5
 8005b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	f000 b8e7 	b.w	8005cfc <_write_r>

08005b2e <__sseek>:
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b36:	f000 f8bd 	bl	8005cb4 <_lseek_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	bf15      	itete	ne
 8005b40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b4a:	81a3      	strheq	r3, [r4, #12]
 8005b4c:	bf18      	it	ne
 8005b4e:	81a3      	strhne	r3, [r4, #12]
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <__sclose>:
 8005b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b56:	f000 b89d 	b.w	8005c94 <_close_r>

08005b5a <__swbuf_r>:
 8005b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5c:	460e      	mov	r6, r1
 8005b5e:	4614      	mov	r4, r2
 8005b60:	4605      	mov	r5, r0
 8005b62:	b118      	cbz	r0, 8005b6c <__swbuf_r+0x12>
 8005b64:	6a03      	ldr	r3, [r0, #32]
 8005b66:	b90b      	cbnz	r3, 8005b6c <__swbuf_r+0x12>
 8005b68:	f7ff feda 	bl	8005920 <__sinit>
 8005b6c:	69a3      	ldr	r3, [r4, #24]
 8005b6e:	60a3      	str	r3, [r4, #8]
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	071a      	lsls	r2, r3, #28
 8005b74:	d501      	bpl.n	8005b7a <__swbuf_r+0x20>
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	b943      	cbnz	r3, 8005b8c <__swbuf_r+0x32>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 f82b 	bl	8005bd8 <__swsetup_r>
 8005b82:	b118      	cbz	r0, 8005b8c <__swbuf_r+0x32>
 8005b84:	f04f 37ff 	mov.w	r7, #4294967295
 8005b88:	4638      	mov	r0, r7
 8005b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	6922      	ldr	r2, [r4, #16]
 8005b90:	1a98      	subs	r0, r3, r2
 8005b92:	6963      	ldr	r3, [r4, #20]
 8005b94:	b2f6      	uxtb	r6, r6
 8005b96:	4283      	cmp	r3, r0
 8005b98:	4637      	mov	r7, r6
 8005b9a:	dc05      	bgt.n	8005ba8 <__swbuf_r+0x4e>
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fe90 	bl	80068c4 <_fflush_r>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d1ed      	bne.n	8005b84 <__swbuf_r+0x2a>
 8005ba8:	68a3      	ldr	r3, [r4, #8]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	60a3      	str	r3, [r4, #8]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	701e      	strb	r6, [r3, #0]
 8005bb6:	6962      	ldr	r2, [r4, #20]
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d004      	beq.n	8005bc8 <__swbuf_r+0x6e>
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	07db      	lsls	r3, r3, #31
 8005bc2:	d5e1      	bpl.n	8005b88 <__swbuf_r+0x2e>
 8005bc4:	2e0a      	cmp	r6, #10
 8005bc6:	d1df      	bne.n	8005b88 <__swbuf_r+0x2e>
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f000 fe7a 	bl	80068c4 <_fflush_r>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d0d9      	beq.n	8005b88 <__swbuf_r+0x2e>
 8005bd4:	e7d6      	b.n	8005b84 <__swbuf_r+0x2a>
	...

08005bd8 <__swsetup_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4b29      	ldr	r3, [pc, #164]	@ (8005c80 <__swsetup_r+0xa8>)
 8005bdc:	4605      	mov	r5, r0
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	460c      	mov	r4, r1
 8005be2:	b118      	cbz	r0, 8005bec <__swsetup_r+0x14>
 8005be4:	6a03      	ldr	r3, [r0, #32]
 8005be6:	b90b      	cbnz	r3, 8005bec <__swsetup_r+0x14>
 8005be8:	f7ff fe9a 	bl	8005920 <__sinit>
 8005bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf0:	0719      	lsls	r1, r3, #28
 8005bf2:	d422      	bmi.n	8005c3a <__swsetup_r+0x62>
 8005bf4:	06da      	lsls	r2, r3, #27
 8005bf6:	d407      	bmi.n	8005c08 <__swsetup_r+0x30>
 8005bf8:	2209      	movs	r2, #9
 8005bfa:	602a      	str	r2, [r5, #0]
 8005bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	f04f 30ff 	mov.w	r0, #4294967295
 8005c06:	e033      	b.n	8005c70 <__swsetup_r+0x98>
 8005c08:	0758      	lsls	r0, r3, #29
 8005c0a:	d512      	bpl.n	8005c32 <__swsetup_r+0x5a>
 8005c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c0e:	b141      	cbz	r1, 8005c22 <__swsetup_r+0x4a>
 8005c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c14:	4299      	cmp	r1, r3
 8005c16:	d002      	beq.n	8005c1e <__swsetup_r+0x46>
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f000 f8af 	bl	8005d7c <_free_r>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	f043 0308 	orr.w	r3, r3, #8
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	6923      	ldr	r3, [r4, #16]
 8005c3c:	b94b      	cbnz	r3, 8005c52 <__swsetup_r+0x7a>
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c48:	d003      	beq.n	8005c52 <__swsetup_r+0x7a>
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f000 fe87 	bl	8006960 <__smakebuf_r>
 8005c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c56:	f013 0201 	ands.w	r2, r3, #1
 8005c5a:	d00a      	beq.n	8005c72 <__swsetup_r+0x9a>
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	60a2      	str	r2, [r4, #8]
 8005c60:	6962      	ldr	r2, [r4, #20]
 8005c62:	4252      	negs	r2, r2
 8005c64:	61a2      	str	r2, [r4, #24]
 8005c66:	6922      	ldr	r2, [r4, #16]
 8005c68:	b942      	cbnz	r2, 8005c7c <__swsetup_r+0xa4>
 8005c6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c6e:	d1c5      	bne.n	8005bfc <__swsetup_r+0x24>
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	0799      	lsls	r1, r3, #30
 8005c74:	bf58      	it	pl
 8005c76:	6962      	ldrpl	r2, [r4, #20]
 8005c78:	60a2      	str	r2, [r4, #8]
 8005c7a:	e7f4      	b.n	8005c66 <__swsetup_r+0x8e>
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	e7f7      	b.n	8005c70 <__swsetup_r+0x98>
 8005c80:	20000018 	.word	0x20000018

08005c84 <memset>:
 8005c84:	4402      	add	r2, r0
 8005c86:	4603      	mov	r3, r0
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d100      	bne.n	8005c8e <memset+0xa>
 8005c8c:	4770      	bx	lr
 8005c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c92:	e7f9      	b.n	8005c88 <memset+0x4>

08005c94 <_close_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d06      	ldr	r5, [pc, #24]	@ (8005cb0 <_close_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fc fb18 	bl	80022d4 <_close>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_close_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_close_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200002ac 	.word	0x200002ac

08005cb4 <_lseek_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d07      	ldr	r5, [pc, #28]	@ (8005cd4 <_lseek_r+0x20>)
 8005cb8:	4604      	mov	r4, r0
 8005cba:	4608      	mov	r0, r1
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	602a      	str	r2, [r5, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f7fc fb2d 	bl	8002322 <_lseek>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_lseek_r+0x1e>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_lseek_r+0x1e>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	200002ac 	.word	0x200002ac

08005cd8 <_read_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d07      	ldr	r5, [pc, #28]	@ (8005cf8 <_read_r+0x20>)
 8005cdc:	4604      	mov	r4, r0
 8005cde:	4608      	mov	r0, r1
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fc fabb 	bl	8002262 <_read>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_read_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_read_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	200002ac 	.word	0x200002ac

08005cfc <_write_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4d07      	ldr	r5, [pc, #28]	@ (8005d1c <_write_r+0x20>)
 8005d00:	4604      	mov	r4, r0
 8005d02:	4608      	mov	r0, r1
 8005d04:	4611      	mov	r1, r2
 8005d06:	2200      	movs	r2, #0
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f7fc fac6 	bl	800229c <_write>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_write_r+0x1e>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_write_r+0x1e>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	200002ac 	.word	0x200002ac

08005d20 <__errno>:
 8005d20:	4b01      	ldr	r3, [pc, #4]	@ (8005d28 <__errno+0x8>)
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20000018 	.word	0x20000018

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d64 <__libc_init_array+0x38>)
 8005d30:	4c0d      	ldr	r4, [pc, #52]	@ (8005d68 <__libc_init_array+0x3c>)
 8005d32:	1b64      	subs	r4, r4, r5
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	2600      	movs	r6, #0
 8005d38:	42a6      	cmp	r6, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d6c <__libc_init_array+0x40>)
 8005d3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d70 <__libc_init_array+0x44>)
 8005d40:	f000 feda 	bl	8006af8 <_init>
 8005d44:	1b64      	subs	r4, r4, r5
 8005d46:	10a4      	asrs	r4, r4, #2
 8005d48:	2600      	movs	r6, #0
 8005d4a:	42a6      	cmp	r6, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d54:	4798      	blx	r3
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5e:	4798      	blx	r3
 8005d60:	3601      	adds	r6, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	08006db0 	.word	0x08006db0
 8005d68:	08006db0 	.word	0x08006db0
 8005d6c:	08006db0 	.word	0x08006db0
 8005d70:	08006db4 	.word	0x08006db4

08005d74 <__retarget_lock_init_recursive>:
 8005d74:	4770      	bx	lr

08005d76 <__retarget_lock_acquire_recursive>:
 8005d76:	4770      	bx	lr

08005d78 <__retarget_lock_release_recursive>:
 8005d78:	4770      	bx	lr
	...

08005d7c <_free_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4605      	mov	r5, r0
 8005d80:	2900      	cmp	r1, #0
 8005d82:	d041      	beq.n	8005e08 <_free_r+0x8c>
 8005d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d88:	1f0c      	subs	r4, r1, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfb8      	it	lt
 8005d8e:	18e4      	addlt	r4, r4, r3
 8005d90:	f000 f8e0 	bl	8005f54 <__malloc_lock>
 8005d94:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <_free_r+0x90>)
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	b933      	cbnz	r3, 8005da8 <_free_r+0x2c>
 8005d9a:	6063      	str	r3, [r4, #4]
 8005d9c:	6014      	str	r4, [r2, #0]
 8005d9e:	4628      	mov	r0, r5
 8005da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da4:	f000 b8dc 	b.w	8005f60 <__malloc_unlock>
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	d908      	bls.n	8005dbe <_free_r+0x42>
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	1821      	adds	r1, r4, r0
 8005db0:	428b      	cmp	r3, r1
 8005db2:	bf01      	itttt	eq
 8005db4:	6819      	ldreq	r1, [r3, #0]
 8005db6:	685b      	ldreq	r3, [r3, #4]
 8005db8:	1809      	addeq	r1, r1, r0
 8005dba:	6021      	streq	r1, [r4, #0]
 8005dbc:	e7ed      	b.n	8005d9a <_free_r+0x1e>
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	b10b      	cbz	r3, 8005dc8 <_free_r+0x4c>
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d9fa      	bls.n	8005dbe <_free_r+0x42>
 8005dc8:	6811      	ldr	r1, [r2, #0]
 8005dca:	1850      	adds	r0, r2, r1
 8005dcc:	42a0      	cmp	r0, r4
 8005dce:	d10b      	bne.n	8005de8 <_free_r+0x6c>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	4401      	add	r1, r0
 8005dd4:	1850      	adds	r0, r2, r1
 8005dd6:	4283      	cmp	r3, r0
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	d1e0      	bne.n	8005d9e <_free_r+0x22>
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	6053      	str	r3, [r2, #4]
 8005de2:	4408      	add	r0, r1
 8005de4:	6010      	str	r0, [r2, #0]
 8005de6:	e7da      	b.n	8005d9e <_free_r+0x22>
 8005de8:	d902      	bls.n	8005df0 <_free_r+0x74>
 8005dea:	230c      	movs	r3, #12
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	e7d6      	b.n	8005d9e <_free_r+0x22>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	1821      	adds	r1, r4, r0
 8005df4:	428b      	cmp	r3, r1
 8005df6:	bf04      	itt	eq
 8005df8:	6819      	ldreq	r1, [r3, #0]
 8005dfa:	685b      	ldreq	r3, [r3, #4]
 8005dfc:	6063      	str	r3, [r4, #4]
 8005dfe:	bf04      	itt	eq
 8005e00:	1809      	addeq	r1, r1, r0
 8005e02:	6021      	streq	r1, [r4, #0]
 8005e04:	6054      	str	r4, [r2, #4]
 8005e06:	e7ca      	b.n	8005d9e <_free_r+0x22>
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200002b8 	.word	0x200002b8

08005e10 <sbrk_aligned>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	4e0f      	ldr	r6, [pc, #60]	@ (8005e50 <sbrk_aligned+0x40>)
 8005e14:	460c      	mov	r4, r1
 8005e16:	6831      	ldr	r1, [r6, #0]
 8005e18:	4605      	mov	r5, r0
 8005e1a:	b911      	cbnz	r1, 8005e22 <sbrk_aligned+0x12>
 8005e1c:	f000 fe18 	bl	8006a50 <_sbrk_r>
 8005e20:	6030      	str	r0, [r6, #0]
 8005e22:	4621      	mov	r1, r4
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 fe13 	bl	8006a50 <_sbrk_r>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	d103      	bne.n	8005e36 <sbrk_aligned+0x26>
 8005e2e:	f04f 34ff 	mov.w	r4, #4294967295
 8005e32:	4620      	mov	r0, r4
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
 8005e36:	1cc4      	adds	r4, r0, #3
 8005e38:	f024 0403 	bic.w	r4, r4, #3
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d0f8      	beq.n	8005e32 <sbrk_aligned+0x22>
 8005e40:	1a21      	subs	r1, r4, r0
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 fe04 	bl	8006a50 <_sbrk_r>
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d1f2      	bne.n	8005e32 <sbrk_aligned+0x22>
 8005e4c:	e7ef      	b.n	8005e2e <sbrk_aligned+0x1e>
 8005e4e:	bf00      	nop
 8005e50:	200002b4 	.word	0x200002b4

08005e54 <_malloc_r>:
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e58:	1ccd      	adds	r5, r1, #3
 8005e5a:	f025 0503 	bic.w	r5, r5, #3
 8005e5e:	3508      	adds	r5, #8
 8005e60:	2d0c      	cmp	r5, #12
 8005e62:	bf38      	it	cc
 8005e64:	250c      	movcc	r5, #12
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	4606      	mov	r6, r0
 8005e6a:	db01      	blt.n	8005e70 <_malloc_r+0x1c>
 8005e6c:	42a9      	cmp	r1, r5
 8005e6e:	d904      	bls.n	8005e7a <_malloc_r+0x26>
 8005e70:	230c      	movs	r3, #12
 8005e72:	6033      	str	r3, [r6, #0]
 8005e74:	2000      	movs	r0, #0
 8005e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f50 <_malloc_r+0xfc>
 8005e7e:	f000 f869 	bl	8005f54 <__malloc_lock>
 8005e82:	f8d8 3000 	ldr.w	r3, [r8]
 8005e86:	461c      	mov	r4, r3
 8005e88:	bb44      	cbnz	r4, 8005edc <_malloc_r+0x88>
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f7ff ffbf 	bl	8005e10 <sbrk_aligned>
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	4604      	mov	r4, r0
 8005e96:	d158      	bne.n	8005f4a <_malloc_r+0xf6>
 8005e98:	f8d8 4000 	ldr.w	r4, [r8]
 8005e9c:	4627      	mov	r7, r4
 8005e9e:	2f00      	cmp	r7, #0
 8005ea0:	d143      	bne.n	8005f2a <_malloc_r+0xd6>
 8005ea2:	2c00      	cmp	r4, #0
 8005ea4:	d04b      	beq.n	8005f3e <_malloc_r+0xea>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	4630      	mov	r0, r6
 8005eac:	eb04 0903 	add.w	r9, r4, r3
 8005eb0:	f000 fdce 	bl	8006a50 <_sbrk_r>
 8005eb4:	4581      	cmp	r9, r0
 8005eb6:	d142      	bne.n	8005f3e <_malloc_r+0xea>
 8005eb8:	6821      	ldr	r1, [r4, #0]
 8005eba:	1a6d      	subs	r5, r5, r1
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f7ff ffa6 	bl	8005e10 <sbrk_aligned>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d03a      	beq.n	8005f3e <_malloc_r+0xea>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	442b      	add	r3, r5
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	f8d8 3000 	ldr.w	r3, [r8]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	bb62      	cbnz	r2, 8005f30 <_malloc_r+0xdc>
 8005ed6:	f8c8 7000 	str.w	r7, [r8]
 8005eda:	e00f      	b.n	8005efc <_malloc_r+0xa8>
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	1b52      	subs	r2, r2, r5
 8005ee0:	d420      	bmi.n	8005f24 <_malloc_r+0xd0>
 8005ee2:	2a0b      	cmp	r2, #11
 8005ee4:	d917      	bls.n	8005f16 <_malloc_r+0xc2>
 8005ee6:	1961      	adds	r1, r4, r5
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	6025      	str	r5, [r4, #0]
 8005eec:	bf18      	it	ne
 8005eee:	6059      	strne	r1, [r3, #4]
 8005ef0:	6863      	ldr	r3, [r4, #4]
 8005ef2:	bf08      	it	eq
 8005ef4:	f8c8 1000 	streq.w	r1, [r8]
 8005ef8:	5162      	str	r2, [r4, r5]
 8005efa:	604b      	str	r3, [r1, #4]
 8005efc:	4630      	mov	r0, r6
 8005efe:	f000 f82f 	bl	8005f60 <__malloc_unlock>
 8005f02:	f104 000b 	add.w	r0, r4, #11
 8005f06:	1d23      	adds	r3, r4, #4
 8005f08:	f020 0007 	bic.w	r0, r0, #7
 8005f0c:	1ac2      	subs	r2, r0, r3
 8005f0e:	bf1c      	itt	ne
 8005f10:	1a1b      	subne	r3, r3, r0
 8005f12:	50a3      	strne	r3, [r4, r2]
 8005f14:	e7af      	b.n	8005e76 <_malloc_r+0x22>
 8005f16:	6862      	ldr	r2, [r4, #4]
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	bf0c      	ite	eq
 8005f1c:	f8c8 2000 	streq.w	r2, [r8]
 8005f20:	605a      	strne	r2, [r3, #4]
 8005f22:	e7eb      	b.n	8005efc <_malloc_r+0xa8>
 8005f24:	4623      	mov	r3, r4
 8005f26:	6864      	ldr	r4, [r4, #4]
 8005f28:	e7ae      	b.n	8005e88 <_malloc_r+0x34>
 8005f2a:	463c      	mov	r4, r7
 8005f2c:	687f      	ldr	r7, [r7, #4]
 8005f2e:	e7b6      	b.n	8005e9e <_malloc_r+0x4a>
 8005f30:	461a      	mov	r2, r3
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	d1fb      	bne.n	8005f30 <_malloc_r+0xdc>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	6053      	str	r3, [r2, #4]
 8005f3c:	e7de      	b.n	8005efc <_malloc_r+0xa8>
 8005f3e:	230c      	movs	r3, #12
 8005f40:	6033      	str	r3, [r6, #0]
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 f80c 	bl	8005f60 <__malloc_unlock>
 8005f48:	e794      	b.n	8005e74 <_malloc_r+0x20>
 8005f4a:	6005      	str	r5, [r0, #0]
 8005f4c:	e7d6      	b.n	8005efc <_malloc_r+0xa8>
 8005f4e:	bf00      	nop
 8005f50:	200002b8 	.word	0x200002b8

08005f54 <__malloc_lock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	@ (8005f5c <__malloc_lock+0x8>)
 8005f56:	f7ff bf0e 	b.w	8005d76 <__retarget_lock_acquire_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	200002b0 	.word	0x200002b0

08005f60 <__malloc_unlock>:
 8005f60:	4801      	ldr	r0, [pc, #4]	@ (8005f68 <__malloc_unlock+0x8>)
 8005f62:	f7ff bf09 	b.w	8005d78 <__retarget_lock_release_recursive>
 8005f66:	bf00      	nop
 8005f68:	200002b0 	.word	0x200002b0

08005f6c <__ssputs_r>:
 8005f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	688e      	ldr	r6, [r1, #8]
 8005f72:	461f      	mov	r7, r3
 8005f74:	42be      	cmp	r6, r7
 8005f76:	680b      	ldr	r3, [r1, #0]
 8005f78:	4682      	mov	sl, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4690      	mov	r8, r2
 8005f7e:	d82d      	bhi.n	8005fdc <__ssputs_r+0x70>
 8005f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f88:	d026      	beq.n	8005fd8 <__ssputs_r+0x6c>
 8005f8a:	6965      	ldr	r5, [r4, #20]
 8005f8c:	6909      	ldr	r1, [r1, #16]
 8005f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f92:	eba3 0901 	sub.w	r9, r3, r1
 8005f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f9a:	1c7b      	adds	r3, r7, #1
 8005f9c:	444b      	add	r3, r9
 8005f9e:	106d      	asrs	r5, r5, #1
 8005fa0:	429d      	cmp	r5, r3
 8005fa2:	bf38      	it	cc
 8005fa4:	461d      	movcc	r5, r3
 8005fa6:	0553      	lsls	r3, r2, #21
 8005fa8:	d527      	bpl.n	8005ffa <__ssputs_r+0x8e>
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7ff ff52 	bl	8005e54 <_malloc_r>
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	b360      	cbz	r0, 800600e <__ssputs_r+0xa2>
 8005fb4:	6921      	ldr	r1, [r4, #16]
 8005fb6:	464a      	mov	r2, r9
 8005fb8:	f000 fd5a 	bl	8006a70 <memcpy>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc6:	81a3      	strh	r3, [r4, #12]
 8005fc8:	6126      	str	r6, [r4, #16]
 8005fca:	6165      	str	r5, [r4, #20]
 8005fcc:	444e      	add	r6, r9
 8005fce:	eba5 0509 	sub.w	r5, r5, r9
 8005fd2:	6026      	str	r6, [r4, #0]
 8005fd4:	60a5      	str	r5, [r4, #8]
 8005fd6:	463e      	mov	r6, r7
 8005fd8:	42be      	cmp	r6, r7
 8005fda:	d900      	bls.n	8005fde <__ssputs_r+0x72>
 8005fdc:	463e      	mov	r6, r7
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4641      	mov	r1, r8
 8005fe4:	f000 fcf8 	bl	80069d8 <memmove>
 8005fe8:	68a3      	ldr	r3, [r4, #8]
 8005fea:	1b9b      	subs	r3, r3, r6
 8005fec:	60a3      	str	r3, [r4, #8]
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	4433      	add	r3, r6
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffa:	462a      	mov	r2, r5
 8005ffc:	f000 fd46 	bl	8006a8c <_realloc_r>
 8006000:	4606      	mov	r6, r0
 8006002:	2800      	cmp	r0, #0
 8006004:	d1e0      	bne.n	8005fc8 <__ssputs_r+0x5c>
 8006006:	6921      	ldr	r1, [r4, #16]
 8006008:	4650      	mov	r0, sl
 800600a:	f7ff feb7 	bl	8005d7c <_free_r>
 800600e:	230c      	movs	r3, #12
 8006010:	f8ca 3000 	str.w	r3, [sl]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	e7e9      	b.n	8005ff6 <__ssputs_r+0x8a>
	...

08006024 <_svfiprintf_r>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	4698      	mov	r8, r3
 800602a:	898b      	ldrh	r3, [r1, #12]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	b09d      	sub	sp, #116	@ 0x74
 8006030:	4607      	mov	r7, r0
 8006032:	460d      	mov	r5, r1
 8006034:	4614      	mov	r4, r2
 8006036:	d510      	bpl.n	800605a <_svfiprintf_r+0x36>
 8006038:	690b      	ldr	r3, [r1, #16]
 800603a:	b973      	cbnz	r3, 800605a <_svfiprintf_r+0x36>
 800603c:	2140      	movs	r1, #64	@ 0x40
 800603e:	f7ff ff09 	bl	8005e54 <_malloc_r>
 8006042:	6028      	str	r0, [r5, #0]
 8006044:	6128      	str	r0, [r5, #16]
 8006046:	b930      	cbnz	r0, 8006056 <_svfiprintf_r+0x32>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	b01d      	add	sp, #116	@ 0x74
 8006052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006056:	2340      	movs	r3, #64	@ 0x40
 8006058:	616b      	str	r3, [r5, #20]
 800605a:	2300      	movs	r3, #0
 800605c:	9309      	str	r3, [sp, #36]	@ 0x24
 800605e:	2320      	movs	r3, #32
 8006060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006064:	f8cd 800c 	str.w	r8, [sp, #12]
 8006068:	2330      	movs	r3, #48	@ 0x30
 800606a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006208 <_svfiprintf_r+0x1e4>
 800606e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006072:	f04f 0901 	mov.w	r9, #1
 8006076:	4623      	mov	r3, r4
 8006078:	469a      	mov	sl, r3
 800607a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800607e:	b10a      	cbz	r2, 8006084 <_svfiprintf_r+0x60>
 8006080:	2a25      	cmp	r2, #37	@ 0x25
 8006082:	d1f9      	bne.n	8006078 <_svfiprintf_r+0x54>
 8006084:	ebba 0b04 	subs.w	fp, sl, r4
 8006088:	d00b      	beq.n	80060a2 <_svfiprintf_r+0x7e>
 800608a:	465b      	mov	r3, fp
 800608c:	4622      	mov	r2, r4
 800608e:	4629      	mov	r1, r5
 8006090:	4638      	mov	r0, r7
 8006092:	f7ff ff6b 	bl	8005f6c <__ssputs_r>
 8006096:	3001      	adds	r0, #1
 8006098:	f000 80a7 	beq.w	80061ea <_svfiprintf_r+0x1c6>
 800609c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800609e:	445a      	add	r2, fp
 80060a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80060a2:	f89a 3000 	ldrb.w	r3, [sl]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 809f 	beq.w	80061ea <_svfiprintf_r+0x1c6>
 80060ac:	2300      	movs	r3, #0
 80060ae:	f04f 32ff 	mov.w	r2, #4294967295
 80060b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060b6:	f10a 0a01 	add.w	sl, sl, #1
 80060ba:	9304      	str	r3, [sp, #16]
 80060bc:	9307      	str	r3, [sp, #28]
 80060be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80060c4:	4654      	mov	r4, sl
 80060c6:	2205      	movs	r2, #5
 80060c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060cc:	484e      	ldr	r0, [pc, #312]	@ (8006208 <_svfiprintf_r+0x1e4>)
 80060ce:	f7fa f887 	bl	80001e0 <memchr>
 80060d2:	9a04      	ldr	r2, [sp, #16]
 80060d4:	b9d8      	cbnz	r0, 800610e <_svfiprintf_r+0xea>
 80060d6:	06d0      	lsls	r0, r2, #27
 80060d8:	bf44      	itt	mi
 80060da:	2320      	movmi	r3, #32
 80060dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060e0:	0711      	lsls	r1, r2, #28
 80060e2:	bf44      	itt	mi
 80060e4:	232b      	movmi	r3, #43	@ 0x2b
 80060e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060ea:	f89a 3000 	ldrb.w	r3, [sl]
 80060ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80060f0:	d015      	beq.n	800611e <_svfiprintf_r+0xfa>
 80060f2:	9a07      	ldr	r2, [sp, #28]
 80060f4:	4654      	mov	r4, sl
 80060f6:	2000      	movs	r0, #0
 80060f8:	f04f 0c0a 	mov.w	ip, #10
 80060fc:	4621      	mov	r1, r4
 80060fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006102:	3b30      	subs	r3, #48	@ 0x30
 8006104:	2b09      	cmp	r3, #9
 8006106:	d94b      	bls.n	80061a0 <_svfiprintf_r+0x17c>
 8006108:	b1b0      	cbz	r0, 8006138 <_svfiprintf_r+0x114>
 800610a:	9207      	str	r2, [sp, #28]
 800610c:	e014      	b.n	8006138 <_svfiprintf_r+0x114>
 800610e:	eba0 0308 	sub.w	r3, r0, r8
 8006112:	fa09 f303 	lsl.w	r3, r9, r3
 8006116:	4313      	orrs	r3, r2
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	46a2      	mov	sl, r4
 800611c:	e7d2      	b.n	80060c4 <_svfiprintf_r+0xa0>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	1d19      	adds	r1, r3, #4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	9103      	str	r1, [sp, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfbb      	ittet	lt
 800612a:	425b      	neglt	r3, r3
 800612c:	f042 0202 	orrlt.w	r2, r2, #2
 8006130:	9307      	strge	r3, [sp, #28]
 8006132:	9307      	strlt	r3, [sp, #28]
 8006134:	bfb8      	it	lt
 8006136:	9204      	strlt	r2, [sp, #16]
 8006138:	7823      	ldrb	r3, [r4, #0]
 800613a:	2b2e      	cmp	r3, #46	@ 0x2e
 800613c:	d10a      	bne.n	8006154 <_svfiprintf_r+0x130>
 800613e:	7863      	ldrb	r3, [r4, #1]
 8006140:	2b2a      	cmp	r3, #42	@ 0x2a
 8006142:	d132      	bne.n	80061aa <_svfiprintf_r+0x186>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	9203      	str	r2, [sp, #12]
 800614c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006150:	3402      	adds	r4, #2
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006218 <_svfiprintf_r+0x1f4>
 8006158:	7821      	ldrb	r1, [r4, #0]
 800615a:	2203      	movs	r2, #3
 800615c:	4650      	mov	r0, sl
 800615e:	f7fa f83f 	bl	80001e0 <memchr>
 8006162:	b138      	cbz	r0, 8006174 <_svfiprintf_r+0x150>
 8006164:	9b04      	ldr	r3, [sp, #16]
 8006166:	eba0 000a 	sub.w	r0, r0, sl
 800616a:	2240      	movs	r2, #64	@ 0x40
 800616c:	4082      	lsls	r2, r0
 800616e:	4313      	orrs	r3, r2
 8006170:	3401      	adds	r4, #1
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006178:	4824      	ldr	r0, [pc, #144]	@ (800620c <_svfiprintf_r+0x1e8>)
 800617a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800617e:	2206      	movs	r2, #6
 8006180:	f7fa f82e 	bl	80001e0 <memchr>
 8006184:	2800      	cmp	r0, #0
 8006186:	d036      	beq.n	80061f6 <_svfiprintf_r+0x1d2>
 8006188:	4b21      	ldr	r3, [pc, #132]	@ (8006210 <_svfiprintf_r+0x1ec>)
 800618a:	bb1b      	cbnz	r3, 80061d4 <_svfiprintf_r+0x1b0>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	3307      	adds	r3, #7
 8006190:	f023 0307 	bic.w	r3, r3, #7
 8006194:	3308      	adds	r3, #8
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800619a:	4433      	add	r3, r6
 800619c:	9309      	str	r3, [sp, #36]	@ 0x24
 800619e:	e76a      	b.n	8006076 <_svfiprintf_r+0x52>
 80061a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061a4:	460c      	mov	r4, r1
 80061a6:	2001      	movs	r0, #1
 80061a8:	e7a8      	b.n	80060fc <_svfiprintf_r+0xd8>
 80061aa:	2300      	movs	r3, #0
 80061ac:	3401      	adds	r4, #1
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	4619      	mov	r1, r3
 80061b2:	f04f 0c0a 	mov.w	ip, #10
 80061b6:	4620      	mov	r0, r4
 80061b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061bc:	3a30      	subs	r2, #48	@ 0x30
 80061be:	2a09      	cmp	r2, #9
 80061c0:	d903      	bls.n	80061ca <_svfiprintf_r+0x1a6>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0c6      	beq.n	8006154 <_svfiprintf_r+0x130>
 80061c6:	9105      	str	r1, [sp, #20]
 80061c8:	e7c4      	b.n	8006154 <_svfiprintf_r+0x130>
 80061ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ce:	4604      	mov	r4, r0
 80061d0:	2301      	movs	r3, #1
 80061d2:	e7f0      	b.n	80061b6 <_svfiprintf_r+0x192>
 80061d4:	ab03      	add	r3, sp, #12
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	462a      	mov	r2, r5
 80061da:	4b0e      	ldr	r3, [pc, #56]	@ (8006214 <_svfiprintf_r+0x1f0>)
 80061dc:	a904      	add	r1, sp, #16
 80061de:	4638      	mov	r0, r7
 80061e0:	f3af 8000 	nop.w
 80061e4:	1c42      	adds	r2, r0, #1
 80061e6:	4606      	mov	r6, r0
 80061e8:	d1d6      	bne.n	8006198 <_svfiprintf_r+0x174>
 80061ea:	89ab      	ldrh	r3, [r5, #12]
 80061ec:	065b      	lsls	r3, r3, #25
 80061ee:	f53f af2d 	bmi.w	800604c <_svfiprintf_r+0x28>
 80061f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061f4:	e72c      	b.n	8006050 <_svfiprintf_r+0x2c>
 80061f6:	ab03      	add	r3, sp, #12
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	462a      	mov	r2, r5
 80061fc:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <_svfiprintf_r+0x1f0>)
 80061fe:	a904      	add	r1, sp, #16
 8006200:	4638      	mov	r0, r7
 8006202:	f000 f9bb 	bl	800657c <_printf_i>
 8006206:	e7ed      	b.n	80061e4 <_svfiprintf_r+0x1c0>
 8006208:	08006d74 	.word	0x08006d74
 800620c:	08006d7e 	.word	0x08006d7e
 8006210:	00000000 	.word	0x00000000
 8006214:	08005f6d 	.word	0x08005f6d
 8006218:	08006d7a 	.word	0x08006d7a

0800621c <__sfputc_r>:
 800621c:	6893      	ldr	r3, [r2, #8]
 800621e:	3b01      	subs	r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	b410      	push	{r4}
 8006224:	6093      	str	r3, [r2, #8]
 8006226:	da08      	bge.n	800623a <__sfputc_r+0x1e>
 8006228:	6994      	ldr	r4, [r2, #24]
 800622a:	42a3      	cmp	r3, r4
 800622c:	db01      	blt.n	8006232 <__sfputc_r+0x16>
 800622e:	290a      	cmp	r1, #10
 8006230:	d103      	bne.n	800623a <__sfputc_r+0x1e>
 8006232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006236:	f7ff bc90 	b.w	8005b5a <__swbuf_r>
 800623a:	6813      	ldr	r3, [r2, #0]
 800623c:	1c58      	adds	r0, r3, #1
 800623e:	6010      	str	r0, [r2, #0]
 8006240:	7019      	strb	r1, [r3, #0]
 8006242:	4608      	mov	r0, r1
 8006244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006248:	4770      	bx	lr

0800624a <__sfputs_r>:
 800624a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624c:	4606      	mov	r6, r0
 800624e:	460f      	mov	r7, r1
 8006250:	4614      	mov	r4, r2
 8006252:	18d5      	adds	r5, r2, r3
 8006254:	42ac      	cmp	r4, r5
 8006256:	d101      	bne.n	800625c <__sfputs_r+0x12>
 8006258:	2000      	movs	r0, #0
 800625a:	e007      	b.n	800626c <__sfputs_r+0x22>
 800625c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006260:	463a      	mov	r2, r7
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff ffda 	bl	800621c <__sfputc_r>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d1f3      	bne.n	8006254 <__sfputs_r+0xa>
 800626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006270 <_vfiprintf_r>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	460d      	mov	r5, r1
 8006276:	b09d      	sub	sp, #116	@ 0x74
 8006278:	4614      	mov	r4, r2
 800627a:	4698      	mov	r8, r3
 800627c:	4606      	mov	r6, r0
 800627e:	b118      	cbz	r0, 8006288 <_vfiprintf_r+0x18>
 8006280:	6a03      	ldr	r3, [r0, #32]
 8006282:	b90b      	cbnz	r3, 8006288 <_vfiprintf_r+0x18>
 8006284:	f7ff fb4c 	bl	8005920 <__sinit>
 8006288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800628a:	07d9      	lsls	r1, r3, #31
 800628c:	d405      	bmi.n	800629a <_vfiprintf_r+0x2a>
 800628e:	89ab      	ldrh	r3, [r5, #12]
 8006290:	059a      	lsls	r2, r3, #22
 8006292:	d402      	bmi.n	800629a <_vfiprintf_r+0x2a>
 8006294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006296:	f7ff fd6e 	bl	8005d76 <__retarget_lock_acquire_recursive>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	071b      	lsls	r3, r3, #28
 800629e:	d501      	bpl.n	80062a4 <_vfiprintf_r+0x34>
 80062a0:	692b      	ldr	r3, [r5, #16]
 80062a2:	b99b      	cbnz	r3, 80062cc <_vfiprintf_r+0x5c>
 80062a4:	4629      	mov	r1, r5
 80062a6:	4630      	mov	r0, r6
 80062a8:	f7ff fc96 	bl	8005bd8 <__swsetup_r>
 80062ac:	b170      	cbz	r0, 80062cc <_vfiprintf_r+0x5c>
 80062ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062b0:	07dc      	lsls	r4, r3, #31
 80062b2:	d504      	bpl.n	80062be <_vfiprintf_r+0x4e>
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	b01d      	add	sp, #116	@ 0x74
 80062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	0598      	lsls	r0, r3, #22
 80062c2:	d4f7      	bmi.n	80062b4 <_vfiprintf_r+0x44>
 80062c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062c6:	f7ff fd57 	bl	8005d78 <__retarget_lock_release_recursive>
 80062ca:	e7f3      	b.n	80062b4 <_vfiprintf_r+0x44>
 80062cc:	2300      	movs	r3, #0
 80062ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d0:	2320      	movs	r3, #32
 80062d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80062da:	2330      	movs	r3, #48	@ 0x30
 80062dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800648c <_vfiprintf_r+0x21c>
 80062e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062e4:	f04f 0901 	mov.w	r9, #1
 80062e8:	4623      	mov	r3, r4
 80062ea:	469a      	mov	sl, r3
 80062ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062f0:	b10a      	cbz	r2, 80062f6 <_vfiprintf_r+0x86>
 80062f2:	2a25      	cmp	r2, #37	@ 0x25
 80062f4:	d1f9      	bne.n	80062ea <_vfiprintf_r+0x7a>
 80062f6:	ebba 0b04 	subs.w	fp, sl, r4
 80062fa:	d00b      	beq.n	8006314 <_vfiprintf_r+0xa4>
 80062fc:	465b      	mov	r3, fp
 80062fe:	4622      	mov	r2, r4
 8006300:	4629      	mov	r1, r5
 8006302:	4630      	mov	r0, r6
 8006304:	f7ff ffa1 	bl	800624a <__sfputs_r>
 8006308:	3001      	adds	r0, #1
 800630a:	f000 80a7 	beq.w	800645c <_vfiprintf_r+0x1ec>
 800630e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006310:	445a      	add	r2, fp
 8006312:	9209      	str	r2, [sp, #36]	@ 0x24
 8006314:	f89a 3000 	ldrb.w	r3, [sl]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 809f 	beq.w	800645c <_vfiprintf_r+0x1ec>
 800631e:	2300      	movs	r3, #0
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006328:	f10a 0a01 	add.w	sl, sl, #1
 800632c:	9304      	str	r3, [sp, #16]
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006334:	931a      	str	r3, [sp, #104]	@ 0x68
 8006336:	4654      	mov	r4, sl
 8006338:	2205      	movs	r2, #5
 800633a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800633e:	4853      	ldr	r0, [pc, #332]	@ (800648c <_vfiprintf_r+0x21c>)
 8006340:	f7f9 ff4e 	bl	80001e0 <memchr>
 8006344:	9a04      	ldr	r2, [sp, #16]
 8006346:	b9d8      	cbnz	r0, 8006380 <_vfiprintf_r+0x110>
 8006348:	06d1      	lsls	r1, r2, #27
 800634a:	bf44      	itt	mi
 800634c:	2320      	movmi	r3, #32
 800634e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006352:	0713      	lsls	r3, r2, #28
 8006354:	bf44      	itt	mi
 8006356:	232b      	movmi	r3, #43	@ 0x2b
 8006358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800635c:	f89a 3000 	ldrb.w	r3, [sl]
 8006360:	2b2a      	cmp	r3, #42	@ 0x2a
 8006362:	d015      	beq.n	8006390 <_vfiprintf_r+0x120>
 8006364:	9a07      	ldr	r2, [sp, #28]
 8006366:	4654      	mov	r4, sl
 8006368:	2000      	movs	r0, #0
 800636a:	f04f 0c0a 	mov.w	ip, #10
 800636e:	4621      	mov	r1, r4
 8006370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006374:	3b30      	subs	r3, #48	@ 0x30
 8006376:	2b09      	cmp	r3, #9
 8006378:	d94b      	bls.n	8006412 <_vfiprintf_r+0x1a2>
 800637a:	b1b0      	cbz	r0, 80063aa <_vfiprintf_r+0x13a>
 800637c:	9207      	str	r2, [sp, #28]
 800637e:	e014      	b.n	80063aa <_vfiprintf_r+0x13a>
 8006380:	eba0 0308 	sub.w	r3, r0, r8
 8006384:	fa09 f303 	lsl.w	r3, r9, r3
 8006388:	4313      	orrs	r3, r2
 800638a:	9304      	str	r3, [sp, #16]
 800638c:	46a2      	mov	sl, r4
 800638e:	e7d2      	b.n	8006336 <_vfiprintf_r+0xc6>
 8006390:	9b03      	ldr	r3, [sp, #12]
 8006392:	1d19      	adds	r1, r3, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	9103      	str	r1, [sp, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfbb      	ittet	lt
 800639c:	425b      	neglt	r3, r3
 800639e:	f042 0202 	orrlt.w	r2, r2, #2
 80063a2:	9307      	strge	r3, [sp, #28]
 80063a4:	9307      	strlt	r3, [sp, #28]
 80063a6:	bfb8      	it	lt
 80063a8:	9204      	strlt	r2, [sp, #16]
 80063aa:	7823      	ldrb	r3, [r4, #0]
 80063ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80063ae:	d10a      	bne.n	80063c6 <_vfiprintf_r+0x156>
 80063b0:	7863      	ldrb	r3, [r4, #1]
 80063b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063b4:	d132      	bne.n	800641c <_vfiprintf_r+0x1ac>
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	1d1a      	adds	r2, r3, #4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	9203      	str	r2, [sp, #12]
 80063be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063c2:	3402      	adds	r4, #2
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800649c <_vfiprintf_r+0x22c>
 80063ca:	7821      	ldrb	r1, [r4, #0]
 80063cc:	2203      	movs	r2, #3
 80063ce:	4650      	mov	r0, sl
 80063d0:	f7f9 ff06 	bl	80001e0 <memchr>
 80063d4:	b138      	cbz	r0, 80063e6 <_vfiprintf_r+0x176>
 80063d6:	9b04      	ldr	r3, [sp, #16]
 80063d8:	eba0 000a 	sub.w	r0, r0, sl
 80063dc:	2240      	movs	r2, #64	@ 0x40
 80063de:	4082      	lsls	r2, r0
 80063e0:	4313      	orrs	r3, r2
 80063e2:	3401      	adds	r4, #1
 80063e4:	9304      	str	r3, [sp, #16]
 80063e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ea:	4829      	ldr	r0, [pc, #164]	@ (8006490 <_vfiprintf_r+0x220>)
 80063ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063f0:	2206      	movs	r2, #6
 80063f2:	f7f9 fef5 	bl	80001e0 <memchr>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d03f      	beq.n	800647a <_vfiprintf_r+0x20a>
 80063fa:	4b26      	ldr	r3, [pc, #152]	@ (8006494 <_vfiprintf_r+0x224>)
 80063fc:	bb1b      	cbnz	r3, 8006446 <_vfiprintf_r+0x1d6>
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	3307      	adds	r3, #7
 8006402:	f023 0307 	bic.w	r3, r3, #7
 8006406:	3308      	adds	r3, #8
 8006408:	9303      	str	r3, [sp, #12]
 800640a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640c:	443b      	add	r3, r7
 800640e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006410:	e76a      	b.n	80062e8 <_vfiprintf_r+0x78>
 8006412:	fb0c 3202 	mla	r2, ip, r2, r3
 8006416:	460c      	mov	r4, r1
 8006418:	2001      	movs	r0, #1
 800641a:	e7a8      	b.n	800636e <_vfiprintf_r+0xfe>
 800641c:	2300      	movs	r3, #0
 800641e:	3401      	adds	r4, #1
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	4619      	mov	r1, r3
 8006424:	f04f 0c0a 	mov.w	ip, #10
 8006428:	4620      	mov	r0, r4
 800642a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800642e:	3a30      	subs	r2, #48	@ 0x30
 8006430:	2a09      	cmp	r2, #9
 8006432:	d903      	bls.n	800643c <_vfiprintf_r+0x1cc>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0c6      	beq.n	80063c6 <_vfiprintf_r+0x156>
 8006438:	9105      	str	r1, [sp, #20]
 800643a:	e7c4      	b.n	80063c6 <_vfiprintf_r+0x156>
 800643c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006440:	4604      	mov	r4, r0
 8006442:	2301      	movs	r3, #1
 8006444:	e7f0      	b.n	8006428 <_vfiprintf_r+0x1b8>
 8006446:	ab03      	add	r3, sp, #12
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	462a      	mov	r2, r5
 800644c:	4b12      	ldr	r3, [pc, #72]	@ (8006498 <_vfiprintf_r+0x228>)
 800644e:	a904      	add	r1, sp, #16
 8006450:	4630      	mov	r0, r6
 8006452:	f3af 8000 	nop.w
 8006456:	4607      	mov	r7, r0
 8006458:	1c78      	adds	r0, r7, #1
 800645a:	d1d6      	bne.n	800640a <_vfiprintf_r+0x19a>
 800645c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800645e:	07d9      	lsls	r1, r3, #31
 8006460:	d405      	bmi.n	800646e <_vfiprintf_r+0x1fe>
 8006462:	89ab      	ldrh	r3, [r5, #12]
 8006464:	059a      	lsls	r2, r3, #22
 8006466:	d402      	bmi.n	800646e <_vfiprintf_r+0x1fe>
 8006468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800646a:	f7ff fc85 	bl	8005d78 <__retarget_lock_release_recursive>
 800646e:	89ab      	ldrh	r3, [r5, #12]
 8006470:	065b      	lsls	r3, r3, #25
 8006472:	f53f af1f 	bmi.w	80062b4 <_vfiprintf_r+0x44>
 8006476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006478:	e71e      	b.n	80062b8 <_vfiprintf_r+0x48>
 800647a:	ab03      	add	r3, sp, #12
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	462a      	mov	r2, r5
 8006480:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <_vfiprintf_r+0x228>)
 8006482:	a904      	add	r1, sp, #16
 8006484:	4630      	mov	r0, r6
 8006486:	f000 f879 	bl	800657c <_printf_i>
 800648a:	e7e4      	b.n	8006456 <_vfiprintf_r+0x1e6>
 800648c:	08006d74 	.word	0x08006d74
 8006490:	08006d7e 	.word	0x08006d7e
 8006494:	00000000 	.word	0x00000000
 8006498:	0800624b 	.word	0x0800624b
 800649c:	08006d7a 	.word	0x08006d7a

080064a0 <_printf_common>:
 80064a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	4616      	mov	r6, r2
 80064a6:	4698      	mov	r8, r3
 80064a8:	688a      	ldr	r2, [r1, #8]
 80064aa:	690b      	ldr	r3, [r1, #16]
 80064ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bfb8      	it	lt
 80064b4:	4613      	movlt	r3, r2
 80064b6:	6033      	str	r3, [r6, #0]
 80064b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064bc:	4607      	mov	r7, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	b10a      	cbz	r2, 80064c6 <_printf_common+0x26>
 80064c2:	3301      	adds	r3, #1
 80064c4:	6033      	str	r3, [r6, #0]
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	0699      	lsls	r1, r3, #26
 80064ca:	bf42      	ittt	mi
 80064cc:	6833      	ldrmi	r3, [r6, #0]
 80064ce:	3302      	addmi	r3, #2
 80064d0:	6033      	strmi	r3, [r6, #0]
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	f015 0506 	ands.w	r5, r5, #6
 80064d8:	d106      	bne.n	80064e8 <_printf_common+0x48>
 80064da:	f104 0a19 	add.w	sl, r4, #25
 80064de:	68e3      	ldr	r3, [r4, #12]
 80064e0:	6832      	ldr	r2, [r6, #0]
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	42ab      	cmp	r3, r5
 80064e6:	dc26      	bgt.n	8006536 <_printf_common+0x96>
 80064e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	3b00      	subs	r3, #0
 80064f0:	bf18      	it	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	0692      	lsls	r2, r2, #26
 80064f6:	d42b      	bmi.n	8006550 <_printf_common+0xb0>
 80064f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064fc:	4641      	mov	r1, r8
 80064fe:	4638      	mov	r0, r7
 8006500:	47c8      	blx	r9
 8006502:	3001      	adds	r0, #1
 8006504:	d01e      	beq.n	8006544 <_printf_common+0xa4>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	6922      	ldr	r2, [r4, #16]
 800650a:	f003 0306 	and.w	r3, r3, #6
 800650e:	2b04      	cmp	r3, #4
 8006510:	bf02      	ittt	eq
 8006512:	68e5      	ldreq	r5, [r4, #12]
 8006514:	6833      	ldreq	r3, [r6, #0]
 8006516:	1aed      	subeq	r5, r5, r3
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	bf0c      	ite	eq
 800651c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006520:	2500      	movne	r5, #0
 8006522:	4293      	cmp	r3, r2
 8006524:	bfc4      	itt	gt
 8006526:	1a9b      	subgt	r3, r3, r2
 8006528:	18ed      	addgt	r5, r5, r3
 800652a:	2600      	movs	r6, #0
 800652c:	341a      	adds	r4, #26
 800652e:	42b5      	cmp	r5, r6
 8006530:	d11a      	bne.n	8006568 <_printf_common+0xc8>
 8006532:	2000      	movs	r0, #0
 8006534:	e008      	b.n	8006548 <_printf_common+0xa8>
 8006536:	2301      	movs	r3, #1
 8006538:	4652      	mov	r2, sl
 800653a:	4641      	mov	r1, r8
 800653c:	4638      	mov	r0, r7
 800653e:	47c8      	blx	r9
 8006540:	3001      	adds	r0, #1
 8006542:	d103      	bne.n	800654c <_printf_common+0xac>
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654c:	3501      	adds	r5, #1
 800654e:	e7c6      	b.n	80064de <_printf_common+0x3e>
 8006550:	18e1      	adds	r1, r4, r3
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	2030      	movs	r0, #48	@ 0x30
 8006556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800655a:	4422      	add	r2, r4
 800655c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006564:	3302      	adds	r3, #2
 8006566:	e7c7      	b.n	80064f8 <_printf_common+0x58>
 8006568:	2301      	movs	r3, #1
 800656a:	4622      	mov	r2, r4
 800656c:	4641      	mov	r1, r8
 800656e:	4638      	mov	r0, r7
 8006570:	47c8      	blx	r9
 8006572:	3001      	adds	r0, #1
 8006574:	d0e6      	beq.n	8006544 <_printf_common+0xa4>
 8006576:	3601      	adds	r6, #1
 8006578:	e7d9      	b.n	800652e <_printf_common+0x8e>
	...

0800657c <_printf_i>:
 800657c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006580:	7e0f      	ldrb	r7, [r1, #24]
 8006582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006584:	2f78      	cmp	r7, #120	@ 0x78
 8006586:	4691      	mov	r9, r2
 8006588:	4680      	mov	r8, r0
 800658a:	460c      	mov	r4, r1
 800658c:	469a      	mov	sl, r3
 800658e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006592:	d807      	bhi.n	80065a4 <_printf_i+0x28>
 8006594:	2f62      	cmp	r7, #98	@ 0x62
 8006596:	d80a      	bhi.n	80065ae <_printf_i+0x32>
 8006598:	2f00      	cmp	r7, #0
 800659a:	f000 80d2 	beq.w	8006742 <_printf_i+0x1c6>
 800659e:	2f58      	cmp	r7, #88	@ 0x58
 80065a0:	f000 80b9 	beq.w	8006716 <_printf_i+0x19a>
 80065a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065ac:	e03a      	b.n	8006624 <_printf_i+0xa8>
 80065ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065b2:	2b15      	cmp	r3, #21
 80065b4:	d8f6      	bhi.n	80065a4 <_printf_i+0x28>
 80065b6:	a101      	add	r1, pc, #4	@ (adr r1, 80065bc <_printf_i+0x40>)
 80065b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065bc:	08006615 	.word	0x08006615
 80065c0:	08006629 	.word	0x08006629
 80065c4:	080065a5 	.word	0x080065a5
 80065c8:	080065a5 	.word	0x080065a5
 80065cc:	080065a5 	.word	0x080065a5
 80065d0:	080065a5 	.word	0x080065a5
 80065d4:	08006629 	.word	0x08006629
 80065d8:	080065a5 	.word	0x080065a5
 80065dc:	080065a5 	.word	0x080065a5
 80065e0:	080065a5 	.word	0x080065a5
 80065e4:	080065a5 	.word	0x080065a5
 80065e8:	08006729 	.word	0x08006729
 80065ec:	08006653 	.word	0x08006653
 80065f0:	080066e3 	.word	0x080066e3
 80065f4:	080065a5 	.word	0x080065a5
 80065f8:	080065a5 	.word	0x080065a5
 80065fc:	0800674b 	.word	0x0800674b
 8006600:	080065a5 	.word	0x080065a5
 8006604:	08006653 	.word	0x08006653
 8006608:	080065a5 	.word	0x080065a5
 800660c:	080065a5 	.word	0x080065a5
 8006610:	080066eb 	.word	0x080066eb
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	1d1a      	adds	r2, r3, #4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6032      	str	r2, [r6, #0]
 800661c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006624:	2301      	movs	r3, #1
 8006626:	e09d      	b.n	8006764 <_printf_i+0x1e8>
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	6820      	ldr	r0, [r4, #0]
 800662c:	1d19      	adds	r1, r3, #4
 800662e:	6031      	str	r1, [r6, #0]
 8006630:	0606      	lsls	r6, r0, #24
 8006632:	d501      	bpl.n	8006638 <_printf_i+0xbc>
 8006634:	681d      	ldr	r5, [r3, #0]
 8006636:	e003      	b.n	8006640 <_printf_i+0xc4>
 8006638:	0645      	lsls	r5, r0, #25
 800663a:	d5fb      	bpl.n	8006634 <_printf_i+0xb8>
 800663c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006640:	2d00      	cmp	r5, #0
 8006642:	da03      	bge.n	800664c <_printf_i+0xd0>
 8006644:	232d      	movs	r3, #45	@ 0x2d
 8006646:	426d      	negs	r5, r5
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800664c:	4859      	ldr	r0, [pc, #356]	@ (80067b4 <_printf_i+0x238>)
 800664e:	230a      	movs	r3, #10
 8006650:	e011      	b.n	8006676 <_printf_i+0xfa>
 8006652:	6821      	ldr	r1, [r4, #0]
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	0608      	lsls	r0, r1, #24
 8006658:	f853 5b04 	ldr.w	r5, [r3], #4
 800665c:	d402      	bmi.n	8006664 <_printf_i+0xe8>
 800665e:	0649      	lsls	r1, r1, #25
 8006660:	bf48      	it	mi
 8006662:	b2ad      	uxthmi	r5, r5
 8006664:	2f6f      	cmp	r7, #111	@ 0x6f
 8006666:	4853      	ldr	r0, [pc, #332]	@ (80067b4 <_printf_i+0x238>)
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	bf14      	ite	ne
 800666c:	230a      	movne	r3, #10
 800666e:	2308      	moveq	r3, #8
 8006670:	2100      	movs	r1, #0
 8006672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006676:	6866      	ldr	r6, [r4, #4]
 8006678:	60a6      	str	r6, [r4, #8]
 800667a:	2e00      	cmp	r6, #0
 800667c:	bfa2      	ittt	ge
 800667e:	6821      	ldrge	r1, [r4, #0]
 8006680:	f021 0104 	bicge.w	r1, r1, #4
 8006684:	6021      	strge	r1, [r4, #0]
 8006686:	b90d      	cbnz	r5, 800668c <_printf_i+0x110>
 8006688:	2e00      	cmp	r6, #0
 800668a:	d04b      	beq.n	8006724 <_printf_i+0x1a8>
 800668c:	4616      	mov	r6, r2
 800668e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006692:	fb03 5711 	mls	r7, r3, r1, r5
 8006696:	5dc7      	ldrb	r7, [r0, r7]
 8006698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800669c:	462f      	mov	r7, r5
 800669e:	42bb      	cmp	r3, r7
 80066a0:	460d      	mov	r5, r1
 80066a2:	d9f4      	bls.n	800668e <_printf_i+0x112>
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d10b      	bne.n	80066c0 <_printf_i+0x144>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	07df      	lsls	r7, r3, #31
 80066ac:	d508      	bpl.n	80066c0 <_printf_i+0x144>
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	6861      	ldr	r1, [r4, #4]
 80066b2:	4299      	cmp	r1, r3
 80066b4:	bfde      	ittt	le
 80066b6:	2330      	movle	r3, #48	@ 0x30
 80066b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066c0:	1b92      	subs	r2, r2, r6
 80066c2:	6122      	str	r2, [r4, #16]
 80066c4:	f8cd a000 	str.w	sl, [sp]
 80066c8:	464b      	mov	r3, r9
 80066ca:	aa03      	add	r2, sp, #12
 80066cc:	4621      	mov	r1, r4
 80066ce:	4640      	mov	r0, r8
 80066d0:	f7ff fee6 	bl	80064a0 <_printf_common>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d14a      	bne.n	800676e <_printf_i+0x1f2>
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	b004      	add	sp, #16
 80066de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f043 0320 	orr.w	r3, r3, #32
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	4833      	ldr	r0, [pc, #204]	@ (80067b8 <_printf_i+0x23c>)
 80066ec:	2778      	movs	r7, #120	@ 0x78
 80066ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	6831      	ldr	r1, [r6, #0]
 80066f6:	061f      	lsls	r7, r3, #24
 80066f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80066fc:	d402      	bmi.n	8006704 <_printf_i+0x188>
 80066fe:	065f      	lsls	r7, r3, #25
 8006700:	bf48      	it	mi
 8006702:	b2ad      	uxthmi	r5, r5
 8006704:	6031      	str	r1, [r6, #0]
 8006706:	07d9      	lsls	r1, r3, #31
 8006708:	bf44      	itt	mi
 800670a:	f043 0320 	orrmi.w	r3, r3, #32
 800670e:	6023      	strmi	r3, [r4, #0]
 8006710:	b11d      	cbz	r5, 800671a <_printf_i+0x19e>
 8006712:	2310      	movs	r3, #16
 8006714:	e7ac      	b.n	8006670 <_printf_i+0xf4>
 8006716:	4827      	ldr	r0, [pc, #156]	@ (80067b4 <_printf_i+0x238>)
 8006718:	e7e9      	b.n	80066ee <_printf_i+0x172>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	f023 0320 	bic.w	r3, r3, #32
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	e7f6      	b.n	8006712 <_printf_i+0x196>
 8006724:	4616      	mov	r6, r2
 8006726:	e7bd      	b.n	80066a4 <_printf_i+0x128>
 8006728:	6833      	ldr	r3, [r6, #0]
 800672a:	6825      	ldr	r5, [r4, #0]
 800672c:	6961      	ldr	r1, [r4, #20]
 800672e:	1d18      	adds	r0, r3, #4
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	062e      	lsls	r6, r5, #24
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	d501      	bpl.n	800673c <_printf_i+0x1c0>
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e002      	b.n	8006742 <_printf_i+0x1c6>
 800673c:	0668      	lsls	r0, r5, #25
 800673e:	d5fb      	bpl.n	8006738 <_printf_i+0x1bc>
 8006740:	8019      	strh	r1, [r3, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	4616      	mov	r6, r2
 8006748:	e7bc      	b.n	80066c4 <_printf_i+0x148>
 800674a:	6833      	ldr	r3, [r6, #0]
 800674c:	1d1a      	adds	r2, r3, #4
 800674e:	6032      	str	r2, [r6, #0]
 8006750:	681e      	ldr	r6, [r3, #0]
 8006752:	6862      	ldr	r2, [r4, #4]
 8006754:	2100      	movs	r1, #0
 8006756:	4630      	mov	r0, r6
 8006758:	f7f9 fd42 	bl	80001e0 <memchr>
 800675c:	b108      	cbz	r0, 8006762 <_printf_i+0x1e6>
 800675e:	1b80      	subs	r0, r0, r6
 8006760:	6060      	str	r0, [r4, #4]
 8006762:	6863      	ldr	r3, [r4, #4]
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	2300      	movs	r3, #0
 8006768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800676c:	e7aa      	b.n	80066c4 <_printf_i+0x148>
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	4632      	mov	r2, r6
 8006772:	4649      	mov	r1, r9
 8006774:	4640      	mov	r0, r8
 8006776:	47d0      	blx	sl
 8006778:	3001      	adds	r0, #1
 800677a:	d0ad      	beq.n	80066d8 <_printf_i+0x15c>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	079b      	lsls	r3, r3, #30
 8006780:	d413      	bmi.n	80067aa <_printf_i+0x22e>
 8006782:	68e0      	ldr	r0, [r4, #12]
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	4298      	cmp	r0, r3
 8006788:	bfb8      	it	lt
 800678a:	4618      	movlt	r0, r3
 800678c:	e7a6      	b.n	80066dc <_printf_i+0x160>
 800678e:	2301      	movs	r3, #1
 8006790:	4632      	mov	r2, r6
 8006792:	4649      	mov	r1, r9
 8006794:	4640      	mov	r0, r8
 8006796:	47d0      	blx	sl
 8006798:	3001      	adds	r0, #1
 800679a:	d09d      	beq.n	80066d8 <_printf_i+0x15c>
 800679c:	3501      	adds	r5, #1
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	9903      	ldr	r1, [sp, #12]
 80067a2:	1a5b      	subs	r3, r3, r1
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dcf2      	bgt.n	800678e <_printf_i+0x212>
 80067a8:	e7eb      	b.n	8006782 <_printf_i+0x206>
 80067aa:	2500      	movs	r5, #0
 80067ac:	f104 0619 	add.w	r6, r4, #25
 80067b0:	e7f5      	b.n	800679e <_printf_i+0x222>
 80067b2:	bf00      	nop
 80067b4:	08006d85 	.word	0x08006d85
 80067b8:	08006d96 	.word	0x08006d96

080067bc <__sflush_r>:
 80067bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c4:	0716      	lsls	r6, r2, #28
 80067c6:	4605      	mov	r5, r0
 80067c8:	460c      	mov	r4, r1
 80067ca:	d454      	bmi.n	8006876 <__sflush_r+0xba>
 80067cc:	684b      	ldr	r3, [r1, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dc02      	bgt.n	80067d8 <__sflush_r+0x1c>
 80067d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd48      	ble.n	800686a <__sflush_r+0xae>
 80067d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067da:	2e00      	cmp	r6, #0
 80067dc:	d045      	beq.n	800686a <__sflush_r+0xae>
 80067de:	2300      	movs	r3, #0
 80067e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067e4:	682f      	ldr	r7, [r5, #0]
 80067e6:	6a21      	ldr	r1, [r4, #32]
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	d030      	beq.n	800684e <__sflush_r+0x92>
 80067ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	0759      	lsls	r1, r3, #29
 80067f2:	d505      	bpl.n	8006800 <__sflush_r+0x44>
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	1ad2      	subs	r2, r2, r3
 80067f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067fa:	b10b      	cbz	r3, 8006800 <__sflush_r+0x44>
 80067fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	2300      	movs	r3, #0
 8006802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006804:	6a21      	ldr	r1, [r4, #32]
 8006806:	4628      	mov	r0, r5
 8006808:	47b0      	blx	r6
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	d106      	bne.n	800681e <__sflush_r+0x62>
 8006810:	6829      	ldr	r1, [r5, #0]
 8006812:	291d      	cmp	r1, #29
 8006814:	d82b      	bhi.n	800686e <__sflush_r+0xb2>
 8006816:	4a2a      	ldr	r2, [pc, #168]	@ (80068c0 <__sflush_r+0x104>)
 8006818:	410a      	asrs	r2, r1
 800681a:	07d6      	lsls	r6, r2, #31
 800681c:	d427      	bmi.n	800686e <__sflush_r+0xb2>
 800681e:	2200      	movs	r2, #0
 8006820:	6062      	str	r2, [r4, #4]
 8006822:	04d9      	lsls	r1, r3, #19
 8006824:	6922      	ldr	r2, [r4, #16]
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	d504      	bpl.n	8006834 <__sflush_r+0x78>
 800682a:	1c42      	adds	r2, r0, #1
 800682c:	d101      	bne.n	8006832 <__sflush_r+0x76>
 800682e:	682b      	ldr	r3, [r5, #0]
 8006830:	b903      	cbnz	r3, 8006834 <__sflush_r+0x78>
 8006832:	6560      	str	r0, [r4, #84]	@ 0x54
 8006834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006836:	602f      	str	r7, [r5, #0]
 8006838:	b1b9      	cbz	r1, 800686a <__sflush_r+0xae>
 800683a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800683e:	4299      	cmp	r1, r3
 8006840:	d002      	beq.n	8006848 <__sflush_r+0x8c>
 8006842:	4628      	mov	r0, r5
 8006844:	f7ff fa9a 	bl	8005d7c <_free_r>
 8006848:	2300      	movs	r3, #0
 800684a:	6363      	str	r3, [r4, #52]	@ 0x34
 800684c:	e00d      	b.n	800686a <__sflush_r+0xae>
 800684e:	2301      	movs	r3, #1
 8006850:	4628      	mov	r0, r5
 8006852:	47b0      	blx	r6
 8006854:	4602      	mov	r2, r0
 8006856:	1c50      	adds	r0, r2, #1
 8006858:	d1c9      	bne.n	80067ee <__sflush_r+0x32>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0c6      	beq.n	80067ee <__sflush_r+0x32>
 8006860:	2b1d      	cmp	r3, #29
 8006862:	d001      	beq.n	8006868 <__sflush_r+0xac>
 8006864:	2b16      	cmp	r3, #22
 8006866:	d11e      	bne.n	80068a6 <__sflush_r+0xea>
 8006868:	602f      	str	r7, [r5, #0]
 800686a:	2000      	movs	r0, #0
 800686c:	e022      	b.n	80068b4 <__sflush_r+0xf8>
 800686e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006872:	b21b      	sxth	r3, r3
 8006874:	e01b      	b.n	80068ae <__sflush_r+0xf2>
 8006876:	690f      	ldr	r7, [r1, #16]
 8006878:	2f00      	cmp	r7, #0
 800687a:	d0f6      	beq.n	800686a <__sflush_r+0xae>
 800687c:	0793      	lsls	r3, r2, #30
 800687e:	680e      	ldr	r6, [r1, #0]
 8006880:	bf08      	it	eq
 8006882:	694b      	ldreq	r3, [r1, #20]
 8006884:	600f      	str	r7, [r1, #0]
 8006886:	bf18      	it	ne
 8006888:	2300      	movne	r3, #0
 800688a:	eba6 0807 	sub.w	r8, r6, r7
 800688e:	608b      	str	r3, [r1, #8]
 8006890:	f1b8 0f00 	cmp.w	r8, #0
 8006894:	dde9      	ble.n	800686a <__sflush_r+0xae>
 8006896:	6a21      	ldr	r1, [r4, #32]
 8006898:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800689a:	4643      	mov	r3, r8
 800689c:	463a      	mov	r2, r7
 800689e:	4628      	mov	r0, r5
 80068a0:	47b0      	blx	r6
 80068a2:	2800      	cmp	r0, #0
 80068a4:	dc08      	bgt.n	80068b8 <__sflush_r+0xfc>
 80068a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b8:	4407      	add	r7, r0
 80068ba:	eba8 0800 	sub.w	r8, r8, r0
 80068be:	e7e7      	b.n	8006890 <__sflush_r+0xd4>
 80068c0:	dfbffffe 	.word	0xdfbffffe

080068c4 <_fflush_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	4605      	mov	r5, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	b913      	cbnz	r3, 80068d4 <_fflush_r+0x10>
 80068ce:	2500      	movs	r5, #0
 80068d0:	4628      	mov	r0, r5
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	b118      	cbz	r0, 80068de <_fflush_r+0x1a>
 80068d6:	6a03      	ldr	r3, [r0, #32]
 80068d8:	b90b      	cbnz	r3, 80068de <_fflush_r+0x1a>
 80068da:	f7ff f821 	bl	8005920 <__sinit>
 80068de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f3      	beq.n	80068ce <_fflush_r+0xa>
 80068e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068e8:	07d0      	lsls	r0, r2, #31
 80068ea:	d404      	bmi.n	80068f6 <_fflush_r+0x32>
 80068ec:	0599      	lsls	r1, r3, #22
 80068ee:	d402      	bmi.n	80068f6 <_fflush_r+0x32>
 80068f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068f2:	f7ff fa40 	bl	8005d76 <__retarget_lock_acquire_recursive>
 80068f6:	4628      	mov	r0, r5
 80068f8:	4621      	mov	r1, r4
 80068fa:	f7ff ff5f 	bl	80067bc <__sflush_r>
 80068fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006900:	07da      	lsls	r2, r3, #31
 8006902:	4605      	mov	r5, r0
 8006904:	d4e4      	bmi.n	80068d0 <_fflush_r+0xc>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	059b      	lsls	r3, r3, #22
 800690a:	d4e1      	bmi.n	80068d0 <_fflush_r+0xc>
 800690c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800690e:	f7ff fa33 	bl	8005d78 <__retarget_lock_release_recursive>
 8006912:	e7dd      	b.n	80068d0 <_fflush_r+0xc>

08006914 <__swhatbuf_r>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691c:	2900      	cmp	r1, #0
 800691e:	b096      	sub	sp, #88	@ 0x58
 8006920:	4615      	mov	r5, r2
 8006922:	461e      	mov	r6, r3
 8006924:	da0d      	bge.n	8006942 <__swhatbuf_r+0x2e>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800692c:	f04f 0100 	mov.w	r1, #0
 8006930:	bf14      	ite	ne
 8006932:	2340      	movne	r3, #64	@ 0x40
 8006934:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006938:	2000      	movs	r0, #0
 800693a:	6031      	str	r1, [r6, #0]
 800693c:	602b      	str	r3, [r5, #0]
 800693e:	b016      	add	sp, #88	@ 0x58
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	466a      	mov	r2, sp
 8006944:	f000 f862 	bl	8006a0c <_fstat_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	dbec      	blt.n	8006926 <__swhatbuf_r+0x12>
 800694c:	9901      	ldr	r1, [sp, #4]
 800694e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006952:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006956:	4259      	negs	r1, r3
 8006958:	4159      	adcs	r1, r3
 800695a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800695e:	e7eb      	b.n	8006938 <__swhatbuf_r+0x24>

08006960 <__smakebuf_r>:
 8006960:	898b      	ldrh	r3, [r1, #12]
 8006962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006964:	079d      	lsls	r5, r3, #30
 8006966:	4606      	mov	r6, r0
 8006968:	460c      	mov	r4, r1
 800696a:	d507      	bpl.n	800697c <__smakebuf_r+0x1c>
 800696c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	2301      	movs	r3, #1
 8006976:	6163      	str	r3, [r4, #20]
 8006978:	b003      	add	sp, #12
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697c:	ab01      	add	r3, sp, #4
 800697e:	466a      	mov	r2, sp
 8006980:	f7ff ffc8 	bl	8006914 <__swhatbuf_r>
 8006984:	9f00      	ldr	r7, [sp, #0]
 8006986:	4605      	mov	r5, r0
 8006988:	4639      	mov	r1, r7
 800698a:	4630      	mov	r0, r6
 800698c:	f7ff fa62 	bl	8005e54 <_malloc_r>
 8006990:	b948      	cbnz	r0, 80069a6 <__smakebuf_r+0x46>
 8006992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006996:	059a      	lsls	r2, r3, #22
 8006998:	d4ee      	bmi.n	8006978 <__smakebuf_r+0x18>
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	f043 0302 	orr.w	r3, r3, #2
 80069a2:	81a3      	strh	r3, [r4, #12]
 80069a4:	e7e2      	b.n	800696c <__smakebuf_r+0xc>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	6020      	str	r0, [r4, #0]
 80069aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	9b01      	ldr	r3, [sp, #4]
 80069b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069b6:	b15b      	cbz	r3, 80069d0 <__smakebuf_r+0x70>
 80069b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069bc:	4630      	mov	r0, r6
 80069be:	f000 f837 	bl	8006a30 <_isatty_r>
 80069c2:	b128      	cbz	r0, 80069d0 <__smakebuf_r+0x70>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	431d      	orrs	r5, r3
 80069d4:	81a5      	strh	r5, [r4, #12]
 80069d6:	e7cf      	b.n	8006978 <__smakebuf_r+0x18>

080069d8 <memmove>:
 80069d8:	4288      	cmp	r0, r1
 80069da:	b510      	push	{r4, lr}
 80069dc:	eb01 0402 	add.w	r4, r1, r2
 80069e0:	d902      	bls.n	80069e8 <memmove+0x10>
 80069e2:	4284      	cmp	r4, r0
 80069e4:	4623      	mov	r3, r4
 80069e6:	d807      	bhi.n	80069f8 <memmove+0x20>
 80069e8:	1e43      	subs	r3, r0, #1
 80069ea:	42a1      	cmp	r1, r4
 80069ec:	d008      	beq.n	8006a00 <memmove+0x28>
 80069ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069f6:	e7f8      	b.n	80069ea <memmove+0x12>
 80069f8:	4402      	add	r2, r0
 80069fa:	4601      	mov	r1, r0
 80069fc:	428a      	cmp	r2, r1
 80069fe:	d100      	bne.n	8006a02 <memmove+0x2a>
 8006a00:	bd10      	pop	{r4, pc}
 8006a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a0a:	e7f7      	b.n	80069fc <memmove+0x24>

08006a0c <_fstat_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	@ (8006a2c <_fstat_r+0x20>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	f7fb fc67 	bl	80022ec <_fstat>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	d102      	bne.n	8006a28 <_fstat_r+0x1c>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	b103      	cbz	r3, 8006a28 <_fstat_r+0x1c>
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	bd38      	pop	{r3, r4, r5, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200002ac 	.word	0x200002ac

08006a30 <_isatty_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d06      	ldr	r5, [pc, #24]	@ (8006a4c <_isatty_r+0x1c>)
 8006a34:	2300      	movs	r3, #0
 8006a36:	4604      	mov	r4, r0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	f7fb fc66 	bl	800230c <_isatty>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_isatty_r+0x1a>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_isatty_r+0x1a>
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	200002ac 	.word	0x200002ac

08006a50 <_sbrk_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d06      	ldr	r5, [pc, #24]	@ (8006a6c <_sbrk_r+0x1c>)
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	4608      	mov	r0, r1
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	f7fb fc6e 	bl	800233c <_sbrk>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_sbrk_r+0x1a>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_sbrk_r+0x1a>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	200002ac 	.word	0x200002ac

08006a70 <memcpy>:
 8006a70:	440a      	add	r2, r1
 8006a72:	4291      	cmp	r1, r2
 8006a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a78:	d100      	bne.n	8006a7c <memcpy+0xc>
 8006a7a:	4770      	bx	lr
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a86:	4291      	cmp	r1, r2
 8006a88:	d1f9      	bne.n	8006a7e <memcpy+0xe>
 8006a8a:	bd10      	pop	{r4, pc}

08006a8c <_realloc_r>:
 8006a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a90:	4680      	mov	r8, r0
 8006a92:	4615      	mov	r5, r2
 8006a94:	460c      	mov	r4, r1
 8006a96:	b921      	cbnz	r1, 8006aa2 <_realloc_r+0x16>
 8006a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	f7ff b9d9 	b.w	8005e54 <_malloc_r>
 8006aa2:	b92a      	cbnz	r2, 8006ab0 <_realloc_r+0x24>
 8006aa4:	f7ff f96a 	bl	8005d7c <_free_r>
 8006aa8:	2400      	movs	r4, #0
 8006aaa:	4620      	mov	r0, r4
 8006aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab0:	f000 f81a 	bl	8006ae8 <_malloc_usable_size_r>
 8006ab4:	4285      	cmp	r5, r0
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	d802      	bhi.n	8006ac0 <_realloc_r+0x34>
 8006aba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006abe:	d8f4      	bhi.n	8006aaa <_realloc_r+0x1e>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f7ff f9c6 	bl	8005e54 <_malloc_r>
 8006ac8:	4607      	mov	r7, r0
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d0ec      	beq.n	8006aa8 <_realloc_r+0x1c>
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	bf28      	it	cs
 8006ad6:	4632      	movcs	r2, r6
 8006ad8:	f7ff ffca 	bl	8006a70 <memcpy>
 8006adc:	4621      	mov	r1, r4
 8006ade:	4640      	mov	r0, r8
 8006ae0:	f7ff f94c 	bl	8005d7c <_free_r>
 8006ae4:	463c      	mov	r4, r7
 8006ae6:	e7e0      	b.n	8006aaa <_realloc_r+0x1e>

08006ae8 <_malloc_usable_size_r>:
 8006ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aec:	1f18      	subs	r0, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfbc      	itt	lt
 8006af2:	580b      	ldrlt	r3, [r1, r0]
 8006af4:	18c0      	addlt	r0, r0, r3
 8006af6:	4770      	bx	lr

08006af8 <_init>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr

08006b04 <_fini>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr
