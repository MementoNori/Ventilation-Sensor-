
PnS_VOC_CO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005858  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080059e8  080059e8  000069e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab8  08005ab8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005ab8  08005ab8  00006ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac0  08005ac0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac0  08005ac0  00006ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ac4  08005ac4  00006ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ac8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  08005b30  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005b30  000072bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb91  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002704  00000000  00000000  00016c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00019330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b99  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278cc  00000000  00000000  0001adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b8b  00000000  00000000  000426c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebf35  00000000  00000000  00055250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  001411c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014581c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059d0 	.word	0x080059d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080059d0 	.word	0x080059d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <buzzer_on>:
#include "buzzer.h"

void buzzer_on(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <buzzer_on+0x14>)
 800057a:	f001 fa43 	bl	8001a04 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400

08000588 <buzzer_off>:

void buzzer_off(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <buzzer_off+0x14>)
 8000592:	f001 fa37 	bl	8001a04 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	48000400 	.word	0x48000400

080005a0 <buzzer_beep>:

void buzzer_beep(uint32_t duration_ms) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    buzzer_on();
 80005a8:	f7ff ffe2 	bl	8000570 <buzzer_on>
    HAL_Delay(duration_ms);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 ff75 	bl	800149c <HAL_Delay>
    buzzer_off();
 80005b2:	f7ff ffe9 	bl	8000588 <buzzer_off>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <LCD_setReg>:


#define I2C_RGB_ADDR  0xC4
#define I2C_LCD_ADDR  0x7C

static void LCD_setReg(unsigned char reg, unsigned char val){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {reg, val};
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	733b      	strb	r3, [r7, #12]
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_RGB_ADDR, (uint8_t*)data, 2, 1000);
 80005d8:	f107 020c 	add.w	r2, r7, #12
 80005dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2302      	movs	r3, #2
 80005e4:	21c4      	movs	r1, #196	@ 0xc4
 80005e6:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <LCD_setReg+0x34>)
 80005e8:	f001 fac0 	bl	8001b6c <HAL_I2C_Master_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000008c 	.word	0x2000008c

080005f8 <i2c_send_byteS>:
 *	->	as shown above (if required)
 *
*/
/*************************************************************************/
static void i2c_send_byteS(uint8_t *data, uint32_t len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_LCD_ADDR, (uint8_t*)data, len, 1000);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b29b      	uxth	r3, r3
 8000606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	217c      	movs	r1, #124	@ 0x7c
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <i2c_send_byteS+0x28>)
 8000612:	f001 faab 	bl	8001b6c <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000008c 	.word	0x2000008c

08000624 <LCD_begin>:
 *					function with MCU related delay function.
 *
*/
/*************************************************************************/

void LCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	717b      	strb	r3, [r7, #5]
	if (lines > 1) {
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d906      	bls.n	800064a <LCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 800063c:	4b33      	ldr	r3, [pc, #204]	@ (800070c <LCD_begin+0xe8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <LCD_begin+0xe8>)
 8000648:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 800064a:	4a31      	ldr	r2, [pc, #196]	@ (8000710 <LCD_begin+0xec>)
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8000650:	4b30      	ldr	r3, [pc, #192]	@ (8000714 <LCD_begin+0xf0>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d009      	beq.n	8000670 <LCD_begin+0x4c>
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d106      	bne.n	8000670 <LCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8000662:	4b2a      	ldr	r3, [pc, #168]	@ (800070c <LCD_begin+0xe8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <LCD_begin+0xe8>)
 800066e:	701a      	strb	r2, [r3, #0]

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50 msec

    HAL_Delay(50);	// 50-msec delay
 8000670:	2032      	movs	r0, #50	@ 0x32
 8000672:	f000 ff13 	bl	800149c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <LCD_begin+0xe8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bd 	bl	8000800 <LCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000686:	2005      	movs	r0, #5
 8000688:	f000 ff08 	bl	800149c <HAL_Delay>

    // second try
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <LCD_begin+0xe8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f043 0320 	orr.w	r3, r3, #32
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f8b2 	bl	8000800 <LCD_command>
    HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fefd 	bl	800149c <HAL_Delay>

    // third go
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <LCD_begin+0xe8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f043 0320 	orr.w	r3, r3, #32
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f8a7 	bl	8000800 <LCD_command>


    // finally, set # lines, font size, etc.
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 80006b2:	4b16      	ldr	r3, [pc, #88]	@ (800070c <LCD_begin+0xe8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f043 0320 	orr.w	r3, r3, #32
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f89f 	bl	8000800 <LCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <LCD_begin+0xf4>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	701a      	strb	r2, [r3, #0]
    LCD_display();
 80006c8:	f000 f834 	bl	8000734 <LCD_display>

    // clear it off
    LCD_clear();
 80006cc:	f000 f828 	bl	8000720 <LCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <LCD_begin+0xf8>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    LCD_command(LCD_ENTRYMODESET | _displaymode);
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <LCD_begin+0xf8>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f88d 	bl	8000800 <LCD_command>

    // backlight init
    LCD_setReg(0, 0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff69 	bl	80005c0 <LCD_setReg>
    LCD_setReg(1, 0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ff65 	bl	80005c0 <LCD_setReg>
    LCD_setReg(0x08, 0xAA);     // all led control by pwm
 80006f6:	21aa      	movs	r1, #170	@ 0xaa
 80006f8:	2008      	movs	r0, #8
 80006fa:	f7ff ff61 	bl	80005c0 <LCD_setReg>

    LCD_setColorWhite();
 80006fe:	f000 f8ae 	bl	800085e <LCD_setColorWhite>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000084 	.word	0x20000084
 8000710:	20000087 	.word	0x20000087
 8000714:	20000088 	.word	0x20000088
 8000718:	20000085 	.word	0x20000085
 800071c:	20000086 	.word	0x20000086

08000720 <LCD_clear>:

void LCD_clear(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	LCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 8000724:	2001      	movs	r0, #1
 8000726:	f000 f86b 	bl	8000800 <LCD_command>
	HAL_Delay(2); // this command takes a long time!
 800072a:	2002      	movs	r0, #2
 800072c:	f000 feb6 	bl	800149c <HAL_Delay>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <LCD_display>:

void LCD_noDisplay(void){
    _displaycontrol &= ~LCD_DISPLAYON;
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <LCD_display+0x28>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <LCD_display+0x28>)
 8000744:	701a      	strb	r2, [r3, #0]
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <LCD_display+0x28>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f855 	bl	8000800 <LCD_command>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000085 	.word	0x20000085

08000760 <LCD_setCursor>:
    {
        dta[i+1] = charmap[i];
    }
    i2c_send_byteS(dta, 9);
}
void LCD_setCursor(uint8_t col, uint8_t row){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <LCD_setCursor+0x20>
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800077c:	b2db      	uxtb	r3, r3
 800077e:	e003      	b.n	8000788 <LCD_setCursor+0x28>
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000786:	b2db      	uxtb	r3, r3
 8000788:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 800078a:	2380      	movs	r3, #128	@ 0x80
 800078c:	733b      	strb	r3, [r7, #12]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff2d 	bl	80005f8 <i2c_send_byteS>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <LCD_write>:

void LCD_write(uint8_t value){
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b084      	sub	sp, #16
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 80007b0:	2340      	movs	r3, #64	@ 0x40
 80007b2:	733b      	strb	r3, [r7, #12]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff1a 	bl	80005f8 <i2c_send_byteS>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <LCD_print>:

void LCD_print(char* data, uint8_t size){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 80007d8:	e00a      	b.n	80007f0 <LCD_print+0x24>
		LCD_write(data[0]);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffe1 	bl	80007a6 <LCD_write>
		data++;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3301      	adds	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
		size--;
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f1      	bne.n	80007da <LCD_print+0xe>
	}
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <LCD_command>:

void LCD_command(uint8_t value){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	733b      	strb	r3, [r7, #12]
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff feed 	bl	80005f8 <i2c_send_byteS>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <LCD_setRGB>:

// color control
void LCD_setRGB(unsigned char r, unsigned char g, unsigned char b){
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	460b      	mov	r3, r1
 8000832:	71bb      	strb	r3, [r7, #6]
 8000834:	4613      	mov	r3, r2
 8000836:	717b      	strb	r3, [r7, #5]
	LCD_setReg(REG_RED, r);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4619      	mov	r1, r3
 800083c:	2004      	movs	r0, #4
 800083e:	f7ff febf 	bl	80005c0 <LCD_setReg>
    LCD_setReg(REG_GREEN, g);
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	4619      	mov	r1, r3
 8000846:	2003      	movs	r0, #3
 8000848:	f7ff feba 	bl	80005c0 <LCD_setReg>
    LCD_setReg(REG_BLUE, b);
 800084c:	797b      	ldrb	r3, [r7, #5]
 800084e:	4619      	mov	r1, r3
 8000850:	2002      	movs	r0, #2
 8000852:	f7ff feb5 	bl	80005c0 <LCD_setReg>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <LCD_setColorWhite>:

void LCD_setColorAll(void){
	LCD_setRGB(0, 0, 0);
}

void LCD_setColorWhite(void){
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
	LCD_setRGB(255, 255, 255);
 8000862:	22ff      	movs	r2, #255	@ 0xff
 8000864:	21ff      	movs	r1, #255	@ 0xff
 8000866:	20ff      	movs	r0, #255	@ 0xff
 8000868:	f7ff ffdd 	bl	8000826 <LCD_setRGB>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000878:	1d39      	adds	r1, r7, #4
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	2201      	movs	r2, #1
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <__io_putchar+0x20>)
 8000882:	f003 fa2d 	bl	8003ce0 <HAL_UART_Transmit>
    return ch;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000e0 	.word	0x200000e0

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f000 fd8a 	bl	80013b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f87f 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 f93f 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008a6:	f000 f8cd 	bl	8000a44 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008aa:	f000 f90b 	bl	8000ac4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //start communication with sensor

  HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 fdf4 	bl	800149c <HAL_Delay>
  //Display initialization
  LCD_begin(16,2,0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2102      	movs	r1, #2
 80008b8:	2010      	movs	r0, #16
 80008ba:	f7ff feb3 	bl	8000624 <LCD_begin>
  LCD_setColorWhite();
 80008be:	f7ff ffce 	bl	800085e <LCD_setColorWhite>
  //first I2C initialization
  sgp30_iaq_init();
 80008c2:	f000 fb73 	bl	8000fac <sgp30_iaq_init>
  HAL_Delay(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ca:	f000 fde7 	bl	800149c <HAL_Delay>
	  //measurement of values
	  uint16_t co2, tvoc;
	  char buffer[17];

	  //reading VOC and CO2 values
	  sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 80008ce:	f107 0214 	add.w	r2, r7, #20
 80008d2:	f107 0312 	add.w	r3, r7, #18
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fb4a 	bl	8000f72 <sgp30_measure_iaq_blocking_read>

	  // Clear and update LCD
	  LCD_clear();
 80008de:	f7ff ff1f 	bl	8000720 <LCD_clear>

	  LCD_setCursor(0, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff3b 	bl	8000760 <LCD_setCursor>
	  snprintf(buffer, sizeof(buffer), "CO2: %u ppm", co2);
 80008ea:	8abb      	ldrh	r3, [r7, #20]
 80008ec:	4638      	mov	r0, r7
 80008ee:	4a28      	ldr	r2, [pc, #160]	@ (8000990 <main+0xfc>)
 80008f0:	2111      	movs	r1, #17
 80008f2:	f004 f827 	bl	8004944 <sniprintf>
	  LCD_print(buffer, strlen(buffer));
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc69 	bl	80001d0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2da      	uxtb	r2, r3
 8000902:	463b      	mov	r3, r7
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff60 	bl	80007cc <LCD_print>

	  LCD_setCursor(0, 1);
 800090c:	2101      	movs	r1, #1
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff ff26 	bl	8000760 <LCD_setCursor>
	  snprintf(buffer, sizeof(buffer), "TVOC: %u ppb", tvoc);
 8000914:	8a7b      	ldrh	r3, [r7, #18]
 8000916:	4638      	mov	r0, r7
 8000918:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <main+0x100>)
 800091a:	2111      	movs	r1, #17
 800091c:	f004 f812 	bl	8004944 <sniprintf>
	  LCD_print(buffer, strlen(buffer));
 8000920:	463b      	mov	r3, r7
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc54 	bl	80001d0 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	b2da      	uxtb	r2, r3
 800092c:	463b      	mov	r3, r7
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff4b 	bl	80007cc <LCD_print>




	  HAL_Delay(1000); //read every second
 8000936:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800093a:	f000 fdaf 	bl	800149c <HAL_Delay>

	  if(co2>1000){
 800093e:	8abb      	ldrh	r3, [r7, #20]
 8000940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000944:	d907      	bls.n	8000956 <main+0xc2>
		  buzzer_beep(500);
 8000946:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800094a:	f7ff fe29 	bl	80005a0 <buzzer_beep>
		  HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000952:	f000 fda3 	bl	800149c <HAL_Delay>
	  }

	  printf("CO2: %d ppm, TVOC: %d ppb\r\n", co2, tvoc);
 8000956:	8abb      	ldrh	r3, [r7, #20]
 8000958:	4619      	mov	r1, r3
 800095a:	8a7b      	ldrh	r3, [r7, #18]
 800095c:	461a      	mov	r2, r3
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <main+0x104>)
 8000960:	f003 ffde 	bl	8004920 <iprintf>
	  int16_t ret = sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 8000964:	f107 0214 	add.w	r2, r7, #20
 8000968:	f107 0312 	add.w	r3, r7, #18
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f000 faff 	bl	8000f72 <sgp30_measure_iaq_blocking_read>
 8000974:	4603      	mov	r3, r0
 8000976:	82fb      	strh	r3, [r7, #22]
	  if (ret != 0) {
 8000978:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0a6      	beq.n	80008ce <main+0x3a>
	      printf("SGP30 I2C read error: %d\r\n", ret);
 8000980:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000984:	4619      	mov	r1, r3
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <main+0x108>)
 8000988:	f003 ffca 	bl	8004920 <iprintf>
  {
 800098c:	e79f      	b.n	80008ce <main+0x3a>
 800098e:	bf00      	nop
 8000990:	080059e8 	.word	0x080059e8
 8000994:	080059f4 	.word	0x080059f4
 8000998:	08005a04 	.word	0x08005a04
 800099c:	08005a20 	.word	0x08005a20

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b096      	sub	sp, #88	@ 0x58
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2244      	movs	r2, #68	@ 0x44
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 f83f 	bl	8004a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009c6:	f001 fe2b 	bl	8002620 <HAL_PWREx_ControlVoltageScaling>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009d0:	f000 f8d8 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009d4:	2310      	movs	r3, #16
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009e0:	2360      	movs	r3, #96	@ 0x60
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009e8:	2301      	movs	r3, #1
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009f0:	2328      	movs	r3, #40	@ 0x28
 80009f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009f4:	2307      	movs	r3, #7
 80009f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fe61 	bl	80026cc <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a10:	f000 f8b8 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fa29 	bl	8002e84 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a38:	f000 f8a4 	bl	8000b84 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3758      	adds	r7, #88	@ 0x58
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000abc <MX_I2C1_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a50:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac0 <MX_I2C1_Init+0x7c>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a54:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a66:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7e:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a80:	f000 ffd8 	bl	8001a34 <HAL_I2C_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a8a:	f000 f87b 	bl	8000b84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000a92:	f001 fd1f 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a9c:	f000 f872 	bl	8000b84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_I2C1_Init+0x74>)
 8000aa4:	f001 fd61 	bl	800256a <HAL_I2CEx_ConfigDigitalFilter>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 f869 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000008c 	.word	0x2000008c
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	10d19ce4 	.word	0x10d19ce4

08000ac4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <MX_USART1_UART_Init+0x5c>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ace:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART1_UART_Init+0x58>)
 8000b08:	f003 f89c 	bl	8003c44 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 f837 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000e0 	.word	0x200000e0
 8000b20:	40013800 	.word	0x40013800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <MX_GPIO_Init+0x58>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b7c <MX_GPIO_Init+0x58>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <MX_GPIO_Init+0x58>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2101      	movs	r1, #1
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <MX_GPIO_Init+0x5c>)
 8000b56:	f000 ff55 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_GPIO_Init+0x5c>)
 8000b70:	f000 fd9e 	bl	80016b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	48000400 	.word	0x48000400

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000b9c:	23ff      	movs	r3, #255	@ 0xff
 8000b9e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81fb      	strh	r3, [r7, #14]
 8000ba4:	e021      	b.n	8000bea <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
 8000bb0:	4053      	eors	r3, r2
 8000bb2:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	733b      	strb	r3, [r7, #12]
 8000bb8:	e011      	b.n	8000bde <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8000bba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da07      	bge.n	8000bd2 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	737b      	strb	r3, [r7, #13]
 8000bd0:	e002      	b.n	8000bd8 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000bd2:	7b7b      	ldrb	r3, [r7, #13]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	733b      	strb	r3, [r7, #12]
 8000bde:	7b3b      	ldrb	r3, [r7, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1ea      	bne.n	8000bba <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	3301      	adds	r3, #1
 8000be8:	81fb      	strh	r3, [r7, #14]
 8000bea:	89fa      	ldrh	r2, [r7, #14]
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3d9      	bcc.n	8000ba6 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	4619      	mov	r1, r3
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffbb 	bl	8000b90 <sensirion_common_generate_crc>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	787b      	ldrb	r3, [r7, #1]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d002      	beq.n	8000c2a <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	e000      	b.n	8000c2c <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	460b      	mov	r3, r1
 8000c42:	817b      	strh	r3, [r7, #10]
 8000c44:	4613      	mov	r3, r2
 8000c46:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8000c4c:	897b      	ldrh	r3, [r7, #10]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	8abb      	ldrh	r3, [r7, #20]
 8000c54:	1c59      	adds	r1, r3, #1
 8000c56:	82b9      	strh	r1, [r7, #20]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	440b      	add	r3, r1
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8000c62:	8abb      	ldrh	r3, [r7, #20]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	82ba      	strh	r2, [r7, #20]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	897a      	ldrh	r2, [r7, #10]
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	75fb      	strb	r3, [r7, #23]
 8000c78:	e030      	b.n	8000cdc <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	8abb      	ldrh	r3, [r7, #20]
 8000c8a:	1c59      	adds	r1, r3, #1
 8000c8c:	82b9      	strh	r1, [r7, #20]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	440b      	add	r3, r1
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	881a      	ldrh	r2, [r3, #0]
 8000ca2:	8abb      	ldrh	r3, [r7, #20]
 8000ca4:	1c59      	adds	r1, r3, #1
 8000ca6:	82b9      	strh	r1, [r7, #20]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	440b      	add	r3, r1
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8000cb2:	8abb      	ldrh	r3, [r7, #20]
 8000cb4:	3b02      	subs	r3, #2
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff67 	bl	8000b90 <sensirion_common_generate_crc>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8000cc6:	8abb      	ldrh	r3, [r7, #20]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	82ba      	strh	r2, [r7, #20]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	7cfa      	ldrb	r2, [r7, #19]
 8000cd4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	75fb      	strb	r3, [r7, #23]
 8000cdc:	7dfa      	ldrb	r2, [r7, #23]
 8000cde:	7a7b      	ldrb	r3, [r7, #9]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3ca      	bcc.n	8000c7a <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8000ce4:	8abb      	ldrh	r3, [r7, #20]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b096      	sub	sp, #88	@ 0x58
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	6039      	str	r1, [r7, #0]
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	461a      	mov	r2, r3
 8000d02:	0052      	lsls	r2, r2, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000d10:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f8ad 	bl	8000e78 <sensirion_i2c_read>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    if (ret != NO_ERROR)
 8000d24:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000d2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8000d30:	e047      	b.n	8000dc2 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000d3e:	e039      	b.n	8000db4 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000d40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d46:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000d48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d50:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	2102      	movs	r1, #2
 8000d58:	f7ff ff52 	bl	8000c00 <sensirion_common_check_crc>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (ret != NO_ERROR)
 8000d62:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000d6a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8000d6e:	e028      	b.n	8000dc2 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8000d70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000d74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d76:	441a      	add	r2, r3
 8000d78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000d7c:	1c59      	adds	r1, r3, #1
 8000d7e:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8000d82:	4619      	mov	r1, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	440b      	add	r3, r1
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000d8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000d90:	3301      	adds	r3, #1
 8000d92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d94:	441a      	add	r2, r3
 8000d96:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000d9a:	1c59      	adds	r1, r3, #1
 8000d9c:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8000da0:	4619      	mov	r1, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	440b      	add	r3, r1
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000daa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000dae:	3303      	adds	r3, #3
 8000db0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000db4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8000db8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3bf      	bcc.n	8000d40 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3758      	adds	r7, #88	@ 0x58
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	6039      	str	r1, [r7, #0]
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8000dda:	88ba      	ldrh	r2, [r7, #4]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	6839      	ldr	r1, [r7, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff84 	bl	8000cee <sensirion_i2c_read_words_as_bytes>
 8000de6:	4603      	mov	r3, r0
 8000de8:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 8000dea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <sensirion_i2c_read_words+0x2e>
        return ret;
 8000df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000df6:	e020      	b.n	8000e3a <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e017      	b.n	8000e2e <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	3301      	adds	r3, #1
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b219      	sxth	r1, r3
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	b28a      	uxth	r2, r1
 8000e26:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	88ba      	ldrh	r2, [r7, #4]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8e2      	bhi.n	8000dfe <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8000e52:	88b9      	ldrh	r1, [r7, #4]
 8000e54:	f107 000c 	add.w	r0, r7, #12
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f7ff feea 	bl	8000c34 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000e60:	f107 010c 	add.w	r1, r7, #12
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2202      	movs	r2, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f827 	bl	8000ebc <sensirion_i2c_write>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80bb      	strh	r3, [r7, #4]
    // IMPLEMENT
	return HAL_I2C_Master_Receive(&hi2c1, address << 1, data, count, HAL_MAX_DELAY)== HAL_OK ? 0 :-1;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	f04f 32ff 	mov.w	r2, #4294967295
 8000e96:	9200      	str	r2, [sp, #0]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <sensirion_i2c_read+0x40>)
 8000e9c:	f000 ff7e 	bl	8001d9c <HAL_I2C_Master_Receive>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <sensirion_i2c_read+0x32>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e001      	b.n	8000eae <sensirion_i2c_read+0x36>
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000008c 	.word	0x2000008c

08000ebc <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	80bb      	strh	r3, [r7, #4]
    // IMPLEMENT
    return HAL_I2C_Master_Transmit(&hi2c1, address << 1, data, count, HAL_MAX_DELAY) == HAL_OK ? 0 : -1;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	88bb      	ldrh	r3, [r7, #4]
 8000ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <sensirion_i2c_write+0x40>)
 8000ee0:	f000 fe44 	bl	8001b6c <HAL_I2C_Master_Transmit>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <sensirion_i2c_write+0x32>
 8000eea:	2300      	movs	r3, #0
 8000eec:	e001      	b.n	8000ef2 <sensirion_i2c_write+0x36>
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000008c 	.word	0x2000008c

08000f00 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    // IMPLEMENT
	HAL_Delay((useconds + 999)/ 1000);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <sensirion_sleep_usec+0x24>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	099b      	lsrs	r3, r3, #6
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fac0 	bl	800149c <HAL_Delay>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	10624dd3 	.word	0x10624dd3

08000f28 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8000f2c:	2358      	movs	r3, #88	@ 0x58
 8000f2e:	f242 0108 	movw	r1, #8200	@ 0x2008
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff85 	bl	8000e42 <sensirion_i2c_write_cmd>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8000f48:	2058      	movs	r0, #88	@ 0x58
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff ff3a 	bl	8000dca <sensirion_i2c_read_words>
 8000f56:	4603      	mov	r3, r0
 8000f58:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 8000f5a:	897a      	ldrh	r2, [r7, #10]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8000f60:	893a      	ldrh	r2, [r7, #8]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	801a      	strh	r2, [r3, #0]

    return ret;
 8000f66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t* tvoc_ppb,
                                        uint16_t* co2_eq_ppm) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8000f7c:	f7ff ffd4 	bl	8000f28 <sgp30_measure_iaq>
 8000f80:	4603      	mov	r3, r0
 8000f82:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8000f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 8000f8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f90:	e008      	b.n	8000fa4 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8000f92:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8000f96:	f7ff ffb3 	bl	8000f00 <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffce 	bl	8000f3e <sgp30_read_iaq>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 8000fb2:	2358      	movs	r3, #88	@ 0x58
 8000fb4:	f242 0103 	movw	r1, #8195	@ 0x2003
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff42 	bl	8000e42 <sensirion_i2c_write_cmd>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 8000fc2:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000fc6:	f7ff ff9b 	bl	8000f00 <sensirion_sleep_usec>
    return ret;
 8000fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	@ 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ac      	sub	sp, #176	@ 0xb0
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2288      	movs	r2, #136	@ 0x88
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fcf6 	bl	8004a32 <memset>
  if(hi2c->Instance==I2C1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a21      	ldr	r2, [pc, #132]	@ (80010d0 <HAL_I2C_MspInit+0xb0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d13b      	bne.n	80010c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001050:	2340      	movs	r3, #64	@ 0x40
 8001052:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f002 f935 	bl	80032cc <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff fd8c 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <HAL_I2C_MspInit+0xb4>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <HAL_I2C_MspInit+0xb4>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <HAL_I2C_MspInit+0xb4>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001084:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001088:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800109e:	2304      	movs	r3, #4
 80010a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a8:	4619      	mov	r1, r3
 80010aa:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <HAL_I2C_MspInit+0xb8>)
 80010ac:	f000 fb00 	bl	80016b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_I2C_MspInit+0xb4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_I2C_MspInit+0xb4>)
 80010b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <HAL_I2C_MspInit+0xb4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010c8:	bf00      	nop
 80010ca:	37b0      	adds	r7, #176	@ 0xb0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400

080010dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0ac      	sub	sp, #176	@ 0xb0
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2288      	movs	r2, #136	@ 0x88
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fc98 	bl	8004a32 <memset>
  if(huart->Instance==USART1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a21      	ldr	r2, [pc, #132]	@ (800118c <HAL_UART_MspInit+0xb0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d13a      	bne.n	8001182 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800110c:	2301      	movs	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001110:	2300      	movs	r3, #0
 8001112:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f8d7 	bl	80032cc <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001124:	f7ff fd2e 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <HAL_UART_MspInit+0xb4>)
 800112a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112c:	4a18      	ldr	r2, [pc, #96]	@ (8001190 <HAL_UART_MspInit+0xb4>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6613      	str	r3, [r2, #96]	@ 0x60
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_UART_MspInit+0xb4>)
 8001136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_UART_MspInit+0xb4>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <HAL_UART_MspInit+0xb4>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_UART_MspInit+0xb4>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001158:	23c0      	movs	r3, #192	@ 0xc0
 800115a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001170:	2307      	movs	r3, #7
 8001172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_UART_MspInit+0xb8>)
 800117e:	f000 fa97 	bl	80016b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001182:	bf00      	nop
 8001184:	37b0      	adds	r7, #176	@ 0xb0
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40013800 	.word	0x40013800
 8001190:	40021000 	.word	0x40021000
 8001194:	48000400 	.word	0x48000400

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <NMI_Handler+0x4>

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <MemManage_Handler+0x4>

080011b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <UsageFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ee:	f000 f935 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e00a      	b.n	800121e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001208:	f3af 8000 	nop.w
 800120c:	4601      	mov	r1, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	60ba      	str	r2, [r7, #8]
 8001214:	b2ca      	uxtb	r2, r1
 8001216:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	dbf0      	blt.n	8001208 <_read+0x12>
  }

  return len;
 8001226:	687b      	ldr	r3, [r7, #4]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e009      	b.n	8001256 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	60ba      	str	r2, [r7, #8]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fb10 	bl	8000870 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbf1      	blt.n	8001242 <_write+0x12>
  }
  return len;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_close>:

int _close(int file)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001290:	605a      	str	r2, [r3, #4]
  return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_isatty>:

int _isatty(int file)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	@ (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f003 fbe6 	bl	8004ad0 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20018000 	.word	0x20018000
 8001330:	00000400 	.word	0x00000400
 8001334:	20000168 	.word	0x20000168
 8001338:	200002c0 	.word	0x200002c0

0800133c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001398 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001364:	f7ff ffea 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f003 fba5 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001392:	f7ff fa7f 	bl	8000894 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001398:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013a4:	08005ac8 	.word	0x08005ac8
  ldr r2, =_sbss
 80013a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013ac:	200002bc 	.word	0x200002bc

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>

080013b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f943 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f80e 	bl	80013e4 <HAL_InitTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	e001      	b.n	80013d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d4:	f7ff fe00 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d8:	79fb      	ldrb	r3, [r7, #7]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f0:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_InitTick+0x6c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_InitTick+0x70>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f941 	bl	8001696 <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d809      	bhi.n	8001434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f919 	bl	800165e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_InitTick+0x74>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e007      	b.n	8001444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e004      	b.n	8001444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e001      	b.n	8001444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	2000016c 	.word	0x2000016c

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000016c 	.word	0x2000016c

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	@ (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	@ (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	@ 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff47 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff5c 	bl	800152c <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffb0 	bl	8001604 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016be:	e17f      	b.n	80019c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8171 	beq.w	80019ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d005      	beq.n	80016f0 <HAL_GPIO_Init+0x40>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d130      	bne.n	8001752 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001726:	2201      	movs	r2, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	f003 0201 	and.w	r2, r3, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b03      	cmp	r3, #3
 800175c:	d118      	bne.n	8001790 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001764:	2201      	movs	r2, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	f003 0201 	and.w	r2, r3, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b03      	cmp	r3, #3
 800179a:	d017      	beq.n	80017cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d123      	bne.n	8001820 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	6939      	ldr	r1, [r7, #16]
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80ac 	beq.w	80019ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	4b5f      	ldr	r3, [pc, #380]	@ (80019e0 <HAL_GPIO_Init+0x330>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001866:	4a5e      	ldr	r2, [pc, #376]	@ (80019e0 <HAL_GPIO_Init+0x330>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6613      	str	r3, [r2, #96]	@ 0x60
 800186e:	4b5c      	ldr	r3, [pc, #368]	@ (80019e0 <HAL_GPIO_Init+0x330>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800187a:	4a5a      	ldr	r2, [pc, #360]	@ (80019e4 <HAL_GPIO_Init+0x334>)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018a4:	d025      	beq.n	80018f2 <HAL_GPIO_Init+0x242>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4f      	ldr	r2, [pc, #316]	@ (80019e8 <HAL_GPIO_Init+0x338>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01f      	beq.n	80018ee <HAL_GPIO_Init+0x23e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4e      	ldr	r2, [pc, #312]	@ (80019ec <HAL_GPIO_Init+0x33c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d019      	beq.n	80018ea <HAL_GPIO_Init+0x23a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4d      	ldr	r2, [pc, #308]	@ (80019f0 <HAL_GPIO_Init+0x340>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x236>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4c      	ldr	r2, [pc, #304]	@ (80019f4 <HAL_GPIO_Init+0x344>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x232>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4b      	ldr	r2, [pc, #300]	@ (80019f8 <HAL_GPIO_Init+0x348>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x22e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4a      	ldr	r2, [pc, #296]	@ (80019fc <HAL_GPIO_Init+0x34c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x22a>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e00c      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018da:	2307      	movs	r3, #7
 80018dc:	e00a      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018de:	2305      	movs	r3, #5
 80018e0:	e008      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018e6:	2303      	movs	r3, #3
 80018e8:	e004      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018f2:	2300      	movs	r3, #0
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	f002 0203 	and.w	r2, r2, #3
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	4093      	lsls	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001904:	4937      	ldr	r1, [pc, #220]	@ (80019e4 <HAL_GPIO_Init+0x334>)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001912:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001936:	4a32      	ldr	r2, [pc, #200]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800193c:	4b30      	ldr	r3, [pc, #192]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001960:	4a27      	ldr	r2, [pc, #156]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800198a:	4a1d      	ldr	r2, [pc, #116]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <HAL_GPIO_Init+0x350>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f47f ae78 	bne.w	80016c0 <HAL_GPIO_Init+0x10>
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	48000400 	.word	0x48000400
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	48001000 	.word	0x48001000
 80019f8:	48001400 	.word	0x48001400
 80019fc:	48001800 	.word	0x48001800
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e08d      	b.n	8001b62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fae0 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	@ 0x24
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d107      	bne.n	8001aae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e006      	b.n	8001abc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001aba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d108      	bne.n	8001ad6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	e007      	b.n	8001ae6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69d9      	ldr	r1, [r3, #28]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	461a      	mov	r2, r3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	817b      	strh	r3, [r7, #10]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	f040 80fd 	bne.w	8001d88 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_I2C_Master_Transmit+0x30>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e0f6      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x21e>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ba4:	f7ff fc6e 	bl	8001484 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2319      	movs	r3, #25
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fa0a 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0e1      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2221      	movs	r2, #33	@ 0x21
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	893a      	ldrh	r2, [r7, #8]
 8001be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2bff      	cmp	r3, #255	@ 0xff
 8001bf6:	d906      	bls.n	8001c06 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	22ff      	movs	r2, #255	@ 0xff
 8001bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001bfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e007      	b.n	8001c16 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c14:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d94 <HAL_I2C_Master_Transmit+0x228>)
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fc05 	bl	8002470 <I2C_TransferConfig>
 8001c66:	e066      	b.n	8001d36 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	4b48      	ldr	r3, [pc, #288]	@ (8001d94 <HAL_I2C_Master_Transmit+0x228>)
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fbfa 	bl	8002470 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c7c:	e05b      	b.n	8001d36 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	6a39      	ldr	r1, [r7, #32]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f9fd 	bl	8002082 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e07b      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d034      	beq.n	8001d36 <HAL_I2C_Master_Transmit+0x1ca>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d130      	bne.n	8001d36 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2180      	movs	r1, #128	@ 0x80
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f976 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e04d      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2bff      	cmp	r3, #255	@ 0xff
 8001cf6:	d90e      	bls.n	8001d16 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	22ff      	movs	r2, #255	@ 0xff
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fbae 	bl	8002470 <I2C_TransferConfig>
 8001d14:	e00f      	b.n	8001d36 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	8979      	ldrh	r1, [r7, #10]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fb9d 	bl	8002470 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d19e      	bne.n	8001c7e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	6a39      	ldr	r1, [r7, #32]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f9e3 	bl	8002110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e01a      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_I2C_Master_Transmit+0x22c>)
 8001d68:	400b      	ands	r3, r1
 8001d6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	80002000 	.word	0x80002000
 8001d98:	fe00e800 	.word	0xfe00e800

08001d9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	461a      	mov	r2, r3
 8001da8:	460b      	mov	r3, r1
 8001daa:	817b      	strh	r3, [r7, #10]
 8001dac:	4613      	mov	r3, r2
 8001dae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	f040 80db 	bne.w	8001f74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2C_Master_Receive+0x30>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e0d4      	b.n	8001f76 <HAL_I2C_Master_Receive+0x1da>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dd4:	f7ff fb56 	bl	8001484 <HAL_GetTick>
 8001dd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2319      	movs	r3, #25
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f8f2 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0bf      	b.n	8001f76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2222      	movs	r2, #34	@ 0x22
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2210      	movs	r2, #16
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	893a      	ldrh	r2, [r7, #8]
 8001e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2bff      	cmp	r3, #255	@ 0xff
 8001e26:	d90e      	bls.n	8001e46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	4b52      	ldr	r3, [pc, #328]	@ (8001f80 <HAL_I2C_Master_Receive+0x1e4>)
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fb16 	bl	8002470 <I2C_TransferConfig>
 8001e44:	e06d      	b.n	8001f22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	8979      	ldrh	r1, [r7, #10]
 8001e58:	4b49      	ldr	r3, [pc, #292]	@ (8001f80 <HAL_I2C_Master_Receive+0x1e4>)
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fb05 	bl	8002470 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e66:	e05c      	b.n	8001f22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	6a39      	ldr	r1, [r7, #32]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f993 	bl	8002198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e07c      	b.n	8001f76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d034      	beq.n	8001f22 <HAL_I2C_Master_Receive+0x186>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d130      	bne.n	8001f22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f880 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e04d      	b.n	8001f76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2bff      	cmp	r3, #255	@ 0xff
 8001ee2:	d90e      	bls.n	8001f02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	22ff      	movs	r2, #255	@ 0xff
 8001ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fab8 	bl	8002470 <I2C_TransferConfig>
 8001f00:	e00f      	b.n	8001f22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 faa7 	bl	8002470 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d19d      	bne.n	8001e68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	6a39      	ldr	r1, [r7, #32]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f8ed 	bl	8002110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e01a      	b.n	8001f76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_I2C_Master_Receive+0x1e8>)
 8001f54:	400b      	ands	r3, r1
 8001f56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	80002400 	.word	0x80002400
 8001f84:	fe00e800 	.word	0xfe00e800

08001f88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d103      	bne.n	8001fa6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d007      	beq.n	8001fc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	619a      	str	r2, [r3, #24]
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe0:	e03b      	b.n	800205a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f962 	bl	80022b0 <I2C_IsErrorOccurred>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e041      	b.n	800207a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d02d      	beq.n	800205a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffe:	f7ff fa41 	bl	8001484 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <I2C_WaitOnFlagUntilTimeout+0x44>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d122      	bne.n	800205a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	429a      	cmp	r2, r3
 8002030:	d113      	bne.n	800205a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f043 0220 	orr.w	r2, r3, #32
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	429a      	cmp	r2, r3
 8002076:	d0b4      	beq.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800208e:	e033      	b.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f90b 	bl	80022b0 <I2C_IsErrorOccurred>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e031      	b.n	8002108 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020aa:	d025      	beq.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ac:	f7ff f9ea 	bl	8001484 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d302      	bcc.n	80020c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11a      	bne.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d013      	beq.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e007      	b.n	8002108 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d1c4      	bne.n	8002090 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800211c:	e02f      	b.n	800217e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f8c4 	bl	80022b0 <I2C_IsErrorOccurred>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e02d      	b.n	800218e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7ff f9a7 	bl	8001484 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	429a      	cmp	r2, r3
 8002140:	d302      	bcc.n	8002148 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11a      	bne.n	800217e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b20      	cmp	r3, #32
 8002154:	d013      	beq.n	800217e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f043 0220 	orr.w	r2, r3, #32
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e007      	b.n	800218e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b20      	cmp	r3, #32
 800218a:	d1c8      	bne.n	800211e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80021a8:	e071      	b.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f87e 	bl	80022b0 <I2C_IsErrorOccurred>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d13b      	bne.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d138      	bne.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d105      	bne.n	80021ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d121      	bne.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2210      	movs	r2, #16
 8002200:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2204      	movs	r2, #4
 8002206:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2220      	movs	r2, #32
 800220e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800221c:	400b      	ands	r3, r1
 800221e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	75fb      	strb	r3, [r7, #23]
 800223c:	e002      	b.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002244:	f7ff f91e 	bl	8001484 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d119      	bne.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d00f      	beq.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d002      	beq.n	80022a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d083      	beq.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	fe00e800 	.word	0xfe00e800

080022b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d068      	beq.n	80023ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2210      	movs	r2, #16
 80022e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022e4:	e049      	b.n	800237a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d045      	beq.n	800237a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022ee:	f7ff f8c9 	bl	8001484 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d302      	bcc.n	8002304 <I2C_IsErrorOccurred+0x54>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d13a      	bne.n	800237a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002316:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002322:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002326:	d121      	bne.n	800236c <I2C_IsErrorOccurred+0xbc>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800232e:	d01d      	beq.n	800236c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b20      	cmp	r3, #32
 8002334:	d01a      	beq.n	800236c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002344:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002346:	f7ff f89d 	bl	8001484 <HAL_GetTick>
 800234a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234c:	e00e      	b.n	800236c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800234e:	f7ff f899 	bl	8001484 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b19      	cmp	r3, #25
 800235a:	d907      	bls.n	800236c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800236a:	e006      	b.n	800237a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b20      	cmp	r3, #32
 8002378:	d1e9      	bne.n	800234e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b20      	cmp	r3, #32
 8002386:	d003      	beq.n	8002390 <I2C_IsErrorOccurred+0xe0>
 8002388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0aa      	beq.n	80022e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2220      	movs	r2, #32
 800239e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002414:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800241c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fdaf 	bl	8001f88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <I2C_IsErrorOccurred+0x1bc>)
 8002436:	400b      	ands	r3, r1
 8002438:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002462:	4618      	mov	r0, r3
 8002464:	3728      	adds	r7, #40	@ 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	fe00e800 	.word	0xfe00e800

08002470 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	4613      	mov	r3, r2
 8002480:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002488:	7a7b      	ldrb	r3, [r7, #9]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002490:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	4313      	orrs	r3, r2
 800249a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800249e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	0d5b      	lsrs	r3, r3, #21
 80024aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <I2C_TransferConfig+0x60>)
 80024b0:	430b      	orrs	r3, r1
 80024b2:	43db      	mvns	r3, r3
 80024b4:	ea02 0103 	and.w	r1, r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	03ff63ff 	.word	0x03ff63ff

080024d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d138      	bne.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e032      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	@ 0x24
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d139      	bne.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258a:	2302      	movs	r3, #2
 800258c:	e033      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2224      	movs	r2, #36	@ 0x24
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002608:	4b04      	ldr	r3, [pc, #16]	@ (800261c <HAL_PWREx_GetVoltageRange+0x18>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40007000 	.word	0x40007000

08002620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800262e:	d130      	bne.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002630:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800263c:	d038      	beq.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800263e:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002646:	4a1e      	ldr	r2, [pc, #120]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002648:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800264e:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2232      	movs	r2, #50	@ 0x32
 8002654:	fb02 f303 	mul.w	r3, r2, r3
 8002658:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0c9b      	lsrs	r3, r3, #18
 8002660:	3301      	adds	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002664:	e002      	b.n	800266c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3b01      	subs	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800266c:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002678:	d102      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x60>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f2      	bne.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002680:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800268c:	d110      	bne.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e00f      	b.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800269a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269e:	d007      	beq.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026a0:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026a8:	4a05      	ldr	r2, [pc, #20]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40007000 	.word	0x40007000
 80026c4:	20000000 	.word	0x20000000
 80026c8:	431bde83 	.word	0x431bde83

080026cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e3ca      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	4b97      	ldr	r3, [pc, #604]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e8:	4b94      	ldr	r3, [pc, #592]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80e4 	beq.w	80028c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_RCC_OscConfig+0x4a>
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	f040 808b 	bne.w	8002824 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b01      	cmp	r3, #1
 8002712:	f040 8087 	bne.w	8002824 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002716:	4b89      	ldr	r3, [pc, #548]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x62>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e3a2      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1a      	ldr	r2, [r3, #32]
 8002732:	4b82      	ldr	r3, [pc, #520]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_RCC_OscConfig+0x7c>
 800273e:	4b7f      	ldr	r3, [pc, #508]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002746:	e005      	b.n	8002754 <HAL_RCC_OscConfig+0x88>
 8002748:	4b7c      	ldr	r3, [pc, #496]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002754:	4293      	cmp	r3, r2
 8002756:	d223      	bcs.n	80027a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fd55 	bl	800320c <RCC_SetFlashLatencyFromMSIRange>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e383      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276c:	4b73      	ldr	r3, [pc, #460]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a72      	ldr	r2, [pc, #456]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b70      	ldr	r3, [pc, #448]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	496d      	ldr	r1, [pc, #436]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278a:	4b6c      	ldr	r3, [pc, #432]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	4968      	ldr	r1, [pc, #416]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
 800279e:	e025      	b.n	80027ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a0:	4b66      	ldr	r3, [pc, #408]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a65      	ldr	r2, [pc, #404]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b63      	ldr	r3, [pc, #396]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4960      	ldr	r1, [pc, #384]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027be:	4b5f      	ldr	r3, [pc, #380]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	495b      	ldr	r1, [pc, #364]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fd15 	bl	800320c <RCC_SetFlashLatencyFromMSIRange>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e343      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ec:	f000 fc4a 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b52      	ldr	r3, [pc, #328]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	4950      	ldr	r1, [pc, #320]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	4a4e      	ldr	r2, [pc, #312]	@ (8002944 <HAL_RCC_OscConfig+0x278>)
 800280a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800280c:	4b4e      	ldr	r3, [pc, #312]	@ (8002948 <HAL_RCC_OscConfig+0x27c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fde7 	bl	80013e4 <HAL_InitTick>
 8002816:	4603      	mov	r3, r0
 8002818:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d052      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	e327      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d032      	beq.n	8002892 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800282c:	4b43      	ldr	r3, [pc, #268]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a42      	ldr	r2, [pc, #264]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002838:	f7fe fe24 	bl	8001484 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002840:	f7fe fe20 	bl	8001484 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e310      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002852:	4b3a      	ldr	r3, [pc, #232]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800285e:	4b37      	ldr	r3, [pc, #220]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a36      	ldr	r2, [pc, #216]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002864:	f043 0308 	orr.w	r3, r3, #8
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b34      	ldr	r3, [pc, #208]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4931      	ldr	r1, [pc, #196]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800287c:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	492c      	ldr	r1, [pc, #176]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
 8002890:	e01a      	b.n	80028c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002892:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a29      	ldr	r2, [pc, #164]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800289e:	f7fe fdf1 	bl	8001484 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a6:	f7fe fded 	bl	8001484 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e2dd      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028b8:	4b20      	ldr	r3, [pc, #128]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x1da>
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d074      	beq.n	80029be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x21a>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b0c      	cmp	r3, #12
 80028de:	d10e      	bne.n	80028fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d10b      	bne.n	80028fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d064      	beq.n	80029bc <HAL_RCC_OscConfig+0x2f0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d160      	bne.n	80029bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e2ba      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x24a>
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0b      	ldr	r2, [pc, #44]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e026      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800291e:	d115      	bne.n	800294c <HAL_RCC_OscConfig+0x280>
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a05      	ldr	r2, [pc, #20]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002926:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a02      	ldr	r2, [pc, #8]	@ (800293c <HAL_RCC_OscConfig+0x270>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e014      	b.n	8002964 <HAL_RCC_OscConfig+0x298>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	08005a3c 	.word	0x08005a3c
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004
 800294c:	4ba0      	ldr	r3, [pc, #640]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a9f      	ldr	r2, [pc, #636]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a9c      	ldr	r2, [pc, #624]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 800295e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fd8a 	bl	8001484 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe fd86 	bl	8001484 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	@ 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e276      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002986:	4b92      	ldr	r3, [pc, #584]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x2a8>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fd76 	bl	8001484 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe fd72 	bl	8001484 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	@ 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e262      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x2d0>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d060      	beq.n	8002a8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x310>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d119      	bne.n	8002a0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d116      	bne.n	8002a0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029dc:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_OscConfig+0x328>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e23f      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b76      	ldr	r3, [pc, #472]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	4973      	ldr	r1, [pc, #460]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a08:	e040      	b.n	8002a8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d023      	beq.n	8002a5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a12:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fd31 	bl	8001484 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fd2d 	bl	8001484 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e21d      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a38:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b62      	ldr	r3, [pc, #392]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	495f      	ldr	r1, [pc, #380]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
 8002a58:	e018      	b.n	8002a8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fd0d 	bl	8001484 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fd09 	bl	8001484 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1f9      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a80:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01c      	beq.n	8002ada <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fce8 	bl	8001484 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fce4 	bl	8001484 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1d4      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aca:	4b41      	ldr	r3, [pc, #260]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ef      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x3ec>
 8002ad8:	e01b      	b.n	8002b12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ada:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae0:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe fccb 	bl	8001484 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af2:	f7fe fcc7 	bl	8001484 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1b7      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b04:	4b32      	ldr	r3, [pc, #200]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1ef      	bne.n	8002af2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80a6 	beq.w	8002c6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b24:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	4a26      	ldr	r2, [pc, #152]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b3c:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4c:	4b21      	ldr	r3, [pc, #132]	@ (8002bd4 <HAL_RCC_OscConfig+0x508>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d118      	bne.n	8002b8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b58:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <HAL_RCC_OscConfig+0x508>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_RCC_OscConfig+0x508>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b64:	f7fe fc8e 	bl	8001484 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7fe fc8a 	bl	8001484 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e17a      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <HAL_RCC_OscConfig+0x508>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d108      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4d8>
 8002b92:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b98:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba2:	e029      	b.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d115      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x50c>
 8002bac:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb2:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bbc:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	4a03      	ldr	r2, [pc, #12]	@ (8002bd0 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	4a9b      	ldr	r2, [pc, #620]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002be8:	4b98      	ldr	r3, [pc, #608]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bee:	4a97      	ldr	r2, [pc, #604]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d016      	beq.n	8002c2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe fc40 	bl	8001484 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe fc3c 	bl	8001484 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e12a      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ed      	beq.n	8002c08 <HAL_RCC_OscConfig+0x53c>
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fc29 	bl	8001484 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fc25 	bl	8001484 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e113      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ed      	bne.n	8002c36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5a:	7ffb      	ldrb	r3, [r7, #31]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b7a      	ldr	r3, [pc, #488]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	4a79      	ldr	r2, [pc, #484]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80fe 	beq.w	8002e72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	f040 80d0 	bne.w	8002e20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c80:	4b72      	ldr	r3, [pc, #456]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0203 	and.w	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d130      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d127      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d11f      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cc0:	2a07      	cmp	r2, #7
 8002cc2:	bf14      	ite	ne
 8002cc4:	2201      	movne	r2, #1
 8002cc6:	2200      	moveq	r2, #0
 8002cc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d113      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d06e      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d069      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cfc:	4b53      	ldr	r3, [pc, #332]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d08:	4b50      	ldr	r3, [pc, #320]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0ad      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d18:	4b4c      	ldr	r3, [pc, #304]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d24:	f7fe fbae 	bl	8001484 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fbaa 	bl	8001484 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e09a      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3e:	4b43      	ldr	r3, [pc, #268]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4a:	4b40      	ldr	r3, [pc, #256]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	4b40      	ldr	r3, [pc, #256]	@ (8002e50 <HAL_RCC_OscConfig+0x784>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d5a:	3a01      	subs	r2, #1
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d64:	0212      	lsls	r2, r2, #8
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d6c:	0852      	lsrs	r2, r2, #1
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0552      	lsls	r2, r2, #21
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d78:	0852      	lsrs	r2, r2, #1
 8002d7a:	3a01      	subs	r2, #1
 8002d7c:	0652      	lsls	r2, r2, #25
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d84:	0912      	lsrs	r2, r2, #4
 8002d86:	0452      	lsls	r2, r2, #17
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	4930      	ldr	r1, [pc, #192]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d90:	4b2e      	ldr	r3, [pc, #184]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2d      	ldr	r2, [pc, #180]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002da8:	f7fe fb6c 	bl	8001484 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fb68 	bl	8001484 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e058      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dce:	e050      	b.n	8002e72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e04f      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d148      	bne.n	8002e72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002de0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dec:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a16      	ldr	r2, [pc, #88]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002df8:	f7fe fb44 	bl	8001484 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fb40 	bl	8001484 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e030      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x734>
 8002e1e:	e028      	b.n	8002e72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d023      	beq.n	8002e6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a08      	ldr	r2, [pc, #32]	@ (8002e4c <HAL_RCC_OscConfig+0x780>)
 8002e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fb27 	bl	8001484 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e38:	e00c      	b.n	8002e54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fe fb23 	bl	8001484 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d905      	bls.n	8002e54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e013      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <HAL_RCC_OscConfig+0x7b0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ec      	bne.n	8002e3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_RCC_OscConfig+0x7b0>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4905      	ldr	r1, [pc, #20]	@ (8002e7c <HAL_RCC_OscConfig+0x7b0>)
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_OscConfig+0x7b4>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
 8002e6c:	e001      	b.n	8002e72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	feeefffc 	.word	0xfeeefffc

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0e7      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b75      	ldr	r3, [pc, #468]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d910      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b72      	ldr	r3, [pc, #456]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 0207 	bic.w	r2, r3, #7
 8002eae:	4970      	ldr	r1, [pc, #448]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cf      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d908      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4960      	ldr	r1, [pc, #384]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d04c      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d121      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0a6      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f22:	4b54      	ldr	r3, [pc, #336]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e09a      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e08e      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e086      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b46      	ldr	r3, [pc, #280]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4943      	ldr	r1, [pc, #268]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fa8a 	bl	8001484 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe fa86 	bl	8001484 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e06e      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d208      	bcs.n	8002fca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	492b      	ldr	r1, [pc, #172]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fca:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d210      	bcs.n	8002ffa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd8:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 0207 	bic.w	r2, r3, #7
 8002fe0:	4923      	ldr	r1, [pc, #140]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe8:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <HAL_RCC_ClockConfig+0x1ec>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e036      	b.n	8003068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4918      	ldr	r1, [pc, #96]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003024:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4910      	ldr	r1, [pc, #64]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003038:	f000 f824 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	490b      	ldr	r1, [pc, #44]	@ (8003078 <HAL_RCC_ClockConfig+0x1f4>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	4a09      	ldr	r2, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1f8>)
 8003056:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1fc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe f9c1 	bl	80013e4 <HAL_InitTick>
 8003062:	4603      	mov	r3, r0
 8003064:	72fb      	strb	r3, [r7, #11]

  return status;
 8003066:	7afb      	ldrb	r3, [r7, #11]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
 8003078:	08005a3c 	.word	0x08005a3c
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003092:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800309c:	4b3b      	ldr	r3, [pc, #236]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x34>
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d121      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d11e      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030b8:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c4:	4b31      	ldr	r3, [pc, #196]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 80030c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e005      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10d      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030fc:	4b25      	ldr	r3, [pc, #148]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x110>)
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e004      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d101      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003108:	4b23      	ldr	r3, [pc, #140]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x114>)
 800310a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d134      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003112:	4b1e      	ldr	r3, [pc, #120]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0xa6>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d003      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0xac>
 8003128:	e005      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x110>)
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	e005      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003130:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x114>)
 8003132:	617b      	str	r3, [r7, #20]
      break;
 8003134:	e002      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800313c:	4b13      	ldr	r3, [pc, #76]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	3301      	adds	r3, #1
 8003148:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	fb03 f202 	mul.w	r2, r3, r2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003162:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <HAL_RCC_GetSysClockFreq+0x108>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	0e5b      	lsrs	r3, r3, #25
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	3301      	adds	r3, #1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800317c:	69bb      	ldr	r3, [r7, #24]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3724      	adds	r7, #36	@ 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	08005a54 	.word	0x08005a54
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4904      	ldr	r1, [pc, #16]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08005a4c 	.word	0x08005a4c

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031e4:	f7ff ffda 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0adb      	lsrs	r3, r3, #11
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	08005a4c 	.word	0x08005a4c

0800320c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003218:	4b2a      	ldr	r3, [pc, #168]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003224:	f7ff f9ee 	bl	8002604 <HAL_PWREx_GetVoltageRange>
 8003228:	6178      	str	r0, [r7, #20]
 800322a:	e014      	b.n	8003256 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	4a24      	ldr	r2, [pc, #144]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003236:	6593      	str	r3, [r2, #88]	@ 0x58
 8003238:	4b22      	ldr	r3, [pc, #136]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003244:	f7ff f9de 	bl	8002604 <HAL_PWREx_GetVoltageRange>
 8003248:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a1d      	ldr	r2, [pc, #116]	@ (80032c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325c:	d10b      	bne.n	8003276 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b80      	cmp	r3, #128	@ 0x80
 8003262:	d919      	bls.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2ba0      	cmp	r3, #160	@ 0xa0
 8003268:	d902      	bls.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800326a:	2302      	movs	r3, #2
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	e013      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003270:	2301      	movs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e010      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b80      	cmp	r3, #128	@ 0x80
 800327a:	d902      	bls.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800327c:	2303      	movs	r3, #3
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e00a      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d102      	bne.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003288:	2302      	movs	r3, #2
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e004      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b70      	cmp	r3, #112	@ 0x70
 8003292:	d101      	bne.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 0207 	bic.w	r2, r3, #7
 80032a0:	4909      	ldr	r1, [pc, #36]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032a8:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40022000 	.word	0x40022000

080032cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d4:	2300      	movs	r3, #0
 80032d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032d8:	2300      	movs	r3, #0
 80032da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d041      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032f0:	d02a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032f6:	d824      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032fc:	d008      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003302:	d81e      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800330c:	d010      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800330e:	e018      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003310:	4b86      	ldr	r3, [pc, #536]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a85      	ldr	r2, [pc, #532]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800331c:	e015      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fabb 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800332e:	e00c      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3320      	adds	r3, #32
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fba6 	bl	8003a88 <RCCEx_PLLSAI2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003340:	e003      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	74fb      	strb	r3, [r7, #19]
      break;
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003350:	4b76      	ldr	r3, [pc, #472]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800335e:	4973      	ldr	r1, [pc, #460]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003366:	e001      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d041      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800337c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003380:	d02a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003382:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003386:	d824      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003388:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800338c:	d008      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800338e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003392:	d81e      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800339e:	e018      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033a0:	4b62      	ldr	r3, [pc, #392]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a61      	ldr	r2, [pc, #388]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ac:	e015      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fa73 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033be:	e00c      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3320      	adds	r3, #32
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fb5e 	bl	8003a88 <RCCEx_PLLSAI2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d0:	e003      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	74fb      	strb	r3, [r7, #19]
      break;
 80033d6:	e000      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033da:	7cfb      	ldrb	r3, [r7, #19]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033e0:	4b52      	ldr	r3, [pc, #328]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ee:	494f      	ldr	r1, [pc, #316]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033f6:	e001      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a0 	beq.w	800354a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	4b41      	ldr	r3, [pc, #260]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	4a40      	ldr	r2, [pc, #256]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003430:	4b3e      	ldr	r3, [pc, #248]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343c:	2301      	movs	r3, #1
 800343e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003440:	4b3b      	ldr	r3, [pc, #236]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a3a      	ldr	r2, [pc, #232]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800344c:	f7fe f81a 	bl	8001484 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003454:	f7fe f816 	bl	8001484 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	74fb      	strb	r3, [r7, #19]
        break;
 8003466:	e005      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003468:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ef      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d15c      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800347a:	4b2c      	ldr	r3, [pc, #176]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003484:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01f      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	d019      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003498:	4b24      	ldr	r3, [pc, #144]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034a4:	4b21      	ldr	r3, [pc, #132]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	4a20      	ldr	r2, [pc, #128]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ba:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034c4:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fd ffd5 	bl	8001484 <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034dc:	e00b      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd ffd1 	bl	8001484 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d902      	bls.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	74fb      	strb	r3, [r7, #19]
            break;
 80034f4:	e006      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f6:	4b0d      	ldr	r3, [pc, #52]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ec      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350a:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800351a:	4904      	ldr	r1, [pc, #16]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003522:	e009      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
 8003528:	e006      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003538:	7c7b      	ldrb	r3, [r7, #17]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4b9e      	ldr	r3, [pc, #632]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003542:	4a9d      	ldr	r2, [pc, #628]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003556:	4b98      	ldr	r3, [pc, #608]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355c:	f023 0203 	bic.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	4994      	ldr	r1, [pc, #592]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003578:	4b8f      	ldr	r3, [pc, #572]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357e:	f023 020c 	bic.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003586:	498c      	ldr	r1, [pc, #560]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800359a:	4b87      	ldr	r3, [pc, #540]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	4983      	ldr	r1, [pc, #524]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035bc:	4b7e      	ldr	r3, [pc, #504]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	497b      	ldr	r1, [pc, #492]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035de:	4b76      	ldr	r3, [pc, #472]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ec:	4972      	ldr	r1, [pc, #456]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003600:	4b6d      	ldr	r3, [pc, #436]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360e:	496a      	ldr	r1, [pc, #424]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003622:	4b65      	ldr	r3, [pc, #404]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	4961      	ldr	r1, [pc, #388]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003644:	4b5c      	ldr	r3, [pc, #368]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003652:	4959      	ldr	r1, [pc, #356]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003666:	4b54      	ldr	r3, [pc, #336]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003674:	4950      	ldr	r1, [pc, #320]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003688:	4b4b      	ldr	r3, [pc, #300]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	4948      	ldr	r1, [pc, #288]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036aa:	4b43      	ldr	r3, [pc, #268]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b8:	493f      	ldr	r1, [pc, #252]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d028      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036cc:	4b3a      	ldr	r3, [pc, #232]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036da:	4937      	ldr	r1, [pc, #220]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ea:	d106      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ec:	4b32      	ldr	r3, [pc, #200]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a31      	ldr	r2, [pc, #196]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036f6:	60d3      	str	r3, [r2, #12]
 80036f8:	e011      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003702:	d10c      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f8c8 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d028      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800372a:	4b23      	ldr	r3, [pc, #140]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	491f      	ldr	r1, [pc, #124]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003748:	d106      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374a:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003754:	60d3      	str	r3, [r2, #12]
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3304      	adds	r3, #4
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f899 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d02b      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003788:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	4908      	ldr	r1, [pc, #32]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037a6:	d109      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a8:	4b03      	ldr	r3, [pc, #12]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a02      	ldr	r2, [pc, #8]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037b2:	60d3      	str	r3, [r2, #12]
 80037b4:	e014      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2101      	movs	r1, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f867 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037d6:	7cfb      	ldrb	r3, [r7, #19]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02f      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037fa:	4928      	ldr	r1, [pc, #160]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800380a:	d10d      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	2102      	movs	r1, #2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f844 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d014      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	74bb      	strb	r3, [r7, #18]
 8003826:	e011      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003830:	d10c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3320      	adds	r3, #32
 8003836:	2102      	movs	r1, #2
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f925 	bl	8003a88 <RCCEx_PLLSAI2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003858:	4b10      	ldr	r3, [pc, #64]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003866:	490d      	ldr	r1, [pc, #52]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800387a:	4b08      	ldr	r3, [pc, #32]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003880:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800388a:	4904      	ldr	r1, [pc, #16]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003892:	7cbb      	ldrb	r3, [r7, #18]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000

080038a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ae:	4b75      	ldr	r3, [pc, #468]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038ba:	4b72      	ldr	r3, [pc, #456]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0203 	and.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10d      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
       ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
       ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d047      	beq.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e044      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d018      	beq.n	8003926 <RCCEx_PLLSAI1_Config+0x86>
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d825      	bhi.n	8003944 <RCCEx_PLLSAI1_Config+0xa4>
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d002      	beq.n	8003902 <RCCEx_PLLSAI1_Config+0x62>
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d009      	beq.n	8003914 <RCCEx_PLLSAI1_Config+0x74>
 8003900:	e020      	b.n	8003944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003902:	4b60      	ldr	r3, [pc, #384]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11d      	bne.n	800394a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003912:	e01a      	b.n	800394a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003914:	4b5b      	ldr	r3, [pc, #364]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d116      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e013      	b.n	800394e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003926:	4b57      	ldr	r3, [pc, #348]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003932:	4b54      	ldr	r3, [pc, #336]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003942:	e006      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e004      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394a:	bf00      	nop
 800394c:	e002      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003952:	bf00      	nop
    }

    if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	430b      	orrs	r3, r1
 8003970:	4944      	ldr	r1, [pc, #272]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d17d      	bne.n	8003a78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800397c:	4b41      	ldr	r3, [pc, #260]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a40      	ldr	r2, [pc, #256]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003988:	f7fd fd7c 	bl	8001484 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800398e:	e009      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003990:	f7fd fd78 	bl	8001484 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	73fb      	strb	r3, [r7, #15]
        break;
 80039a2:	e005      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a4:	4b37      	ldr	r3, [pc, #220]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ef      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d160      	bne.n	8003a78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d111      	bne.n	80039e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039bc:	4b31      	ldr	r3, [pc, #196]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	0211      	lsls	r1, r2, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	0912      	lsrs	r2, r2, #4
 80039d4:	0452      	lsls	r2, r2, #17
 80039d6:	430a      	orrs	r2, r1
 80039d8:	492a      	ldr	r1, [pc, #168]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	610b      	str	r3, [r1, #16]
 80039de:	e027      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d112      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e6:	4b27      	ldr	r3, [pc, #156]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6892      	ldr	r2, [r2, #8]
 80039f6:	0211      	lsls	r1, r2, #8
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6912      	ldr	r2, [r2, #16]
 80039fc:	0852      	lsrs	r2, r2, #1
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0552      	lsls	r2, r2, #21
 8003a02:	430a      	orrs	r2, r1
 8003a04:	491f      	ldr	r1, [pc, #124]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]
 8003a0a:	e011      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6892      	ldr	r2, [r2, #8]
 8003a1c:	0211      	lsls	r1, r2, #8
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6952      	ldr	r2, [r2, #20]
 8003a22:	0852      	lsrs	r2, r2, #1
 8003a24:	3a01      	subs	r2, #1
 8003a26:	0652      	lsls	r2, r2, #25
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	4916      	ldr	r1, [pc, #88]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a30:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a13      	ldr	r2, [pc, #76]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fd fd22 	bl	8001484 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a42:	e009      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a44:	f7fd fd1e 	bl	8001484 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	73fb      	strb	r3, [r7, #15]
          break;
 8003a56:	e005      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a58:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	4904      	ldr	r1, [pc, #16]	@ (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000

08003a88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a96:	4b6a      	ldr	r3, [pc, #424]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d018      	beq.n	8003ad4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aa2:	4b67      	ldr	r3, [pc, #412]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0203 	and.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d10d      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003aba:	4b61      	ldr	r3, [pc, #388]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d047      	beq.n	8003b5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	e044      	b.n	8003b5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d018      	beq.n	8003b0e <RCCEx_PLLSAI2_Config+0x86>
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d825      	bhi.n	8003b2c <RCCEx_PLLSAI2_Config+0xa4>
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d002      	beq.n	8003aea <RCCEx_PLLSAI2_Config+0x62>
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d009      	beq.n	8003afc <RCCEx_PLLSAI2_Config+0x74>
 8003ae8:	e020      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aea:	4b55      	ldr	r3, [pc, #340]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11d      	bne.n	8003b32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afa:	e01a      	b.n	8003b32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003afc:	4b50      	ldr	r3, [pc, #320]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b0c:	e013      	b.n	8003b36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b1a:	4b49      	ldr	r3, [pc, #292]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b2a:	e006      	b.n	8003b3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e004      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b42:	4b3f      	ldr	r3, [pc, #252]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	430b      	orrs	r3, r1
 8003b58:	4939      	ldr	r1, [pc, #228]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d167      	bne.n	8003c34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b64:	4b36      	ldr	r3, [pc, #216]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a35      	ldr	r2, [pc, #212]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b70:	f7fd fc88 	bl	8001484 <HAL_GetTick>
 8003b74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b76:	e009      	b.n	8003b8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b78:	f7fd fc84 	bl	8001484 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d902      	bls.n	8003b8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	73fb      	strb	r3, [r7, #15]
        break;
 8003b8a:	e005      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ef      	bne.n	8003b78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d14a      	bne.n	8003c34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d111      	bne.n	8003bc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba4:	4b26      	ldr	r3, [pc, #152]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	0211      	lsls	r1, r2, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68d2      	ldr	r2, [r2, #12]
 8003bba:	0912      	lsrs	r2, r2, #4
 8003bbc:	0452      	lsls	r2, r2, #17
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	491f      	ldr	r1, [pc, #124]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	614b      	str	r3, [r1, #20]
 8003bc6:	e011      	b.n	8003bec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bd0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6892      	ldr	r2, [r2, #8]
 8003bd8:	0211      	lsls	r1, r2, #8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6912      	ldr	r2, [r2, #16]
 8003bde:	0852      	lsrs	r2, r2, #1
 8003be0:	3a01      	subs	r2, #1
 8003be2:	0652      	lsls	r2, r2, #25
 8003be4:	430a      	orrs	r2, r1
 8003be6:	4916      	ldr	r1, [pc, #88]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bec:	4b14      	ldr	r3, [pc, #80]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fc44 	bl	8001484 <HAL_GetTick>
 8003bfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bfe:	e009      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c00:	f7fd fc40 	bl	8001484 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d902      	bls.n	8003c14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	73fb      	strb	r3, [r7, #15]
          break;
 8003c12:	e005      	b.n	8003c20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ef      	beq.n	8003c00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	4904      	ldr	r1, [pc, #16]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000

08003c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e040      	b.n	8003cd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd fa38 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	@ 0x24
 8003c70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fb6a 	bl	8004364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8af 	bl	8003df4 <UART_SetConfig>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e01b      	b.n	8003cd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fbe9 	bl	80044a8 <UART_CheckIdleState>
 8003cd6:	4603      	mov	r3, r0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	@ 0x28
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d177      	bne.n	8003de8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Transmit+0x24>
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e070      	b.n	8003dea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2221      	movs	r2, #33	@ 0x21
 8003d14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d16:	f7fd fbb5 	bl	8001484 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d34:	d108      	bne.n	8003d48 <HAL_UART_Transmit+0x68>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e003      	b.n	8003d50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d50:	e02f      	b.n	8003db2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	@ 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fc4b 	bl	80045f8 <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e03b      	b.n	8003dea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d84:	b292      	uxth	r2, r2
 8003d86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e007      	b.n	8003da0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	781a      	ldrb	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1c9      	bne.n	8003d52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2140      	movs	r1, #64	@ 0x40
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fc15 	bl	80045f8 <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e005      	b.n	8003dea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b08a      	sub	sp, #40	@ 0x28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4ba4      	ldr	r3, [pc, #656]	@ (80040b4 <UART_SetConfig+0x2c0>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a99      	ldr	r2, [pc, #612]	@ (80040b8 <UART_SetConfig+0x2c4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a90      	ldr	r2, [pc, #576]	@ (80040bc <UART_SetConfig+0x2c8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d126      	bne.n	8003ecc <UART_SetConfig+0xd8>
 8003e7e:	4b90      	ldr	r3, [pc, #576]	@ (80040c0 <UART_SetConfig+0x2cc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d81b      	bhi.n	8003ec4 <UART_SetConfig+0xd0>
 8003e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <UART_SetConfig+0xa0>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003ebd 	.word	0x08003ebd
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eaa:	e116      	b.n	80040da <UART_SetConfig+0x2e6>
 8003eac:	2302      	movs	r3, #2
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	e112      	b.n	80040da <UART_SetConfig+0x2e6>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eba:	e10e      	b.n	80040da <UART_SetConfig+0x2e6>
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec2:	e10a      	b.n	80040da <UART_SetConfig+0x2e6>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eca:	e106      	b.n	80040da <UART_SetConfig+0x2e6>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a7c      	ldr	r2, [pc, #496]	@ (80040c4 <UART_SetConfig+0x2d0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d138      	bne.n	8003f48 <UART_SetConfig+0x154>
 8003ed6:	4b7a      	ldr	r3, [pc, #488]	@ (80040c0 <UART_SetConfig+0x2cc>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b0c      	cmp	r3, #12
 8003ee2:	d82d      	bhi.n	8003f40 <UART_SetConfig+0x14c>
 8003ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <UART_SetConfig+0xf8>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f41 	.word	0x08003f41
 8003ef4:	08003f41 	.word	0x08003f41
 8003ef8:	08003f41 	.word	0x08003f41
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f41 	.word	0x08003f41
 8003f04:	08003f41 	.word	0x08003f41
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f29 	.word	0x08003f29
 8003f10:	08003f41 	.word	0x08003f41
 8003f14:	08003f41 	.word	0x08003f41
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f39 	.word	0x08003f39
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e0d8      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e0d4      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f30:	2304      	movs	r3, #4
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f36:	e0d0      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f38:	2308      	movs	r3, #8
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	e0cc      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f40:	2310      	movs	r3, #16
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f46:	e0c8      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80040c8 <UART_SetConfig+0x2d4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d125      	bne.n	8003f9e <UART_SetConfig+0x1aa>
 8003f52:	4b5b      	ldr	r3, [pc, #364]	@ (80040c0 <UART_SetConfig+0x2cc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f5c:	2b30      	cmp	r3, #48	@ 0x30
 8003f5e:	d016      	beq.n	8003f8e <UART_SetConfig+0x19a>
 8003f60:	2b30      	cmp	r3, #48	@ 0x30
 8003f62:	d818      	bhi.n	8003f96 <UART_SetConfig+0x1a2>
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d00a      	beq.n	8003f7e <UART_SetConfig+0x18a>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d814      	bhi.n	8003f96 <UART_SetConfig+0x1a2>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <UART_SetConfig+0x182>
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d008      	beq.n	8003f86 <UART_SetConfig+0x192>
 8003f74:	e00f      	b.n	8003f96 <UART_SetConfig+0x1a2>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7c:	e0ad      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f84:	e0a9      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f86:	2304      	movs	r3, #4
 8003f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8c:	e0a5      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f94:	e0a1      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f96:	2310      	movs	r3, #16
 8003f98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9c:	e09d      	b.n	80040da <UART_SetConfig+0x2e6>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <UART_SetConfig+0x2d8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d125      	bne.n	8003ff4 <UART_SetConfig+0x200>
 8003fa8:	4b45      	ldr	r3, [pc, #276]	@ (80040c0 <UART_SetConfig+0x2cc>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fb4:	d016      	beq.n	8003fe4 <UART_SetConfig+0x1f0>
 8003fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fb8:	d818      	bhi.n	8003fec <UART_SetConfig+0x1f8>
 8003fba:	2b80      	cmp	r3, #128	@ 0x80
 8003fbc:	d00a      	beq.n	8003fd4 <UART_SetConfig+0x1e0>
 8003fbe:	2b80      	cmp	r3, #128	@ 0x80
 8003fc0:	d814      	bhi.n	8003fec <UART_SetConfig+0x1f8>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <UART_SetConfig+0x1d8>
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d008      	beq.n	8003fdc <UART_SetConfig+0x1e8>
 8003fca:	e00f      	b.n	8003fec <UART_SetConfig+0x1f8>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e082      	b.n	80040da <UART_SetConfig+0x2e6>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e07e      	b.n	80040da <UART_SetConfig+0x2e6>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe2:	e07a      	b.n	80040da <UART_SetConfig+0x2e6>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fea:	e076      	b.n	80040da <UART_SetConfig+0x2e6>
 8003fec:	2310      	movs	r3, #16
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff2:	e072      	b.n	80040da <UART_SetConfig+0x2e6>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a35      	ldr	r2, [pc, #212]	@ (80040d0 <UART_SetConfig+0x2dc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d12a      	bne.n	8004054 <UART_SetConfig+0x260>
 8003ffe:	4b30      	ldr	r3, [pc, #192]	@ (80040c0 <UART_SetConfig+0x2cc>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004008:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800400c:	d01a      	beq.n	8004044 <UART_SetConfig+0x250>
 800400e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004012:	d81b      	bhi.n	800404c <UART_SetConfig+0x258>
 8004014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004018:	d00c      	beq.n	8004034 <UART_SetConfig+0x240>
 800401a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800401e:	d815      	bhi.n	800404c <UART_SetConfig+0x258>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <UART_SetConfig+0x238>
 8004024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004028:	d008      	beq.n	800403c <UART_SetConfig+0x248>
 800402a:	e00f      	b.n	800404c <UART_SetConfig+0x258>
 800402c:	2300      	movs	r3, #0
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004032:	e052      	b.n	80040da <UART_SetConfig+0x2e6>
 8004034:	2302      	movs	r3, #2
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403a:	e04e      	b.n	80040da <UART_SetConfig+0x2e6>
 800403c:	2304      	movs	r3, #4
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004042:	e04a      	b.n	80040da <UART_SetConfig+0x2e6>
 8004044:	2308      	movs	r3, #8
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404a:	e046      	b.n	80040da <UART_SetConfig+0x2e6>
 800404c:	2310      	movs	r3, #16
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004052:	e042      	b.n	80040da <UART_SetConfig+0x2e6>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <UART_SetConfig+0x2c4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d13a      	bne.n	80040d4 <UART_SetConfig+0x2e0>
 800405e:	4b18      	ldr	r3, [pc, #96]	@ (80040c0 <UART_SetConfig+0x2cc>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004064:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004068:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800406c:	d01a      	beq.n	80040a4 <UART_SetConfig+0x2b0>
 800406e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004072:	d81b      	bhi.n	80040ac <UART_SetConfig+0x2b8>
 8004074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004078:	d00c      	beq.n	8004094 <UART_SetConfig+0x2a0>
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407e:	d815      	bhi.n	80040ac <UART_SetConfig+0x2b8>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <UART_SetConfig+0x298>
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004088:	d008      	beq.n	800409c <UART_SetConfig+0x2a8>
 800408a:	e00f      	b.n	80040ac <UART_SetConfig+0x2b8>
 800408c:	2300      	movs	r3, #0
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004092:	e022      	b.n	80040da <UART_SetConfig+0x2e6>
 8004094:	2302      	movs	r3, #2
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409a:	e01e      	b.n	80040da <UART_SetConfig+0x2e6>
 800409c:	2304      	movs	r3, #4
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a2:	e01a      	b.n	80040da <UART_SetConfig+0x2e6>
 80040a4:	2308      	movs	r3, #8
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040aa:	e016      	b.n	80040da <UART_SetConfig+0x2e6>
 80040ac:	2310      	movs	r3, #16
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b2:	e012      	b.n	80040da <UART_SetConfig+0x2e6>
 80040b4:	efff69f3 	.word	0xefff69f3
 80040b8:	40008000 	.word	0x40008000
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40004400 	.word	0x40004400
 80040c8:	40004800 	.word	0x40004800
 80040cc:	40004c00 	.word	0x40004c00
 80040d0:	40005000 	.word	0x40005000
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a9f      	ldr	r2, [pc, #636]	@ (800435c <UART_SetConfig+0x568>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d17a      	bne.n	80041da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d824      	bhi.n	8004136 <UART_SetConfig+0x342>
 80040ec:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <UART_SetConfig+0x300>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004137 	.word	0x08004137
 8004104:	08004127 	.word	0x08004127
 8004108:	08004137 	.word	0x08004137
 800410c:	08004137 	.word	0x08004137
 8004110:	08004137 	.word	0x08004137
 8004114:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7ff f84c 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b8f      	ldr	r3, [pc, #572]	@ (8004360 <UART_SetConfig+0x56c>)
 8004122:	61fb      	str	r3, [r7, #28]
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe ffad 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 800412a:	61f8      	str	r0, [r7, #28]
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004132:	61fb      	str	r3, [r7, #28]
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80fb 	beq.w	8004340 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	429a      	cmp	r2, r3
 8004158:	d305      	bcc.n	8004166 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	429a      	cmp	r2, r3
 8004164:	d903      	bls.n	800416e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800416c:	e0e8      	b.n	8004340 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2200      	movs	r2, #0
 8004172:	461c      	mov	r4, r3
 8004174:	4615      	mov	r5, r2
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	022b      	lsls	r3, r5, #8
 8004180:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004184:	0222      	lsls	r2, r4, #8
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	6849      	ldr	r1, [r1, #4]
 800418a:	0849      	lsrs	r1, r1, #1
 800418c:	2000      	movs	r0, #0
 800418e:	4688      	mov	r8, r1
 8004190:	4681      	mov	r9, r0
 8004192:	eb12 0a08 	adds.w	sl, r2, r8
 8004196:	eb43 0b09 	adc.w	fp, r3, r9
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a8:	4650      	mov	r0, sl
 80041aa:	4659      	mov	r1, fp
 80041ac:	f7fc f868 	bl	8000280 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4613      	mov	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041be:	d308      	bcc.n	80041d2 <UART_SetConfig+0x3de>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041c6:	d204      	bcs.n	80041d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	e0b6      	b.n	8004340 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041d8:	e0b2      	b.n	8004340 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041e2:	d15e      	bne.n	80042a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d828      	bhi.n	800423e <UART_SetConfig+0x44a>
 80041ec:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <UART_SetConfig+0x400>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004229 	.word	0x08004229
 8004200:	0800423f 	.word	0x0800423f
 8004204:	0800422f 	.word	0x0800422f
 8004208:	0800423f 	.word	0x0800423f
 800420c:	0800423f 	.word	0x0800423f
 8004210:	0800423f 	.word	0x0800423f
 8004214:	08004237 	.word	0x08004237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe ffcc 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800421c:	61f8      	str	r0, [r7, #28]
        break;
 800421e:	e014      	b.n	800424a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7fe ffde 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8004224:	61f8      	str	r0, [r7, #28]
        break;
 8004226:	e010      	b.n	800424a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004228:	4b4d      	ldr	r3, [pc, #308]	@ (8004360 <UART_SetConfig+0x56c>)
 800422a:	61fb      	str	r3, [r7, #28]
        break;
 800422c:	e00d      	b.n	800424a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422e:	f7fe ff29 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8004232:	61f8      	str	r0, [r7, #28]
        break;
 8004234:	e009      	b.n	800424a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800423a:	61fb      	str	r3, [r7, #28]
        break;
 800423c:	e005      	b.n	800424a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d077      	beq.n	8004340 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005a      	lsls	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d916      	bls.n	800429a <UART_SetConfig+0x4a6>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004272:	d212      	bcs.n	800429a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f023 030f 	bic.w	r3, r3, #15
 800427c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	b29a      	uxth	r2, r3
 800428a:	8afb      	ldrh	r3, [r7, #22]
 800428c:	4313      	orrs	r3, r2
 800428e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	8afa      	ldrh	r2, [r7, #22]
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	e052      	b.n	8004340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042a0:	e04e      	b.n	8004340 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d827      	bhi.n	80042fa <UART_SetConfig+0x506>
 80042aa:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <UART_SetConfig+0x4bc>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042dd 	.word	0x080042dd
 80042b8:	080042e5 	.word	0x080042e5
 80042bc:	080042fb 	.word	0x080042fb
 80042c0:	080042eb 	.word	0x080042eb
 80042c4:	080042fb 	.word	0x080042fb
 80042c8:	080042fb 	.word	0x080042fb
 80042cc:	080042fb 	.word	0x080042fb
 80042d0:	080042f3 	.word	0x080042f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d4:	f7fe ff6e 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80042d8:	61f8      	str	r0, [r7, #28]
        break;
 80042da:	e014      	b.n	8004306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042dc:	f7fe ff80 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 80042e0:	61f8      	str	r0, [r7, #28]
        break;
 80042e2:	e010      	b.n	8004306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004360 <UART_SetConfig+0x56c>)
 80042e6:	61fb      	str	r3, [r7, #28]
        break;
 80042e8:	e00d      	b.n	8004306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ea:	f7fe fecb 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 80042ee:	61f8      	str	r0, [r7, #28]
        break;
 80042f0:	e009      	b.n	8004306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f6:	61fb      	str	r3, [r7, #28]
        break;
 80042f8:	e005      	b.n	8004306 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004304:	bf00      	nop
    }

    if (pclk != 0U)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d019      	beq.n	8004340 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	085a      	lsrs	r2, r3, #1
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	441a      	add	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	d909      	bls.n	800433a <UART_SetConfig+0x546>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800432c:	d205      	bcs.n	800433a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	e002      	b.n	8004340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800434c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004350:	4618      	mov	r0, r3
 8004352:	3728      	adds	r7, #40	@ 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435a:	bf00      	nop
 800435c:	40008000 	.word	0x40008000
 8004360:	00f42400 	.word	0x00f42400

08004364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01a      	beq.n	800447a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004462:	d10a      	bne.n	800447a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b098      	sub	sp, #96	@ 0x60
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b8:	f7fc ffe4 	bl	8001484 <HAL_GetTick>
 80044bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d12e      	bne.n	800452a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d4:	2200      	movs	r2, #0
 80044d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f88c 	bl	80045f8 <UART_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d021      	beq.n	800452a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004504:	647b      	str	r3, [r7, #68]	@ 0x44
 8004506:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800450a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e6      	bne.n	80044e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e062      	b.n	80045f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b04      	cmp	r3, #4
 8004536:	d149      	bne.n	80045cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004540:	2200      	movs	r2, #0
 8004542:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f856 	bl	80045f8 <UART_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d03c      	beq.n	80045cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	623b      	str	r3, [r7, #32]
   return(result);
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004570:	633b      	str	r3, [r7, #48]	@ 0x30
 8004572:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e6      	bne.n	8004552 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	60fb      	str	r3, [r7, #12]
   return(result);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3308      	adds	r3, #8
 80045a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045a4:	61fa      	str	r2, [r7, #28]
 80045a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	617b      	str	r3, [r7, #20]
   return(result);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e5      	bne.n	8004584 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e011      	b.n	80045f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3758      	adds	r7, #88	@ 0x58
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004608:	e04f      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d04b      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fc ff37 	bl	8001484 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <UART_WaitOnFlagUntilTimeout+0x30>
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e04e      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d037      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b80      	cmp	r3, #128	@ 0x80
 800463e:	d034      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b40      	cmp	r3, #64	@ 0x40
 8004644:	d031      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d110      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2208      	movs	r2, #8
 800465a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f838 	bl	80046d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2208      	movs	r2, #8
 8004666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e029      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004684:	d111      	bne.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800468e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f81e 	bl	80046d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e00f      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4013      	ands	r3, r2
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	bf0c      	ite	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	2300      	movne	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d0a0      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b095      	sub	sp, #84	@ 0x54
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e6      	bne.n	80046da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3308      	adds	r3, #8
 8004712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	61fb      	str	r3, [r7, #28]
   return(result);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800472c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	2b01      	cmp	r3, #1
 8004746:	d118      	bne.n	800477a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	60bb      	str	r3, [r7, #8]
   return(result);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0310 	bic.w	r3, r3, #16
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6979      	ldr	r1, [r7, #20]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	613b      	str	r3, [r7, #16]
   return(result);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e6      	bne.n	8004748 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800478e:	bf00      	nop
 8004790:	3754      	adds	r7, #84	@ 0x54
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <std>:
 800479c:	2300      	movs	r3, #0
 800479e:	b510      	push	{r4, lr}
 80047a0:	4604      	mov	r4, r0
 80047a2:	e9c0 3300 	strd	r3, r3, [r0]
 80047a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047aa:	6083      	str	r3, [r0, #8]
 80047ac:	8181      	strh	r1, [r0, #12]
 80047ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80047b0:	81c2      	strh	r2, [r0, #14]
 80047b2:	6183      	str	r3, [r0, #24]
 80047b4:	4619      	mov	r1, r3
 80047b6:	2208      	movs	r2, #8
 80047b8:	305c      	adds	r0, #92	@ 0x5c
 80047ba:	f000 f93a 	bl	8004a32 <memset>
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <std+0x58>)
 80047c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <std+0x5c>)
 80047c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <std+0x60>)
 80047c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <std+0x64>)
 80047cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <std+0x68>)
 80047d0:	6224      	str	r4, [r4, #32]
 80047d2:	429c      	cmp	r4, r3
 80047d4:	d006      	beq.n	80047e4 <std+0x48>
 80047d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047da:	4294      	cmp	r4, r2
 80047dc:	d002      	beq.n	80047e4 <std+0x48>
 80047de:	33d0      	adds	r3, #208	@ 0xd0
 80047e0:	429c      	cmp	r4, r3
 80047e2:	d105      	bne.n	80047f0 <std+0x54>
 80047e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ec:	f000 b99a 	b.w	8004b24 <__retarget_lock_init_recursive>
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	bf00      	nop
 80047f4:	080049ad 	.word	0x080049ad
 80047f8:	080049cf 	.word	0x080049cf
 80047fc:	08004a07 	.word	0x08004a07
 8004800:	08004a2b 	.word	0x08004a2b
 8004804:	20000170 	.word	0x20000170

08004808 <stdio_exit_handler>:
 8004808:	4a02      	ldr	r2, [pc, #8]	@ (8004814 <stdio_exit_handler+0xc>)
 800480a:	4903      	ldr	r1, [pc, #12]	@ (8004818 <stdio_exit_handler+0x10>)
 800480c:	4803      	ldr	r0, [pc, #12]	@ (800481c <stdio_exit_handler+0x14>)
 800480e:	f000 b869 	b.w	80048e4 <_fwalk_sglue>
 8004812:	bf00      	nop
 8004814:	2000000c 	.word	0x2000000c
 8004818:	08005675 	.word	0x08005675
 800481c:	2000001c 	.word	0x2000001c

08004820 <cleanup_stdio>:
 8004820:	6841      	ldr	r1, [r0, #4]
 8004822:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <cleanup_stdio+0x34>)
 8004824:	4299      	cmp	r1, r3
 8004826:	b510      	push	{r4, lr}
 8004828:	4604      	mov	r4, r0
 800482a:	d001      	beq.n	8004830 <cleanup_stdio+0x10>
 800482c:	f000 ff22 	bl	8005674 <_fflush_r>
 8004830:	68a1      	ldr	r1, [r4, #8]
 8004832:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <cleanup_stdio+0x38>)
 8004834:	4299      	cmp	r1, r3
 8004836:	d002      	beq.n	800483e <cleanup_stdio+0x1e>
 8004838:	4620      	mov	r0, r4
 800483a:	f000 ff1b 	bl	8005674 <_fflush_r>
 800483e:	68e1      	ldr	r1, [r4, #12]
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <cleanup_stdio+0x3c>)
 8004842:	4299      	cmp	r1, r3
 8004844:	d004      	beq.n	8004850 <cleanup_stdio+0x30>
 8004846:	4620      	mov	r0, r4
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800484c:	f000 bf12 	b.w	8005674 <_fflush_r>
 8004850:	bd10      	pop	{r4, pc}
 8004852:	bf00      	nop
 8004854:	20000170 	.word	0x20000170
 8004858:	200001d8 	.word	0x200001d8
 800485c:	20000240 	.word	0x20000240

08004860 <global_stdio_init.part.0>:
 8004860:	b510      	push	{r4, lr}
 8004862:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <global_stdio_init.part.0+0x30>)
 8004864:	4c0b      	ldr	r4, [pc, #44]	@ (8004894 <global_stdio_init.part.0+0x34>)
 8004866:	4a0c      	ldr	r2, [pc, #48]	@ (8004898 <global_stdio_init.part.0+0x38>)
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	4620      	mov	r0, r4
 800486c:	2200      	movs	r2, #0
 800486e:	2104      	movs	r1, #4
 8004870:	f7ff ff94 	bl	800479c <std>
 8004874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004878:	2201      	movs	r2, #1
 800487a:	2109      	movs	r1, #9
 800487c:	f7ff ff8e 	bl	800479c <std>
 8004880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004884:	2202      	movs	r2, #2
 8004886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800488a:	2112      	movs	r1, #18
 800488c:	f7ff bf86 	b.w	800479c <std>
 8004890:	200002a8 	.word	0x200002a8
 8004894:	20000170 	.word	0x20000170
 8004898:	08004809 	.word	0x08004809

0800489c <__sfp_lock_acquire>:
 800489c:	4801      	ldr	r0, [pc, #4]	@ (80048a4 <__sfp_lock_acquire+0x8>)
 800489e:	f000 b942 	b.w	8004b26 <__retarget_lock_acquire_recursive>
 80048a2:	bf00      	nop
 80048a4:	200002b1 	.word	0x200002b1

080048a8 <__sfp_lock_release>:
 80048a8:	4801      	ldr	r0, [pc, #4]	@ (80048b0 <__sfp_lock_release+0x8>)
 80048aa:	f000 b93d 	b.w	8004b28 <__retarget_lock_release_recursive>
 80048ae:	bf00      	nop
 80048b0:	200002b1 	.word	0x200002b1

080048b4 <__sinit>:
 80048b4:	b510      	push	{r4, lr}
 80048b6:	4604      	mov	r4, r0
 80048b8:	f7ff fff0 	bl	800489c <__sfp_lock_acquire>
 80048bc:	6a23      	ldr	r3, [r4, #32]
 80048be:	b11b      	cbz	r3, 80048c8 <__sinit+0x14>
 80048c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c4:	f7ff bff0 	b.w	80048a8 <__sfp_lock_release>
 80048c8:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <__sinit+0x28>)
 80048ca:	6223      	str	r3, [r4, #32]
 80048cc:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <__sinit+0x2c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f5      	bne.n	80048c0 <__sinit+0xc>
 80048d4:	f7ff ffc4 	bl	8004860 <global_stdio_init.part.0>
 80048d8:	e7f2      	b.n	80048c0 <__sinit+0xc>
 80048da:	bf00      	nop
 80048dc:	08004821 	.word	0x08004821
 80048e0:	200002a8 	.word	0x200002a8

080048e4 <_fwalk_sglue>:
 80048e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e8:	4607      	mov	r7, r0
 80048ea:	4688      	mov	r8, r1
 80048ec:	4614      	mov	r4, r2
 80048ee:	2600      	movs	r6, #0
 80048f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048f4:	f1b9 0901 	subs.w	r9, r9, #1
 80048f8:	d505      	bpl.n	8004906 <_fwalk_sglue+0x22>
 80048fa:	6824      	ldr	r4, [r4, #0]
 80048fc:	2c00      	cmp	r4, #0
 80048fe:	d1f7      	bne.n	80048f0 <_fwalk_sglue+0xc>
 8004900:	4630      	mov	r0, r6
 8004902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004906:	89ab      	ldrh	r3, [r5, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d907      	bls.n	800491c <_fwalk_sglue+0x38>
 800490c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004910:	3301      	adds	r3, #1
 8004912:	d003      	beq.n	800491c <_fwalk_sglue+0x38>
 8004914:	4629      	mov	r1, r5
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	4306      	orrs	r6, r0
 800491c:	3568      	adds	r5, #104	@ 0x68
 800491e:	e7e9      	b.n	80048f4 <_fwalk_sglue+0x10>

08004920 <iprintf>:
 8004920:	b40f      	push	{r0, r1, r2, r3}
 8004922:	b507      	push	{r0, r1, r2, lr}
 8004924:	4906      	ldr	r1, [pc, #24]	@ (8004940 <iprintf+0x20>)
 8004926:	ab04      	add	r3, sp, #16
 8004928:	6808      	ldr	r0, [r1, #0]
 800492a:	f853 2b04 	ldr.w	r2, [r3], #4
 800492e:	6881      	ldr	r1, [r0, #8]
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	f000 fb75 	bl	8005020 <_vfiprintf_r>
 8004936:	b003      	add	sp, #12
 8004938:	f85d eb04 	ldr.w	lr, [sp], #4
 800493c:	b004      	add	sp, #16
 800493e:	4770      	bx	lr
 8004940:	20000018 	.word	0x20000018

08004944 <sniprintf>:
 8004944:	b40c      	push	{r2, r3}
 8004946:	b530      	push	{r4, r5, lr}
 8004948:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <sniprintf+0x64>)
 800494a:	1e0c      	subs	r4, r1, #0
 800494c:	681d      	ldr	r5, [r3, #0]
 800494e:	b09d      	sub	sp, #116	@ 0x74
 8004950:	da08      	bge.n	8004964 <sniprintf+0x20>
 8004952:	238b      	movs	r3, #139	@ 0x8b
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	f04f 30ff 	mov.w	r0, #4294967295
 800495a:	b01d      	add	sp, #116	@ 0x74
 800495c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004960:	b002      	add	sp, #8
 8004962:	4770      	bx	lr
 8004964:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004968:	f8ad 3014 	strh.w	r3, [sp, #20]
 800496c:	bf14      	ite	ne
 800496e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004972:	4623      	moveq	r3, r4
 8004974:	9304      	str	r3, [sp, #16]
 8004976:	9307      	str	r3, [sp, #28]
 8004978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800497c:	9002      	str	r0, [sp, #8]
 800497e:	9006      	str	r0, [sp, #24]
 8004980:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004984:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004986:	ab21      	add	r3, sp, #132	@ 0x84
 8004988:	a902      	add	r1, sp, #8
 800498a:	4628      	mov	r0, r5
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	f000 fa21 	bl	8004dd4 <_svfiprintf_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	bfbc      	itt	lt
 8004996:	238b      	movlt	r3, #139	@ 0x8b
 8004998:	602b      	strlt	r3, [r5, #0]
 800499a:	2c00      	cmp	r4, #0
 800499c:	d0dd      	beq.n	800495a <sniprintf+0x16>
 800499e:	9b02      	ldr	r3, [sp, #8]
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e7d9      	b.n	800495a <sniprintf+0x16>
 80049a6:	bf00      	nop
 80049a8:	20000018 	.word	0x20000018

080049ac <__sread>:
 80049ac:	b510      	push	{r4, lr}
 80049ae:	460c      	mov	r4, r1
 80049b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b4:	f000 f868 	bl	8004a88 <_read_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	bfab      	itete	ge
 80049bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049be:	89a3      	ldrhlt	r3, [r4, #12]
 80049c0:	181b      	addge	r3, r3, r0
 80049c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049c6:	bfac      	ite	ge
 80049c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049ca:	81a3      	strhlt	r3, [r4, #12]
 80049cc:	bd10      	pop	{r4, pc}

080049ce <__swrite>:
 80049ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d2:	461f      	mov	r7, r3
 80049d4:	898b      	ldrh	r3, [r1, #12]
 80049d6:	05db      	lsls	r3, r3, #23
 80049d8:	4605      	mov	r5, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	4616      	mov	r6, r2
 80049de:	d505      	bpl.n	80049ec <__swrite+0x1e>
 80049e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e4:	2302      	movs	r3, #2
 80049e6:	2200      	movs	r2, #0
 80049e8:	f000 f83c 	bl	8004a64 <_lseek_r>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	4632      	mov	r2, r6
 80049fa:	463b      	mov	r3, r7
 80049fc:	4628      	mov	r0, r5
 80049fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a02:	f000 b853 	b.w	8004aac <_write_r>

08004a06 <__sseek>:
 8004a06:	b510      	push	{r4, lr}
 8004a08:	460c      	mov	r4, r1
 8004a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0e:	f000 f829 	bl	8004a64 <_lseek_r>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	bf15      	itete	ne
 8004a18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a22:	81a3      	strheq	r3, [r4, #12]
 8004a24:	bf18      	it	ne
 8004a26:	81a3      	strhne	r3, [r4, #12]
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <__sclose>:
 8004a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2e:	f000 b809 	b.w	8004a44 <_close_r>

08004a32 <memset>:
 8004a32:	4402      	add	r2, r0
 8004a34:	4603      	mov	r3, r0
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d100      	bne.n	8004a3c <memset+0xa>
 8004a3a:	4770      	bx	lr
 8004a3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a40:	e7f9      	b.n	8004a36 <memset+0x4>
	...

08004a44 <_close_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4d06      	ldr	r5, [pc, #24]	@ (8004a60 <_close_r+0x1c>)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f7fc fc0a 	bl	8001268 <_close>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_close_r+0x1a>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_close_r+0x1a>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	200002ac 	.word	0x200002ac

08004a64 <_lseek_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4d07      	ldr	r5, [pc, #28]	@ (8004a84 <_lseek_r+0x20>)
 8004a68:	4604      	mov	r4, r0
 8004a6a:	4608      	mov	r0, r1
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	602a      	str	r2, [r5, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f7fc fc1f 	bl	80012b6 <_lseek>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_lseek_r+0x1e>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_lseek_r+0x1e>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	200002ac 	.word	0x200002ac

08004a88 <_read_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d07      	ldr	r5, [pc, #28]	@ (8004aa8 <_read_r+0x20>)
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	4608      	mov	r0, r1
 8004a90:	4611      	mov	r1, r2
 8004a92:	2200      	movs	r2, #0
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f7fc fbad 	bl	80011f6 <_read>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_read_r+0x1e>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_read_r+0x1e>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	200002ac 	.word	0x200002ac

08004aac <_write_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d07      	ldr	r5, [pc, #28]	@ (8004acc <_write_r+0x20>)
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	602a      	str	r2, [r5, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7fc fbb8 	bl	8001230 <_write>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_write_r+0x1e>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_write_r+0x1e>
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	200002ac 	.word	0x200002ac

08004ad0 <__errno>:
 8004ad0:	4b01      	ldr	r3, [pc, #4]	@ (8004ad8 <__errno+0x8>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000018 	.word	0x20000018

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	@ (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	@ (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	@ (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 ff6e 	bl	80059d0 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08005ac0 	.word	0x08005ac0
 8004b18:	08005ac0 	.word	0x08005ac0
 8004b1c:	08005ac0 	.word	0x08005ac0
 8004b20:	08005ac4 	.word	0x08005ac4

08004b24 <__retarget_lock_init_recursive>:
 8004b24:	4770      	bx	lr

08004b26 <__retarget_lock_acquire_recursive>:
 8004b26:	4770      	bx	lr

08004b28 <__retarget_lock_release_recursive>:
 8004b28:	4770      	bx	lr
	...

08004b2c <_free_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4605      	mov	r5, r0
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d041      	beq.n	8004bb8 <_free_r+0x8c>
 8004b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b38:	1f0c      	subs	r4, r1, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bfb8      	it	lt
 8004b3e:	18e4      	addlt	r4, r4, r3
 8004b40:	f000 f8e0 	bl	8004d04 <__malloc_lock>
 8004b44:	4a1d      	ldr	r2, [pc, #116]	@ (8004bbc <_free_r+0x90>)
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	b933      	cbnz	r3, 8004b58 <_free_r+0x2c>
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	6014      	str	r4, [r2, #0]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b54:	f000 b8dc 	b.w	8004d10 <__malloc_unlock>
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	d908      	bls.n	8004b6e <_free_r+0x42>
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	1821      	adds	r1, r4, r0
 8004b60:	428b      	cmp	r3, r1
 8004b62:	bf01      	itttt	eq
 8004b64:	6819      	ldreq	r1, [r3, #0]
 8004b66:	685b      	ldreq	r3, [r3, #4]
 8004b68:	1809      	addeq	r1, r1, r0
 8004b6a:	6021      	streq	r1, [r4, #0]
 8004b6c:	e7ed      	b.n	8004b4a <_free_r+0x1e>
 8004b6e:	461a      	mov	r2, r3
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b10b      	cbz	r3, 8004b78 <_free_r+0x4c>
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d9fa      	bls.n	8004b6e <_free_r+0x42>
 8004b78:	6811      	ldr	r1, [r2, #0]
 8004b7a:	1850      	adds	r0, r2, r1
 8004b7c:	42a0      	cmp	r0, r4
 8004b7e:	d10b      	bne.n	8004b98 <_free_r+0x6c>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	4401      	add	r1, r0
 8004b84:	1850      	adds	r0, r2, r1
 8004b86:	4283      	cmp	r3, r0
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	d1e0      	bne.n	8004b4e <_free_r+0x22>
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	6053      	str	r3, [r2, #4]
 8004b92:	4408      	add	r0, r1
 8004b94:	6010      	str	r0, [r2, #0]
 8004b96:	e7da      	b.n	8004b4e <_free_r+0x22>
 8004b98:	d902      	bls.n	8004ba0 <_free_r+0x74>
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	e7d6      	b.n	8004b4e <_free_r+0x22>
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	1821      	adds	r1, r4, r0
 8004ba4:	428b      	cmp	r3, r1
 8004ba6:	bf04      	itt	eq
 8004ba8:	6819      	ldreq	r1, [r3, #0]
 8004baa:	685b      	ldreq	r3, [r3, #4]
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	bf04      	itt	eq
 8004bb0:	1809      	addeq	r1, r1, r0
 8004bb2:	6021      	streq	r1, [r4, #0]
 8004bb4:	6054      	str	r4, [r2, #4]
 8004bb6:	e7ca      	b.n	8004b4e <_free_r+0x22>
 8004bb8:	bd38      	pop	{r3, r4, r5, pc}
 8004bba:	bf00      	nop
 8004bbc:	200002b8 	.word	0x200002b8

08004bc0 <sbrk_aligned>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8004c00 <sbrk_aligned+0x40>)
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	6831      	ldr	r1, [r6, #0]
 8004bc8:	4605      	mov	r5, r0
 8004bca:	b911      	cbnz	r1, 8004bd2 <sbrk_aligned+0x12>
 8004bcc:	f000 fe28 	bl	8005820 <_sbrk_r>
 8004bd0:	6030      	str	r0, [r6, #0]
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 fe23 	bl	8005820 <_sbrk_r>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	d103      	bne.n	8004be6 <sbrk_aligned+0x26>
 8004bde:	f04f 34ff 	mov.w	r4, #4294967295
 8004be2:	4620      	mov	r0, r4
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
 8004be6:	1cc4      	adds	r4, r0, #3
 8004be8:	f024 0403 	bic.w	r4, r4, #3
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d0f8      	beq.n	8004be2 <sbrk_aligned+0x22>
 8004bf0:	1a21      	subs	r1, r4, r0
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 fe14 	bl	8005820 <_sbrk_r>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d1f2      	bne.n	8004be2 <sbrk_aligned+0x22>
 8004bfc:	e7ef      	b.n	8004bde <sbrk_aligned+0x1e>
 8004bfe:	bf00      	nop
 8004c00:	200002b4 	.word	0x200002b4

08004c04 <_malloc_r>:
 8004c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c08:	1ccd      	adds	r5, r1, #3
 8004c0a:	f025 0503 	bic.w	r5, r5, #3
 8004c0e:	3508      	adds	r5, #8
 8004c10:	2d0c      	cmp	r5, #12
 8004c12:	bf38      	it	cc
 8004c14:	250c      	movcc	r5, #12
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	4606      	mov	r6, r0
 8004c1a:	db01      	blt.n	8004c20 <_malloc_r+0x1c>
 8004c1c:	42a9      	cmp	r1, r5
 8004c1e:	d904      	bls.n	8004c2a <_malloc_r+0x26>
 8004c20:	230c      	movs	r3, #12
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	2000      	movs	r0, #0
 8004c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d00 <_malloc_r+0xfc>
 8004c2e:	f000 f869 	bl	8004d04 <__malloc_lock>
 8004c32:	f8d8 3000 	ldr.w	r3, [r8]
 8004c36:	461c      	mov	r4, r3
 8004c38:	bb44      	cbnz	r4, 8004c8c <_malloc_r+0x88>
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f7ff ffbf 	bl	8004bc0 <sbrk_aligned>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	4604      	mov	r4, r0
 8004c46:	d158      	bne.n	8004cfa <_malloc_r+0xf6>
 8004c48:	f8d8 4000 	ldr.w	r4, [r8]
 8004c4c:	4627      	mov	r7, r4
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	d143      	bne.n	8004cda <_malloc_r+0xd6>
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	d04b      	beq.n	8004cee <_malloc_r+0xea>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	4639      	mov	r1, r7
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	eb04 0903 	add.w	r9, r4, r3
 8004c60:	f000 fdde 	bl	8005820 <_sbrk_r>
 8004c64:	4581      	cmp	r9, r0
 8004c66:	d142      	bne.n	8004cee <_malloc_r+0xea>
 8004c68:	6821      	ldr	r1, [r4, #0]
 8004c6a:	1a6d      	subs	r5, r5, r1
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff ffa6 	bl	8004bc0 <sbrk_aligned>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d03a      	beq.n	8004cee <_malloc_r+0xea>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	442b      	add	r3, r5
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	bb62      	cbnz	r2, 8004ce0 <_malloc_r+0xdc>
 8004c86:	f8c8 7000 	str.w	r7, [r8]
 8004c8a:	e00f      	b.n	8004cac <_malloc_r+0xa8>
 8004c8c:	6822      	ldr	r2, [r4, #0]
 8004c8e:	1b52      	subs	r2, r2, r5
 8004c90:	d420      	bmi.n	8004cd4 <_malloc_r+0xd0>
 8004c92:	2a0b      	cmp	r2, #11
 8004c94:	d917      	bls.n	8004cc6 <_malloc_r+0xc2>
 8004c96:	1961      	adds	r1, r4, r5
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	6025      	str	r5, [r4, #0]
 8004c9c:	bf18      	it	ne
 8004c9e:	6059      	strne	r1, [r3, #4]
 8004ca0:	6863      	ldr	r3, [r4, #4]
 8004ca2:	bf08      	it	eq
 8004ca4:	f8c8 1000 	streq.w	r1, [r8]
 8004ca8:	5162      	str	r2, [r4, r5]
 8004caa:	604b      	str	r3, [r1, #4]
 8004cac:	4630      	mov	r0, r6
 8004cae:	f000 f82f 	bl	8004d10 <__malloc_unlock>
 8004cb2:	f104 000b 	add.w	r0, r4, #11
 8004cb6:	1d23      	adds	r3, r4, #4
 8004cb8:	f020 0007 	bic.w	r0, r0, #7
 8004cbc:	1ac2      	subs	r2, r0, r3
 8004cbe:	bf1c      	itt	ne
 8004cc0:	1a1b      	subne	r3, r3, r0
 8004cc2:	50a3      	strne	r3, [r4, r2]
 8004cc4:	e7af      	b.n	8004c26 <_malloc_r+0x22>
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	bf0c      	ite	eq
 8004ccc:	f8c8 2000 	streq.w	r2, [r8]
 8004cd0:	605a      	strne	r2, [r3, #4]
 8004cd2:	e7eb      	b.n	8004cac <_malloc_r+0xa8>
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	6864      	ldr	r4, [r4, #4]
 8004cd8:	e7ae      	b.n	8004c38 <_malloc_r+0x34>
 8004cda:	463c      	mov	r4, r7
 8004cdc:	687f      	ldr	r7, [r7, #4]
 8004cde:	e7b6      	b.n	8004c4e <_malloc_r+0x4a>
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	d1fb      	bne.n	8004ce0 <_malloc_r+0xdc>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6053      	str	r3, [r2, #4]
 8004cec:	e7de      	b.n	8004cac <_malloc_r+0xa8>
 8004cee:	230c      	movs	r3, #12
 8004cf0:	6033      	str	r3, [r6, #0]
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 f80c 	bl	8004d10 <__malloc_unlock>
 8004cf8:	e794      	b.n	8004c24 <_malloc_r+0x20>
 8004cfa:	6005      	str	r5, [r0, #0]
 8004cfc:	e7d6      	b.n	8004cac <_malloc_r+0xa8>
 8004cfe:	bf00      	nop
 8004d00:	200002b8 	.word	0x200002b8

08004d04 <__malloc_lock>:
 8004d04:	4801      	ldr	r0, [pc, #4]	@ (8004d0c <__malloc_lock+0x8>)
 8004d06:	f7ff bf0e 	b.w	8004b26 <__retarget_lock_acquire_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	200002b0 	.word	0x200002b0

08004d10 <__malloc_unlock>:
 8004d10:	4801      	ldr	r0, [pc, #4]	@ (8004d18 <__malloc_unlock+0x8>)
 8004d12:	f7ff bf09 	b.w	8004b28 <__retarget_lock_release_recursive>
 8004d16:	bf00      	nop
 8004d18:	200002b0 	.word	0x200002b0

08004d1c <__ssputs_r>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	688e      	ldr	r6, [r1, #8]
 8004d22:	461f      	mov	r7, r3
 8004d24:	42be      	cmp	r6, r7
 8004d26:	680b      	ldr	r3, [r1, #0]
 8004d28:	4682      	mov	sl, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	4690      	mov	r8, r2
 8004d2e:	d82d      	bhi.n	8004d8c <__ssputs_r+0x70>
 8004d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d38:	d026      	beq.n	8004d88 <__ssputs_r+0x6c>
 8004d3a:	6965      	ldr	r5, [r4, #20]
 8004d3c:	6909      	ldr	r1, [r1, #16]
 8004d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d42:	eba3 0901 	sub.w	r9, r3, r1
 8004d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d4a:	1c7b      	adds	r3, r7, #1
 8004d4c:	444b      	add	r3, r9
 8004d4e:	106d      	asrs	r5, r5, #1
 8004d50:	429d      	cmp	r5, r3
 8004d52:	bf38      	it	cc
 8004d54:	461d      	movcc	r5, r3
 8004d56:	0553      	lsls	r3, r2, #21
 8004d58:	d527      	bpl.n	8004daa <__ssputs_r+0x8e>
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	f7ff ff52 	bl	8004c04 <_malloc_r>
 8004d60:	4606      	mov	r6, r0
 8004d62:	b360      	cbz	r0, 8004dbe <__ssputs_r+0xa2>
 8004d64:	6921      	ldr	r1, [r4, #16]
 8004d66:	464a      	mov	r2, r9
 8004d68:	f000 fd6a 	bl	8005840 <memcpy>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	6126      	str	r6, [r4, #16]
 8004d7a:	6165      	str	r5, [r4, #20]
 8004d7c:	444e      	add	r6, r9
 8004d7e:	eba5 0509 	sub.w	r5, r5, r9
 8004d82:	6026      	str	r6, [r4, #0]
 8004d84:	60a5      	str	r5, [r4, #8]
 8004d86:	463e      	mov	r6, r7
 8004d88:	42be      	cmp	r6, r7
 8004d8a:	d900      	bls.n	8004d8e <__ssputs_r+0x72>
 8004d8c:	463e      	mov	r6, r7
 8004d8e:	6820      	ldr	r0, [r4, #0]
 8004d90:	4632      	mov	r2, r6
 8004d92:	4641      	mov	r1, r8
 8004d94:	f000 fd2a 	bl	80057ec <memmove>
 8004d98:	68a3      	ldr	r3, [r4, #8]
 8004d9a:	1b9b      	subs	r3, r3, r6
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	4433      	add	r3, r6
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	2000      	movs	r0, #0
 8004da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004daa:	462a      	mov	r2, r5
 8004dac:	f000 fd56 	bl	800585c <_realloc_r>
 8004db0:	4606      	mov	r6, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1e0      	bne.n	8004d78 <__ssputs_r+0x5c>
 8004db6:	6921      	ldr	r1, [r4, #16]
 8004db8:	4650      	mov	r0, sl
 8004dba:	f7ff feb7 	bl	8004b2c <_free_r>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	f8ca 3000 	str.w	r3, [sl]
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e7e9      	b.n	8004da6 <__ssputs_r+0x8a>
	...

08004dd4 <_svfiprintf_r>:
 8004dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd8:	4698      	mov	r8, r3
 8004dda:	898b      	ldrh	r3, [r1, #12]
 8004ddc:	061b      	lsls	r3, r3, #24
 8004dde:	b09d      	sub	sp, #116	@ 0x74
 8004de0:	4607      	mov	r7, r0
 8004de2:	460d      	mov	r5, r1
 8004de4:	4614      	mov	r4, r2
 8004de6:	d510      	bpl.n	8004e0a <_svfiprintf_r+0x36>
 8004de8:	690b      	ldr	r3, [r1, #16]
 8004dea:	b973      	cbnz	r3, 8004e0a <_svfiprintf_r+0x36>
 8004dec:	2140      	movs	r1, #64	@ 0x40
 8004dee:	f7ff ff09 	bl	8004c04 <_malloc_r>
 8004df2:	6028      	str	r0, [r5, #0]
 8004df4:	6128      	str	r0, [r5, #16]
 8004df6:	b930      	cbnz	r0, 8004e06 <_svfiprintf_r+0x32>
 8004df8:	230c      	movs	r3, #12
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	b01d      	add	sp, #116	@ 0x74
 8004e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e06:	2340      	movs	r3, #64	@ 0x40
 8004e08:	616b      	str	r3, [r5, #20]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e0e:	2320      	movs	r3, #32
 8004e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e18:	2330      	movs	r3, #48	@ 0x30
 8004e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004fb8 <_svfiprintf_r+0x1e4>
 8004e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e22:	f04f 0901 	mov.w	r9, #1
 8004e26:	4623      	mov	r3, r4
 8004e28:	469a      	mov	sl, r3
 8004e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e2e:	b10a      	cbz	r2, 8004e34 <_svfiprintf_r+0x60>
 8004e30:	2a25      	cmp	r2, #37	@ 0x25
 8004e32:	d1f9      	bne.n	8004e28 <_svfiprintf_r+0x54>
 8004e34:	ebba 0b04 	subs.w	fp, sl, r4
 8004e38:	d00b      	beq.n	8004e52 <_svfiprintf_r+0x7e>
 8004e3a:	465b      	mov	r3, fp
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff ff6b 	bl	8004d1c <__ssputs_r>
 8004e46:	3001      	adds	r0, #1
 8004e48:	f000 80a7 	beq.w	8004f9a <_svfiprintf_r+0x1c6>
 8004e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e4e:	445a      	add	r2, fp
 8004e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e52:	f89a 3000 	ldrb.w	r3, [sl]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 809f 	beq.w	8004f9a <_svfiprintf_r+0x1c6>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e66:	f10a 0a01 	add.w	sl, sl, #1
 8004e6a:	9304      	str	r3, [sp, #16]
 8004e6c:	9307      	str	r3, [sp, #28]
 8004e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e74:	4654      	mov	r4, sl
 8004e76:	2205      	movs	r2, #5
 8004e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e7c:	484e      	ldr	r0, [pc, #312]	@ (8004fb8 <_svfiprintf_r+0x1e4>)
 8004e7e:	f7fb f9af 	bl	80001e0 <memchr>
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	b9d8      	cbnz	r0, 8004ebe <_svfiprintf_r+0xea>
 8004e86:	06d0      	lsls	r0, r2, #27
 8004e88:	bf44      	itt	mi
 8004e8a:	2320      	movmi	r3, #32
 8004e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e90:	0711      	lsls	r1, r2, #28
 8004e92:	bf44      	itt	mi
 8004e94:	232b      	movmi	r3, #43	@ 0x2b
 8004e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ea0:	d015      	beq.n	8004ece <_svfiprintf_r+0xfa>
 8004ea2:	9a07      	ldr	r2, [sp, #28]
 8004ea4:	4654      	mov	r4, sl
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f04f 0c0a 	mov.w	ip, #10
 8004eac:	4621      	mov	r1, r4
 8004eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eb2:	3b30      	subs	r3, #48	@ 0x30
 8004eb4:	2b09      	cmp	r3, #9
 8004eb6:	d94b      	bls.n	8004f50 <_svfiprintf_r+0x17c>
 8004eb8:	b1b0      	cbz	r0, 8004ee8 <_svfiprintf_r+0x114>
 8004eba:	9207      	str	r2, [sp, #28]
 8004ebc:	e014      	b.n	8004ee8 <_svfiprintf_r+0x114>
 8004ebe:	eba0 0308 	sub.w	r3, r0, r8
 8004ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	46a2      	mov	sl, r4
 8004ecc:	e7d2      	b.n	8004e74 <_svfiprintf_r+0xa0>
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	1d19      	adds	r1, r3, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	9103      	str	r1, [sp, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	bfbb      	ittet	lt
 8004eda:	425b      	neglt	r3, r3
 8004edc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ee0:	9307      	strge	r3, [sp, #28]
 8004ee2:	9307      	strlt	r3, [sp, #28]
 8004ee4:	bfb8      	it	lt
 8004ee6:	9204      	strlt	r2, [sp, #16]
 8004ee8:	7823      	ldrb	r3, [r4, #0]
 8004eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eec:	d10a      	bne.n	8004f04 <_svfiprintf_r+0x130>
 8004eee:	7863      	ldrb	r3, [r4, #1]
 8004ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef2:	d132      	bne.n	8004f5a <_svfiprintf_r+0x186>
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	1d1a      	adds	r2, r3, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	9203      	str	r2, [sp, #12]
 8004efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f00:	3402      	adds	r4, #2
 8004f02:	9305      	str	r3, [sp, #20]
 8004f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fc8 <_svfiprintf_r+0x1f4>
 8004f08:	7821      	ldrb	r1, [r4, #0]
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	4650      	mov	r0, sl
 8004f0e:	f7fb f967 	bl	80001e0 <memchr>
 8004f12:	b138      	cbz	r0, 8004f24 <_svfiprintf_r+0x150>
 8004f14:	9b04      	ldr	r3, [sp, #16]
 8004f16:	eba0 000a 	sub.w	r0, r0, sl
 8004f1a:	2240      	movs	r2, #64	@ 0x40
 8004f1c:	4082      	lsls	r2, r0
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	3401      	adds	r4, #1
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f28:	4824      	ldr	r0, [pc, #144]	@ (8004fbc <_svfiprintf_r+0x1e8>)
 8004f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f2e:	2206      	movs	r2, #6
 8004f30:	f7fb f956 	bl	80001e0 <memchr>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d036      	beq.n	8004fa6 <_svfiprintf_r+0x1d2>
 8004f38:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <_svfiprintf_r+0x1ec>)
 8004f3a:	bb1b      	cbnz	r3, 8004f84 <_svfiprintf_r+0x1b0>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	3307      	adds	r3, #7
 8004f40:	f023 0307 	bic.w	r3, r3, #7
 8004f44:	3308      	adds	r3, #8
 8004f46:	9303      	str	r3, [sp, #12]
 8004f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4a:	4433      	add	r3, r6
 8004f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f4e:	e76a      	b.n	8004e26 <_svfiprintf_r+0x52>
 8004f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f54:	460c      	mov	r4, r1
 8004f56:	2001      	movs	r0, #1
 8004f58:	e7a8      	b.n	8004eac <_svfiprintf_r+0xd8>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	3401      	adds	r4, #1
 8004f5e:	9305      	str	r3, [sp, #20]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f04f 0c0a 	mov.w	ip, #10
 8004f66:	4620      	mov	r0, r4
 8004f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f6c:	3a30      	subs	r2, #48	@ 0x30
 8004f6e:	2a09      	cmp	r2, #9
 8004f70:	d903      	bls.n	8004f7a <_svfiprintf_r+0x1a6>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0c6      	beq.n	8004f04 <_svfiprintf_r+0x130>
 8004f76:	9105      	str	r1, [sp, #20]
 8004f78:	e7c4      	b.n	8004f04 <_svfiprintf_r+0x130>
 8004f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f7e:	4604      	mov	r4, r0
 8004f80:	2301      	movs	r3, #1
 8004f82:	e7f0      	b.n	8004f66 <_svfiprintf_r+0x192>
 8004f84:	ab03      	add	r3, sp, #12
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	462a      	mov	r2, r5
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <_svfiprintf_r+0x1f0>)
 8004f8c:	a904      	add	r1, sp, #16
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f3af 8000 	nop.w
 8004f94:	1c42      	adds	r2, r0, #1
 8004f96:	4606      	mov	r6, r0
 8004f98:	d1d6      	bne.n	8004f48 <_svfiprintf_r+0x174>
 8004f9a:	89ab      	ldrh	r3, [r5, #12]
 8004f9c:	065b      	lsls	r3, r3, #25
 8004f9e:	f53f af2d 	bmi.w	8004dfc <_svfiprintf_r+0x28>
 8004fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fa4:	e72c      	b.n	8004e00 <_svfiprintf_r+0x2c>
 8004fa6:	ab03      	add	r3, sp, #12
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	462a      	mov	r2, r5
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <_svfiprintf_r+0x1f0>)
 8004fae:	a904      	add	r1, sp, #16
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f000 f9bb 	bl	800532c <_printf_i>
 8004fb6:	e7ed      	b.n	8004f94 <_svfiprintf_r+0x1c0>
 8004fb8:	08005a84 	.word	0x08005a84
 8004fbc:	08005a8e 	.word	0x08005a8e
 8004fc0:	00000000 	.word	0x00000000
 8004fc4:	08004d1d 	.word	0x08004d1d
 8004fc8:	08005a8a 	.word	0x08005a8a

08004fcc <__sfputc_r>:
 8004fcc:	6893      	ldr	r3, [r2, #8]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	b410      	push	{r4}
 8004fd4:	6093      	str	r3, [r2, #8]
 8004fd6:	da08      	bge.n	8004fea <__sfputc_r+0x1e>
 8004fd8:	6994      	ldr	r4, [r2, #24]
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	db01      	blt.n	8004fe2 <__sfputc_r+0x16>
 8004fde:	290a      	cmp	r1, #10
 8004fe0:	d103      	bne.n	8004fea <__sfputc_r+0x1e>
 8004fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe6:	f000 bb6d 	b.w	80056c4 <__swbuf_r>
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	1c58      	adds	r0, r3, #1
 8004fee:	6010      	str	r0, [r2, #0]
 8004ff0:	7019      	strb	r1, [r3, #0]
 8004ff2:	4608      	mov	r0, r1
 8004ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <__sfputs_r>:
 8004ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	460f      	mov	r7, r1
 8005000:	4614      	mov	r4, r2
 8005002:	18d5      	adds	r5, r2, r3
 8005004:	42ac      	cmp	r4, r5
 8005006:	d101      	bne.n	800500c <__sfputs_r+0x12>
 8005008:	2000      	movs	r0, #0
 800500a:	e007      	b.n	800501c <__sfputs_r+0x22>
 800500c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005010:	463a      	mov	r2, r7
 8005012:	4630      	mov	r0, r6
 8005014:	f7ff ffda 	bl	8004fcc <__sfputc_r>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d1f3      	bne.n	8005004 <__sfputs_r+0xa>
 800501c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005020 <_vfiprintf_r>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	460d      	mov	r5, r1
 8005026:	b09d      	sub	sp, #116	@ 0x74
 8005028:	4614      	mov	r4, r2
 800502a:	4698      	mov	r8, r3
 800502c:	4606      	mov	r6, r0
 800502e:	b118      	cbz	r0, 8005038 <_vfiprintf_r+0x18>
 8005030:	6a03      	ldr	r3, [r0, #32]
 8005032:	b90b      	cbnz	r3, 8005038 <_vfiprintf_r+0x18>
 8005034:	f7ff fc3e 	bl	80048b4 <__sinit>
 8005038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800503a:	07d9      	lsls	r1, r3, #31
 800503c:	d405      	bmi.n	800504a <_vfiprintf_r+0x2a>
 800503e:	89ab      	ldrh	r3, [r5, #12]
 8005040:	059a      	lsls	r2, r3, #22
 8005042:	d402      	bmi.n	800504a <_vfiprintf_r+0x2a>
 8005044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005046:	f7ff fd6e 	bl	8004b26 <__retarget_lock_acquire_recursive>
 800504a:	89ab      	ldrh	r3, [r5, #12]
 800504c:	071b      	lsls	r3, r3, #28
 800504e:	d501      	bpl.n	8005054 <_vfiprintf_r+0x34>
 8005050:	692b      	ldr	r3, [r5, #16]
 8005052:	b99b      	cbnz	r3, 800507c <_vfiprintf_r+0x5c>
 8005054:	4629      	mov	r1, r5
 8005056:	4630      	mov	r0, r6
 8005058:	f000 fb72 	bl	8005740 <__swsetup_r>
 800505c:	b170      	cbz	r0, 800507c <_vfiprintf_r+0x5c>
 800505e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005060:	07dc      	lsls	r4, r3, #31
 8005062:	d504      	bpl.n	800506e <_vfiprintf_r+0x4e>
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	b01d      	add	sp, #116	@ 0x74
 800506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506e:	89ab      	ldrh	r3, [r5, #12]
 8005070:	0598      	lsls	r0, r3, #22
 8005072:	d4f7      	bmi.n	8005064 <_vfiprintf_r+0x44>
 8005074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005076:	f7ff fd57 	bl	8004b28 <__retarget_lock_release_recursive>
 800507a:	e7f3      	b.n	8005064 <_vfiprintf_r+0x44>
 800507c:	2300      	movs	r3, #0
 800507e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005080:	2320      	movs	r3, #32
 8005082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005086:	f8cd 800c 	str.w	r8, [sp, #12]
 800508a:	2330      	movs	r3, #48	@ 0x30
 800508c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800523c <_vfiprintf_r+0x21c>
 8005090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005094:	f04f 0901 	mov.w	r9, #1
 8005098:	4623      	mov	r3, r4
 800509a:	469a      	mov	sl, r3
 800509c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050a0:	b10a      	cbz	r2, 80050a6 <_vfiprintf_r+0x86>
 80050a2:	2a25      	cmp	r2, #37	@ 0x25
 80050a4:	d1f9      	bne.n	800509a <_vfiprintf_r+0x7a>
 80050a6:	ebba 0b04 	subs.w	fp, sl, r4
 80050aa:	d00b      	beq.n	80050c4 <_vfiprintf_r+0xa4>
 80050ac:	465b      	mov	r3, fp
 80050ae:	4622      	mov	r2, r4
 80050b0:	4629      	mov	r1, r5
 80050b2:	4630      	mov	r0, r6
 80050b4:	f7ff ffa1 	bl	8004ffa <__sfputs_r>
 80050b8:	3001      	adds	r0, #1
 80050ba:	f000 80a7 	beq.w	800520c <_vfiprintf_r+0x1ec>
 80050be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050c0:	445a      	add	r2, fp
 80050c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80050c4:	f89a 3000 	ldrb.w	r3, [sl]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 809f 	beq.w	800520c <_vfiprintf_r+0x1ec>
 80050ce:	2300      	movs	r3, #0
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295
 80050d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050d8:	f10a 0a01 	add.w	sl, sl, #1
 80050dc:	9304      	str	r3, [sp, #16]
 80050de:	9307      	str	r3, [sp, #28]
 80050e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80050e6:	4654      	mov	r4, sl
 80050e8:	2205      	movs	r2, #5
 80050ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ee:	4853      	ldr	r0, [pc, #332]	@ (800523c <_vfiprintf_r+0x21c>)
 80050f0:	f7fb f876 	bl	80001e0 <memchr>
 80050f4:	9a04      	ldr	r2, [sp, #16]
 80050f6:	b9d8      	cbnz	r0, 8005130 <_vfiprintf_r+0x110>
 80050f8:	06d1      	lsls	r1, r2, #27
 80050fa:	bf44      	itt	mi
 80050fc:	2320      	movmi	r3, #32
 80050fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005102:	0713      	lsls	r3, r2, #28
 8005104:	bf44      	itt	mi
 8005106:	232b      	movmi	r3, #43	@ 0x2b
 8005108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800510c:	f89a 3000 	ldrb.w	r3, [sl]
 8005110:	2b2a      	cmp	r3, #42	@ 0x2a
 8005112:	d015      	beq.n	8005140 <_vfiprintf_r+0x120>
 8005114:	9a07      	ldr	r2, [sp, #28]
 8005116:	4654      	mov	r4, sl
 8005118:	2000      	movs	r0, #0
 800511a:	f04f 0c0a 	mov.w	ip, #10
 800511e:	4621      	mov	r1, r4
 8005120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005124:	3b30      	subs	r3, #48	@ 0x30
 8005126:	2b09      	cmp	r3, #9
 8005128:	d94b      	bls.n	80051c2 <_vfiprintf_r+0x1a2>
 800512a:	b1b0      	cbz	r0, 800515a <_vfiprintf_r+0x13a>
 800512c:	9207      	str	r2, [sp, #28]
 800512e:	e014      	b.n	800515a <_vfiprintf_r+0x13a>
 8005130:	eba0 0308 	sub.w	r3, r0, r8
 8005134:	fa09 f303 	lsl.w	r3, r9, r3
 8005138:	4313      	orrs	r3, r2
 800513a:	9304      	str	r3, [sp, #16]
 800513c:	46a2      	mov	sl, r4
 800513e:	e7d2      	b.n	80050e6 <_vfiprintf_r+0xc6>
 8005140:	9b03      	ldr	r3, [sp, #12]
 8005142:	1d19      	adds	r1, r3, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	9103      	str	r1, [sp, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	bfbb      	ittet	lt
 800514c:	425b      	neglt	r3, r3
 800514e:	f042 0202 	orrlt.w	r2, r2, #2
 8005152:	9307      	strge	r3, [sp, #28]
 8005154:	9307      	strlt	r3, [sp, #28]
 8005156:	bfb8      	it	lt
 8005158:	9204      	strlt	r2, [sp, #16]
 800515a:	7823      	ldrb	r3, [r4, #0]
 800515c:	2b2e      	cmp	r3, #46	@ 0x2e
 800515e:	d10a      	bne.n	8005176 <_vfiprintf_r+0x156>
 8005160:	7863      	ldrb	r3, [r4, #1]
 8005162:	2b2a      	cmp	r3, #42	@ 0x2a
 8005164:	d132      	bne.n	80051cc <_vfiprintf_r+0x1ac>
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	1d1a      	adds	r2, r3, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	9203      	str	r2, [sp, #12]
 800516e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005172:	3402      	adds	r4, #2
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800524c <_vfiprintf_r+0x22c>
 800517a:	7821      	ldrb	r1, [r4, #0]
 800517c:	2203      	movs	r2, #3
 800517e:	4650      	mov	r0, sl
 8005180:	f7fb f82e 	bl	80001e0 <memchr>
 8005184:	b138      	cbz	r0, 8005196 <_vfiprintf_r+0x176>
 8005186:	9b04      	ldr	r3, [sp, #16]
 8005188:	eba0 000a 	sub.w	r0, r0, sl
 800518c:	2240      	movs	r2, #64	@ 0x40
 800518e:	4082      	lsls	r2, r0
 8005190:	4313      	orrs	r3, r2
 8005192:	3401      	adds	r4, #1
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519a:	4829      	ldr	r0, [pc, #164]	@ (8005240 <_vfiprintf_r+0x220>)
 800519c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051a0:	2206      	movs	r2, #6
 80051a2:	f7fb f81d 	bl	80001e0 <memchr>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d03f      	beq.n	800522a <_vfiprintf_r+0x20a>
 80051aa:	4b26      	ldr	r3, [pc, #152]	@ (8005244 <_vfiprintf_r+0x224>)
 80051ac:	bb1b      	cbnz	r3, 80051f6 <_vfiprintf_r+0x1d6>
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	3307      	adds	r3, #7
 80051b2:	f023 0307 	bic.w	r3, r3, #7
 80051b6:	3308      	adds	r3, #8
 80051b8:	9303      	str	r3, [sp, #12]
 80051ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051bc:	443b      	add	r3, r7
 80051be:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c0:	e76a      	b.n	8005098 <_vfiprintf_r+0x78>
 80051c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80051c6:	460c      	mov	r4, r1
 80051c8:	2001      	movs	r0, #1
 80051ca:	e7a8      	b.n	800511e <_vfiprintf_r+0xfe>
 80051cc:	2300      	movs	r3, #0
 80051ce:	3401      	adds	r4, #1
 80051d0:	9305      	str	r3, [sp, #20]
 80051d2:	4619      	mov	r1, r3
 80051d4:	f04f 0c0a 	mov.w	ip, #10
 80051d8:	4620      	mov	r0, r4
 80051da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051de:	3a30      	subs	r2, #48	@ 0x30
 80051e0:	2a09      	cmp	r2, #9
 80051e2:	d903      	bls.n	80051ec <_vfiprintf_r+0x1cc>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0c6      	beq.n	8005176 <_vfiprintf_r+0x156>
 80051e8:	9105      	str	r1, [sp, #20]
 80051ea:	e7c4      	b.n	8005176 <_vfiprintf_r+0x156>
 80051ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80051f0:	4604      	mov	r4, r0
 80051f2:	2301      	movs	r3, #1
 80051f4:	e7f0      	b.n	80051d8 <_vfiprintf_r+0x1b8>
 80051f6:	ab03      	add	r3, sp, #12
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	462a      	mov	r2, r5
 80051fc:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <_vfiprintf_r+0x228>)
 80051fe:	a904      	add	r1, sp, #16
 8005200:	4630      	mov	r0, r6
 8005202:	f3af 8000 	nop.w
 8005206:	4607      	mov	r7, r0
 8005208:	1c78      	adds	r0, r7, #1
 800520a:	d1d6      	bne.n	80051ba <_vfiprintf_r+0x19a>
 800520c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800520e:	07d9      	lsls	r1, r3, #31
 8005210:	d405      	bmi.n	800521e <_vfiprintf_r+0x1fe>
 8005212:	89ab      	ldrh	r3, [r5, #12]
 8005214:	059a      	lsls	r2, r3, #22
 8005216:	d402      	bmi.n	800521e <_vfiprintf_r+0x1fe>
 8005218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800521a:	f7ff fc85 	bl	8004b28 <__retarget_lock_release_recursive>
 800521e:	89ab      	ldrh	r3, [r5, #12]
 8005220:	065b      	lsls	r3, r3, #25
 8005222:	f53f af1f 	bmi.w	8005064 <_vfiprintf_r+0x44>
 8005226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005228:	e71e      	b.n	8005068 <_vfiprintf_r+0x48>
 800522a:	ab03      	add	r3, sp, #12
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	462a      	mov	r2, r5
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <_vfiprintf_r+0x228>)
 8005232:	a904      	add	r1, sp, #16
 8005234:	4630      	mov	r0, r6
 8005236:	f000 f879 	bl	800532c <_printf_i>
 800523a:	e7e4      	b.n	8005206 <_vfiprintf_r+0x1e6>
 800523c:	08005a84 	.word	0x08005a84
 8005240:	08005a8e 	.word	0x08005a8e
 8005244:	00000000 	.word	0x00000000
 8005248:	08004ffb 	.word	0x08004ffb
 800524c:	08005a8a 	.word	0x08005a8a

08005250 <_printf_common>:
 8005250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	4616      	mov	r6, r2
 8005256:	4698      	mov	r8, r3
 8005258:	688a      	ldr	r2, [r1, #8]
 800525a:	690b      	ldr	r3, [r1, #16]
 800525c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005260:	4293      	cmp	r3, r2
 8005262:	bfb8      	it	lt
 8005264:	4613      	movlt	r3, r2
 8005266:	6033      	str	r3, [r6, #0]
 8005268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800526c:	4607      	mov	r7, r0
 800526e:	460c      	mov	r4, r1
 8005270:	b10a      	cbz	r2, 8005276 <_printf_common+0x26>
 8005272:	3301      	adds	r3, #1
 8005274:	6033      	str	r3, [r6, #0]
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	0699      	lsls	r1, r3, #26
 800527a:	bf42      	ittt	mi
 800527c:	6833      	ldrmi	r3, [r6, #0]
 800527e:	3302      	addmi	r3, #2
 8005280:	6033      	strmi	r3, [r6, #0]
 8005282:	6825      	ldr	r5, [r4, #0]
 8005284:	f015 0506 	ands.w	r5, r5, #6
 8005288:	d106      	bne.n	8005298 <_printf_common+0x48>
 800528a:	f104 0a19 	add.w	sl, r4, #25
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	6832      	ldr	r2, [r6, #0]
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	42ab      	cmp	r3, r5
 8005296:	dc26      	bgt.n	80052e6 <_printf_common+0x96>
 8005298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800529c:	6822      	ldr	r2, [r4, #0]
 800529e:	3b00      	subs	r3, #0
 80052a0:	bf18      	it	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	0692      	lsls	r2, r2, #26
 80052a6:	d42b      	bmi.n	8005300 <_printf_common+0xb0>
 80052a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052ac:	4641      	mov	r1, r8
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c8      	blx	r9
 80052b2:	3001      	adds	r0, #1
 80052b4:	d01e      	beq.n	80052f4 <_printf_common+0xa4>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	6922      	ldr	r2, [r4, #16]
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	2b04      	cmp	r3, #4
 80052c0:	bf02      	ittt	eq
 80052c2:	68e5      	ldreq	r5, [r4, #12]
 80052c4:	6833      	ldreq	r3, [r6, #0]
 80052c6:	1aed      	subeq	r5, r5, r3
 80052c8:	68a3      	ldr	r3, [r4, #8]
 80052ca:	bf0c      	ite	eq
 80052cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d0:	2500      	movne	r5, #0
 80052d2:	4293      	cmp	r3, r2
 80052d4:	bfc4      	itt	gt
 80052d6:	1a9b      	subgt	r3, r3, r2
 80052d8:	18ed      	addgt	r5, r5, r3
 80052da:	2600      	movs	r6, #0
 80052dc:	341a      	adds	r4, #26
 80052de:	42b5      	cmp	r5, r6
 80052e0:	d11a      	bne.n	8005318 <_printf_common+0xc8>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e008      	b.n	80052f8 <_printf_common+0xa8>
 80052e6:	2301      	movs	r3, #1
 80052e8:	4652      	mov	r2, sl
 80052ea:	4641      	mov	r1, r8
 80052ec:	4638      	mov	r0, r7
 80052ee:	47c8      	blx	r9
 80052f0:	3001      	adds	r0, #1
 80052f2:	d103      	bne.n	80052fc <_printf_common+0xac>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7c6      	b.n	800528e <_printf_common+0x3e>
 8005300:	18e1      	adds	r1, r4, r3
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	2030      	movs	r0, #48	@ 0x30
 8005306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800530a:	4422      	add	r2, r4
 800530c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005314:	3302      	adds	r3, #2
 8005316:	e7c7      	b.n	80052a8 <_printf_common+0x58>
 8005318:	2301      	movs	r3, #1
 800531a:	4622      	mov	r2, r4
 800531c:	4641      	mov	r1, r8
 800531e:	4638      	mov	r0, r7
 8005320:	47c8      	blx	r9
 8005322:	3001      	adds	r0, #1
 8005324:	d0e6      	beq.n	80052f4 <_printf_common+0xa4>
 8005326:	3601      	adds	r6, #1
 8005328:	e7d9      	b.n	80052de <_printf_common+0x8e>
	...

0800532c <_printf_i>:
 800532c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	7e0f      	ldrb	r7, [r1, #24]
 8005332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005334:	2f78      	cmp	r7, #120	@ 0x78
 8005336:	4691      	mov	r9, r2
 8005338:	4680      	mov	r8, r0
 800533a:	460c      	mov	r4, r1
 800533c:	469a      	mov	sl, r3
 800533e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005342:	d807      	bhi.n	8005354 <_printf_i+0x28>
 8005344:	2f62      	cmp	r7, #98	@ 0x62
 8005346:	d80a      	bhi.n	800535e <_printf_i+0x32>
 8005348:	2f00      	cmp	r7, #0
 800534a:	f000 80d2 	beq.w	80054f2 <_printf_i+0x1c6>
 800534e:	2f58      	cmp	r7, #88	@ 0x58
 8005350:	f000 80b9 	beq.w	80054c6 <_printf_i+0x19a>
 8005354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800535c:	e03a      	b.n	80053d4 <_printf_i+0xa8>
 800535e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005362:	2b15      	cmp	r3, #21
 8005364:	d8f6      	bhi.n	8005354 <_printf_i+0x28>
 8005366:	a101      	add	r1, pc, #4	@ (adr r1, 800536c <_printf_i+0x40>)
 8005368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053d9 	.word	0x080053d9
 8005374:	08005355 	.word	0x08005355
 8005378:	08005355 	.word	0x08005355
 800537c:	08005355 	.word	0x08005355
 8005380:	08005355 	.word	0x08005355
 8005384:	080053d9 	.word	0x080053d9
 8005388:	08005355 	.word	0x08005355
 800538c:	08005355 	.word	0x08005355
 8005390:	08005355 	.word	0x08005355
 8005394:	08005355 	.word	0x08005355
 8005398:	080054d9 	.word	0x080054d9
 800539c:	08005403 	.word	0x08005403
 80053a0:	08005493 	.word	0x08005493
 80053a4:	08005355 	.word	0x08005355
 80053a8:	08005355 	.word	0x08005355
 80053ac:	080054fb 	.word	0x080054fb
 80053b0:	08005355 	.word	0x08005355
 80053b4:	08005403 	.word	0x08005403
 80053b8:	08005355 	.word	0x08005355
 80053bc:	08005355 	.word	0x08005355
 80053c0:	0800549b 	.word	0x0800549b
 80053c4:	6833      	ldr	r3, [r6, #0]
 80053c6:	1d1a      	adds	r2, r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6032      	str	r2, [r6, #0]
 80053cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053d4:	2301      	movs	r3, #1
 80053d6:	e09d      	b.n	8005514 <_printf_i+0x1e8>
 80053d8:	6833      	ldr	r3, [r6, #0]
 80053da:	6820      	ldr	r0, [r4, #0]
 80053dc:	1d19      	adds	r1, r3, #4
 80053de:	6031      	str	r1, [r6, #0]
 80053e0:	0606      	lsls	r6, r0, #24
 80053e2:	d501      	bpl.n	80053e8 <_printf_i+0xbc>
 80053e4:	681d      	ldr	r5, [r3, #0]
 80053e6:	e003      	b.n	80053f0 <_printf_i+0xc4>
 80053e8:	0645      	lsls	r5, r0, #25
 80053ea:	d5fb      	bpl.n	80053e4 <_printf_i+0xb8>
 80053ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053f0:	2d00      	cmp	r5, #0
 80053f2:	da03      	bge.n	80053fc <_printf_i+0xd0>
 80053f4:	232d      	movs	r3, #45	@ 0x2d
 80053f6:	426d      	negs	r5, r5
 80053f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053fc:	4859      	ldr	r0, [pc, #356]	@ (8005564 <_printf_i+0x238>)
 80053fe:	230a      	movs	r3, #10
 8005400:	e011      	b.n	8005426 <_printf_i+0xfa>
 8005402:	6821      	ldr	r1, [r4, #0]
 8005404:	6833      	ldr	r3, [r6, #0]
 8005406:	0608      	lsls	r0, r1, #24
 8005408:	f853 5b04 	ldr.w	r5, [r3], #4
 800540c:	d402      	bmi.n	8005414 <_printf_i+0xe8>
 800540e:	0649      	lsls	r1, r1, #25
 8005410:	bf48      	it	mi
 8005412:	b2ad      	uxthmi	r5, r5
 8005414:	2f6f      	cmp	r7, #111	@ 0x6f
 8005416:	4853      	ldr	r0, [pc, #332]	@ (8005564 <_printf_i+0x238>)
 8005418:	6033      	str	r3, [r6, #0]
 800541a:	bf14      	ite	ne
 800541c:	230a      	movne	r3, #10
 800541e:	2308      	moveq	r3, #8
 8005420:	2100      	movs	r1, #0
 8005422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005426:	6866      	ldr	r6, [r4, #4]
 8005428:	60a6      	str	r6, [r4, #8]
 800542a:	2e00      	cmp	r6, #0
 800542c:	bfa2      	ittt	ge
 800542e:	6821      	ldrge	r1, [r4, #0]
 8005430:	f021 0104 	bicge.w	r1, r1, #4
 8005434:	6021      	strge	r1, [r4, #0]
 8005436:	b90d      	cbnz	r5, 800543c <_printf_i+0x110>
 8005438:	2e00      	cmp	r6, #0
 800543a:	d04b      	beq.n	80054d4 <_printf_i+0x1a8>
 800543c:	4616      	mov	r6, r2
 800543e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005442:	fb03 5711 	mls	r7, r3, r1, r5
 8005446:	5dc7      	ldrb	r7, [r0, r7]
 8005448:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800544c:	462f      	mov	r7, r5
 800544e:	42bb      	cmp	r3, r7
 8005450:	460d      	mov	r5, r1
 8005452:	d9f4      	bls.n	800543e <_printf_i+0x112>
 8005454:	2b08      	cmp	r3, #8
 8005456:	d10b      	bne.n	8005470 <_printf_i+0x144>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	07df      	lsls	r7, r3, #31
 800545c:	d508      	bpl.n	8005470 <_printf_i+0x144>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	6861      	ldr	r1, [r4, #4]
 8005462:	4299      	cmp	r1, r3
 8005464:	bfde      	ittt	le
 8005466:	2330      	movle	r3, #48	@ 0x30
 8005468:	f806 3c01 	strble.w	r3, [r6, #-1]
 800546c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005470:	1b92      	subs	r2, r2, r6
 8005472:	6122      	str	r2, [r4, #16]
 8005474:	f8cd a000 	str.w	sl, [sp]
 8005478:	464b      	mov	r3, r9
 800547a:	aa03      	add	r2, sp, #12
 800547c:	4621      	mov	r1, r4
 800547e:	4640      	mov	r0, r8
 8005480:	f7ff fee6 	bl	8005250 <_printf_common>
 8005484:	3001      	adds	r0, #1
 8005486:	d14a      	bne.n	800551e <_printf_i+0x1f2>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	b004      	add	sp, #16
 800548e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f043 0320 	orr.w	r3, r3, #32
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	4833      	ldr	r0, [pc, #204]	@ (8005568 <_printf_i+0x23c>)
 800549c:	2778      	movs	r7, #120	@ 0x78
 800549e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6831      	ldr	r1, [r6, #0]
 80054a6:	061f      	lsls	r7, r3, #24
 80054a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80054ac:	d402      	bmi.n	80054b4 <_printf_i+0x188>
 80054ae:	065f      	lsls	r7, r3, #25
 80054b0:	bf48      	it	mi
 80054b2:	b2ad      	uxthmi	r5, r5
 80054b4:	6031      	str	r1, [r6, #0]
 80054b6:	07d9      	lsls	r1, r3, #31
 80054b8:	bf44      	itt	mi
 80054ba:	f043 0320 	orrmi.w	r3, r3, #32
 80054be:	6023      	strmi	r3, [r4, #0]
 80054c0:	b11d      	cbz	r5, 80054ca <_printf_i+0x19e>
 80054c2:	2310      	movs	r3, #16
 80054c4:	e7ac      	b.n	8005420 <_printf_i+0xf4>
 80054c6:	4827      	ldr	r0, [pc, #156]	@ (8005564 <_printf_i+0x238>)
 80054c8:	e7e9      	b.n	800549e <_printf_i+0x172>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f023 0320 	bic.w	r3, r3, #32
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	e7f6      	b.n	80054c2 <_printf_i+0x196>
 80054d4:	4616      	mov	r6, r2
 80054d6:	e7bd      	b.n	8005454 <_printf_i+0x128>
 80054d8:	6833      	ldr	r3, [r6, #0]
 80054da:	6825      	ldr	r5, [r4, #0]
 80054dc:	6961      	ldr	r1, [r4, #20]
 80054de:	1d18      	adds	r0, r3, #4
 80054e0:	6030      	str	r0, [r6, #0]
 80054e2:	062e      	lsls	r6, r5, #24
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0x1c0>
 80054e8:	6019      	str	r1, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <_printf_i+0x1c6>
 80054ec:	0668      	lsls	r0, r5, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0x1bc>
 80054f0:	8019      	strh	r1, [r3, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	4616      	mov	r6, r2
 80054f8:	e7bc      	b.n	8005474 <_printf_i+0x148>
 80054fa:	6833      	ldr	r3, [r6, #0]
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	6032      	str	r2, [r6, #0]
 8005500:	681e      	ldr	r6, [r3, #0]
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	2100      	movs	r1, #0
 8005506:	4630      	mov	r0, r6
 8005508:	f7fa fe6a 	bl	80001e0 <memchr>
 800550c:	b108      	cbz	r0, 8005512 <_printf_i+0x1e6>
 800550e:	1b80      	subs	r0, r0, r6
 8005510:	6060      	str	r0, [r4, #4]
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	2300      	movs	r3, #0
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800551c:	e7aa      	b.n	8005474 <_printf_i+0x148>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	4632      	mov	r2, r6
 8005522:	4649      	mov	r1, r9
 8005524:	4640      	mov	r0, r8
 8005526:	47d0      	blx	sl
 8005528:	3001      	adds	r0, #1
 800552a:	d0ad      	beq.n	8005488 <_printf_i+0x15c>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	079b      	lsls	r3, r3, #30
 8005530:	d413      	bmi.n	800555a <_printf_i+0x22e>
 8005532:	68e0      	ldr	r0, [r4, #12]
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	4298      	cmp	r0, r3
 8005538:	bfb8      	it	lt
 800553a:	4618      	movlt	r0, r3
 800553c:	e7a6      	b.n	800548c <_printf_i+0x160>
 800553e:	2301      	movs	r3, #1
 8005540:	4632      	mov	r2, r6
 8005542:	4649      	mov	r1, r9
 8005544:	4640      	mov	r0, r8
 8005546:	47d0      	blx	sl
 8005548:	3001      	adds	r0, #1
 800554a:	d09d      	beq.n	8005488 <_printf_i+0x15c>
 800554c:	3501      	adds	r5, #1
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	9903      	ldr	r1, [sp, #12]
 8005552:	1a5b      	subs	r3, r3, r1
 8005554:	42ab      	cmp	r3, r5
 8005556:	dcf2      	bgt.n	800553e <_printf_i+0x212>
 8005558:	e7eb      	b.n	8005532 <_printf_i+0x206>
 800555a:	2500      	movs	r5, #0
 800555c:	f104 0619 	add.w	r6, r4, #25
 8005560:	e7f5      	b.n	800554e <_printf_i+0x222>
 8005562:	bf00      	nop
 8005564:	08005a95 	.word	0x08005a95
 8005568:	08005aa6 	.word	0x08005aa6

0800556c <__sflush_r>:
 800556c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	0716      	lsls	r6, r2, #28
 8005576:	4605      	mov	r5, r0
 8005578:	460c      	mov	r4, r1
 800557a:	d454      	bmi.n	8005626 <__sflush_r+0xba>
 800557c:	684b      	ldr	r3, [r1, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dc02      	bgt.n	8005588 <__sflush_r+0x1c>
 8005582:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	dd48      	ble.n	800561a <__sflush_r+0xae>
 8005588:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800558a:	2e00      	cmp	r6, #0
 800558c:	d045      	beq.n	800561a <__sflush_r+0xae>
 800558e:	2300      	movs	r3, #0
 8005590:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005594:	682f      	ldr	r7, [r5, #0]
 8005596:	6a21      	ldr	r1, [r4, #32]
 8005598:	602b      	str	r3, [r5, #0]
 800559a:	d030      	beq.n	80055fe <__sflush_r+0x92>
 800559c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	0759      	lsls	r1, r3, #29
 80055a2:	d505      	bpl.n	80055b0 <__sflush_r+0x44>
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055aa:	b10b      	cbz	r3, 80055b0 <__sflush_r+0x44>
 80055ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055b4:	6a21      	ldr	r1, [r4, #32]
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b0      	blx	r6
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	d106      	bne.n	80055ce <__sflush_r+0x62>
 80055c0:	6829      	ldr	r1, [r5, #0]
 80055c2:	291d      	cmp	r1, #29
 80055c4:	d82b      	bhi.n	800561e <__sflush_r+0xb2>
 80055c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005670 <__sflush_r+0x104>)
 80055c8:	410a      	asrs	r2, r1
 80055ca:	07d6      	lsls	r6, r2, #31
 80055cc:	d427      	bmi.n	800561e <__sflush_r+0xb2>
 80055ce:	2200      	movs	r2, #0
 80055d0:	6062      	str	r2, [r4, #4]
 80055d2:	04d9      	lsls	r1, r3, #19
 80055d4:	6922      	ldr	r2, [r4, #16]
 80055d6:	6022      	str	r2, [r4, #0]
 80055d8:	d504      	bpl.n	80055e4 <__sflush_r+0x78>
 80055da:	1c42      	adds	r2, r0, #1
 80055dc:	d101      	bne.n	80055e2 <__sflush_r+0x76>
 80055de:	682b      	ldr	r3, [r5, #0]
 80055e0:	b903      	cbnz	r3, 80055e4 <__sflush_r+0x78>
 80055e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80055e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055e6:	602f      	str	r7, [r5, #0]
 80055e8:	b1b9      	cbz	r1, 800561a <__sflush_r+0xae>
 80055ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055ee:	4299      	cmp	r1, r3
 80055f0:	d002      	beq.n	80055f8 <__sflush_r+0x8c>
 80055f2:	4628      	mov	r0, r5
 80055f4:	f7ff fa9a 	bl	8004b2c <_free_r>
 80055f8:	2300      	movs	r3, #0
 80055fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80055fc:	e00d      	b.n	800561a <__sflush_r+0xae>
 80055fe:	2301      	movs	r3, #1
 8005600:	4628      	mov	r0, r5
 8005602:	47b0      	blx	r6
 8005604:	4602      	mov	r2, r0
 8005606:	1c50      	adds	r0, r2, #1
 8005608:	d1c9      	bne.n	800559e <__sflush_r+0x32>
 800560a:	682b      	ldr	r3, [r5, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0c6      	beq.n	800559e <__sflush_r+0x32>
 8005610:	2b1d      	cmp	r3, #29
 8005612:	d001      	beq.n	8005618 <__sflush_r+0xac>
 8005614:	2b16      	cmp	r3, #22
 8005616:	d11e      	bne.n	8005656 <__sflush_r+0xea>
 8005618:	602f      	str	r7, [r5, #0]
 800561a:	2000      	movs	r0, #0
 800561c:	e022      	b.n	8005664 <__sflush_r+0xf8>
 800561e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005622:	b21b      	sxth	r3, r3
 8005624:	e01b      	b.n	800565e <__sflush_r+0xf2>
 8005626:	690f      	ldr	r7, [r1, #16]
 8005628:	2f00      	cmp	r7, #0
 800562a:	d0f6      	beq.n	800561a <__sflush_r+0xae>
 800562c:	0793      	lsls	r3, r2, #30
 800562e:	680e      	ldr	r6, [r1, #0]
 8005630:	bf08      	it	eq
 8005632:	694b      	ldreq	r3, [r1, #20]
 8005634:	600f      	str	r7, [r1, #0]
 8005636:	bf18      	it	ne
 8005638:	2300      	movne	r3, #0
 800563a:	eba6 0807 	sub.w	r8, r6, r7
 800563e:	608b      	str	r3, [r1, #8]
 8005640:	f1b8 0f00 	cmp.w	r8, #0
 8005644:	dde9      	ble.n	800561a <__sflush_r+0xae>
 8005646:	6a21      	ldr	r1, [r4, #32]
 8005648:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800564a:	4643      	mov	r3, r8
 800564c:	463a      	mov	r2, r7
 800564e:	4628      	mov	r0, r5
 8005650:	47b0      	blx	r6
 8005652:	2800      	cmp	r0, #0
 8005654:	dc08      	bgt.n	8005668 <__sflush_r+0xfc>
 8005656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800565a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005668:	4407      	add	r7, r0
 800566a:	eba8 0800 	sub.w	r8, r8, r0
 800566e:	e7e7      	b.n	8005640 <__sflush_r+0xd4>
 8005670:	dfbffffe 	.word	0xdfbffffe

08005674 <_fflush_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	690b      	ldr	r3, [r1, #16]
 8005678:	4605      	mov	r5, r0
 800567a:	460c      	mov	r4, r1
 800567c:	b913      	cbnz	r3, 8005684 <_fflush_r+0x10>
 800567e:	2500      	movs	r5, #0
 8005680:	4628      	mov	r0, r5
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	b118      	cbz	r0, 800568e <_fflush_r+0x1a>
 8005686:	6a03      	ldr	r3, [r0, #32]
 8005688:	b90b      	cbnz	r3, 800568e <_fflush_r+0x1a>
 800568a:	f7ff f913 	bl	80048b4 <__sinit>
 800568e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f3      	beq.n	800567e <_fflush_r+0xa>
 8005696:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005698:	07d0      	lsls	r0, r2, #31
 800569a:	d404      	bmi.n	80056a6 <_fflush_r+0x32>
 800569c:	0599      	lsls	r1, r3, #22
 800569e:	d402      	bmi.n	80056a6 <_fflush_r+0x32>
 80056a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056a2:	f7ff fa40 	bl	8004b26 <__retarget_lock_acquire_recursive>
 80056a6:	4628      	mov	r0, r5
 80056a8:	4621      	mov	r1, r4
 80056aa:	f7ff ff5f 	bl	800556c <__sflush_r>
 80056ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056b0:	07da      	lsls	r2, r3, #31
 80056b2:	4605      	mov	r5, r0
 80056b4:	d4e4      	bmi.n	8005680 <_fflush_r+0xc>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	059b      	lsls	r3, r3, #22
 80056ba:	d4e1      	bmi.n	8005680 <_fflush_r+0xc>
 80056bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056be:	f7ff fa33 	bl	8004b28 <__retarget_lock_release_recursive>
 80056c2:	e7dd      	b.n	8005680 <_fflush_r+0xc>

080056c4 <__swbuf_r>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	460e      	mov	r6, r1
 80056c8:	4614      	mov	r4, r2
 80056ca:	4605      	mov	r5, r0
 80056cc:	b118      	cbz	r0, 80056d6 <__swbuf_r+0x12>
 80056ce:	6a03      	ldr	r3, [r0, #32]
 80056d0:	b90b      	cbnz	r3, 80056d6 <__swbuf_r+0x12>
 80056d2:	f7ff f8ef 	bl	80048b4 <__sinit>
 80056d6:	69a3      	ldr	r3, [r4, #24]
 80056d8:	60a3      	str	r3, [r4, #8]
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	071a      	lsls	r2, r3, #28
 80056de:	d501      	bpl.n	80056e4 <__swbuf_r+0x20>
 80056e0:	6923      	ldr	r3, [r4, #16]
 80056e2:	b943      	cbnz	r3, 80056f6 <__swbuf_r+0x32>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f82a 	bl	8005740 <__swsetup_r>
 80056ec:	b118      	cbz	r0, 80056f6 <__swbuf_r+0x32>
 80056ee:	f04f 37ff 	mov.w	r7, #4294967295
 80056f2:	4638      	mov	r0, r7
 80056f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	6922      	ldr	r2, [r4, #16]
 80056fa:	1a98      	subs	r0, r3, r2
 80056fc:	6963      	ldr	r3, [r4, #20]
 80056fe:	b2f6      	uxtb	r6, r6
 8005700:	4283      	cmp	r3, r0
 8005702:	4637      	mov	r7, r6
 8005704:	dc05      	bgt.n	8005712 <__swbuf_r+0x4e>
 8005706:	4621      	mov	r1, r4
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff ffb3 	bl	8005674 <_fflush_r>
 800570e:	2800      	cmp	r0, #0
 8005710:	d1ed      	bne.n	80056ee <__swbuf_r+0x2a>
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	3b01      	subs	r3, #1
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	6022      	str	r2, [r4, #0]
 800571e:	701e      	strb	r6, [r3, #0]
 8005720:	6962      	ldr	r2, [r4, #20]
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	429a      	cmp	r2, r3
 8005726:	d004      	beq.n	8005732 <__swbuf_r+0x6e>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	07db      	lsls	r3, r3, #31
 800572c:	d5e1      	bpl.n	80056f2 <__swbuf_r+0x2e>
 800572e:	2e0a      	cmp	r6, #10
 8005730:	d1df      	bne.n	80056f2 <__swbuf_r+0x2e>
 8005732:	4621      	mov	r1, r4
 8005734:	4628      	mov	r0, r5
 8005736:	f7ff ff9d 	bl	8005674 <_fflush_r>
 800573a:	2800      	cmp	r0, #0
 800573c:	d0d9      	beq.n	80056f2 <__swbuf_r+0x2e>
 800573e:	e7d6      	b.n	80056ee <__swbuf_r+0x2a>

08005740 <__swsetup_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4b29      	ldr	r3, [pc, #164]	@ (80057e8 <__swsetup_r+0xa8>)
 8005744:	4605      	mov	r5, r0
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	460c      	mov	r4, r1
 800574a:	b118      	cbz	r0, 8005754 <__swsetup_r+0x14>
 800574c:	6a03      	ldr	r3, [r0, #32]
 800574e:	b90b      	cbnz	r3, 8005754 <__swsetup_r+0x14>
 8005750:	f7ff f8b0 	bl	80048b4 <__sinit>
 8005754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005758:	0719      	lsls	r1, r3, #28
 800575a:	d422      	bmi.n	80057a2 <__swsetup_r+0x62>
 800575c:	06da      	lsls	r2, r3, #27
 800575e:	d407      	bmi.n	8005770 <__swsetup_r+0x30>
 8005760:	2209      	movs	r2, #9
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	e033      	b.n	80057d8 <__swsetup_r+0x98>
 8005770:	0758      	lsls	r0, r3, #29
 8005772:	d512      	bpl.n	800579a <__swsetup_r+0x5a>
 8005774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005776:	b141      	cbz	r1, 800578a <__swsetup_r+0x4a>
 8005778:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800577c:	4299      	cmp	r1, r3
 800577e:	d002      	beq.n	8005786 <__swsetup_r+0x46>
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff f9d3 	bl	8004b2c <_free_r>
 8005786:	2300      	movs	r3, #0
 8005788:	6363      	str	r3, [r4, #52]	@ 0x34
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	2300      	movs	r3, #0
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	f043 0308 	orr.w	r3, r3, #8
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	6923      	ldr	r3, [r4, #16]
 80057a4:	b94b      	cbnz	r3, 80057ba <__swsetup_r+0x7a>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057b0:	d003      	beq.n	80057ba <__swsetup_r+0x7a>
 80057b2:	4621      	mov	r1, r4
 80057b4:	4628      	mov	r0, r5
 80057b6:	f000 f8a5 	bl	8005904 <__smakebuf_r>
 80057ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057be:	f013 0201 	ands.w	r2, r3, #1
 80057c2:	d00a      	beq.n	80057da <__swsetup_r+0x9a>
 80057c4:	2200      	movs	r2, #0
 80057c6:	60a2      	str	r2, [r4, #8]
 80057c8:	6962      	ldr	r2, [r4, #20]
 80057ca:	4252      	negs	r2, r2
 80057cc:	61a2      	str	r2, [r4, #24]
 80057ce:	6922      	ldr	r2, [r4, #16]
 80057d0:	b942      	cbnz	r2, 80057e4 <__swsetup_r+0xa4>
 80057d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057d6:	d1c5      	bne.n	8005764 <__swsetup_r+0x24>
 80057d8:	bd38      	pop	{r3, r4, r5, pc}
 80057da:	0799      	lsls	r1, r3, #30
 80057dc:	bf58      	it	pl
 80057de:	6962      	ldrpl	r2, [r4, #20]
 80057e0:	60a2      	str	r2, [r4, #8]
 80057e2:	e7f4      	b.n	80057ce <__swsetup_r+0x8e>
 80057e4:	2000      	movs	r0, #0
 80057e6:	e7f7      	b.n	80057d8 <__swsetup_r+0x98>
 80057e8:	20000018 	.word	0x20000018

080057ec <memmove>:
 80057ec:	4288      	cmp	r0, r1
 80057ee:	b510      	push	{r4, lr}
 80057f0:	eb01 0402 	add.w	r4, r1, r2
 80057f4:	d902      	bls.n	80057fc <memmove+0x10>
 80057f6:	4284      	cmp	r4, r0
 80057f8:	4623      	mov	r3, r4
 80057fa:	d807      	bhi.n	800580c <memmove+0x20>
 80057fc:	1e43      	subs	r3, r0, #1
 80057fe:	42a1      	cmp	r1, r4
 8005800:	d008      	beq.n	8005814 <memmove+0x28>
 8005802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800580a:	e7f8      	b.n	80057fe <memmove+0x12>
 800580c:	4402      	add	r2, r0
 800580e:	4601      	mov	r1, r0
 8005810:	428a      	cmp	r2, r1
 8005812:	d100      	bne.n	8005816 <memmove+0x2a>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800581a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800581e:	e7f7      	b.n	8005810 <memmove+0x24>

08005820 <_sbrk_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	@ (800583c <_sbrk_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb fd50 	bl	80012d0 <_sbrk>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_sbrk_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_sbrk_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	200002ac 	.word	0x200002ac

08005840 <memcpy>:
 8005840:	440a      	add	r2, r1
 8005842:	4291      	cmp	r1, r2
 8005844:	f100 33ff 	add.w	r3, r0, #4294967295
 8005848:	d100      	bne.n	800584c <memcpy+0xc>
 800584a:	4770      	bx	lr
 800584c:	b510      	push	{r4, lr}
 800584e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005856:	4291      	cmp	r1, r2
 8005858:	d1f9      	bne.n	800584e <memcpy+0xe>
 800585a:	bd10      	pop	{r4, pc}

0800585c <_realloc_r>:
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4680      	mov	r8, r0
 8005862:	4615      	mov	r5, r2
 8005864:	460c      	mov	r4, r1
 8005866:	b921      	cbnz	r1, 8005872 <_realloc_r+0x16>
 8005868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586c:	4611      	mov	r1, r2
 800586e:	f7ff b9c9 	b.w	8004c04 <_malloc_r>
 8005872:	b92a      	cbnz	r2, 8005880 <_realloc_r+0x24>
 8005874:	f7ff f95a 	bl	8004b2c <_free_r>
 8005878:	2400      	movs	r4, #0
 800587a:	4620      	mov	r0, r4
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	f000 f89e 	bl	80059c0 <_malloc_usable_size_r>
 8005884:	4285      	cmp	r5, r0
 8005886:	4606      	mov	r6, r0
 8005888:	d802      	bhi.n	8005890 <_realloc_r+0x34>
 800588a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800588e:	d8f4      	bhi.n	800587a <_realloc_r+0x1e>
 8005890:	4629      	mov	r1, r5
 8005892:	4640      	mov	r0, r8
 8005894:	f7ff f9b6 	bl	8004c04 <_malloc_r>
 8005898:	4607      	mov	r7, r0
 800589a:	2800      	cmp	r0, #0
 800589c:	d0ec      	beq.n	8005878 <_realloc_r+0x1c>
 800589e:	42b5      	cmp	r5, r6
 80058a0:	462a      	mov	r2, r5
 80058a2:	4621      	mov	r1, r4
 80058a4:	bf28      	it	cs
 80058a6:	4632      	movcs	r2, r6
 80058a8:	f7ff ffca 	bl	8005840 <memcpy>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4640      	mov	r0, r8
 80058b0:	f7ff f93c 	bl	8004b2c <_free_r>
 80058b4:	463c      	mov	r4, r7
 80058b6:	e7e0      	b.n	800587a <_realloc_r+0x1e>

080058b8 <__swhatbuf_r>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	460c      	mov	r4, r1
 80058bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c0:	2900      	cmp	r1, #0
 80058c2:	b096      	sub	sp, #88	@ 0x58
 80058c4:	4615      	mov	r5, r2
 80058c6:	461e      	mov	r6, r3
 80058c8:	da0d      	bge.n	80058e6 <__swhatbuf_r+0x2e>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058d0:	f04f 0100 	mov.w	r1, #0
 80058d4:	bf14      	ite	ne
 80058d6:	2340      	movne	r3, #64	@ 0x40
 80058d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058dc:	2000      	movs	r0, #0
 80058de:	6031      	str	r1, [r6, #0]
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	b016      	add	sp, #88	@ 0x58
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	466a      	mov	r2, sp
 80058e8:	f000 f848 	bl	800597c <_fstat_r>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	dbec      	blt.n	80058ca <__swhatbuf_r+0x12>
 80058f0:	9901      	ldr	r1, [sp, #4]
 80058f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058fa:	4259      	negs	r1, r3
 80058fc:	4159      	adcs	r1, r3
 80058fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005902:	e7eb      	b.n	80058dc <__swhatbuf_r+0x24>

08005904 <__smakebuf_r>:
 8005904:	898b      	ldrh	r3, [r1, #12]
 8005906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005908:	079d      	lsls	r5, r3, #30
 800590a:	4606      	mov	r6, r0
 800590c:	460c      	mov	r4, r1
 800590e:	d507      	bpl.n	8005920 <__smakebuf_r+0x1c>
 8005910:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	2301      	movs	r3, #1
 800591a:	6163      	str	r3, [r4, #20]
 800591c:	b003      	add	sp, #12
 800591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005920:	ab01      	add	r3, sp, #4
 8005922:	466a      	mov	r2, sp
 8005924:	f7ff ffc8 	bl	80058b8 <__swhatbuf_r>
 8005928:	9f00      	ldr	r7, [sp, #0]
 800592a:	4605      	mov	r5, r0
 800592c:	4639      	mov	r1, r7
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff f968 	bl	8004c04 <_malloc_r>
 8005934:	b948      	cbnz	r0, 800594a <__smakebuf_r+0x46>
 8005936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593a:	059a      	lsls	r2, r3, #22
 800593c:	d4ee      	bmi.n	800591c <__smakebuf_r+0x18>
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	e7e2      	b.n	8005910 <__smakebuf_r+0xc>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	6020      	str	r0, [r4, #0]
 800594e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800595a:	b15b      	cbz	r3, 8005974 <__smakebuf_r+0x70>
 800595c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005960:	4630      	mov	r0, r6
 8005962:	f000 f81d 	bl	80059a0 <_isatty_r>
 8005966:	b128      	cbz	r0, 8005974 <__smakebuf_r+0x70>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	431d      	orrs	r5, r3
 8005978:	81a5      	strh	r5, [r4, #12]
 800597a:	e7cf      	b.n	800591c <__smakebuf_r+0x18>

0800597c <_fstat_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d07      	ldr	r5, [pc, #28]	@ (800599c <_fstat_r+0x20>)
 8005980:	2300      	movs	r3, #0
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	4611      	mov	r1, r2
 8005988:	602b      	str	r3, [r5, #0]
 800598a:	f7fb fc79 	bl	8001280 <_fstat>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	d102      	bne.n	8005998 <_fstat_r+0x1c>
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	b103      	cbz	r3, 8005998 <_fstat_r+0x1c>
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	bd38      	pop	{r3, r4, r5, pc}
 800599a:	bf00      	nop
 800599c:	200002ac 	.word	0x200002ac

080059a0 <_isatty_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d06      	ldr	r5, [pc, #24]	@ (80059bc <_isatty_r+0x1c>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	f7fb fc78 	bl	80012a0 <_isatty>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_isatty_r+0x1a>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_isatty_r+0x1a>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	200002ac 	.word	0x200002ac

080059c0 <_malloc_usable_size_r>:
 80059c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c4:	1f18      	subs	r0, r3, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfbc      	itt	lt
 80059ca:	580b      	ldrlt	r3, [r1, r0]
 80059cc:	18c0      	addlt	r0, r0, r3
 80059ce:	4770      	bx	lr

080059d0 <_init>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr

080059dc <_fini>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr
