
PnS_VOC_CO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005e34  08005e34  00006e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f1c  08005f1c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f1c  08005f1c  00006f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f24  08005f24  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005f2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  08005f94  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005f94  000072bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbca  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002717  00000000  00000000  00016c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00019380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b99  00000000  00000000  0001a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278e5  00000000  00000000  0001ae49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd6  00000000  00000000  0004272e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebf63  00000000  00000000  00055304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141267  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004700  00000000  00000000  001412ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001459ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e1c 	.word	0x08005e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005e1c 	.word	0x08005e1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b96a 	b.w	80008e4 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	460c      	mov	r4, r1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d14e      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000634:	4694      	mov	ip, r2
 8000636:	458c      	cmp	ip, r1
 8000638:	4686      	mov	lr, r0
 800063a:	fab2 f282 	clz	r2, r2
 800063e:	d962      	bls.n	8000706 <__udivmoddi4+0xde>
 8000640:	b14a      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	4091      	lsls	r1, r2
 8000648:	fa20 f303 	lsr.w	r3, r0, r3
 800064c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000650:	4319      	orrs	r1, r3
 8000652:	fa00 fe02 	lsl.w	lr, r0, r2
 8000656:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800065a:	fa1f f68c 	uxth.w	r6, ip
 800065e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000662:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000666:	fb07 1114 	mls	r1, r7, r4, r1
 800066a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066e:	fb04 f106 	mul.w	r1, r4, r6
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f104 30ff 	add.w	r0, r4, #4294967295
 800067e:	f080 8112 	bcs.w	80008a6 <__udivmoddi4+0x27e>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 810f 	bls.w	80008a6 <__udivmoddi4+0x27e>
 8000688:	3c02      	subs	r4, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a59      	subs	r1, r3, r1
 800068e:	fa1f f38e 	uxth.w	r3, lr
 8000692:	fbb1 f0f7 	udiv	r0, r1, r7
 8000696:	fb07 1110 	mls	r1, r7, r0, r1
 800069a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069e:	fb00 f606 	mul.w	r6, r0, r6
 80006a2:	429e      	cmp	r6, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x94>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ae:	f080 80fc 	bcs.w	80008aa <__udivmoddi4+0x282>
 80006b2:	429e      	cmp	r6, r3
 80006b4:	f240 80f9 	bls.w	80008aa <__udivmoddi4+0x282>
 80006b8:	4463      	add	r3, ip
 80006ba:	3802      	subs	r0, #2
 80006bc:	1b9b      	subs	r3, r3, r6
 80006be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006c2:	2100      	movs	r1, #0
 80006c4:	b11d      	cbz	r5, 80006ce <__udivmoddi4+0xa6>
 80006c6:	40d3      	lsrs	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	e9c5 3200 	strd	r3, r2, [r5]
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d905      	bls.n	80006e2 <__udivmoddi4+0xba>
 80006d6:	b10d      	cbz	r5, 80006dc <__udivmoddi4+0xb4>
 80006d8:	e9c5 0100 	strd	r0, r1, [r5]
 80006dc:	2100      	movs	r1, #0
 80006de:	4608      	mov	r0, r1
 80006e0:	e7f5      	b.n	80006ce <__udivmoddi4+0xa6>
 80006e2:	fab3 f183 	clz	r1, r3
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d146      	bne.n	8000778 <__udivmoddi4+0x150>
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xcc>
 80006ee:	4290      	cmp	r0, r2
 80006f0:	f0c0 80f0 	bcc.w	80008d4 <__udivmoddi4+0x2ac>
 80006f4:	1a86      	subs	r6, r0, r2
 80006f6:	eb64 0303 	sbc.w	r3, r4, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d0e6      	beq.n	80006ce <__udivmoddi4+0xa6>
 8000700:	e9c5 6300 	strd	r6, r3, [r5]
 8000704:	e7e3      	b.n	80006ce <__udivmoddi4+0xa6>
 8000706:	2a00      	cmp	r2, #0
 8000708:	f040 8090 	bne.w	800082c <__udivmoddi4+0x204>
 800070c:	eba1 040c 	sub.w	r4, r1, ip
 8000710:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000714:	fa1f f78c 	uxth.w	r7, ip
 8000718:	2101      	movs	r1, #1
 800071a:	fbb4 f6f8 	udiv	r6, r4, r8
 800071e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000722:	fb08 4416 	mls	r4, r8, r6, r4
 8000726:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800072a:	fb07 f006 	mul.w	r0, r7, r6
 800072e:	4298      	cmp	r0, r3
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x11c>
 8000732:	eb1c 0303 	adds.w	r3, ip, r3
 8000736:	f106 34ff 	add.w	r4, r6, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x11a>
 800073c:	4298      	cmp	r0, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2b4>
 8000742:	4626      	mov	r6, r4
 8000744:	1a1c      	subs	r4, r3, r0
 8000746:	fa1f f38e 	uxth.w	r3, lr
 800074a:	fbb4 f0f8 	udiv	r0, r4, r8
 800074e:	fb08 4410 	mls	r4, r8, r0, r4
 8000752:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000756:	fb00 f707 	mul.w	r7, r0, r7
 800075a:	429f      	cmp	r7, r3
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x148>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 34ff 	add.w	r4, r0, #4294967295
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x146>
 8000768:	429f      	cmp	r7, r3
 800076a:	f200 80b0 	bhi.w	80008ce <__udivmoddi4+0x2a6>
 800076e:	4620      	mov	r0, r4
 8000770:	1bdb      	subs	r3, r3, r7
 8000772:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000776:	e7a5      	b.n	80006c4 <__udivmoddi4+0x9c>
 8000778:	f1c1 0620 	rsb	r6, r1, #32
 800077c:	408b      	lsls	r3, r1
 800077e:	fa22 f706 	lsr.w	r7, r2, r6
 8000782:	431f      	orrs	r7, r3
 8000784:	fa20 fc06 	lsr.w	ip, r0, r6
 8000788:	fa04 f301 	lsl.w	r3, r4, r1
 800078c:	ea43 030c 	orr.w	r3, r3, ip
 8000790:	40f4      	lsrs	r4, r6
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	0c38      	lsrs	r0, r7, #16
 8000798:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800079c:	fbb4 fef0 	udiv	lr, r4, r0
 80007a0:	fa1f fc87 	uxth.w	ip, r7
 80007a4:	fb00 441e 	mls	r4, r0, lr, r4
 80007a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ac:	fb0e f90c 	mul.w	r9, lr, ip
 80007b0:	45a1      	cmp	r9, r4
 80007b2:	fa02 f201 	lsl.w	r2, r2, r1
 80007b6:	d90a      	bls.n	80007ce <__udivmoddi4+0x1a6>
 80007b8:	193c      	adds	r4, r7, r4
 80007ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007be:	f080 8084 	bcs.w	80008ca <__udivmoddi4+0x2a2>
 80007c2:	45a1      	cmp	r9, r4
 80007c4:	f240 8081 	bls.w	80008ca <__udivmoddi4+0x2a2>
 80007c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007cc:	443c      	add	r4, r7
 80007ce:	eba4 0409 	sub.w	r4, r4, r9
 80007d2:	fa1f f983 	uxth.w	r9, r3
 80007d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007da:	fb00 4413 	mls	r4, r0, r3, r4
 80007de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e6:	45a4      	cmp	ip, r4
 80007e8:	d907      	bls.n	80007fa <__udivmoddi4+0x1d2>
 80007ea:	193c      	adds	r4, r7, r4
 80007ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80007f0:	d267      	bcs.n	80008c2 <__udivmoddi4+0x29a>
 80007f2:	45a4      	cmp	ip, r4
 80007f4:	d965      	bls.n	80008c2 <__udivmoddi4+0x29a>
 80007f6:	3b02      	subs	r3, #2
 80007f8:	443c      	add	r4, r7
 80007fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000802:	eba4 040c 	sub.w	r4, r4, ip
 8000806:	429c      	cmp	r4, r3
 8000808:	46ce      	mov	lr, r9
 800080a:	469c      	mov	ip, r3
 800080c:	d351      	bcc.n	80008b2 <__udivmoddi4+0x28a>
 800080e:	d04e      	beq.n	80008ae <__udivmoddi4+0x286>
 8000810:	b155      	cbz	r5, 8000828 <__udivmoddi4+0x200>
 8000812:	ebb8 030e 	subs.w	r3, r8, lr
 8000816:	eb64 040c 	sbc.w	r4, r4, ip
 800081a:	fa04 f606 	lsl.w	r6, r4, r6
 800081e:	40cb      	lsrs	r3, r1
 8000820:	431e      	orrs	r6, r3
 8000822:	40cc      	lsrs	r4, r1
 8000824:	e9c5 6400 	strd	r6, r4, [r5]
 8000828:	2100      	movs	r1, #0
 800082a:	e750      	b.n	80006ce <__udivmoddi4+0xa6>
 800082c:	f1c2 0320 	rsb	r3, r2, #32
 8000830:	fa20 f103 	lsr.w	r1, r0, r3
 8000834:	fa0c fc02 	lsl.w	ip, ip, r2
 8000838:	fa24 f303 	lsr.w	r3, r4, r3
 800083c:	4094      	lsls	r4, r2
 800083e:	430c      	orrs	r4, r1
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	fa00 fe02 	lsl.w	lr, r0, r2
 8000848:	fa1f f78c 	uxth.w	r7, ip
 800084c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000850:	fb08 3110 	mls	r1, r8, r0, r3
 8000854:	0c23      	lsrs	r3, r4, #16
 8000856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800085a:	fb00 f107 	mul.w	r1, r0, r7
 800085e:	4299      	cmp	r1, r3
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x24c>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f100 36ff 	add.w	r6, r0, #4294967295
 800086a:	d22c      	bcs.n	80008c6 <__udivmoddi4+0x29e>
 800086c:	4299      	cmp	r1, r3
 800086e:	d92a      	bls.n	80008c6 <__udivmoddi4+0x29e>
 8000870:	3802      	subs	r0, #2
 8000872:	4463      	add	r3, ip
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f1f8 	udiv	r1, r3, r8
 800087c:	fb08 3311 	mls	r3, r8, r1, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb01 f307 	mul.w	r3, r1, r7
 8000888:	42a3      	cmp	r3, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x276>
 800088c:	eb1c 0404 	adds.w	r4, ip, r4
 8000890:	f101 36ff 	add.w	r6, r1, #4294967295
 8000894:	d213      	bcs.n	80008be <__udivmoddi4+0x296>
 8000896:	42a3      	cmp	r3, r4
 8000898:	d911      	bls.n	80008be <__udivmoddi4+0x296>
 800089a:	3902      	subs	r1, #2
 800089c:	4464      	add	r4, ip
 800089e:	1ae4      	subs	r4, r4, r3
 80008a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008a4:	e739      	b.n	800071a <__udivmoddi4+0xf2>
 80008a6:	4604      	mov	r4, r0
 80008a8:	e6f0      	b.n	800068c <__udivmoddi4+0x64>
 80008aa:	4608      	mov	r0, r1
 80008ac:	e706      	b.n	80006bc <__udivmoddi4+0x94>
 80008ae:	45c8      	cmp	r8, r9
 80008b0:	d2ae      	bcs.n	8000810 <__udivmoddi4+0x1e8>
 80008b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008ba:	3801      	subs	r0, #1
 80008bc:	e7a8      	b.n	8000810 <__udivmoddi4+0x1e8>
 80008be:	4631      	mov	r1, r6
 80008c0:	e7ed      	b.n	800089e <__udivmoddi4+0x276>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e799      	b.n	80007fa <__udivmoddi4+0x1d2>
 80008c6:	4630      	mov	r0, r6
 80008c8:	e7d4      	b.n	8000874 <__udivmoddi4+0x24c>
 80008ca:	46d6      	mov	lr, sl
 80008cc:	e77f      	b.n	80007ce <__udivmoddi4+0x1a6>
 80008ce:	4463      	add	r3, ip
 80008d0:	3802      	subs	r0, #2
 80008d2:	e74d      	b.n	8000770 <__udivmoddi4+0x148>
 80008d4:	4606      	mov	r6, r0
 80008d6:	4623      	mov	r3, r4
 80008d8:	4608      	mov	r0, r1
 80008da:	e70f      	b.n	80006fc <__udivmoddi4+0xd4>
 80008dc:	3e02      	subs	r6, #2
 80008de:	4463      	add	r3, ip
 80008e0:	e730      	b.n	8000744 <__udivmoddi4+0x11c>
 80008e2:	bf00      	nop

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <buzzer_on>:
#include "buzzer.h"

void buzzer_on(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <buzzer_on+0x14>)
 80008f2:	f001 faad 	bl	8001e50 <HAL_GPIO_WritePin>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	48000400 	.word	0x48000400

08000900 <buzzer_off>:

void buzzer_off(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2101      	movs	r1, #1
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <buzzer_off+0x14>)
 800090a:	f001 faa1 	bl	8001e50 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	48000400 	.word	0x48000400

08000918 <buzzer_beep>:

void buzzer_beep(uint32_t duration_ms) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    buzzer_on();
 8000920:	f7ff ffe2 	bl	80008e8 <buzzer_on>
    HAL_Delay(duration_ms);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 ffdf 	bl	80018e8 <HAL_Delay>
    buzzer_off();
 800092a:	f7ff ffe9 	bl	8000900 <buzzer_off>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <LCD_setReg>:


#define I2C_RGB_ADDR  0xC4
#define I2C_LCD_ADDR  0x7C

static void LCD_setReg(unsigned char reg, unsigned char val){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {reg, val};
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	733b      	strb	r3, [r7, #12]
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_RGB_ADDR, (uint8_t*)data, 2, 1000);
 8000950:	f107 020c 	add.w	r2, r7, #12
 8000954:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2302      	movs	r3, #2
 800095c:	21c4      	movs	r1, #196	@ 0xc4
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <LCD_setReg+0x34>)
 8000960:	f001 fb2a 	bl	8001fb8 <HAL_I2C_Master_Transmit>
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000008c 	.word	0x2000008c

08000970 <i2c_send_byteS>:
 *	->	as shown above (if required)
 *
*/
/*************************************************************************/
static void i2c_send_byteS(uint8_t *data, uint32_t len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af02      	add	r7, sp, #8
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_LCD_ADDR, (uint8_t*)data, len, 1000);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	217c      	movs	r1, #124	@ 0x7c
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <i2c_send_byteS+0x28>)
 800098a:	f001 fb15 	bl	8001fb8 <HAL_I2C_Master_Transmit>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000008c 	.word	0x2000008c

0800099c <LCD_begin>:
 *					function with MCU related delay function.
 *
*/
/*************************************************************************/

void LCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	717b      	strb	r3, [r7, #5]
	if (lines > 1) {
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d906      	bls.n	80009c2 <LCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 80009b4:	4b33      	ldr	r3, [pc, #204]	@ (8000a84 <LCD_begin+0xe8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b31      	ldr	r3, [pc, #196]	@ (8000a84 <LCD_begin+0xe8>)
 80009c0:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 80009c2:	4a31      	ldr	r2, [pc, #196]	@ (8000a88 <LCD_begin+0xec>)
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 80009c8:	4b30      	ldr	r3, [pc, #192]	@ (8000a8c <LCD_begin+0xf0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 80009ce:	797b      	ldrb	r3, [r7, #5]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d009      	beq.n	80009e8 <LCD_begin+0x4c>
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d106      	bne.n	80009e8 <LCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 80009da:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <LCD_begin+0xe8>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b27      	ldr	r3, [pc, #156]	@ (8000a84 <LCD_begin+0xe8>)
 80009e6:	701a      	strb	r2, [r3, #0]

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50 msec

    HAL_Delay(50);	// 50-msec delay
 80009e8:	2032      	movs	r0, #50	@ 0x32
 80009ea:	f000 ff7d 	bl	80018e8 <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 80009ee:	4b25      	ldr	r3, [pc, #148]	@ (8000a84 <LCD_begin+0xe8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f043 0320 	orr.w	r3, r3, #32
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8bd 	bl	8000b78 <LCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 80009fe:	2005      	movs	r0, #5
 8000a00:	f000 ff72 	bl	80018e8 <HAL_Delay>

    // second try
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <LCD_begin+0xe8>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f8b2 	bl	8000b78 <LCD_command>
    HAL_Delay(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 ff67 	bl	80018e8 <HAL_Delay>

    // third go
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <LCD_begin+0xe8>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f8a7 	bl	8000b78 <LCD_command>


    // finally, set # lines, font size, etc.
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <LCD_begin+0xe8>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f89f 	bl	8000b78 <LCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <LCD_begin+0xf4>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	701a      	strb	r2, [r3, #0]
    LCD_display();
 8000a40:	f000 f834 	bl	8000aac <LCD_display>

    // clear it off
    LCD_clear();
 8000a44:	f000 f828 	bl	8000a98 <LCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <LCD_begin+0xf8>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    LCD_command(LCD_ENTRYMODESET | _displaymode);
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <LCD_begin+0xf8>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f88d 	bl	8000b78 <LCD_command>

    // backlight init
    LCD_setReg(0, 0);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff69 	bl	8000938 <LCD_setReg>
    LCD_setReg(1, 0);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff ff65 	bl	8000938 <LCD_setReg>
    LCD_setReg(0x08, 0xAA);     // all led control by pwm
 8000a6e:	21aa      	movs	r1, #170	@ 0xaa
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff ff61 	bl	8000938 <LCD_setReg>

    LCD_setColorWhite();
 8000a76:	f000 f8ae 	bl	8000bd6 <LCD_setColorWhite>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000084 	.word	0x20000084
 8000a88:	20000087 	.word	0x20000087
 8000a8c:	20000088 	.word	0x20000088
 8000a90:	20000085 	.word	0x20000085
 8000a94:	20000086 	.word	0x20000086

08000a98 <LCD_clear>:

void LCD_clear(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	LCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f86b 	bl	8000b78 <LCD_command>
	HAL_Delay(2); // this command takes a long time!
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f000 ff20 	bl	80018e8 <HAL_Delay>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <LCD_display>:

void LCD_noDisplay(void){
    _displaycontrol &= ~LCD_DISPLAYON;
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <LCD_display+0x28>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <LCD_display+0x28>)
 8000abc:	701a      	strb	r2, [r3, #0]
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000abe:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <LCD_display+0x28>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f855 	bl	8000b78 <LCD_command>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000085 	.word	0x20000085

08000ad8 <LCD_setCursor>:
    {
        dta[i+1] = charmap[i];
    }
    i2c_send_byteS(dta, 9);
}
void LCD_setCursor(uint8_t col, uint8_t row){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d104      	bne.n	8000af8 <LCD_setCursor+0x20>
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	e003      	b.n	8000b00 <LCD_setCursor+0x28>
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	733b      	strb	r3, [r7, #12]
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff2d 	bl	8000970 <i2c_send_byteS>
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <LCD_write>:

void LCD_write(uint8_t value){
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 8000b28:	2340      	movs	r3, #64	@ 0x40
 8000b2a:	733b      	strb	r3, [r7, #12]
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff1a 	bl	8000970 <i2c_send_byteS>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <LCD_print>:

void LCD_print(char* data, uint8_t size){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 8000b50:	e00a      	b.n	8000b68 <LCD_print+0x24>
		LCD_write(data[0]);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffe1 	bl	8000b1e <LCD_write>
		data++;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
		size--;
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f1      	bne.n	8000b52 <LCD_print+0xe>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <LCD_command>:

void LCD_command(uint8_t value){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	733b      	strb	r3, [r7, #12]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff feed 	bl	8000970 <i2c_send_byteS>
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <LCD_setRGB>:

// color control
void LCD_setRGB(unsigned char r, unsigned char g, unsigned char b){
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	71bb      	strb	r3, [r7, #6]
 8000bac:	4613      	mov	r3, r2
 8000bae:	717b      	strb	r3, [r7, #5]
	LCD_setReg(REG_RED, r);
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff febf 	bl	8000938 <LCD_setReg>
    LCD_setReg(REG_GREEN, g);
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f7ff feba 	bl	8000938 <LCD_setReg>
    LCD_setReg(REG_BLUE, b);
 8000bc4:	797b      	ldrb	r3, [r7, #5]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f7ff feb5 	bl	8000938 <LCD_setReg>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <LCD_setColorWhite>:

void LCD_setColorAll(void){
	LCD_setRGB(0, 0, 0);
}

void LCD_setColorWhite(void){
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
	LCD_setRGB(255, 255, 255);
 8000bda:	22ff      	movs	r2, #255	@ 0xff
 8000bdc:	21ff      	movs	r1, #255	@ 0xff
 8000bde:	20ff      	movs	r0, #255	@ 0xff
 8000be0:	f7ff ffdd 	bl	8000b9e <LCD_setRGB>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <__io_putchar+0x20>)
 8000bfa:	f003 fa97 	bl	800412c <HAL_UART_Transmit>
    return ch;
 8000bfe:	687b      	ldr	r3, [r7, #4]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000e0 	.word	0x200000e0

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	@ 0x30
 8000c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f000 fdf4 	bl	80017fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f8e9 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 f9a9 	bl	8000f70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c1e:	f000 f937 	bl	8000e90 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c22:	f000 f975 	bl	8000f10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //start communication with sensor

  HAL_Delay(10);
 8000c26:	200a      	movs	r0, #10
 8000c28:	f000 fe5e 	bl	80018e8 <HAL_Delay>
  //Display initialization
  LCD_begin(16,2,0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	2010      	movs	r0, #16
 8000c32:	f7ff feb3 	bl	800099c <LCD_begin>
  LCD_setColorWhite();
 8000c36:	f7ff ffce 	bl	8000bd6 <LCD_setColorWhite>
  //first I2C initialization
  sgp30_iaq_init();
 8000c3a:	f000 fbdd 	bl	80013f8 <sgp30_iaq_init>
  HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c42:	f000 fe51 	bl	80018e8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //measurement of values
	  uint16_t co2, tvoc, pm25;
	  float temp = 0.0f, hum= 0.0f;
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]

	  char buffer[17];

	  //reading VOC and CO2 values
	  sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 8000c52:	f107 021a 	add.w	r2, r7, #26
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fbae 	bl	80013be <sgp30_measure_iaq_blocking_read>

	  //reading SEn54


	  // Clear and update LCD
	  LCD_clear();
 8000c62:	f7ff ff19 	bl	8000a98 <LCD_clear>
	  LCD_setCursor(0, 1);
	  snprintf(buffer, sizeof(buffer), "TVOC: %u ppb", tvoc);
	  LCD_print(buffer, strlen(buffer));

	*/
	  LCD_setCursor(0, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff ff35 	bl	8000ad8 <LCD_setCursor>
	  snprintf(buffer, sizeof(buffer), "T: %.1f C", temp);
 8000c6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c70:	f7ff fc6a 	bl	8000548 <__aeabi_f2d>
 8000c74:	4602      	mov	r2, r0
 8000c76:	460b      	mov	r3, r1
 8000c78:	1d38      	adds	r0, r7, #4
 8000c7a:	e9cd 2300 	strd	r2, r3, [sp]
 8000c7e:	4a54      	ldr	r2, [pc, #336]	@ (8000dd0 <main+0x1c4>)
 8000c80:	2111      	movs	r1, #17
 8000c82:	f004 f885 	bl	8004d90 <sniprintf>
	  LCD_print(buffer, strlen(buffer));
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff faa1 	bl	80001d0 <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff54 	bl	8000b44 <LCD_print>

	  LCD_setCursor(0, 1);
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ff1a 	bl	8000ad8 <LCD_setCursor>
	  snprintf(buffer, sizeof(buffer), "RH: %.1f %%", hum);
 8000ca4:	6a38      	ldr	r0, [r7, #32]
 8000ca6:	f7ff fc4f 	bl	8000548 <__aeabi_f2d>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	1d38      	adds	r0, r7, #4
 8000cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8000cb4:	4a47      	ldr	r2, [pc, #284]	@ (8000dd4 <main+0x1c8>)
 8000cb6:	2111      	movs	r1, #17
 8000cb8:	f004 f86a 	bl	8004d90 <sniprintf>
	  LCD_print(buffer, strlen(buffer));
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa86 	bl	80001d0 <strlen>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff39 	bl	8000b44 <LCD_print>


	  HAL_Delay(1000); //read every second
 8000cd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd6:	f000 fe07 	bl	80018e8 <HAL_Delay>

	  //Check Lüften conditions
	  if (co2>1000|| tvoc>300||pm25>35){
 8000cda:	8b7b      	ldrh	r3, [r7, #26]
 8000cdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ce0:	d806      	bhi.n	8000cf0 <main+0xe4>
 8000ce2:	8b3b      	ldrh	r3, [r7, #24]
 8000ce4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000ce8:	d802      	bhi.n	8000cf0 <main+0xe4>
 8000cea:	8bfb      	ldrh	r3, [r7, #30]
 8000cec:	2b23      	cmp	r3, #35	@ 0x23
 8000cee:	d958      	bls.n	8000da2 <main+0x196>
		  buzzer_beep(500);
 8000cf0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cf4:	f7ff fe10 	bl	8000918 <buzzer_beep>
		  LCD_setCursor(0, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff feec 	bl	8000ad8 <LCD_setCursor>
		  snprintf(buffer, sizeof(buffer), "LUEFTEN!");
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4a35      	ldr	r2, [pc, #212]	@ (8000dd8 <main+0x1cc>)
 8000d04:	2111      	movs	r1, #17
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f842 	bl	8004d90 <sniprintf>
		  LCD_print(buffer, strlen(buffer));
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fa5e 	bl	80001d0 <strlen>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff11 	bl	8000b44 <LCD_print>
		  sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 8000d22:	f107 021a 	add.w	r2, r7, #26
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fb46 	bl	80013be <sgp30_measure_iaq_blocking_read>

		  LCD_setCursor(0, 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fecf 	bl	8000ad8 <LCD_setCursor>
		  if (co2 > 1000) {
 8000d3a:	8b7b      	ldrh	r3, [r7, #26]
 8000d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d40:	d906      	bls.n	8000d50 <main+0x144>
		          snprintf(buffer, sizeof(buffer), "CO2: %u ppm", co2);
 8000d42:	8b7b      	ldrh	r3, [r7, #26]
 8000d44:	1d38      	adds	r0, r7, #4
 8000d46:	4a25      	ldr	r2, [pc, #148]	@ (8000ddc <main+0x1d0>)
 8000d48:	2111      	movs	r1, #17
 8000d4a:	f004 f821 	bl	8004d90 <sniprintf>
 8000d4e:	e013      	b.n	8000d78 <main+0x16c>
		      }
		  else if (tvoc > 300) {
 8000d50:	8b3b      	ldrh	r3, [r7, #24]
 8000d52:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d56:	d906      	bls.n	8000d66 <main+0x15a>
		          snprintf(buffer, sizeof(buffer), "TVOC: %u ppb", tvoc);
 8000d58:	8b3b      	ldrh	r3, [r7, #24]
 8000d5a:	1d38      	adds	r0, r7, #4
 8000d5c:	4a20      	ldr	r2, [pc, #128]	@ (8000de0 <main+0x1d4>)
 8000d5e:	2111      	movs	r1, #17
 8000d60:	f004 f816 	bl	8004d90 <sniprintf>
 8000d64:	e008      	b.n	8000d78 <main+0x16c>
		      }
		  else if (pm25 > 35) {
 8000d66:	8bfb      	ldrh	r3, [r7, #30]
 8000d68:	2b23      	cmp	r3, #35	@ 0x23
 8000d6a:	d905      	bls.n	8000d78 <main+0x16c>
		          snprintf(buffer, sizeof(buffer), "PM2.5: %u ug/m3", pm25);
 8000d6c:	8bfb      	ldrh	r3, [r7, #30]
 8000d6e:	1d38      	adds	r0, r7, #4
 8000d70:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <main+0x1d8>)
 8000d72:	2111      	movs	r1, #17
 8000d74:	f004 f80c 	bl	8004d90 <sniprintf>
		      }
		  LCD_print(buffer, strlen(buffer));
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fa28 	bl	80001d0 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fedb 	bl	8000b44 <LCD_print>

		  HAL_Delay(500);
 8000d8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d92:	f000 fda9 	bl	80018e8 <HAL_Delay>
		  LCD_clear();
 8000d96:	f7ff fe7f 	bl	8000a98 <LCD_clear>
		  HAL_Delay(500);
 8000d9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d9e:	f000 fda3 	bl	80018e8 <HAL_Delay>
	  }


	  //printf("CO2: %d ppm, TVOC: %d ppb\r\n", co2, tvoc);
	  int16_t ret = sgp30_measure_iaq_blocking_read(&tvoc, &co2);
 8000da2:	f107 021a 	add.w	r2, r7, #26
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fb06 	bl	80013be <sgp30_measure_iaq_blocking_read>
 8000db2:	4603      	mov	r3, r0
 8000db4:	83bb      	strh	r3, [r7, #28]
	  if (ret != 0) {
 8000db6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f43f af43 	beq.w	8000c46 <main+0x3a>
	      printf("SGP30 I2C read error: %d\r\n", ret);
 8000dc0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <main+0x1dc>)
 8000dc8:	f003 ffd0 	bl	8004d6c <iprintf>
  {
 8000dcc:	e73b      	b.n	8000c46 <main+0x3a>
 8000dce:	bf00      	nop
 8000dd0:	08005e34 	.word	0x08005e34
 8000dd4:	08005e40 	.word	0x08005e40
 8000dd8:	08005e4c 	.word	0x08005e4c
 8000ddc:	08005e58 	.word	0x08005e58
 8000de0:	08005e64 	.word	0x08005e64
 8000de4:	08005e74 	.word	0x08005e74
 8000de8:	08005e84 	.word	0x08005e84

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b096      	sub	sp, #88	@ 0x58
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2244      	movs	r2, #68	@ 0x44
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 f83f 	bl	8004e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e12:	f001 fe2b 	bl	8002a6c <HAL_PWREx_ControlVoltageScaling>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e1c:	f000 f8d8 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e20:	2310      	movs	r3, #16
 8000e22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e2c:	2360      	movs	r3, #96	@ 0x60
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	2302      	movs	r3, #2
 8000e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e34:	2301      	movs	r3, #1
 8000e36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e3c:	2328      	movs	r3, #40	@ 0x28
 8000e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e40:	2307      	movs	r3, #7
 8000e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fe61 	bl	8002b18 <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e5c:	f000 f8b8 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e60:	230f      	movs	r3, #15
 8000e62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2303      	movs	r3, #3
 8000e66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	2104      	movs	r1, #4
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fa29 	bl	80032d0 <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e84:	f000 f8a4 	bl	8000fd0 <Error_Handler>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3758      	adds	r7, #88	@ 0x58
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <MX_I2C1_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <MX_I2C1_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ecc:	f000 ffd8 	bl	8001e80 <HAL_I2C_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 f87b 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ede:	f001 fd1f 	bl	8002920 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 f872 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ef0:	f001 fd61 	bl	80029b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f869 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000008c 	.word	0x2000008c
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	10d19ce4 	.word	0x10d19ce4

08000f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <MX_USART1_UART_Init+0x5c>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_USART1_UART_Init+0x58>)
 8000f54:	f003 f89c 	bl	8004090 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f5e:	f000 f837 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000e0 	.word	0x200000e0
 8000f6c:	40013800 	.word	0x40013800

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <MX_GPIO_Init+0x58>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <MX_GPIO_Init+0x58>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <MX_GPIO_Init+0x58>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <MX_GPIO_Init+0x5c>)
 8000fa2:	f000 ff55 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <MX_GPIO_Init+0x5c>)
 8000fbc:	f000 fd9e 	bl	8001afc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <Error_Handler+0x8>

08000fdc <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000fe8:	23ff      	movs	r3, #255	@ 0xff
 8000fea:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	81fb      	strh	r3, [r7, #14]
 8000ff0:	e021      	b.n	8001036 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	7b7b      	ldrb	r3, [r7, #13]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001000:	2308      	movs	r3, #8
 8001002:	733b      	strb	r3, [r7, #12]
 8001004:	e011      	b.n	800102a <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8001006:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da07      	bge.n	800101e <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	b25b      	sxtb	r3, r3
 8001014:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001018:	b25b      	sxtb	r3, r3
 800101a:	737b      	strb	r3, [r7, #13]
 800101c:	e002      	b.n	8001024 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	3b01      	subs	r3, #1
 8001028:	733b      	strb	r3, [r7, #12]
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ea      	bne.n	8001006 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	3301      	adds	r3, #1
 8001034:	81fb      	strh	r3, [r7, #14]
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3d9      	bcc.n	8000ff2 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 800103e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffbb 	bl	8000fdc <sensirion_common_generate_crc>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	787b      	ldrb	r3, [r7, #1]
 800106c:	4293      	cmp	r3, r2
 800106e:	d002      	beq.n	8001076 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	e000      	b.n	8001078 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	817b      	strh	r3, [r7, #10]
 8001090:	4613      	mov	r3, r2
 8001092:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29a      	uxth	r2, r3
 800109e:	8abb      	ldrh	r3, [r7, #20]
 80010a0:	1c59      	adds	r1, r3, #1
 80010a2:	82b9      	strh	r1, [r7, #20]
 80010a4:	4619      	mov	r1, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	440b      	add	r3, r1
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 80010ae:	8abb      	ldrh	r3, [r7, #20]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	82ba      	strh	r2, [r7, #20]
 80010b4:	461a      	mov	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	897a      	ldrh	r2, [r7, #10]
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
 80010c4:	e030      	b.n	8001128 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	8abb      	ldrh	r3, [r7, #20]
 80010d6:	1c59      	adds	r1, r3, #1
 80010d8:	82b9      	strh	r1, [r7, #20]
 80010da:	4619      	mov	r1, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	440b      	add	r3, r1
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	881a      	ldrh	r2, [r3, #0]
 80010ee:	8abb      	ldrh	r3, [r7, #20]
 80010f0:	1c59      	adds	r1, r3, #1
 80010f2:	82b9      	strh	r1, [r7, #20]
 80010f4:	4619      	mov	r1, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	440b      	add	r3, r1
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 80010fe:	8abb      	ldrh	r3, [r7, #20]
 8001100:	3b02      	subs	r3, #2
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	2102      	movs	r1, #2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff67 	bl	8000fdc <sensirion_common_generate_crc>
 800110e:	4603      	mov	r3, r0
 8001110:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8001112:	8abb      	ldrh	r3, [r7, #20]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	82ba      	strh	r2, [r7, #20]
 8001118:	461a      	mov	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	7cfa      	ldrb	r2, [r7, #19]
 8001120:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	3301      	adds	r3, #1
 8001126:	75fb      	strb	r3, [r7, #23]
 8001128:	7dfa      	ldrb	r2, [r7, #23]
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3ca      	bcc.n	80010c6 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8001130:	8abb      	ldrh	r3, [r7, #20]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 800113a:	b580      	push	{r7, lr}
 800113c:	b096      	sub	sp, #88	@ 0x58
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	6039      	str	r1, [r7, #0]
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	4613      	mov	r3, r2
 8001148:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	461a      	mov	r2, r3
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	4413      	add	r3, r2
 8001152:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800115c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f8ad 	bl	80012c4 <sensirion_i2c_read>
 800116a:	4603      	mov	r3, r0
 800116c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    if (ret != NO_ERROR)
 8001170:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8001178:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800117c:	e047      	b.n	800120e <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800118a:	e039      	b.n	8001200 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800118c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001192:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001194:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001198:	3302      	adds	r3, #2
 800119a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800119c:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	2102      	movs	r1, #2
 80011a4:	f7ff ff52 	bl	800104c <sensirion_common_check_crc>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (ret != NO_ERROR)
 80011ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 80011b6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011ba:	e028      	b.n	800120e <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 80011bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80011c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011c2:	441a      	add	r2, r3
 80011c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80011c8:	1c59      	adds	r1, r3, #1
 80011ca:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 80011ce:	4619      	mov	r1, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	440b      	add	r3, r1
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 80011d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80011dc:	3301      	adds	r3, #1
 80011de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011e0:	441a      	add	r2, r3
 80011e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80011e6:	1c59      	adds	r1, r3, #1
 80011e8:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 80011ec:	4619      	mov	r1, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	440b      	add	r3, r1
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80011f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80011fa:	3303      	adds	r3, #3
 80011fc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001200:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001204:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001208:	429a      	cmp	r2, r3
 800120a:	d3bf      	bcc.n	800118c <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3758      	adds	r7, #88	@ 0x58
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	6039      	str	r1, [r7, #0]
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	4613      	mov	r3, r2
 8001224:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8001226:	88ba      	ldrh	r2, [r7, #4]
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff84 	bl	800113a <sensirion_i2c_read_words_as_bytes>
 8001232:	4603      	mov	r3, r0
 8001234:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 8001236:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <sensirion_i2c_read_words+0x2e>
        return ret;
 800123e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001242:	e020      	b.n	8001286 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e017      	b.n	800127a <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21a      	sxth	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b219      	sxth	r1, r3
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	b28a      	uxth	r2, r1
 8001272:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	3301      	adds	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	b29b      	uxth	r3, r3
 800127e:	88ba      	ldrh	r2, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8e2      	bhi.n	800124a <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	460a      	mov	r2, r1
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	4613      	mov	r3, r2
 800129c:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 800129e:	88b9      	ldrh	r1, [r7, #4]
 80012a0:	f107 000c 	add.w	r0, r7, #12
 80012a4:	2300      	movs	r3, #0
 80012a6:	2200      	movs	r2, #0
 80012a8:	f7ff feea 	bl	8001080 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80012ac:	f107 010c 	add.w	r1, r7, #12
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2202      	movs	r2, #2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f827 	bl	8001308 <sensirion_i2c_write>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80bb      	strh	r3, [r7, #4]
    // IMPLEMENT
	return HAL_I2C_Master_Receive(&hi2c1, address << 1, data, count, HAL_MAX_DELAY)== HAL_OK ? 0 :-1;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b299      	uxth	r1, r3
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	f04f 32ff 	mov.w	r2, #4294967295
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	4807      	ldr	r0, [pc, #28]	@ (8001304 <sensirion_i2c_read+0x40>)
 80012e8:	f000 ff7e 	bl	80021e8 <HAL_I2C_Master_Receive>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <sensirion_i2c_read+0x32>
 80012f2:	2300      	movs	r3, #0
 80012f4:	e001      	b.n	80012fa <sensirion_i2c_read+0x36>
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295

}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000008c 	.word	0x2000008c

08001308 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	80bb      	strh	r3, [r7, #4]
    // IMPLEMENT
    return HAL_I2C_Master_Transmit(&hi2c1, address << 1, data, count, HAL_MAX_DELAY) == HAL_OK ? 0 : -1;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	b29b      	uxth	r3, r3
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	b299      	uxth	r1, r3
 8001320:	88bb      	ldrh	r3, [r7, #4]
 8001322:	f04f 32ff 	mov.w	r2, #4294967295
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	4807      	ldr	r0, [pc, #28]	@ (8001348 <sensirion_i2c_write+0x40>)
 800132c:	f000 fe44 	bl	8001fb8 <HAL_I2C_Master_Transmit>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <sensirion_i2c_write+0x32>
 8001336:	2300      	movs	r3, #0
 8001338:	e001      	b.n	800133e <sensirion_i2c_write+0x36>
 800133a:	f04f 33ff 	mov.w	r3, #4294967295

}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000008c 	.word	0x2000008c

0800134c <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    // IMPLEMENT
	HAL_Delay((useconds + 999)/ 1000);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <sensirion_sleep_usec+0x24>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fac0 	bl	80018e8 <HAL_Delay>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	10624dd3 	.word	0x10624dd3

08001374 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8001378:	2358      	movs	r3, #88	@ 0x58
 800137a:	f242 0108 	movw	r1, #8200	@ 0x2008
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff85 	bl	800128e <sensirion_i2c_write_cmd>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}

0800138a <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm) {
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8001394:	2058      	movs	r0, #88	@ 0x58
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2202      	movs	r2, #2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff ff3a 	bl	8001216 <sensirion_i2c_read_words>
 80013a2:	4603      	mov	r3, r0
 80013a4:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 80013a6:	897a      	ldrh	r2, [r7, #10]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 80013ac:	893a      	ldrh	r2, [r7, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	801a      	strh	r2, [r3, #0]

    return ret;
 80013b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t* tvoc_ppb,
                                        uint16_t* co2_eq_ppm) {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 80013c8:	f7ff ffd4 	bl	8001374 <sgp30_measure_iaq>
 80013cc:	4603      	mov	r3, r0
 80013ce:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 80013d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 80013d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013dc:	e008      	b.n	80013f0 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 80013de:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 80013e2:	f7ff ffb3 	bl	800134c <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffce 	bl	800138a <sgp30_read_iaq>
 80013ee:	4603      	mov	r3, r0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 80013fe:	2358      	movs	r3, #88	@ 0x58
 8001400:	f242 0103 	movw	r1, #8195	@ 0x2003
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff42 	bl	800128e <sensirion_i2c_write_cmd>
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 800140e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001412:	f7ff ff9b 	bl	800134c <sensirion_sleep_usec>
    return ret;
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <HAL_MspInit+0x44>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	4a0e      	ldr	r2, [pc, #56]	@ (8001468 <HAL_MspInit+0x44>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6613      	str	r3, [r2, #96]	@ 0x60
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_MspInit+0x44>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001446:	4a08      	ldr	r2, [pc, #32]	@ (8001468 <HAL_MspInit+0x44>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144c:	6593      	str	r3, [r2, #88]	@ 0x58
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ac      	sub	sp, #176	@ 0xb0
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2288      	movs	r2, #136	@ 0x88
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fcf6 	bl	8004e7e <memset>
  if(hi2c->Instance==I2C1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a21      	ldr	r2, [pc, #132]	@ (800151c <HAL_I2C_MspInit+0xb0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d13b      	bne.n	8001514 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800149c:	2340      	movs	r3, #64	@ 0x40
 800149e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 f935 	bl	8003718 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014b4:	f7ff fd8c 	bl	8000fd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <HAL_I2C_MspInit+0xb4>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <HAL_I2C_MspInit+0xb4>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_I2C_MspInit+0xb4>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80014d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ea:	2304      	movs	r3, #4
 80014ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014f4:	4619      	mov	r1, r3
 80014f6:	480b      	ldr	r0, [pc, #44]	@ (8001524 <HAL_I2C_MspInit+0xb8>)
 80014f8:	f000 fb00 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_I2C_MspInit+0xb4>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <HAL_I2C_MspInit+0xb4>)
 8001502:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001506:	6593      	str	r3, [r2, #88]	@ 0x58
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <HAL_I2C_MspInit+0xb4>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001514:	bf00      	nop
 8001516:	37b0      	adds	r7, #176	@ 0xb0
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40005400 	.word	0x40005400
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ac      	sub	sp, #176	@ 0xb0
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2288      	movs	r2, #136	@ 0x88
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fc98 	bl	8004e7e <memset>
  if(huart->Instance==USART1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <HAL_UART_MspInit+0xb0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d13a      	bne.n	80015ce <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001558:	2301      	movs	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800155c:	2300      	movs	r3, #0
 800155e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4618      	mov	r0, r3
 8001566:	f002 f8d7 	bl	8003718 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001570:	f7ff fd2e 	bl	8000fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_UART_MspInit+0xb4>)
 8001576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <HAL_UART_MspInit+0xb4>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_UART_MspInit+0xb4>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <HAL_UART_MspInit+0xb4>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <HAL_UART_MspInit+0xb4>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <HAL_UART_MspInit+0xb4>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a4:	23c0      	movs	r3, #192	@ 0xc0
 80015a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015bc:	2307      	movs	r3, #7
 80015be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <HAL_UART_MspInit+0xb8>)
 80015ca:	f000 fa97 	bl	8001afc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80015ce:	bf00      	nop
 80015d0:	37b0      	adds	r7, #176	@ 0xb0
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000400 	.word	0x48000400

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <NMI_Handler+0x4>

080015ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <MemManage_Handler+0x4>

080015fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <UsageFault_Handler+0x4>

0800160c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f000 f935 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}

08001642 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e00a      	b.n	800166a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001654:	f3af 8000 	nop.w
 8001658:	4601      	mov	r1, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	60ba      	str	r2, [r7, #8]
 8001660:	b2ca      	uxtb	r2, r1
 8001662:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf0      	blt.n	8001654 <_read+0x12>
  }

  return len;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e009      	b.n	80016a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	60ba      	str	r2, [r7, #8]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff faa6 	bl	8000be8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf1      	blt.n	800168e <_write+0x12>
  }
  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_close>:

int _close(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016dc:	605a      	str	r2, [r3, #4]
  return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_isatty>:

int _isatty(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f003 fbe6 	bl	8004f1c <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20018000 	.word	0x20018000
 800177c:	00000400 	.word	0x00000400
 8001780:	20000168 	.word	0x20000168
 8001784:	200002c0 	.word	0x200002c0

08001788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff ffea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	@ (80017ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	@ (80017f8 <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f003 fba5 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7ff fa15 	bl	8000c0c <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017f0:	08005f2c 	.word	0x08005f2c
  ldr r2, =_sbss
 80017f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017f8:	200002bc 	.word	0x200002bc

080017fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_2_IRQHandler>

080017fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f943 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f80e 	bl	8001830 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e001      	b.n	8001824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001820:	f7ff fe00 	bl	8001424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001824:	79fb      	ldrb	r3, [r7, #7]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f941 	bl	8001ae2 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f919 	bl	8001aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	2000016c 	.word	0x2000016c

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000016c 	.word	0x2000016c

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff47 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff5c 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffb0 	bl	8001a50 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	e17f      	b.n	8001e0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8171 	beq.w	8001e06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d005      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d130      	bne.n	8001b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b72:	2201      	movs	r2, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f003 0201 	and.w	r2, r3, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d118      	bne.n	8001bdc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	6939      	ldr	r1, [r7, #16]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80ac 	beq.w	8001e06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b5f      	ldr	r3, [pc, #380]	@ (8001e2c <HAL_GPIO_Init+0x330>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e2c <HAL_GPIO_Init+0x330>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cba:	4b5c      	ldr	r3, [pc, #368]	@ (8001e2c <HAL_GPIO_Init+0x330>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e30 <HAL_GPIO_Init+0x334>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cf0:	d025      	beq.n	8001d3e <HAL_GPIO_Init+0x242>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e34 <HAL_GPIO_Init+0x338>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01f      	beq.n	8001d3a <HAL_GPIO_Init+0x23e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001e38 <HAL_GPIO_Init+0x33c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x23a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4d      	ldr	r2, [pc, #308]	@ (8001e3c <HAL_GPIO_Init+0x340>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x236>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e40 <HAL_GPIO_Init+0x344>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x232>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4b      	ldr	r2, [pc, #300]	@ (8001e44 <HAL_GPIO_Init+0x348>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x22e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e48 <HAL_GPIO_Init+0x34c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x22a>
 8001d22:	2306      	movs	r3, #6
 8001d24:	e00c      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e00a      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e008      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x244>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d50:	4937      	ldr	r1, [pc, #220]	@ (8001e30 <HAL_GPIO_Init+0x334>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d82:	4a32      	ldr	r2, [pc, #200]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d88:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dac:	4a27      	ldr	r2, [pc, #156]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e00:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <HAL_GPIO_Init+0x350>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f ae78 	bne.w	8001b0c <HAL_GPIO_Init+0x10>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	48000c00 	.word	0x48000c00
 8001e40:	48001000 	.word	0x48001000
 8001e44:	48001400 	.word	0x48001400
 8001e48:	48001800 	.word	0x48001800
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e08d      	b.n	8001fae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fae0 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	@ 0x24
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e006      	b.n	8001f08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d108      	bne.n	8001f22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	e007      	b.n	8001f32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69d9      	ldr	r1, [r3, #28]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	f040 80fd 	bne.w	80021d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2C_Master_Transmit+0x30>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0f6      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x21e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fc6e 	bl	80018d0 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2319      	movs	r3, #25
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fa0a 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0e1      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2221      	movs	r2, #33	@ 0x21
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2210      	movs	r2, #16
 800201e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	893a      	ldrh	r2, [r7, #8]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2bff      	cmp	r3, #255	@ 0xff
 8002042:	d906      	bls.n	8002052 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	22ff      	movs	r2, #255	@ 0xff
 8002048:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800204a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e007      	b.n	8002062 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800205c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002060:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	4b4e      	ldr	r3, [pc, #312]	@ (80021e0 <HAL_I2C_Master_Transmit+0x228>)
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fc05 	bl	80028bc <I2C_TransferConfig>
 80020b2:	e066      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	8979      	ldrh	r1, [r7, #10]
 80020bc:	4b48      	ldr	r3, [pc, #288]	@ (80021e0 <HAL_I2C_Master_Transmit+0x228>)
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fbfa 	bl	80028bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020c8:	e05b      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	6a39      	ldr	r1, [r7, #32]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f9fd 	bl	80024ce <I2C_WaitOnTXISFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07b      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d034      	beq.n	8002182 <HAL_I2C_Master_Transmit+0x1ca>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d130      	bne.n	8002182 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	2200      	movs	r2, #0
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f976 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e04d      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	2bff      	cmp	r3, #255	@ 0xff
 8002142:	d90e      	bls.n	8002162 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214e:	b2da      	uxtb	r2, r3
 8002150:	8979      	ldrh	r1, [r7, #10]
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fbae 	bl	80028bc <I2C_TransferConfig>
 8002160:	e00f      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	2300      	movs	r3, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fb9d 	bl	80028bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d19e      	bne.n	80020ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	6a39      	ldr	r1, [r7, #32]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f9e3 	bl	800255c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01a      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2220      	movs	r2, #32
 80021a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <HAL_I2C_Master_Transmit+0x22c>)
 80021b4:	400b      	ands	r3, r1
 80021b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	80002000 	.word	0x80002000
 80021e4:	fe00e800 	.word	0xfe00e800

080021e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 80db 	bne.w	80023c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Receive+0x30>
 8002214:	2302      	movs	r3, #2
 8002216:	e0d4      	b.n	80023c2 <HAL_I2C_Master_Receive+0x1da>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002220:	f7ff fb56 	bl	80018d0 <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2319      	movs	r3, #25
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8f2 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0bf      	b.n	80023c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2222      	movs	r2, #34	@ 0x22
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2bff      	cmp	r3, #255	@ 0xff
 8002272:	d90e      	bls.n	8002292 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227e:	b2da      	uxtb	r2, r3
 8002280:	8979      	ldrh	r1, [r7, #10]
 8002282:	4b52      	ldr	r3, [pc, #328]	@ (80023cc <HAL_I2C_Master_Receive+0x1e4>)
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fb16 	bl	80028bc <I2C_TransferConfig>
 8002290:	e06d      	b.n	800236e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	8979      	ldrh	r1, [r7, #10]
 80022a4:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <HAL_I2C_Master_Receive+0x1e4>)
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fb05 	bl	80028bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80022b2:	e05c      	b.n	800236e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	6a39      	ldr	r1, [r7, #32]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f993 	bl	80025e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e07c      	b.n	80023c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d034      	beq.n	800236e <HAL_I2C_Master_Receive+0x186>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d130      	bne.n	800236e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2200      	movs	r2, #0
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f880 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e04d      	b.n	80023c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	2bff      	cmp	r3, #255	@ 0xff
 800232e:	d90e      	bls.n	800234e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	22ff      	movs	r2, #255	@ 0xff
 8002334:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233a:	b2da      	uxtb	r2, r3
 800233c:	8979      	ldrh	r1, [r7, #10]
 800233e:	2300      	movs	r3, #0
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fab8 	bl	80028bc <I2C_TransferConfig>
 800234c:	e00f      	b.n	800236e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235c:	b2da      	uxtb	r2, r3
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	2300      	movs	r3, #0
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 faa7 	bl	80028bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d19d      	bne.n	80022b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	6a39      	ldr	r1, [r7, #32]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f8ed 	bl	800255c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e01a      	b.n	80023c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2220      	movs	r2, #32
 8002392:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <HAL_I2C_Master_Receive+0x1e8>)
 80023a0:	400b      	ands	r3, r1
 80023a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	80002400 	.word	0x80002400
 80023d0:	fe00e800 	.word	0xfe00e800

080023d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d103      	bne.n	80023f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d007      	beq.n	8002410 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	619a      	str	r2, [r3, #24]
  }
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242c:	e03b      	b.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f962 	bl	80026fc <I2C_IsErrorOccurred>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e041      	b.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d02d      	beq.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff fa41 	bl	80018d0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x44>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d122      	bne.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	429a      	cmp	r2, r3
 800247c:	d113      	bne.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f043 0220 	orr.w	r2, r3, #32
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4013      	ands	r3, r2
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d0b4      	beq.n	800242e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024da:	e033      	b.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f90b 	bl	80026fc <I2C_IsErrorOccurred>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e031      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d025      	beq.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f8:	f7ff f9ea 	bl	80018d0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d302      	bcc.n	800250e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11a      	bne.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d013      	beq.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e007      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d1c4      	bne.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002568:	e02f      	b.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f8c4 	bl	80026fc <I2C_IsErrorOccurred>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02d      	b.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257e:	f7ff f9a7 	bl	80018d0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	d302      	bcc.n	8002594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11a      	bne.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d013      	beq.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f043 0220 	orr.w	r2, r3, #32
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e007      	b.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d1c8      	bne.n	800256a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80025f4:	e071      	b.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f87e 	bl	80026fc <I2C_IsErrorOccurred>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b20      	cmp	r3, #32
 8002616:	d13b      	bne.n	8002690 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d138      	bne.n	8002690 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b04      	cmp	r3, #4
 800262a:	d105      	bne.n	8002638 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b10      	cmp	r3, #16
 8002644:	d121      	bne.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2210      	movs	r2, #16
 800264c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2204      	movs	r2, #4
 8002652:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2220      	movs	r2, #32
 800265a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002668:	400b      	ands	r3, r1
 800266a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	75fb      	strb	r3, [r7, #23]
 8002688:	e002      	b.n	8002690 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002690:	f7ff f91e 	bl	80018d0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d119      	bne.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d00f      	beq.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d002      	beq.n	80026ee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d083      	beq.n	80025f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	fe00e800 	.word	0xfe00e800

080026fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d068      	beq.n	80027fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2210      	movs	r2, #16
 800272e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002730:	e049      	b.n	80027c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d045      	beq.n	80027c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff f8c9 	bl	80018d0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_IsErrorOccurred+0x54>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d13a      	bne.n	80027c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002762:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800276e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002772:	d121      	bne.n	80027b8 <I2C_IsErrorOccurred+0xbc>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800277a:	d01d      	beq.n	80027b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b20      	cmp	r3, #32
 8002780:	d01a      	beq.n	80027b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002790:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002792:	f7ff f89d 	bl	80018d0 <HAL_GetTick>
 8002796:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	e00e      	b.n	80027b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800279a:	f7ff f899 	bl	80018d0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b19      	cmp	r3, #25
 80027a6:	d907      	bls.n	80027b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80027b6:	e006      	b.n	80027c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d1e9      	bne.n	800279a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d003      	beq.n	80027dc <I2C_IsErrorOccurred+0xe0>
 80027d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0aa      	beq.n	8002732 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d103      	bne.n	80027ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2220      	movs	r2, #32
 80027ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800281c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800283e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01c      	beq.n	80028aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff fdaf 	bl	80023d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <I2C_IsErrorOccurred+0x1bc>)
 8002882:	400b      	ands	r3, r1
 8002884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80028aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3728      	adds	r7, #40	@ 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	fe00e800 	.word	0xfe00e800

080028bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	817b      	strh	r3, [r7, #10]
 80028ca:	4613      	mov	r3, r2
 80028cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	0d5b      	lsrs	r3, r3, #21
 80028f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <I2C_TransferConfig+0x60>)
 80028fc:	430b      	orrs	r3, r1
 80028fe:	43db      	mvns	r3, r3
 8002900:	ea02 0103 	and.w	r1, r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	03ff63ff 	.word	0x03ff63ff

08002920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b20      	cmp	r3, #32
 8002934:	d138      	bne.n	80029a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002940:	2302      	movs	r3, #2
 8002942:	e032      	b.n	80029aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	@ 0x24
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002972:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d139      	bne.n	8002a40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e033      	b.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2224      	movs	r2, #36	@ 0x24
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a54:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40007000 	.word	0x40007000

08002a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7a:	d130      	bne.n	8002ade <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a7c:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a88:	d038      	beq.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a92:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2232      	movs	r2, #50	@ 0x32
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9b      	lsrs	r3, r3, #18
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab0:	e002      	b.n	8002ab8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac4:	d102      	bne.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f2      	bne.n	8002ab2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002acc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad8:	d110      	bne.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e00f      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aea:	d007      	beq.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002aec:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002af4:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002afa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	20000000 	.word	0x20000000
 8002b14:	431bde83 	.word	0x431bde83

08002b18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e3ca      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2a:	4b97      	ldr	r3, [pc, #604]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b34:	4b94      	ldr	r3, [pc, #592]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80e4 	beq.w	8002d14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <HAL_RCC_OscConfig+0x4a>
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b0c      	cmp	r3, #12
 8002b56:	f040 808b 	bne.w	8002c70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 8087 	bne.w	8002c70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b62:	4b89      	ldr	r3, [pc, #548]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x62>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e3a2      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	4b82      	ldr	r3, [pc, #520]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_RCC_OscConfig+0x7c>
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b92:	e005      	b.n	8002ba0 <HAL_RCC_OscConfig+0x88>
 8002b94:	4b7c      	ldr	r3, [pc, #496]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d223      	bcs.n	8002bec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fd55 	bl	8003658 <RCC_SetFlashLatencyFromMSIRange>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e383      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb8:	4b73      	ldr	r3, [pc, #460]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	f043 0308 	orr.w	r3, r3, #8
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b70      	ldr	r3, [pc, #448]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	496d      	ldr	r1, [pc, #436]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	4968      	ldr	r1, [pc, #416]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
 8002bea:	e025      	b.n	8002c38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bec:	4b66      	ldr	r3, [pc, #408]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a65      	ldr	r2, [pc, #404]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	f043 0308 	orr.w	r3, r3, #8
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b63      	ldr	r3, [pc, #396]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4960      	ldr	r1, [pc, #384]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	495b      	ldr	r1, [pc, #364]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fd15 	bl	8003658 <RCC_SetFlashLatencyFromMSIRange>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e343      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c38:	f000 fc4a 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b52      	ldr	r3, [pc, #328]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	4950      	ldr	r1, [pc, #320]	@ (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	4a4e      	ldr	r2, [pc, #312]	@ (8002d90 <HAL_RCC_OscConfig+0x278>)
 8002c56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c58:	4b4e      	ldr	r3, [pc, #312]	@ (8002d94 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fde7 	bl	8001830 <HAL_InitTick>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d052      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	e327      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d032      	beq.n	8002cde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c78:	4b43      	ldr	r3, [pc, #268]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c84:	f7fe fe24 	bl	80018d0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fe20 	bl	80018d0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e310      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002caa:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a36      	ldr	r2, [pc, #216]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cb0:	f043 0308 	orr.w	r3, r3, #8
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4931      	ldr	r1, [pc, #196]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	492c      	ldr	r1, [pc, #176]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
 8002cdc:	e01a      	b.n	8002d14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cde:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a29      	ldr	r2, [pc, #164]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fdf1 	bl	80018d0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fded 	bl	80018d0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e2dd      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d04:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x1da>
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d074      	beq.n	8002e0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x21a>
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d10e      	bne.n	8002d4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d064      	beq.n	8002e08 <HAL_RCC_OscConfig+0x2f0>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d160      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e2ba      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x24a>
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0b      	ldr	r2, [pc, #44]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e026      	b.n	8002db0 <HAL_RCC_OscConfig+0x298>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d6a:	d115      	bne.n	8002d98 <HAL_RCC_OscConfig+0x280>
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a05      	ldr	r2, [pc, #20]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b03      	ldr	r3, [pc, #12]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a02      	ldr	r2, [pc, #8]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x298>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08005ea0 	.word	0x08005ea0
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004
 8002d98:	4ba0      	ldr	r3, [pc, #640]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a9f      	ldr	r2, [pc, #636]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b9d      	ldr	r3, [pc, #628]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a9c      	ldr	r2, [pc, #624]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fd8a 	bl	80018d0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fd86 	bl	80018d0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	@ 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e276      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd2:	4b92      	ldr	r3, [pc, #584]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2a8>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fd76 	bl	80018d0 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fd72 	bl	80018d0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	@ 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e262      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfa:	4b88      	ldr	r3, [pc, #544]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2d0>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d060      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_OscConfig+0x310>
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d119      	bne.n	8002e56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d116      	bne.n	8002e56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e28:	4b7c      	ldr	r3, [pc, #496]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x328>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e23f      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b76      	ldr	r3, [pc, #472]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	4973      	ldr	r1, [pc, #460]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e54:	e040      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d023      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6e      	ldr	r2, [pc, #440]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fd31 	bl	80018d0 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e72:	f7fe fd2d 	bl	80018d0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e21d      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e84:	4b65      	ldr	r3, [pc, #404]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b62      	ldr	r3, [pc, #392]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	495f      	ldr	r1, [pc, #380]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e018      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fd0d 	bl	80018d0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe fd09 	bl	80018d0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e1f9      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ecc:	4b53      	ldr	r3, [pc, #332]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d03c      	beq.n	8002f5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eec:	4b4b      	ldr	r3, [pc, #300]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fce8 	bl	80018d0 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe fce4 	bl	80018d0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1d4      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f16:	4b41      	ldr	r3, [pc, #260]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ef      	beq.n	8002f04 <HAL_RCC_OscConfig+0x3ec>
 8002f24:	e01b      	b.n	8002f5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f26:	4b3d      	ldr	r3, [pc, #244]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fccb 	bl	80018d0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fcc7 	bl	80018d0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e1b7      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f50:	4b32      	ldr	r3, [pc, #200]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1ef      	bne.n	8002f3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80a6 	beq.w	80030b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f70:	4b2a      	ldr	r3, [pc, #168]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7c:	4b27      	ldr	r3, [pc, #156]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	4a26      	ldr	r2, [pc, #152]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f88:	4b24      	ldr	r3, [pc, #144]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f94:	2301      	movs	r3, #1
 8002f96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f98:	4b21      	ldr	r3, [pc, #132]	@ (8003020 <HAL_RCC_OscConfig+0x508>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d118      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8003020 <HAL_RCC_OscConfig+0x508>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_RCC_OscConfig+0x508>)
 8002faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fc8e 	bl	80018d0 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb8:	f7fe fc8a 	bl	80018d0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e17a      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <HAL_RCC_OscConfig+0x508>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4d8>
 8002fde:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fee:	e029      	b.n	8003044 <HAL_RCC_OscConfig+0x52c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d115      	bne.n	8003024 <HAL_RCC_OscConfig+0x50c>
 8002ff8:	4b08      	ldr	r3, [pc, #32]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	4a07      	ldr	r2, [pc, #28]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	4a03      	ldr	r2, [pc, #12]	@ (800301c <HAL_RCC_OscConfig+0x504>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003018:	e014      	b.n	8003044 <HAL_RCC_OscConfig+0x52c>
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	40007000 	.word	0x40007000
 8003024:	4b9c      	ldr	r3, [pc, #624]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	4a9b      	ldr	r2, [pc, #620]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003034:	4b98      	ldr	r3, [pc, #608]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	4a97      	ldr	r2, [pc, #604]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d016      	beq.n	800307a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fc40 	bl	80018d0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fc3c 	bl	80018d0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e12a      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306a:	4b8b      	ldr	r3, [pc, #556]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ed      	beq.n	8003054 <HAL_RCC_OscConfig+0x53c>
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe fc29 	bl	80018d0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fe fc25 	bl	80018d0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e113      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003098:	4b7f      	ldr	r3, [pc, #508]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ed      	bne.n	8003082 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a6:	7ffb      	ldrb	r3, [r7, #31]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b7a      	ldr	r3, [pc, #488]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b0:	4a79      	ldr	r2, [pc, #484]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80fe 	beq.w	80032be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	f040 80d0 	bne.w	800326c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030cc:	4b72      	ldr	r3, [pc, #456]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d130      	bne.n	8003142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	3b01      	subs	r3, #1
 80030ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d127      	bne.n	8003142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d11f      	bne.n	8003142 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800310c:	2a07      	cmp	r2, #7
 800310e:	bf14      	ite	ne
 8003110:	2201      	movne	r2, #1
 8003112:	2200      	moveq	r2, #0
 8003114:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d109      	bne.n	8003142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	3b01      	subs	r3, #1
 800313c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d06e      	beq.n	8003220 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d069      	beq.n	800321c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003148:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003154:	4b50      	ldr	r3, [pc, #320]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0ad      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003164:	4b4c      	ldr	r3, [pc, #304]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a4b      	ldr	r2, [pc, #300]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800316a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003170:	f7fe fbae 	bl	80018d0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fbaa 	bl	80018d0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e09a      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318a:	4b43      	ldr	r3, [pc, #268]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003196:	4b40      	ldr	r3, [pc, #256]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	4b40      	ldr	r3, [pc, #256]	@ (800329c <HAL_RCC_OscConfig+0x784>)
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031a6:	3a01      	subs	r2, #1
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031b0:	0212      	lsls	r2, r2, #8
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031b8:	0852      	lsrs	r2, r2, #1
 80031ba:	3a01      	subs	r2, #1
 80031bc:	0552      	lsls	r2, r2, #21
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031c4:	0852      	lsrs	r2, r2, #1
 80031c6:	3a01      	subs	r2, #1
 80031c8:	0652      	lsls	r2, r2, #25
 80031ca:	4311      	orrs	r1, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031d0:	0912      	lsrs	r2, r2, #4
 80031d2:	0452      	lsls	r2, r2, #17
 80031d4:	430a      	orrs	r2, r1
 80031d6:	4930      	ldr	r1, [pc, #192]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80031e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 80031ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031f4:	f7fe fb6c 	bl	80018d0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe fb68 	bl	80018d0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e058      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800321a:	e050      	b.n	80032be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04f      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d148      	bne.n	80032be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003238:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 800323e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003242:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003244:	f7fe fb44 	bl	80018d0 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7fe fb40 	bl	80018d0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e030      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x734>
 800326a:	e028      	b.n	80032be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d023      	beq.n	80032ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a08      	ldr	r2, [pc, #32]	@ (8003298 <HAL_RCC_OscConfig+0x780>)
 8003278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe fb27 	bl	80018d0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003284:	e00c      	b.n	80032a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fb23 	bl	80018d0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d905      	bls.n	80032a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e013      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
 8003298:	40021000 	.word	0x40021000
 800329c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_RCC_OscConfig+0x7b0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ec      	bne.n	8003286 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_OscConfig+0x7b0>)
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	4905      	ldr	r1, [pc, #20]	@ (80032c8 <HAL_RCC_OscConfig+0x7b0>)
 80032b2:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <HAL_RCC_OscConfig+0x7b4>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	60cb      	str	r3, [r1, #12]
 80032b8:	e001      	b.n	80032be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	feeefffc 	.word	0xfeeefffc

080032d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0e7      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b75      	ldr	r3, [pc, #468]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b72      	ldr	r3, [pc, #456]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	4970      	ldr	r1, [pc, #448]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b6e      	ldr	r3, [pc, #440]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0cf      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	4b66      	ldr	r3, [pc, #408]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b63      	ldr	r3, [pc, #396]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4960      	ldr	r1, [pc, #384]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04c      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	4b5a      	ldr	r3, [pc, #360]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d121      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0a6      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336e:	4b54      	ldr	r3, [pc, #336]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d115      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e09a      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003386:	4b4e      	ldr	r3, [pc, #312]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e08e      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003396:	4b4a      	ldr	r3, [pc, #296]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e086      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b46      	ldr	r3, [pc, #280]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4943      	ldr	r1, [pc, #268]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fe fa8a 	bl	80018d0 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fa86 	bl	80018d0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e06e      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	4b31      	ldr	r3, [pc, #196]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003400:	429a      	cmp	r2, r3
 8003402:	d208      	bcs.n	8003416 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b2e      	ldr	r3, [pc, #184]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	492b      	ldr	r1, [pc, #172]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003416:	4b29      	ldr	r3, [pc, #164]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d210      	bcs.n	8003446 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003424:	4b25      	ldr	r3, [pc, #148]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 0207 	bic.w	r2, r3, #7
 800342c:	4923      	ldr	r1, [pc, #140]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003434:	4b21      	ldr	r3, [pc, #132]	@ (80034bc <HAL_RCC_ClockConfig+0x1ec>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e036      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003452:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4918      	ldr	r1, [pc, #96]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003470:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4910      	ldr	r1, [pc, #64]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003484:	f000 f824 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	490b      	ldr	r1, [pc, #44]	@ (80034c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
 80034a0:	4a09      	ldr	r2, [pc, #36]	@ (80034c8 <HAL_RCC_ClockConfig+0x1f8>)
 80034a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034a4:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_RCC_ClockConfig+0x1fc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe f9c1 	bl	8001830 <HAL_InitTick>
 80034ae:	4603      	mov	r3, r0
 80034b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	08005ea0 	.word	0x08005ea0
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004

080034d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	4b3e      	ldr	r3, [pc, #248]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	4b3b      	ldr	r3, [pc, #236]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x34>
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d121      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d11e      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003504:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003510:	4b31      	ldr	r3, [pc, #196]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e005      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003520:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800352c:	4a2b      	ldr	r2, [pc, #172]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d102      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003548:	4b25      	ldr	r3, [pc, #148]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e004      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d101      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003554:	4b23      	ldr	r3, [pc, #140]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003556:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d134      	bne.n	80035c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800355e:	4b1e      	ldr	r3, [pc, #120]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0xa6>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d003      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0xac>
 8003574:	e005      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003576:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003578:	617b      	str	r3, [r7, #20]
      break;
 800357a:	e005      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800357c:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800357e:	617b      	str	r3, [r7, #20]
      break;
 8003580:	e002      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	617b      	str	r3, [r7, #20]
      break;
 8003586:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003588:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	3301      	adds	r3, #1
 8003594:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	fb03 f202 	mul.w	r2, r3, r2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035ae:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	0e5b      	lsrs	r3, r3, #25
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	3301      	adds	r3, #1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035c8:	69bb      	ldr	r3, [r7, #24]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	@ 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08005eb8 	.word	0x08005eb8
 80035e0:	00f42400 	.word	0x00f42400
 80035e4:	007a1200 	.word	0x007a1200

080035e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000000 	.word	0x20000000

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003604:	f7ff fff0 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4904      	ldr	r1, [pc, #16]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	08005eb0 	.word	0x08005eb0

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003630:	f7ff ffda 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0adb      	lsrs	r3, r3, #11
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4904      	ldr	r1, [pc, #16]	@ (8003654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	08005eb0 	.word	0x08005eb0

08003658 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003664:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003670:	f7ff f9ee 	bl	8002a50 <HAL_PWREx_GetVoltageRange>
 8003674:	6178      	str	r0, [r7, #20]
 8003676:	e014      	b.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003678:	4b25      	ldr	r3, [pc, #148]	@ (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	4a24      	ldr	r2, [pc, #144]	@ (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003682:	6593      	str	r3, [r2, #88]	@ 0x58
 8003684:	4b22      	ldr	r3, [pc, #136]	@ (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003690:	f7ff f9de 	bl	8002a50 <HAL_PWREx_GetVoltageRange>
 8003694:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a8:	d10b      	bne.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b80      	cmp	r3, #128	@ 0x80
 80036ae:	d919      	bls.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80036b4:	d902      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036b6:	2302      	movs	r3, #2
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e013      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036bc:	2301      	movs	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	e010      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b80      	cmp	r3, #128	@ 0x80
 80036c6:	d902      	bls.n	80036ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036c8:	2303      	movs	r3, #3
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e00a      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b80      	cmp	r3, #128	@ 0x80
 80036d2:	d102      	bne.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036d4:	2302      	movs	r3, #2
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e004      	b.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b70      	cmp	r3, #112	@ 0x70
 80036de:	d101      	bne.n	80036e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036e0:	2301      	movs	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 0207 	bic.w	r2, r3, #7
 80036ec:	4909      	ldr	r1, [pc, #36]	@ (8003714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036f4:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	40022000 	.word	0x40022000

08003718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003720:	2300      	movs	r3, #0
 8003722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003724:	2300      	movs	r3, #0
 8003726:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003730:	2b00      	cmp	r3, #0
 8003732:	d041      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003738:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800373c:	d02a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800373e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003742:	d824      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003744:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800374a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800374e:	d81e      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003758:	d010      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800375a:	e018      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800375c:	4b86      	ldr	r3, [pc, #536]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a85      	ldr	r2, [pc, #532]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003766:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003768:	e015      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fabb 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800377a:	e00c      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3320      	adds	r3, #32
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fba6 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	74fb      	strb	r3, [r7, #19]
      break;
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800379c:	4b76      	ldr	r3, [pc, #472]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037aa:	4973      	ldr	r1, [pc, #460]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037b2:	e001      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d041      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037cc:	d02a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037d2:	d824      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037de:	d81e      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e8:	d010      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ea:	e018      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037ec:	4b62      	ldr	r3, [pc, #392]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a61      	ldr	r2, [pc, #388]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037f8:	e015      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa73 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800380a:	e00c      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3320      	adds	r3, #32
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fb5e 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	74fb      	strb	r3, [r7, #19]
      break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800382c:	4b52      	ldr	r3, [pc, #328]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800383a:	494f      	ldr	r1, [pc, #316]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a0 	beq.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800385a:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b41      	ldr	r3, [pc, #260]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	4a40      	ldr	r2, [pc, #256]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	@ 0x58
 800387c:	4b3e      	ldr	r3, [pc, #248]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003888:	2301      	movs	r3, #1
 800388a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388c:	4b3b      	ldr	r3, [pc, #236]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a3a      	ldr	r2, [pc, #232]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003898:	f7fe f81a 	bl	80018d0 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800389e:	e009      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fe f816 	bl	80018d0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	74fb      	strb	r3, [r7, #19]
        break;
 80038b2:	e005      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038b4:	4b31      	ldr	r3, [pc, #196]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d15c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d019      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038e4:	4b24      	ldr	r3, [pc, #144]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f0:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f6:	4a20      	ldr	r2, [pc, #128]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003906:	4a1c      	ldr	r2, [pc, #112]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003910:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fd ffd5 	bl	80018d0 <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	e00b      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fd ffd1 	bl	80018d0 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d902      	bls.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	74fb      	strb	r3, [r7, #19]
            break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003942:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ec      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003956:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003966:	4904      	ldr	r1, [pc, #16]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800396e:	e009      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003984:	7c7b      	ldrb	r3, [r7, #17]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398a:	4b9e      	ldr	r3, [pc, #632]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	4a9d      	ldr	r2, [pc, #628]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003994:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a2:	4b98      	ldr	r3, [pc, #608]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f023 0203 	bic.w	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	4994      	ldr	r1, [pc, #592]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ca:	f023 020c 	bic.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d2:	498c      	ldr	r1, [pc, #560]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e6:	4b87      	ldr	r3, [pc, #540]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	4983      	ldr	r1, [pc, #524]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a08:	4b7e      	ldr	r3, [pc, #504]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	497b      	ldr	r1, [pc, #492]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2a:	4b76      	ldr	r3, [pc, #472]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a38:	4972      	ldr	r1, [pc, #456]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4c:	4b6d      	ldr	r3, [pc, #436]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5a:	496a      	ldr	r1, [pc, #424]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	4961      	ldr	r1, [pc, #388]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a90:	4b5c      	ldr	r3, [pc, #368]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	4959      	ldr	r1, [pc, #356]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ab2:	4b54      	ldr	r3, [pc, #336]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac0:	4950      	ldr	r1, [pc, #320]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	4948      	ldr	r1, [pc, #288]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003af6:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	493f      	ldr	r1, [pc, #252]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d028      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b18:	4b3a      	ldr	r3, [pc, #232]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b26:	4937      	ldr	r1, [pc, #220]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b38:	4b32      	ldr	r3, [pc, #200]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a31      	ldr	r2, [pc, #196]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b42:	60d3      	str	r3, [r2, #12]
 8003b44:	e011      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2101      	movs	r1, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f8c8 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d028      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b76:	4b23      	ldr	r3, [pc, #140]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	491f      	ldr	r1, [pc, #124]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b96:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ba0:	60d3      	str	r3, [r2, #12]
 8003ba2:	e011      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f899 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02b      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	4908      	ldr	r1, [pc, #32]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bf2:	d109      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a02      	ldr	r2, [pc, #8]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	60d3      	str	r3, [r2, #12]
 8003c00:	e014      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f867 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02f      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c46:	4928      	ldr	r1, [pc, #160]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f844 	bl	8003cec <RCCEx_PLLSAI1_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d014      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	74bb      	strb	r3, [r7, #18]
 8003c72:	e011      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3320      	adds	r3, #32
 8003c82:	2102      	movs	r1, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 f925 	bl	8003ed4 <RCCEx_PLLSAI2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ca4:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cb2:	490d      	ldr	r1, [pc, #52]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cc6:	4b08      	ldr	r3, [pc, #32]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cd6:	4904      	ldr	r1, [pc, #16]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cde:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000

08003cec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfa:	4b75      	ldr	r3, [pc, #468]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d06:	4b72      	ldr	r3, [pc, #456]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0203 	and.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10d      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d047      	beq.n	8003dc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	e044      	b.n	8003dc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d018      	beq.n	8003d72 <RCCEx_PLLSAI1_Config+0x86>
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d825      	bhi.n	8003d90 <RCCEx_PLLSAI1_Config+0xa4>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <RCCEx_PLLSAI1_Config+0x62>
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d009      	beq.n	8003d60 <RCCEx_PLLSAI1_Config+0x74>
 8003d4c:	e020      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d4e:	4b60      	ldr	r3, [pc, #384]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11d      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5e:	e01a      	b.n	8003d96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d60:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d116      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e013      	b.n	8003d9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d72:	4b57      	ldr	r3, [pc, #348]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d7e:	4b54      	ldr	r3, [pc, #336]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d8e:	e006      	b.n	8003d9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e004      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003da6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4944      	ldr	r1, [pc, #272]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d17d      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dc8:	4b41      	ldr	r3, [pc, #260]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a40      	ldr	r2, [pc, #256]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd4:	f7fd fd7c 	bl	80018d0 <HAL_GetTick>
 8003dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dda:	e009      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ddc:	f7fd fd78 	bl	80018d0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d902      	bls.n	8003df0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	73fb      	strb	r3, [r7, #15]
        break;
 8003dee:	e005      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003df0:	4b37      	ldr	r3, [pc, #220]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ef      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d160      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e08:	4b31      	ldr	r3, [pc, #196]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	0211      	lsls	r1, r2, #8
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	0912      	lsrs	r2, r2, #4
 8003e20:	0452      	lsls	r2, r2, #17
 8003e22:	430a      	orrs	r2, r1
 8003e24:	492a      	ldr	r1, [pc, #168]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	610b      	str	r3, [r1, #16]
 8003e2a:	e027      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d112      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e32:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	0211      	lsls	r1, r2, #8
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6912      	ldr	r2, [r2, #16]
 8003e48:	0852      	lsrs	r2, r2, #1
 8003e4a:	3a01      	subs	r2, #1
 8003e4c:	0552      	lsls	r2, r2, #21
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	491f      	ldr	r1, [pc, #124]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	610b      	str	r3, [r1, #16]
 8003e56:	e011      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6892      	ldr	r2, [r2, #8]
 8003e68:	0211      	lsls	r1, r2, #8
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6952      	ldr	r2, [r2, #20]
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0652      	lsls	r2, r2, #25
 8003e74:	430a      	orrs	r2, r1
 8003e76:	4916      	ldr	r1, [pc, #88]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd fd22 	bl	80018d0 <HAL_GetTick>
 8003e8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e8e:	e009      	b.n	8003ea4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e90:	f7fd fd1e 	bl	80018d0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d902      	bls.n	8003ea4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ea2:	e005      	b.n	8003eb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	4904      	ldr	r1, [pc, #16]	@ (8003ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eee:	4b67      	ldr	r3, [pc, #412]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10d      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
       ||
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f06:	4b61      	ldr	r3, [pc, #388]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
       ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d047      	beq.n	8003faa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e044      	b.n	8003faa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d018      	beq.n	8003f5a <RCCEx_PLLSAI2_Config+0x86>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d825      	bhi.n	8003f78 <RCCEx_PLLSAI2_Config+0xa4>
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d002      	beq.n	8003f36 <RCCEx_PLLSAI2_Config+0x62>
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d009      	beq.n	8003f48 <RCCEx_PLLSAI2_Config+0x74>
 8003f34:	e020      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f36:	4b55      	ldr	r3, [pc, #340]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11d      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f46:	e01a      	b.n	8003f7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f48:	4b50      	ldr	r3, [pc, #320]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f58:	e013      	b.n	8003f82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f66:	4b49      	ldr	r3, [pc, #292]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f76:	e006      	b.n	8003f86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	e004      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	4939      	ldr	r1, [pc, #228]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d167      	bne.n	8004080 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a35      	ldr	r2, [pc, #212]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fc88 	bl	80018d0 <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fc2:	e009      	b.n	8003fd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fc4:	f7fd fc84 	bl	80018d0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d902      	bls.n	8003fd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd6:	e005      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ef      	bne.n	8003fc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14a      	bne.n	8004080 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d111      	bne.n	8004014 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ff0:	4b26      	ldr	r3, [pc, #152]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6892      	ldr	r2, [r2, #8]
 8004000:	0211      	lsls	r1, r2, #8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	0912      	lsrs	r2, r2, #4
 8004008:	0452      	lsls	r2, r2, #17
 800400a:	430a      	orrs	r2, r1
 800400c:	491f      	ldr	r1, [pc, #124]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	614b      	str	r3, [r1, #20]
 8004012:	e011      	b.n	8004038 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004014:	4b1d      	ldr	r3, [pc, #116]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800401c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6892      	ldr	r2, [r2, #8]
 8004024:	0211      	lsls	r1, r2, #8
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6912      	ldr	r2, [r2, #16]
 800402a:	0852      	lsrs	r2, r2, #1
 800402c:	3a01      	subs	r2, #1
 800402e:	0652      	lsls	r2, r2, #25
 8004030:	430a      	orrs	r2, r1
 8004032:	4916      	ldr	r1, [pc, #88]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004038:	4b14      	ldr	r3, [pc, #80]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a13      	ldr	r2, [pc, #76]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd fc44 	bl	80018d0 <HAL_GetTick>
 8004048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800404a:	e009      	b.n	8004060 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800404c:	f7fd fc40 	bl	80018d0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d902      	bls.n	8004060 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	73fb      	strb	r3, [r7, #15]
          break;
 800405e:	e005      	b.n	800406c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004060:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ef      	beq.n	800404c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4904      	ldr	r1, [pc, #16]	@ (800408c <RCCEx_PLLSAI2_Config+0x1b8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000

08004090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e040      	b.n	8004124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd fa38 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	@ 0x24
 80040bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb6a 	bl	80047b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f8af 	bl	8004240 <UART_SetConfig>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e01b      	b.n	8004124 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800410a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fbe9 	bl	80048f4 <UART_CheckIdleState>
 8004122:	4603      	mov	r3, r0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004140:	2b20      	cmp	r3, #32
 8004142:	d177      	bne.n	8004234 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_UART_Transmit+0x24>
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e070      	b.n	8004236 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2221      	movs	r2, #33	@ 0x21
 8004160:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004162:	f7fd fbb5 	bl	80018d0 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004180:	d108      	bne.n	8004194 <HAL_UART_Transmit+0x68>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e003      	b.n	800419c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800419c:	e02f      	b.n	80041fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2180      	movs	r1, #128	@ 0x80
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fc4b 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e03b      	b.n	8004236 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	881a      	ldrh	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d0:	b292      	uxth	r2, r2
 80041d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	3302      	adds	r3, #2
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e007      	b.n	80041ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3301      	adds	r3, #1
 80041ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1c9      	bne.n	800419e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	2140      	movs	r1, #64	@ 0x40
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fc15 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e005      	b.n	8004236 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b08a      	sub	sp, #40	@ 0x28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	431a      	orrs	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	4313      	orrs	r3, r2
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4ba4      	ldr	r3, [pc, #656]	@ (8004500 <UART_SetConfig+0x2c0>)
 8004270:	4013      	ands	r3, r2
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004278:	430b      	orrs	r3, r1
 800427a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a99      	ldr	r2, [pc, #612]	@ (8004504 <UART_SetConfig+0x2c4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a8:	4313      	orrs	r3, r2
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a90      	ldr	r2, [pc, #576]	@ (8004508 <UART_SetConfig+0x2c8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d126      	bne.n	8004318 <UART_SetConfig+0xd8>
 80042ca:	4b90      	ldr	r3, [pc, #576]	@ (800450c <UART_SetConfig+0x2cc>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d81b      	bhi.n	8004310 <UART_SetConfig+0xd0>
 80042d8:	a201      	add	r2, pc, #4	@ (adr r2, 80042e0 <UART_SetConfig+0xa0>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	08004301 	.word	0x08004301
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	08004309 	.word	0x08004309
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f6:	e116      	b.n	8004526 <UART_SetConfig+0x2e6>
 80042f8:	2302      	movs	r3, #2
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fe:	e112      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004300:	2304      	movs	r3, #4
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004306:	e10e      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004308:	2308      	movs	r3, #8
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430e:	e10a      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004310:	2310      	movs	r3, #16
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004316:	e106      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7c      	ldr	r2, [pc, #496]	@ (8004510 <UART_SetConfig+0x2d0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d138      	bne.n	8004394 <UART_SetConfig+0x154>
 8004322:	4b7a      	ldr	r3, [pc, #488]	@ (800450c <UART_SetConfig+0x2cc>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d82d      	bhi.n	800438c <UART_SetConfig+0x14c>
 8004330:	a201      	add	r2, pc, #4	@ (adr r2, 8004338 <UART_SetConfig+0xf8>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800436d 	.word	0x0800436d
 800433c:	0800438d 	.word	0x0800438d
 8004340:	0800438d 	.word	0x0800438d
 8004344:	0800438d 	.word	0x0800438d
 8004348:	0800437d 	.word	0x0800437d
 800434c:	0800438d 	.word	0x0800438d
 8004350:	0800438d 	.word	0x0800438d
 8004354:	0800438d 	.word	0x0800438d
 8004358:	08004375 	.word	0x08004375
 800435c:	0800438d 	.word	0x0800438d
 8004360:	0800438d 	.word	0x0800438d
 8004364:	0800438d 	.word	0x0800438d
 8004368:	08004385 	.word	0x08004385
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e0d8      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e0d4      	b.n	8004526 <UART_SetConfig+0x2e6>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e0d0      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e0cc      	b.n	8004526 <UART_SetConfig+0x2e6>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e0c8      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5e      	ldr	r2, [pc, #376]	@ (8004514 <UART_SetConfig+0x2d4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d125      	bne.n	80043ea <UART_SetConfig+0x1aa>
 800439e:	4b5b      	ldr	r3, [pc, #364]	@ (800450c <UART_SetConfig+0x2cc>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043a8:	2b30      	cmp	r3, #48	@ 0x30
 80043aa:	d016      	beq.n	80043da <UART_SetConfig+0x19a>
 80043ac:	2b30      	cmp	r3, #48	@ 0x30
 80043ae:	d818      	bhi.n	80043e2 <UART_SetConfig+0x1a2>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d00a      	beq.n	80043ca <UART_SetConfig+0x18a>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d814      	bhi.n	80043e2 <UART_SetConfig+0x1a2>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <UART_SetConfig+0x182>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d008      	beq.n	80043d2 <UART_SetConfig+0x192>
 80043c0:	e00f      	b.n	80043e2 <UART_SetConfig+0x1a2>
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c8:	e0ad      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043ca:	2302      	movs	r3, #2
 80043cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d0:	e0a9      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043d2:	2304      	movs	r3, #4
 80043d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d8:	e0a5      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043da:	2308      	movs	r3, #8
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e0:	e0a1      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043e2:	2310      	movs	r3, #16
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e8:	e09d      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004518 <UART_SetConfig+0x2d8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d125      	bne.n	8004440 <UART_SetConfig+0x200>
 80043f4:	4b45      	ldr	r3, [pc, #276]	@ (800450c <UART_SetConfig+0x2cc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004400:	d016      	beq.n	8004430 <UART_SetConfig+0x1f0>
 8004402:	2bc0      	cmp	r3, #192	@ 0xc0
 8004404:	d818      	bhi.n	8004438 <UART_SetConfig+0x1f8>
 8004406:	2b80      	cmp	r3, #128	@ 0x80
 8004408:	d00a      	beq.n	8004420 <UART_SetConfig+0x1e0>
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d814      	bhi.n	8004438 <UART_SetConfig+0x1f8>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <UART_SetConfig+0x1d8>
 8004412:	2b40      	cmp	r3, #64	@ 0x40
 8004414:	d008      	beq.n	8004428 <UART_SetConfig+0x1e8>
 8004416:	e00f      	b.n	8004438 <UART_SetConfig+0x1f8>
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e082      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004426:	e07e      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442e:	e07a      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004436:	e076      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443e:	e072      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a35      	ldr	r2, [pc, #212]	@ (800451c <UART_SetConfig+0x2dc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d12a      	bne.n	80044a0 <UART_SetConfig+0x260>
 800444a:	4b30      	ldr	r3, [pc, #192]	@ (800450c <UART_SetConfig+0x2cc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004458:	d01a      	beq.n	8004490 <UART_SetConfig+0x250>
 800445a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800445e:	d81b      	bhi.n	8004498 <UART_SetConfig+0x258>
 8004460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004464:	d00c      	beq.n	8004480 <UART_SetConfig+0x240>
 8004466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446a:	d815      	bhi.n	8004498 <UART_SetConfig+0x258>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <UART_SetConfig+0x238>
 8004470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004474:	d008      	beq.n	8004488 <UART_SetConfig+0x248>
 8004476:	e00f      	b.n	8004498 <UART_SetConfig+0x258>
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447e:	e052      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004480:	2302      	movs	r3, #2
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004486:	e04e      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448e:	e04a      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004496:	e046      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800449e:	e042      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a17      	ldr	r2, [pc, #92]	@ (8004504 <UART_SetConfig+0x2c4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d13a      	bne.n	8004520 <UART_SetConfig+0x2e0>
 80044aa:	4b18      	ldr	r3, [pc, #96]	@ (800450c <UART_SetConfig+0x2cc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044b8:	d01a      	beq.n	80044f0 <UART_SetConfig+0x2b0>
 80044ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044be:	d81b      	bhi.n	80044f8 <UART_SetConfig+0x2b8>
 80044c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c4:	d00c      	beq.n	80044e0 <UART_SetConfig+0x2a0>
 80044c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ca:	d815      	bhi.n	80044f8 <UART_SetConfig+0x2b8>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <UART_SetConfig+0x298>
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d4:	d008      	beq.n	80044e8 <UART_SetConfig+0x2a8>
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x2b8>
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e022      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e01e      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e01a      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e016      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fe:	e012      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004500:	efff69f3 	.word	0xefff69f3
 8004504:	40008000 	.word	0x40008000
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	40005000 	.word	0x40005000
 8004520:	2310      	movs	r3, #16
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a9f      	ldr	r2, [pc, #636]	@ (80047a8 <UART_SetConfig+0x568>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d17a      	bne.n	8004626 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004530:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004534:	2b08      	cmp	r3, #8
 8004536:	d824      	bhi.n	8004582 <UART_SetConfig+0x342>
 8004538:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <UART_SetConfig+0x300>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004565 	.word	0x08004565
 8004544:	08004583 	.word	0x08004583
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004583 	.word	0x08004583
 8004550:	08004573 	.word	0x08004573
 8004554:	08004583 	.word	0x08004583
 8004558:	08004583 	.word	0x08004583
 800455c:	08004583 	.word	0x08004583
 8004560:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7ff f84c 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8004568:	61f8      	str	r0, [r7, #28]
        break;
 800456a:	e010      	b.n	800458e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b8f      	ldr	r3, [pc, #572]	@ (80047ac <UART_SetConfig+0x56c>)
 800456e:	61fb      	str	r3, [r7, #28]
        break;
 8004570:	e00d      	b.n	800458e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe ffad 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8004576:	61f8      	str	r0, [r7, #28]
        break;
 8004578:	e009      	b.n	800458e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800457e:	61fb      	str	r3, [r7, #28]
        break;
 8004580:	e005      	b.n	800458e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800458c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80fb 	beq.w	800478c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d305      	bcc.n	80045b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d903      	bls.n	80045ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045b8:	e0e8      	b.n	800478c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2200      	movs	r2, #0
 80045be:	461c      	mov	r4, r3
 80045c0:	4615      	mov	r5, r2
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	022b      	lsls	r3, r5, #8
 80045cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045d0:	0222      	lsls	r2, r4, #8
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	6849      	ldr	r1, [r1, #4]
 80045d6:	0849      	lsrs	r1, r1, #1
 80045d8:	2000      	movs	r0, #0
 80045da:	4688      	mov	r8, r1
 80045dc:	4681      	mov	r9, r0
 80045de:	eb12 0a08 	adds.w	sl, r2, r8
 80045e2:	eb43 0b09 	adc.w	fp, r3, r9
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	4650      	mov	r0, sl
 80045f6:	4659      	mov	r1, fp
 80045f8:	f7fb fffe 	bl	80005f8 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800460a:	d308      	bcc.n	800461e <UART_SetConfig+0x3de>
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004612:	d204      	bcs.n	800461e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	60da      	str	r2, [r3, #12]
 800461c:	e0b6      	b.n	800478c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004624:	e0b2      	b.n	800478c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462e:	d15e      	bne.n	80046ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004634:	2b08      	cmp	r3, #8
 8004636:	d828      	bhi.n	800468a <UART_SetConfig+0x44a>
 8004638:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <UART_SetConfig+0x400>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	0800468b 	.word	0x0800468b
 8004650:	0800467b 	.word	0x0800467b
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800468b 	.word	0x0800468b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004664:	f7fe ffcc 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8004668:	61f8      	str	r0, [r7, #28]
        break;
 800466a:	e014      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe ffde 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8004670:	61f8      	str	r0, [r7, #28]
        break;
 8004672:	e010      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b4d      	ldr	r3, [pc, #308]	@ (80047ac <UART_SetConfig+0x56c>)
 8004676:	61fb      	str	r3, [r7, #28]
        break;
 8004678:	e00d      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fe ff29 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800467e:	61f8      	str	r0, [r7, #28]
        break;
 8004680:	e009      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004686:	61fb      	str	r3, [r7, #28]
        break;
 8004688:	e005      	b.n	8004696 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d077      	beq.n	800478c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005a      	lsls	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	441a      	add	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b0f      	cmp	r3, #15
 80046b6:	d916      	bls.n	80046e6 <UART_SetConfig+0x4a6>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046be:	d212      	bcs.n	80046e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f023 030f 	bic.w	r3, r3, #15
 80046c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	8afb      	ldrh	r3, [r7, #22]
 80046d8:	4313      	orrs	r3, r2
 80046da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	8afa      	ldrh	r2, [r7, #22]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	e052      	b.n	800478c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046ec:	e04e      	b.n	800478c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d827      	bhi.n	8004746 <UART_SetConfig+0x506>
 80046f6:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <UART_SetConfig+0x4bc>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe ff6e 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8004724:	61f8      	str	r0, [r7, #28]
        break;
 8004726:	e014      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe ff80 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 800472c:	61f8      	str	r0, [r7, #28]
        break;
 800472e:	e010      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <UART_SetConfig+0x56c>)
 8004732:	61fb      	str	r3, [r7, #28]
        break;
 8004734:	e00d      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7fe fecb 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800473a:	61f8      	str	r0, [r7, #28]
        break;
 800473c:	e009      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004742:	61fb      	str	r3, [r7, #28]
        break;
 8004744:	e005      	b.n	8004752 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004750:	bf00      	nop
    }

    if (pclk != 0U)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	085a      	lsrs	r2, r3, #1
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	441a      	add	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	d909      	bls.n	8004786 <UART_SetConfig+0x546>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004778:	d205      	bcs.n	8004786 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
 8004784:	e002      	b.n	800478c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004798:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	@ 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a6:	bf00      	nop
 80047a8:	40008000 	.word	0x40008000
 80047ac:	00f42400 	.word	0x00f42400

080047b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ae:	d10a      	bne.n	80048c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b098      	sub	sp, #96	@ 0x60
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004904:	f7fc ffe4 	bl	80018d0 <HAL_GetTick>
 8004908:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d12e      	bne.n	8004976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004918:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004920:	2200      	movs	r2, #0
 8004922:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f88c 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d021      	beq.n	8004976 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004946:	653b      	str	r3, [r7, #80]	@ 0x50
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44
 8004952:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e062      	b.n	8004a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b04      	cmp	r3, #4
 8004982:	d149      	bne.n	8004a18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498c:	2200      	movs	r2, #0
 800498e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f856 	bl	8004a44 <UART_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d03c      	beq.n	8004a18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	623b      	str	r3, [r7, #32]
   return(result);
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f0:	61fa      	str	r2, [r7, #28]
 80049f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	617b      	str	r3, [r7, #20]
   return(result);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e5      	bne.n	80049d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e011      	b.n	8004a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3758      	adds	r7, #88	@ 0x58
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a54:	e04f      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d04b      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fc ff37 	bl	80018d0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e04e      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d037      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b80      	cmp	r3, #128	@ 0x80
 8004a8a:	d034      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b40      	cmp	r3, #64	@ 0x40
 8004a90:	d031      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d110      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f838 	bl	8004b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e029      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad0:	d111      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f81e 	bl	8004b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e00f      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4013      	ands	r3, r2
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	bf0c      	ite	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	2300      	movne	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d0a0      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b095      	sub	sp, #84	@ 0x54
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e6      	bne.n	8004b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e5      	bne.n	8004b58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d118      	bne.n	8004bc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e6      	bne.n	8004b94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004bda:	bf00      	nop
 8004bdc:	3754      	adds	r7, #84	@ 0x54
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <std>:
 8004be8:	2300      	movs	r3, #0
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bf6:	6083      	str	r3, [r0, #8]
 8004bf8:	8181      	strh	r1, [r0, #12]
 8004bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004bfc:	81c2      	strh	r2, [r0, #14]
 8004bfe:	6183      	str	r3, [r0, #24]
 8004c00:	4619      	mov	r1, r3
 8004c02:	2208      	movs	r2, #8
 8004c04:	305c      	adds	r0, #92	@ 0x5c
 8004c06:	f000 f93a 	bl	8004e7e <memset>
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <std+0x58>)
 8004c0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <std+0x5c>)
 8004c10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <std+0x60>)
 8004c14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c16:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <std+0x64>)
 8004c18:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <std+0x68>)
 8004c1c:	6224      	str	r4, [r4, #32]
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	d006      	beq.n	8004c30 <std+0x48>
 8004c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c26:	4294      	cmp	r4, r2
 8004c28:	d002      	beq.n	8004c30 <std+0x48>
 8004c2a:	33d0      	adds	r3, #208	@ 0xd0
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	d105      	bne.n	8004c3c <std+0x54>
 8004c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c38:	f000 b99a 	b.w	8004f70 <__retarget_lock_init_recursive>
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004df9 	.word	0x08004df9
 8004c44:	08004e1b 	.word	0x08004e1b
 8004c48:	08004e53 	.word	0x08004e53
 8004c4c:	08004e77 	.word	0x08004e77
 8004c50:	20000170 	.word	0x20000170

08004c54 <stdio_exit_handler>:
 8004c54:	4a02      	ldr	r2, [pc, #8]	@ (8004c60 <stdio_exit_handler+0xc>)
 8004c56:	4903      	ldr	r1, [pc, #12]	@ (8004c64 <stdio_exit_handler+0x10>)
 8004c58:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <stdio_exit_handler+0x14>)
 8004c5a:	f000 b869 	b.w	8004d30 <_fwalk_sglue>
 8004c5e:	bf00      	nop
 8004c60:	2000000c 	.word	0x2000000c
 8004c64:	08005ac1 	.word	0x08005ac1
 8004c68:	2000001c 	.word	0x2000001c

08004c6c <cleanup_stdio>:
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <cleanup_stdio+0x34>)
 8004c70:	4299      	cmp	r1, r3
 8004c72:	b510      	push	{r4, lr}
 8004c74:	4604      	mov	r4, r0
 8004c76:	d001      	beq.n	8004c7c <cleanup_stdio+0x10>
 8004c78:	f000 ff22 	bl	8005ac0 <_fflush_r>
 8004c7c:	68a1      	ldr	r1, [r4, #8]
 8004c7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <cleanup_stdio+0x38>)
 8004c80:	4299      	cmp	r1, r3
 8004c82:	d002      	beq.n	8004c8a <cleanup_stdio+0x1e>
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 ff1b 	bl	8005ac0 <_fflush_r>
 8004c8a:	68e1      	ldr	r1, [r4, #12]
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <cleanup_stdio+0x3c>)
 8004c8e:	4299      	cmp	r1, r3
 8004c90:	d004      	beq.n	8004c9c <cleanup_stdio+0x30>
 8004c92:	4620      	mov	r0, r4
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f000 bf12 	b.w	8005ac0 <_fflush_r>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000170 	.word	0x20000170
 8004ca4:	200001d8 	.word	0x200001d8
 8004ca8:	20000240 	.word	0x20000240

08004cac <global_stdio_init.part.0>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <global_stdio_init.part.0+0x30>)
 8004cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8004ce0 <global_stdio_init.part.0+0x34>)
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <global_stdio_init.part.0+0x38>)
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2104      	movs	r1, #4
 8004cbc:	f7ff ff94 	bl	8004be8 <std>
 8004cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	2109      	movs	r1, #9
 8004cc8:	f7ff ff8e 	bl	8004be8 <std>
 8004ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd6:	2112      	movs	r1, #18
 8004cd8:	f7ff bf86 	b.w	8004be8 <std>
 8004cdc:	200002a8 	.word	0x200002a8
 8004ce0:	20000170 	.word	0x20000170
 8004ce4:	08004c55 	.word	0x08004c55

08004ce8 <__sfp_lock_acquire>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	@ (8004cf0 <__sfp_lock_acquire+0x8>)
 8004cea:	f000 b942 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	200002b1 	.word	0x200002b1

08004cf4 <__sfp_lock_release>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__sfp_lock_release+0x8>)
 8004cf6:	f000 b93d 	b.w	8004f74 <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	200002b1 	.word	0x200002b1

08004d00 <__sinit>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4604      	mov	r4, r0
 8004d04:	f7ff fff0 	bl	8004ce8 <__sfp_lock_acquire>
 8004d08:	6a23      	ldr	r3, [r4, #32]
 8004d0a:	b11b      	cbz	r3, 8004d14 <__sinit+0x14>
 8004d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d10:	f7ff bff0 	b.w	8004cf4 <__sfp_lock_release>
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <__sinit+0x28>)
 8004d16:	6223      	str	r3, [r4, #32]
 8004d18:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <__sinit+0x2c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f5      	bne.n	8004d0c <__sinit+0xc>
 8004d20:	f7ff ffc4 	bl	8004cac <global_stdio_init.part.0>
 8004d24:	e7f2      	b.n	8004d0c <__sinit+0xc>
 8004d26:	bf00      	nop
 8004d28:	08004c6d 	.word	0x08004c6d
 8004d2c:	200002a8 	.word	0x200002a8

08004d30 <_fwalk_sglue>:
 8004d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d34:	4607      	mov	r7, r0
 8004d36:	4688      	mov	r8, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d40:	f1b9 0901 	subs.w	r9, r9, #1
 8004d44:	d505      	bpl.n	8004d52 <_fwalk_sglue+0x22>
 8004d46:	6824      	ldr	r4, [r4, #0]
 8004d48:	2c00      	cmp	r4, #0
 8004d4a:	d1f7      	bne.n	8004d3c <_fwalk_sglue+0xc>
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d907      	bls.n	8004d68 <_fwalk_sglue+0x38>
 8004d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	d003      	beq.n	8004d68 <_fwalk_sglue+0x38>
 8004d60:	4629      	mov	r1, r5
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	4306      	orrs	r6, r0
 8004d68:	3568      	adds	r5, #104	@ 0x68
 8004d6a:	e7e9      	b.n	8004d40 <_fwalk_sglue+0x10>

08004d6c <iprintf>:
 8004d6c:	b40f      	push	{r0, r1, r2, r3}
 8004d6e:	b507      	push	{r0, r1, r2, lr}
 8004d70:	4906      	ldr	r1, [pc, #24]	@ (8004d8c <iprintf+0x20>)
 8004d72:	ab04      	add	r3, sp, #16
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d7a:	6881      	ldr	r1, [r0, #8]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	f000 fb75 	bl	800546c <_vfiprintf_r>
 8004d82:	b003      	add	sp, #12
 8004d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d88:	b004      	add	sp, #16
 8004d8a:	4770      	bx	lr
 8004d8c:	20000018 	.word	0x20000018

08004d90 <sniprintf>:
 8004d90:	b40c      	push	{r2, r3}
 8004d92:	b530      	push	{r4, r5, lr}
 8004d94:	4b17      	ldr	r3, [pc, #92]	@ (8004df4 <sniprintf+0x64>)
 8004d96:	1e0c      	subs	r4, r1, #0
 8004d98:	681d      	ldr	r5, [r3, #0]
 8004d9a:	b09d      	sub	sp, #116	@ 0x74
 8004d9c:	da08      	bge.n	8004db0 <sniprintf+0x20>
 8004d9e:	238b      	movs	r3, #139	@ 0x8b
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	f04f 30ff 	mov.w	r0, #4294967295
 8004da6:	b01d      	add	sp, #116	@ 0x74
 8004da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dac:	b002      	add	sp, #8
 8004dae:	4770      	bx	lr
 8004db0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004db4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004db8:	bf14      	ite	ne
 8004dba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004dbe:	4623      	moveq	r3, r4
 8004dc0:	9304      	str	r3, [sp, #16]
 8004dc2:	9307      	str	r3, [sp, #28]
 8004dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004dc8:	9002      	str	r0, [sp, #8]
 8004dca:	9006      	str	r0, [sp, #24]
 8004dcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004dd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004dd2:	ab21      	add	r3, sp, #132	@ 0x84
 8004dd4:	a902      	add	r1, sp, #8
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	f000 fa21 	bl	8005220 <_svfiprintf_r>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	bfbc      	itt	lt
 8004de2:	238b      	movlt	r3, #139	@ 0x8b
 8004de4:	602b      	strlt	r3, [r5, #0]
 8004de6:	2c00      	cmp	r4, #0
 8004de8:	d0dd      	beq.n	8004da6 <sniprintf+0x16>
 8004dea:	9b02      	ldr	r3, [sp, #8]
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	e7d9      	b.n	8004da6 <sniprintf+0x16>
 8004df2:	bf00      	nop
 8004df4:	20000018 	.word	0x20000018

08004df8 <__sread>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e00:	f000 f868 	bl	8004ed4 <_read_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	bfab      	itete	ge
 8004e08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e0c:	181b      	addge	r3, r3, r0
 8004e0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e12:	bfac      	ite	ge
 8004e14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e16:	81a3      	strhlt	r3, [r4, #12]
 8004e18:	bd10      	pop	{r4, pc}

08004e1a <__swrite>:
 8004e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1e:	461f      	mov	r7, r3
 8004e20:	898b      	ldrh	r3, [r1, #12]
 8004e22:	05db      	lsls	r3, r3, #23
 8004e24:	4605      	mov	r5, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4616      	mov	r6, r2
 8004e2a:	d505      	bpl.n	8004e38 <__swrite+0x1e>
 8004e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e30:	2302      	movs	r3, #2
 8004e32:	2200      	movs	r2, #0
 8004e34:	f000 f83c 	bl	8004eb0 <_lseek_r>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	4632      	mov	r2, r6
 8004e46:	463b      	mov	r3, r7
 8004e48:	4628      	mov	r0, r5
 8004e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4e:	f000 b853 	b.w	8004ef8 <_write_r>

08004e52 <__sseek>:
 8004e52:	b510      	push	{r4, lr}
 8004e54:	460c      	mov	r4, r1
 8004e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5a:	f000 f829 	bl	8004eb0 <_lseek_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	bf15      	itete	ne
 8004e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e6e:	81a3      	strheq	r3, [r4, #12]
 8004e70:	bf18      	it	ne
 8004e72:	81a3      	strhne	r3, [r4, #12]
 8004e74:	bd10      	pop	{r4, pc}

08004e76 <__sclose>:
 8004e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7a:	f000 b809 	b.w	8004e90 <_close_r>

08004e7e <memset>:
 8004e7e:	4402      	add	r2, r0
 8004e80:	4603      	mov	r3, r0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d100      	bne.n	8004e88 <memset+0xa>
 8004e86:	4770      	bx	lr
 8004e88:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8c:	e7f9      	b.n	8004e82 <memset+0x4>
	...

08004e90 <_close_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d06      	ldr	r5, [pc, #24]	@ (8004eac <_close_r+0x1c>)
 8004e94:	2300      	movs	r3, #0
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	f7fc fc0a 	bl	80016b4 <_close>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_close_r+0x1a>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_close_r+0x1a>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	200002ac 	.word	0x200002ac

08004eb0 <_lseek_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d07      	ldr	r5, [pc, #28]	@ (8004ed0 <_lseek_r+0x20>)
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	4608      	mov	r0, r1
 8004eb8:	4611      	mov	r1, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	602a      	str	r2, [r5, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7fc fc1f 	bl	8001702 <_lseek>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_lseek_r+0x1e>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_lseek_r+0x1e>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	200002ac 	.word	0x200002ac

08004ed4 <_read_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	@ (8004ef4 <_read_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fc fbad 	bl	8001642 <_read>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_read_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_read_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	200002ac 	.word	0x200002ac

08004ef8 <_write_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	@ (8004f18 <_write_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fc fbb8 	bl	800167c <_write>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_write_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_write_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200002ac 	.word	0x200002ac

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	@ (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000018 	.word	0x20000018

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	@ (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f000 ff6e 	bl	8005e1c <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08005f24 	.word	0x08005f24
 8004f64:	08005f24 	.word	0x08005f24
 8004f68:	08005f24 	.word	0x08005f24
 8004f6c:	08005f28 	.word	0x08005f28

08004f70 <__retarget_lock_init_recursive>:
 8004f70:	4770      	bx	lr

08004f72 <__retarget_lock_acquire_recursive>:
 8004f72:	4770      	bx	lr

08004f74 <__retarget_lock_release_recursive>:
 8004f74:	4770      	bx	lr
	...

08004f78 <_free_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d041      	beq.n	8005004 <_free_r+0x8c>
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f0c      	subs	r4, r1, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	18e4      	addlt	r4, r4, r3
 8004f8c:	f000 f8e0 	bl	8005150 <__malloc_lock>
 8004f90:	4a1d      	ldr	r2, [pc, #116]	@ (8005008 <_free_r+0x90>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	b933      	cbnz	r3, 8004fa4 <_free_r+0x2c>
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	6014      	str	r4, [r2, #0]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa0:	f000 b8dc 	b.w	800515c <__malloc_unlock>
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d908      	bls.n	8004fba <_free_r+0x42>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	1821      	adds	r1, r4, r0
 8004fac:	428b      	cmp	r3, r1
 8004fae:	bf01      	itttt	eq
 8004fb0:	6819      	ldreq	r1, [r3, #0]
 8004fb2:	685b      	ldreq	r3, [r3, #4]
 8004fb4:	1809      	addeq	r1, r1, r0
 8004fb6:	6021      	streq	r1, [r4, #0]
 8004fb8:	e7ed      	b.n	8004f96 <_free_r+0x1e>
 8004fba:	461a      	mov	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <_free_r+0x4c>
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x42>
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	1850      	adds	r0, r2, r1
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x6c>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	4401      	add	r1, r0
 8004fd0:	1850      	adds	r0, r2, r1
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	d1e0      	bne.n	8004f9a <_free_r+0x22>
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	6053      	str	r3, [r2, #4]
 8004fde:	4408      	add	r0, r1
 8004fe0:	6010      	str	r0, [r2, #0]
 8004fe2:	e7da      	b.n	8004f9a <_free_r+0x22>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x74>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	e7d6      	b.n	8004f9a <_free_r+0x22>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf04      	itt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	6063      	str	r3, [r4, #4]
 8004ffa:	bf04      	itt	eq
 8004ffc:	1809      	addeq	r1, r1, r0
 8004ffe:	6021      	streq	r1, [r4, #0]
 8005000:	6054      	str	r4, [r2, #4]
 8005002:	e7ca      	b.n	8004f9a <_free_r+0x22>
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	200002b8 	.word	0x200002b8

0800500c <sbrk_aligned>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4e0f      	ldr	r6, [pc, #60]	@ (800504c <sbrk_aligned+0x40>)
 8005010:	460c      	mov	r4, r1
 8005012:	6831      	ldr	r1, [r6, #0]
 8005014:	4605      	mov	r5, r0
 8005016:	b911      	cbnz	r1, 800501e <sbrk_aligned+0x12>
 8005018:	f000 fe28 	bl	8005c6c <_sbrk_r>
 800501c:	6030      	str	r0, [r6, #0]
 800501e:	4621      	mov	r1, r4
 8005020:	4628      	mov	r0, r5
 8005022:	f000 fe23 	bl	8005c6c <_sbrk_r>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	d103      	bne.n	8005032 <sbrk_aligned+0x26>
 800502a:	f04f 34ff 	mov.w	r4, #4294967295
 800502e:	4620      	mov	r0, r4
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	1cc4      	adds	r4, r0, #3
 8005034:	f024 0403 	bic.w	r4, r4, #3
 8005038:	42a0      	cmp	r0, r4
 800503a:	d0f8      	beq.n	800502e <sbrk_aligned+0x22>
 800503c:	1a21      	subs	r1, r4, r0
 800503e:	4628      	mov	r0, r5
 8005040:	f000 fe14 	bl	8005c6c <_sbrk_r>
 8005044:	3001      	adds	r0, #1
 8005046:	d1f2      	bne.n	800502e <sbrk_aligned+0x22>
 8005048:	e7ef      	b.n	800502a <sbrk_aligned+0x1e>
 800504a:	bf00      	nop
 800504c:	200002b4 	.word	0x200002b4

08005050 <_malloc_r>:
 8005050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005054:	1ccd      	adds	r5, r1, #3
 8005056:	f025 0503 	bic.w	r5, r5, #3
 800505a:	3508      	adds	r5, #8
 800505c:	2d0c      	cmp	r5, #12
 800505e:	bf38      	it	cc
 8005060:	250c      	movcc	r5, #12
 8005062:	2d00      	cmp	r5, #0
 8005064:	4606      	mov	r6, r0
 8005066:	db01      	blt.n	800506c <_malloc_r+0x1c>
 8005068:	42a9      	cmp	r1, r5
 800506a:	d904      	bls.n	8005076 <_malloc_r+0x26>
 800506c:	230c      	movs	r3, #12
 800506e:	6033      	str	r3, [r6, #0]
 8005070:	2000      	movs	r0, #0
 8005072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800514c <_malloc_r+0xfc>
 800507a:	f000 f869 	bl	8005150 <__malloc_lock>
 800507e:	f8d8 3000 	ldr.w	r3, [r8]
 8005082:	461c      	mov	r4, r3
 8005084:	bb44      	cbnz	r4, 80050d8 <_malloc_r+0x88>
 8005086:	4629      	mov	r1, r5
 8005088:	4630      	mov	r0, r6
 800508a:	f7ff ffbf 	bl	800500c <sbrk_aligned>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	4604      	mov	r4, r0
 8005092:	d158      	bne.n	8005146 <_malloc_r+0xf6>
 8005094:	f8d8 4000 	ldr.w	r4, [r8]
 8005098:	4627      	mov	r7, r4
 800509a:	2f00      	cmp	r7, #0
 800509c:	d143      	bne.n	8005126 <_malloc_r+0xd6>
 800509e:	2c00      	cmp	r4, #0
 80050a0:	d04b      	beq.n	800513a <_malloc_r+0xea>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	4639      	mov	r1, r7
 80050a6:	4630      	mov	r0, r6
 80050a8:	eb04 0903 	add.w	r9, r4, r3
 80050ac:	f000 fdde 	bl	8005c6c <_sbrk_r>
 80050b0:	4581      	cmp	r9, r0
 80050b2:	d142      	bne.n	800513a <_malloc_r+0xea>
 80050b4:	6821      	ldr	r1, [r4, #0]
 80050b6:	1a6d      	subs	r5, r5, r1
 80050b8:	4629      	mov	r1, r5
 80050ba:	4630      	mov	r0, r6
 80050bc:	f7ff ffa6 	bl	800500c <sbrk_aligned>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d03a      	beq.n	800513a <_malloc_r+0xea>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	442b      	add	r3, r5
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	f8d8 3000 	ldr.w	r3, [r8]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	bb62      	cbnz	r2, 800512c <_malloc_r+0xdc>
 80050d2:	f8c8 7000 	str.w	r7, [r8]
 80050d6:	e00f      	b.n	80050f8 <_malloc_r+0xa8>
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	1b52      	subs	r2, r2, r5
 80050dc:	d420      	bmi.n	8005120 <_malloc_r+0xd0>
 80050de:	2a0b      	cmp	r2, #11
 80050e0:	d917      	bls.n	8005112 <_malloc_r+0xc2>
 80050e2:	1961      	adds	r1, r4, r5
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	6025      	str	r5, [r4, #0]
 80050e8:	bf18      	it	ne
 80050ea:	6059      	strne	r1, [r3, #4]
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	bf08      	it	eq
 80050f0:	f8c8 1000 	streq.w	r1, [r8]
 80050f4:	5162      	str	r2, [r4, r5]
 80050f6:	604b      	str	r3, [r1, #4]
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 f82f 	bl	800515c <__malloc_unlock>
 80050fe:	f104 000b 	add.w	r0, r4, #11
 8005102:	1d23      	adds	r3, r4, #4
 8005104:	f020 0007 	bic.w	r0, r0, #7
 8005108:	1ac2      	subs	r2, r0, r3
 800510a:	bf1c      	itt	ne
 800510c:	1a1b      	subne	r3, r3, r0
 800510e:	50a3      	strne	r3, [r4, r2]
 8005110:	e7af      	b.n	8005072 <_malloc_r+0x22>
 8005112:	6862      	ldr	r2, [r4, #4]
 8005114:	42a3      	cmp	r3, r4
 8005116:	bf0c      	ite	eq
 8005118:	f8c8 2000 	streq.w	r2, [r8]
 800511c:	605a      	strne	r2, [r3, #4]
 800511e:	e7eb      	b.n	80050f8 <_malloc_r+0xa8>
 8005120:	4623      	mov	r3, r4
 8005122:	6864      	ldr	r4, [r4, #4]
 8005124:	e7ae      	b.n	8005084 <_malloc_r+0x34>
 8005126:	463c      	mov	r4, r7
 8005128:	687f      	ldr	r7, [r7, #4]
 800512a:	e7b6      	b.n	800509a <_malloc_r+0x4a>
 800512c:	461a      	mov	r2, r3
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	42a3      	cmp	r3, r4
 8005132:	d1fb      	bne.n	800512c <_malloc_r+0xdc>
 8005134:	2300      	movs	r3, #0
 8005136:	6053      	str	r3, [r2, #4]
 8005138:	e7de      	b.n	80050f8 <_malloc_r+0xa8>
 800513a:	230c      	movs	r3, #12
 800513c:	6033      	str	r3, [r6, #0]
 800513e:	4630      	mov	r0, r6
 8005140:	f000 f80c 	bl	800515c <__malloc_unlock>
 8005144:	e794      	b.n	8005070 <_malloc_r+0x20>
 8005146:	6005      	str	r5, [r0, #0]
 8005148:	e7d6      	b.n	80050f8 <_malloc_r+0xa8>
 800514a:	bf00      	nop
 800514c:	200002b8 	.word	0x200002b8

08005150 <__malloc_lock>:
 8005150:	4801      	ldr	r0, [pc, #4]	@ (8005158 <__malloc_lock+0x8>)
 8005152:	f7ff bf0e 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 8005156:	bf00      	nop
 8005158:	200002b0 	.word	0x200002b0

0800515c <__malloc_unlock>:
 800515c:	4801      	ldr	r0, [pc, #4]	@ (8005164 <__malloc_unlock+0x8>)
 800515e:	f7ff bf09 	b.w	8004f74 <__retarget_lock_release_recursive>
 8005162:	bf00      	nop
 8005164:	200002b0 	.word	0x200002b0

08005168 <__ssputs_r>:
 8005168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800516c:	688e      	ldr	r6, [r1, #8]
 800516e:	461f      	mov	r7, r3
 8005170:	42be      	cmp	r6, r7
 8005172:	680b      	ldr	r3, [r1, #0]
 8005174:	4682      	mov	sl, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4690      	mov	r8, r2
 800517a:	d82d      	bhi.n	80051d8 <__ssputs_r+0x70>
 800517c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005180:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005184:	d026      	beq.n	80051d4 <__ssputs_r+0x6c>
 8005186:	6965      	ldr	r5, [r4, #20]
 8005188:	6909      	ldr	r1, [r1, #16]
 800518a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800518e:	eba3 0901 	sub.w	r9, r3, r1
 8005192:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005196:	1c7b      	adds	r3, r7, #1
 8005198:	444b      	add	r3, r9
 800519a:	106d      	asrs	r5, r5, #1
 800519c:	429d      	cmp	r5, r3
 800519e:	bf38      	it	cc
 80051a0:	461d      	movcc	r5, r3
 80051a2:	0553      	lsls	r3, r2, #21
 80051a4:	d527      	bpl.n	80051f6 <__ssputs_r+0x8e>
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7ff ff52 	bl	8005050 <_malloc_r>
 80051ac:	4606      	mov	r6, r0
 80051ae:	b360      	cbz	r0, 800520a <__ssputs_r+0xa2>
 80051b0:	6921      	ldr	r1, [r4, #16]
 80051b2:	464a      	mov	r2, r9
 80051b4:	f000 fd6a 	bl	8005c8c <memcpy>
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c2:	81a3      	strh	r3, [r4, #12]
 80051c4:	6126      	str	r6, [r4, #16]
 80051c6:	6165      	str	r5, [r4, #20]
 80051c8:	444e      	add	r6, r9
 80051ca:	eba5 0509 	sub.w	r5, r5, r9
 80051ce:	6026      	str	r6, [r4, #0]
 80051d0:	60a5      	str	r5, [r4, #8]
 80051d2:	463e      	mov	r6, r7
 80051d4:	42be      	cmp	r6, r7
 80051d6:	d900      	bls.n	80051da <__ssputs_r+0x72>
 80051d8:	463e      	mov	r6, r7
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	4632      	mov	r2, r6
 80051de:	4641      	mov	r1, r8
 80051e0:	f000 fd2a 	bl	8005c38 <memmove>
 80051e4:	68a3      	ldr	r3, [r4, #8]
 80051e6:	1b9b      	subs	r3, r3, r6
 80051e8:	60a3      	str	r3, [r4, #8]
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	4433      	add	r3, r6
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	2000      	movs	r0, #0
 80051f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f6:	462a      	mov	r2, r5
 80051f8:	f000 fd56 	bl	8005ca8 <_realloc_r>
 80051fc:	4606      	mov	r6, r0
 80051fe:	2800      	cmp	r0, #0
 8005200:	d1e0      	bne.n	80051c4 <__ssputs_r+0x5c>
 8005202:	6921      	ldr	r1, [r4, #16]
 8005204:	4650      	mov	r0, sl
 8005206:	f7ff feb7 	bl	8004f78 <_free_r>
 800520a:	230c      	movs	r3, #12
 800520c:	f8ca 3000 	str.w	r3, [sl]
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e7e9      	b.n	80051f2 <__ssputs_r+0x8a>
	...

08005220 <_svfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	4698      	mov	r8, r3
 8005226:	898b      	ldrh	r3, [r1, #12]
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	b09d      	sub	sp, #116	@ 0x74
 800522c:	4607      	mov	r7, r0
 800522e:	460d      	mov	r5, r1
 8005230:	4614      	mov	r4, r2
 8005232:	d510      	bpl.n	8005256 <_svfiprintf_r+0x36>
 8005234:	690b      	ldr	r3, [r1, #16]
 8005236:	b973      	cbnz	r3, 8005256 <_svfiprintf_r+0x36>
 8005238:	2140      	movs	r1, #64	@ 0x40
 800523a:	f7ff ff09 	bl	8005050 <_malloc_r>
 800523e:	6028      	str	r0, [r5, #0]
 8005240:	6128      	str	r0, [r5, #16]
 8005242:	b930      	cbnz	r0, 8005252 <_svfiprintf_r+0x32>
 8005244:	230c      	movs	r3, #12
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	b01d      	add	sp, #116	@ 0x74
 800524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005252:	2340      	movs	r3, #64	@ 0x40
 8005254:	616b      	str	r3, [r5, #20]
 8005256:	2300      	movs	r3, #0
 8005258:	9309      	str	r3, [sp, #36]	@ 0x24
 800525a:	2320      	movs	r3, #32
 800525c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005260:	f8cd 800c 	str.w	r8, [sp, #12]
 8005264:	2330      	movs	r3, #48	@ 0x30
 8005266:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005404 <_svfiprintf_r+0x1e4>
 800526a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800526e:	f04f 0901 	mov.w	r9, #1
 8005272:	4623      	mov	r3, r4
 8005274:	469a      	mov	sl, r3
 8005276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800527a:	b10a      	cbz	r2, 8005280 <_svfiprintf_r+0x60>
 800527c:	2a25      	cmp	r2, #37	@ 0x25
 800527e:	d1f9      	bne.n	8005274 <_svfiprintf_r+0x54>
 8005280:	ebba 0b04 	subs.w	fp, sl, r4
 8005284:	d00b      	beq.n	800529e <_svfiprintf_r+0x7e>
 8005286:	465b      	mov	r3, fp
 8005288:	4622      	mov	r2, r4
 800528a:	4629      	mov	r1, r5
 800528c:	4638      	mov	r0, r7
 800528e:	f7ff ff6b 	bl	8005168 <__ssputs_r>
 8005292:	3001      	adds	r0, #1
 8005294:	f000 80a7 	beq.w	80053e6 <_svfiprintf_r+0x1c6>
 8005298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800529a:	445a      	add	r2, fp
 800529c:	9209      	str	r2, [sp, #36]	@ 0x24
 800529e:	f89a 3000 	ldrb.w	r3, [sl]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 809f 	beq.w	80053e6 <_svfiprintf_r+0x1c6>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b2:	f10a 0a01 	add.w	sl, sl, #1
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	9307      	str	r3, [sp, #28]
 80052ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052be:	931a      	str	r3, [sp, #104]	@ 0x68
 80052c0:	4654      	mov	r4, sl
 80052c2:	2205      	movs	r2, #5
 80052c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c8:	484e      	ldr	r0, [pc, #312]	@ (8005404 <_svfiprintf_r+0x1e4>)
 80052ca:	f7fa ff89 	bl	80001e0 <memchr>
 80052ce:	9a04      	ldr	r2, [sp, #16]
 80052d0:	b9d8      	cbnz	r0, 800530a <_svfiprintf_r+0xea>
 80052d2:	06d0      	lsls	r0, r2, #27
 80052d4:	bf44      	itt	mi
 80052d6:	2320      	movmi	r3, #32
 80052d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052dc:	0711      	lsls	r1, r2, #28
 80052de:	bf44      	itt	mi
 80052e0:	232b      	movmi	r3, #43	@ 0x2b
 80052e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052e6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ec:	d015      	beq.n	800531a <_svfiprintf_r+0xfa>
 80052ee:	9a07      	ldr	r2, [sp, #28]
 80052f0:	4654      	mov	r4, sl
 80052f2:	2000      	movs	r0, #0
 80052f4:	f04f 0c0a 	mov.w	ip, #10
 80052f8:	4621      	mov	r1, r4
 80052fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fe:	3b30      	subs	r3, #48	@ 0x30
 8005300:	2b09      	cmp	r3, #9
 8005302:	d94b      	bls.n	800539c <_svfiprintf_r+0x17c>
 8005304:	b1b0      	cbz	r0, 8005334 <_svfiprintf_r+0x114>
 8005306:	9207      	str	r2, [sp, #28]
 8005308:	e014      	b.n	8005334 <_svfiprintf_r+0x114>
 800530a:	eba0 0308 	sub.w	r3, r0, r8
 800530e:	fa09 f303 	lsl.w	r3, r9, r3
 8005312:	4313      	orrs	r3, r2
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	46a2      	mov	sl, r4
 8005318:	e7d2      	b.n	80052c0 <_svfiprintf_r+0xa0>
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	1d19      	adds	r1, r3, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	9103      	str	r1, [sp, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfbb      	ittet	lt
 8005326:	425b      	neglt	r3, r3
 8005328:	f042 0202 	orrlt.w	r2, r2, #2
 800532c:	9307      	strge	r3, [sp, #28]
 800532e:	9307      	strlt	r3, [sp, #28]
 8005330:	bfb8      	it	lt
 8005332:	9204      	strlt	r2, [sp, #16]
 8005334:	7823      	ldrb	r3, [r4, #0]
 8005336:	2b2e      	cmp	r3, #46	@ 0x2e
 8005338:	d10a      	bne.n	8005350 <_svfiprintf_r+0x130>
 800533a:	7863      	ldrb	r3, [r4, #1]
 800533c:	2b2a      	cmp	r3, #42	@ 0x2a
 800533e:	d132      	bne.n	80053a6 <_svfiprintf_r+0x186>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9203      	str	r2, [sp, #12]
 8005348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800534c:	3402      	adds	r4, #2
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005414 <_svfiprintf_r+0x1f4>
 8005354:	7821      	ldrb	r1, [r4, #0]
 8005356:	2203      	movs	r2, #3
 8005358:	4650      	mov	r0, sl
 800535a:	f7fa ff41 	bl	80001e0 <memchr>
 800535e:	b138      	cbz	r0, 8005370 <_svfiprintf_r+0x150>
 8005360:	9b04      	ldr	r3, [sp, #16]
 8005362:	eba0 000a 	sub.w	r0, r0, sl
 8005366:	2240      	movs	r2, #64	@ 0x40
 8005368:	4082      	lsls	r2, r0
 800536a:	4313      	orrs	r3, r2
 800536c:	3401      	adds	r4, #1
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005374:	4824      	ldr	r0, [pc, #144]	@ (8005408 <_svfiprintf_r+0x1e8>)
 8005376:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800537a:	2206      	movs	r2, #6
 800537c:	f7fa ff30 	bl	80001e0 <memchr>
 8005380:	2800      	cmp	r0, #0
 8005382:	d036      	beq.n	80053f2 <_svfiprintf_r+0x1d2>
 8005384:	4b21      	ldr	r3, [pc, #132]	@ (800540c <_svfiprintf_r+0x1ec>)
 8005386:	bb1b      	cbnz	r3, 80053d0 <_svfiprintf_r+0x1b0>
 8005388:	9b03      	ldr	r3, [sp, #12]
 800538a:	3307      	adds	r3, #7
 800538c:	f023 0307 	bic.w	r3, r3, #7
 8005390:	3308      	adds	r3, #8
 8005392:	9303      	str	r3, [sp, #12]
 8005394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005396:	4433      	add	r3, r6
 8005398:	9309      	str	r3, [sp, #36]	@ 0x24
 800539a:	e76a      	b.n	8005272 <_svfiprintf_r+0x52>
 800539c:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a0:	460c      	mov	r4, r1
 80053a2:	2001      	movs	r0, #1
 80053a4:	e7a8      	b.n	80052f8 <_svfiprintf_r+0xd8>
 80053a6:	2300      	movs	r3, #0
 80053a8:	3401      	adds	r4, #1
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f04f 0c0a 	mov.w	ip, #10
 80053b2:	4620      	mov	r0, r4
 80053b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b8:	3a30      	subs	r2, #48	@ 0x30
 80053ba:	2a09      	cmp	r2, #9
 80053bc:	d903      	bls.n	80053c6 <_svfiprintf_r+0x1a6>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0c6      	beq.n	8005350 <_svfiprintf_r+0x130>
 80053c2:	9105      	str	r1, [sp, #20]
 80053c4:	e7c4      	b.n	8005350 <_svfiprintf_r+0x130>
 80053c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ca:	4604      	mov	r4, r0
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7f0      	b.n	80053b2 <_svfiprintf_r+0x192>
 80053d0:	ab03      	add	r3, sp, #12
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <_svfiprintf_r+0x1f0>)
 80053d8:	a904      	add	r1, sp, #16
 80053da:	4638      	mov	r0, r7
 80053dc:	f3af 8000 	nop.w
 80053e0:	1c42      	adds	r2, r0, #1
 80053e2:	4606      	mov	r6, r0
 80053e4:	d1d6      	bne.n	8005394 <_svfiprintf_r+0x174>
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	065b      	lsls	r3, r3, #25
 80053ea:	f53f af2d 	bmi.w	8005248 <_svfiprintf_r+0x28>
 80053ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053f0:	e72c      	b.n	800524c <_svfiprintf_r+0x2c>
 80053f2:	ab03      	add	r3, sp, #12
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	462a      	mov	r2, r5
 80053f8:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <_svfiprintf_r+0x1f0>)
 80053fa:	a904      	add	r1, sp, #16
 80053fc:	4638      	mov	r0, r7
 80053fe:	f000 f9bb 	bl	8005778 <_printf_i>
 8005402:	e7ed      	b.n	80053e0 <_svfiprintf_r+0x1c0>
 8005404:	08005ee8 	.word	0x08005ee8
 8005408:	08005ef2 	.word	0x08005ef2
 800540c:	00000000 	.word	0x00000000
 8005410:	08005169 	.word	0x08005169
 8005414:	08005eee 	.word	0x08005eee

08005418 <__sfputc_r>:
 8005418:	6893      	ldr	r3, [r2, #8]
 800541a:	3b01      	subs	r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	b410      	push	{r4}
 8005420:	6093      	str	r3, [r2, #8]
 8005422:	da08      	bge.n	8005436 <__sfputc_r+0x1e>
 8005424:	6994      	ldr	r4, [r2, #24]
 8005426:	42a3      	cmp	r3, r4
 8005428:	db01      	blt.n	800542e <__sfputc_r+0x16>
 800542a:	290a      	cmp	r1, #10
 800542c:	d103      	bne.n	8005436 <__sfputc_r+0x1e>
 800542e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005432:	f000 bb6d 	b.w	8005b10 <__swbuf_r>
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	1c58      	adds	r0, r3, #1
 800543a:	6010      	str	r0, [r2, #0]
 800543c:	7019      	strb	r1, [r3, #0]
 800543e:	4608      	mov	r0, r1
 8005440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005444:	4770      	bx	lr

08005446 <__sfputs_r>:
 8005446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	4614      	mov	r4, r2
 800544e:	18d5      	adds	r5, r2, r3
 8005450:	42ac      	cmp	r4, r5
 8005452:	d101      	bne.n	8005458 <__sfputs_r+0x12>
 8005454:	2000      	movs	r0, #0
 8005456:	e007      	b.n	8005468 <__sfputs_r+0x22>
 8005458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800545c:	463a      	mov	r2, r7
 800545e:	4630      	mov	r0, r6
 8005460:	f7ff ffda 	bl	8005418 <__sfputc_r>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d1f3      	bne.n	8005450 <__sfputs_r+0xa>
 8005468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800546c <_vfiprintf_r>:
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	460d      	mov	r5, r1
 8005472:	b09d      	sub	sp, #116	@ 0x74
 8005474:	4614      	mov	r4, r2
 8005476:	4698      	mov	r8, r3
 8005478:	4606      	mov	r6, r0
 800547a:	b118      	cbz	r0, 8005484 <_vfiprintf_r+0x18>
 800547c:	6a03      	ldr	r3, [r0, #32]
 800547e:	b90b      	cbnz	r3, 8005484 <_vfiprintf_r+0x18>
 8005480:	f7ff fc3e 	bl	8004d00 <__sinit>
 8005484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005486:	07d9      	lsls	r1, r3, #31
 8005488:	d405      	bmi.n	8005496 <_vfiprintf_r+0x2a>
 800548a:	89ab      	ldrh	r3, [r5, #12]
 800548c:	059a      	lsls	r2, r3, #22
 800548e:	d402      	bmi.n	8005496 <_vfiprintf_r+0x2a>
 8005490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005492:	f7ff fd6e 	bl	8004f72 <__retarget_lock_acquire_recursive>
 8005496:	89ab      	ldrh	r3, [r5, #12]
 8005498:	071b      	lsls	r3, r3, #28
 800549a:	d501      	bpl.n	80054a0 <_vfiprintf_r+0x34>
 800549c:	692b      	ldr	r3, [r5, #16]
 800549e:	b99b      	cbnz	r3, 80054c8 <_vfiprintf_r+0x5c>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4630      	mov	r0, r6
 80054a4:	f000 fb72 	bl	8005b8c <__swsetup_r>
 80054a8:	b170      	cbz	r0, 80054c8 <_vfiprintf_r+0x5c>
 80054aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054ac:	07dc      	lsls	r4, r3, #31
 80054ae:	d504      	bpl.n	80054ba <_vfiprintf_r+0x4e>
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	b01d      	add	sp, #116	@ 0x74
 80054b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	0598      	lsls	r0, r3, #22
 80054be:	d4f7      	bmi.n	80054b0 <_vfiprintf_r+0x44>
 80054c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054c2:	f7ff fd57 	bl	8004f74 <__retarget_lock_release_recursive>
 80054c6:	e7f3      	b.n	80054b0 <_vfiprintf_r+0x44>
 80054c8:	2300      	movs	r3, #0
 80054ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80054cc:	2320      	movs	r3, #32
 80054ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d6:	2330      	movs	r3, #48	@ 0x30
 80054d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005688 <_vfiprintf_r+0x21c>
 80054dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054e0:	f04f 0901 	mov.w	r9, #1
 80054e4:	4623      	mov	r3, r4
 80054e6:	469a      	mov	sl, r3
 80054e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ec:	b10a      	cbz	r2, 80054f2 <_vfiprintf_r+0x86>
 80054ee:	2a25      	cmp	r2, #37	@ 0x25
 80054f0:	d1f9      	bne.n	80054e6 <_vfiprintf_r+0x7a>
 80054f2:	ebba 0b04 	subs.w	fp, sl, r4
 80054f6:	d00b      	beq.n	8005510 <_vfiprintf_r+0xa4>
 80054f8:	465b      	mov	r3, fp
 80054fa:	4622      	mov	r2, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	4630      	mov	r0, r6
 8005500:	f7ff ffa1 	bl	8005446 <__sfputs_r>
 8005504:	3001      	adds	r0, #1
 8005506:	f000 80a7 	beq.w	8005658 <_vfiprintf_r+0x1ec>
 800550a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800550c:	445a      	add	r2, fp
 800550e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005510:	f89a 3000 	ldrb.w	r3, [sl]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 809f 	beq.w	8005658 <_vfiprintf_r+0x1ec>
 800551a:	2300      	movs	r3, #0
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005524:	f10a 0a01 	add.w	sl, sl, #1
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005530:	931a      	str	r3, [sp, #104]	@ 0x68
 8005532:	4654      	mov	r4, sl
 8005534:	2205      	movs	r2, #5
 8005536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553a:	4853      	ldr	r0, [pc, #332]	@ (8005688 <_vfiprintf_r+0x21c>)
 800553c:	f7fa fe50 	bl	80001e0 <memchr>
 8005540:	9a04      	ldr	r2, [sp, #16]
 8005542:	b9d8      	cbnz	r0, 800557c <_vfiprintf_r+0x110>
 8005544:	06d1      	lsls	r1, r2, #27
 8005546:	bf44      	itt	mi
 8005548:	2320      	movmi	r3, #32
 800554a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800554e:	0713      	lsls	r3, r2, #28
 8005550:	bf44      	itt	mi
 8005552:	232b      	movmi	r3, #43	@ 0x2b
 8005554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005558:	f89a 3000 	ldrb.w	r3, [sl]
 800555c:	2b2a      	cmp	r3, #42	@ 0x2a
 800555e:	d015      	beq.n	800558c <_vfiprintf_r+0x120>
 8005560:	9a07      	ldr	r2, [sp, #28]
 8005562:	4654      	mov	r4, sl
 8005564:	2000      	movs	r0, #0
 8005566:	f04f 0c0a 	mov.w	ip, #10
 800556a:	4621      	mov	r1, r4
 800556c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005570:	3b30      	subs	r3, #48	@ 0x30
 8005572:	2b09      	cmp	r3, #9
 8005574:	d94b      	bls.n	800560e <_vfiprintf_r+0x1a2>
 8005576:	b1b0      	cbz	r0, 80055a6 <_vfiprintf_r+0x13a>
 8005578:	9207      	str	r2, [sp, #28]
 800557a:	e014      	b.n	80055a6 <_vfiprintf_r+0x13a>
 800557c:	eba0 0308 	sub.w	r3, r0, r8
 8005580:	fa09 f303 	lsl.w	r3, r9, r3
 8005584:	4313      	orrs	r3, r2
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	46a2      	mov	sl, r4
 800558a:	e7d2      	b.n	8005532 <_vfiprintf_r+0xc6>
 800558c:	9b03      	ldr	r3, [sp, #12]
 800558e:	1d19      	adds	r1, r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	9103      	str	r1, [sp, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	bfbb      	ittet	lt
 8005598:	425b      	neglt	r3, r3
 800559a:	f042 0202 	orrlt.w	r2, r2, #2
 800559e:	9307      	strge	r3, [sp, #28]
 80055a0:	9307      	strlt	r3, [sp, #28]
 80055a2:	bfb8      	it	lt
 80055a4:	9204      	strlt	r2, [sp, #16]
 80055a6:	7823      	ldrb	r3, [r4, #0]
 80055a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80055aa:	d10a      	bne.n	80055c2 <_vfiprintf_r+0x156>
 80055ac:	7863      	ldrb	r3, [r4, #1]
 80055ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80055b0:	d132      	bne.n	8005618 <_vfiprintf_r+0x1ac>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9203      	str	r2, [sp, #12]
 80055ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055be:	3402      	adds	r4, #2
 80055c0:	9305      	str	r3, [sp, #20]
 80055c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005698 <_vfiprintf_r+0x22c>
 80055c6:	7821      	ldrb	r1, [r4, #0]
 80055c8:	2203      	movs	r2, #3
 80055ca:	4650      	mov	r0, sl
 80055cc:	f7fa fe08 	bl	80001e0 <memchr>
 80055d0:	b138      	cbz	r0, 80055e2 <_vfiprintf_r+0x176>
 80055d2:	9b04      	ldr	r3, [sp, #16]
 80055d4:	eba0 000a 	sub.w	r0, r0, sl
 80055d8:	2240      	movs	r2, #64	@ 0x40
 80055da:	4082      	lsls	r2, r0
 80055dc:	4313      	orrs	r3, r2
 80055de:	3401      	adds	r4, #1
 80055e0:	9304      	str	r3, [sp, #16]
 80055e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e6:	4829      	ldr	r0, [pc, #164]	@ (800568c <_vfiprintf_r+0x220>)
 80055e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055ec:	2206      	movs	r2, #6
 80055ee:	f7fa fdf7 	bl	80001e0 <memchr>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d03f      	beq.n	8005676 <_vfiprintf_r+0x20a>
 80055f6:	4b26      	ldr	r3, [pc, #152]	@ (8005690 <_vfiprintf_r+0x224>)
 80055f8:	bb1b      	cbnz	r3, 8005642 <_vfiprintf_r+0x1d6>
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	3307      	adds	r3, #7
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	3308      	adds	r3, #8
 8005604:	9303      	str	r3, [sp, #12]
 8005606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005608:	443b      	add	r3, r7
 800560a:	9309      	str	r3, [sp, #36]	@ 0x24
 800560c:	e76a      	b.n	80054e4 <_vfiprintf_r+0x78>
 800560e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005612:	460c      	mov	r4, r1
 8005614:	2001      	movs	r0, #1
 8005616:	e7a8      	b.n	800556a <_vfiprintf_r+0xfe>
 8005618:	2300      	movs	r3, #0
 800561a:	3401      	adds	r4, #1
 800561c:	9305      	str	r3, [sp, #20]
 800561e:	4619      	mov	r1, r3
 8005620:	f04f 0c0a 	mov.w	ip, #10
 8005624:	4620      	mov	r0, r4
 8005626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800562a:	3a30      	subs	r2, #48	@ 0x30
 800562c:	2a09      	cmp	r2, #9
 800562e:	d903      	bls.n	8005638 <_vfiprintf_r+0x1cc>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0c6      	beq.n	80055c2 <_vfiprintf_r+0x156>
 8005634:	9105      	str	r1, [sp, #20]
 8005636:	e7c4      	b.n	80055c2 <_vfiprintf_r+0x156>
 8005638:	fb0c 2101 	mla	r1, ip, r1, r2
 800563c:	4604      	mov	r4, r0
 800563e:	2301      	movs	r3, #1
 8005640:	e7f0      	b.n	8005624 <_vfiprintf_r+0x1b8>
 8005642:	ab03      	add	r3, sp, #12
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	462a      	mov	r2, r5
 8005648:	4b12      	ldr	r3, [pc, #72]	@ (8005694 <_vfiprintf_r+0x228>)
 800564a:	a904      	add	r1, sp, #16
 800564c:	4630      	mov	r0, r6
 800564e:	f3af 8000 	nop.w
 8005652:	4607      	mov	r7, r0
 8005654:	1c78      	adds	r0, r7, #1
 8005656:	d1d6      	bne.n	8005606 <_vfiprintf_r+0x19a>
 8005658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800565a:	07d9      	lsls	r1, r3, #31
 800565c:	d405      	bmi.n	800566a <_vfiprintf_r+0x1fe>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	059a      	lsls	r2, r3, #22
 8005662:	d402      	bmi.n	800566a <_vfiprintf_r+0x1fe>
 8005664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005666:	f7ff fc85 	bl	8004f74 <__retarget_lock_release_recursive>
 800566a:	89ab      	ldrh	r3, [r5, #12]
 800566c:	065b      	lsls	r3, r3, #25
 800566e:	f53f af1f 	bmi.w	80054b0 <_vfiprintf_r+0x44>
 8005672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005674:	e71e      	b.n	80054b4 <_vfiprintf_r+0x48>
 8005676:	ab03      	add	r3, sp, #12
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	462a      	mov	r2, r5
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <_vfiprintf_r+0x228>)
 800567e:	a904      	add	r1, sp, #16
 8005680:	4630      	mov	r0, r6
 8005682:	f000 f879 	bl	8005778 <_printf_i>
 8005686:	e7e4      	b.n	8005652 <_vfiprintf_r+0x1e6>
 8005688:	08005ee8 	.word	0x08005ee8
 800568c:	08005ef2 	.word	0x08005ef2
 8005690:	00000000 	.word	0x00000000
 8005694:	08005447 	.word	0x08005447
 8005698:	08005eee 	.word	0x08005eee

0800569c <_printf_common>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	4616      	mov	r6, r2
 80056a2:	4698      	mov	r8, r3
 80056a4:	688a      	ldr	r2, [r1, #8]
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bfb8      	it	lt
 80056b0:	4613      	movlt	r3, r2
 80056b2:	6033      	str	r3, [r6, #0]
 80056b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056b8:	4607      	mov	r7, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	b10a      	cbz	r2, 80056c2 <_printf_common+0x26>
 80056be:	3301      	adds	r3, #1
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	0699      	lsls	r1, r3, #26
 80056c6:	bf42      	ittt	mi
 80056c8:	6833      	ldrmi	r3, [r6, #0]
 80056ca:	3302      	addmi	r3, #2
 80056cc:	6033      	strmi	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	f015 0506 	ands.w	r5, r5, #6
 80056d4:	d106      	bne.n	80056e4 <_printf_common+0x48>
 80056d6:	f104 0a19 	add.w	sl, r4, #25
 80056da:	68e3      	ldr	r3, [r4, #12]
 80056dc:	6832      	ldr	r2, [r6, #0]
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dc26      	bgt.n	8005732 <_printf_common+0x96>
 80056e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	3b00      	subs	r3, #0
 80056ec:	bf18      	it	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	0692      	lsls	r2, r2, #26
 80056f2:	d42b      	bmi.n	800574c <_printf_common+0xb0>
 80056f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056f8:	4641      	mov	r1, r8
 80056fa:	4638      	mov	r0, r7
 80056fc:	47c8      	blx	r9
 80056fe:	3001      	adds	r0, #1
 8005700:	d01e      	beq.n	8005740 <_printf_common+0xa4>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	6922      	ldr	r2, [r4, #16]
 8005706:	f003 0306 	and.w	r3, r3, #6
 800570a:	2b04      	cmp	r3, #4
 800570c:	bf02      	ittt	eq
 800570e:	68e5      	ldreq	r5, [r4, #12]
 8005710:	6833      	ldreq	r3, [r6, #0]
 8005712:	1aed      	subeq	r5, r5, r3
 8005714:	68a3      	ldr	r3, [r4, #8]
 8005716:	bf0c      	ite	eq
 8005718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800571c:	2500      	movne	r5, #0
 800571e:	4293      	cmp	r3, r2
 8005720:	bfc4      	itt	gt
 8005722:	1a9b      	subgt	r3, r3, r2
 8005724:	18ed      	addgt	r5, r5, r3
 8005726:	2600      	movs	r6, #0
 8005728:	341a      	adds	r4, #26
 800572a:	42b5      	cmp	r5, r6
 800572c:	d11a      	bne.n	8005764 <_printf_common+0xc8>
 800572e:	2000      	movs	r0, #0
 8005730:	e008      	b.n	8005744 <_printf_common+0xa8>
 8005732:	2301      	movs	r3, #1
 8005734:	4652      	mov	r2, sl
 8005736:	4641      	mov	r1, r8
 8005738:	4638      	mov	r0, r7
 800573a:	47c8      	blx	r9
 800573c:	3001      	adds	r0, #1
 800573e:	d103      	bne.n	8005748 <_printf_common+0xac>
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	3501      	adds	r5, #1
 800574a:	e7c6      	b.n	80056da <_printf_common+0x3e>
 800574c:	18e1      	adds	r1, r4, r3
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	2030      	movs	r0, #48	@ 0x30
 8005752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005756:	4422      	add	r2, r4
 8005758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800575c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005760:	3302      	adds	r3, #2
 8005762:	e7c7      	b.n	80056f4 <_printf_common+0x58>
 8005764:	2301      	movs	r3, #1
 8005766:	4622      	mov	r2, r4
 8005768:	4641      	mov	r1, r8
 800576a:	4638      	mov	r0, r7
 800576c:	47c8      	blx	r9
 800576e:	3001      	adds	r0, #1
 8005770:	d0e6      	beq.n	8005740 <_printf_common+0xa4>
 8005772:	3601      	adds	r6, #1
 8005774:	e7d9      	b.n	800572a <_printf_common+0x8e>
	...

08005778 <_printf_i>:
 8005778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	7e0f      	ldrb	r7, [r1, #24]
 800577e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005780:	2f78      	cmp	r7, #120	@ 0x78
 8005782:	4691      	mov	r9, r2
 8005784:	4680      	mov	r8, r0
 8005786:	460c      	mov	r4, r1
 8005788:	469a      	mov	sl, r3
 800578a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800578e:	d807      	bhi.n	80057a0 <_printf_i+0x28>
 8005790:	2f62      	cmp	r7, #98	@ 0x62
 8005792:	d80a      	bhi.n	80057aa <_printf_i+0x32>
 8005794:	2f00      	cmp	r7, #0
 8005796:	f000 80d2 	beq.w	800593e <_printf_i+0x1c6>
 800579a:	2f58      	cmp	r7, #88	@ 0x58
 800579c:	f000 80b9 	beq.w	8005912 <_printf_i+0x19a>
 80057a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057a8:	e03a      	b.n	8005820 <_printf_i+0xa8>
 80057aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057ae:	2b15      	cmp	r3, #21
 80057b0:	d8f6      	bhi.n	80057a0 <_printf_i+0x28>
 80057b2:	a101      	add	r1, pc, #4	@ (adr r1, 80057b8 <_printf_i+0x40>)
 80057b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005825 	.word	0x08005825
 80057c0:	080057a1 	.word	0x080057a1
 80057c4:	080057a1 	.word	0x080057a1
 80057c8:	080057a1 	.word	0x080057a1
 80057cc:	080057a1 	.word	0x080057a1
 80057d0:	08005825 	.word	0x08005825
 80057d4:	080057a1 	.word	0x080057a1
 80057d8:	080057a1 	.word	0x080057a1
 80057dc:	080057a1 	.word	0x080057a1
 80057e0:	080057a1 	.word	0x080057a1
 80057e4:	08005925 	.word	0x08005925
 80057e8:	0800584f 	.word	0x0800584f
 80057ec:	080058df 	.word	0x080058df
 80057f0:	080057a1 	.word	0x080057a1
 80057f4:	080057a1 	.word	0x080057a1
 80057f8:	08005947 	.word	0x08005947
 80057fc:	080057a1 	.word	0x080057a1
 8005800:	0800584f 	.word	0x0800584f
 8005804:	080057a1 	.word	0x080057a1
 8005808:	080057a1 	.word	0x080057a1
 800580c:	080058e7 	.word	0x080058e7
 8005810:	6833      	ldr	r3, [r6, #0]
 8005812:	1d1a      	adds	r2, r3, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6032      	str	r2, [r6, #0]
 8005818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800581c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005820:	2301      	movs	r3, #1
 8005822:	e09d      	b.n	8005960 <_printf_i+0x1e8>
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	6031      	str	r1, [r6, #0]
 800582c:	0606      	lsls	r6, r0, #24
 800582e:	d501      	bpl.n	8005834 <_printf_i+0xbc>
 8005830:	681d      	ldr	r5, [r3, #0]
 8005832:	e003      	b.n	800583c <_printf_i+0xc4>
 8005834:	0645      	lsls	r5, r0, #25
 8005836:	d5fb      	bpl.n	8005830 <_printf_i+0xb8>
 8005838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800583c:	2d00      	cmp	r5, #0
 800583e:	da03      	bge.n	8005848 <_printf_i+0xd0>
 8005840:	232d      	movs	r3, #45	@ 0x2d
 8005842:	426d      	negs	r5, r5
 8005844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005848:	4859      	ldr	r0, [pc, #356]	@ (80059b0 <_printf_i+0x238>)
 800584a:	230a      	movs	r3, #10
 800584c:	e011      	b.n	8005872 <_printf_i+0xfa>
 800584e:	6821      	ldr	r1, [r4, #0]
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	0608      	lsls	r0, r1, #24
 8005854:	f853 5b04 	ldr.w	r5, [r3], #4
 8005858:	d402      	bmi.n	8005860 <_printf_i+0xe8>
 800585a:	0649      	lsls	r1, r1, #25
 800585c:	bf48      	it	mi
 800585e:	b2ad      	uxthmi	r5, r5
 8005860:	2f6f      	cmp	r7, #111	@ 0x6f
 8005862:	4853      	ldr	r0, [pc, #332]	@ (80059b0 <_printf_i+0x238>)
 8005864:	6033      	str	r3, [r6, #0]
 8005866:	bf14      	ite	ne
 8005868:	230a      	movne	r3, #10
 800586a:	2308      	moveq	r3, #8
 800586c:	2100      	movs	r1, #0
 800586e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005872:	6866      	ldr	r6, [r4, #4]
 8005874:	60a6      	str	r6, [r4, #8]
 8005876:	2e00      	cmp	r6, #0
 8005878:	bfa2      	ittt	ge
 800587a:	6821      	ldrge	r1, [r4, #0]
 800587c:	f021 0104 	bicge.w	r1, r1, #4
 8005880:	6021      	strge	r1, [r4, #0]
 8005882:	b90d      	cbnz	r5, 8005888 <_printf_i+0x110>
 8005884:	2e00      	cmp	r6, #0
 8005886:	d04b      	beq.n	8005920 <_printf_i+0x1a8>
 8005888:	4616      	mov	r6, r2
 800588a:	fbb5 f1f3 	udiv	r1, r5, r3
 800588e:	fb03 5711 	mls	r7, r3, r1, r5
 8005892:	5dc7      	ldrb	r7, [r0, r7]
 8005894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005898:	462f      	mov	r7, r5
 800589a:	42bb      	cmp	r3, r7
 800589c:	460d      	mov	r5, r1
 800589e:	d9f4      	bls.n	800588a <_printf_i+0x112>
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10b      	bne.n	80058bc <_printf_i+0x144>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	07df      	lsls	r7, r3, #31
 80058a8:	d508      	bpl.n	80058bc <_printf_i+0x144>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	6861      	ldr	r1, [r4, #4]
 80058ae:	4299      	cmp	r1, r3
 80058b0:	bfde      	ittt	le
 80058b2:	2330      	movle	r3, #48	@ 0x30
 80058b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058bc:	1b92      	subs	r2, r2, r6
 80058be:	6122      	str	r2, [r4, #16]
 80058c0:	f8cd a000 	str.w	sl, [sp]
 80058c4:	464b      	mov	r3, r9
 80058c6:	aa03      	add	r2, sp, #12
 80058c8:	4621      	mov	r1, r4
 80058ca:	4640      	mov	r0, r8
 80058cc:	f7ff fee6 	bl	800569c <_printf_common>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d14a      	bne.n	800596a <_printf_i+0x1f2>
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	b004      	add	sp, #16
 80058da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f043 0320 	orr.w	r3, r3, #32
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	4833      	ldr	r0, [pc, #204]	@ (80059b4 <_printf_i+0x23c>)
 80058e8:	2778      	movs	r7, #120	@ 0x78
 80058ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	6831      	ldr	r1, [r6, #0]
 80058f2:	061f      	lsls	r7, r3, #24
 80058f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80058f8:	d402      	bmi.n	8005900 <_printf_i+0x188>
 80058fa:	065f      	lsls	r7, r3, #25
 80058fc:	bf48      	it	mi
 80058fe:	b2ad      	uxthmi	r5, r5
 8005900:	6031      	str	r1, [r6, #0]
 8005902:	07d9      	lsls	r1, r3, #31
 8005904:	bf44      	itt	mi
 8005906:	f043 0320 	orrmi.w	r3, r3, #32
 800590a:	6023      	strmi	r3, [r4, #0]
 800590c:	b11d      	cbz	r5, 8005916 <_printf_i+0x19e>
 800590e:	2310      	movs	r3, #16
 8005910:	e7ac      	b.n	800586c <_printf_i+0xf4>
 8005912:	4827      	ldr	r0, [pc, #156]	@ (80059b0 <_printf_i+0x238>)
 8005914:	e7e9      	b.n	80058ea <_printf_i+0x172>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	f023 0320 	bic.w	r3, r3, #32
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	e7f6      	b.n	800590e <_printf_i+0x196>
 8005920:	4616      	mov	r6, r2
 8005922:	e7bd      	b.n	80058a0 <_printf_i+0x128>
 8005924:	6833      	ldr	r3, [r6, #0]
 8005926:	6825      	ldr	r5, [r4, #0]
 8005928:	6961      	ldr	r1, [r4, #20]
 800592a:	1d18      	adds	r0, r3, #4
 800592c:	6030      	str	r0, [r6, #0]
 800592e:	062e      	lsls	r6, r5, #24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	d501      	bpl.n	8005938 <_printf_i+0x1c0>
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	e002      	b.n	800593e <_printf_i+0x1c6>
 8005938:	0668      	lsls	r0, r5, #25
 800593a:	d5fb      	bpl.n	8005934 <_printf_i+0x1bc>
 800593c:	8019      	strh	r1, [r3, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	4616      	mov	r6, r2
 8005944:	e7bc      	b.n	80058c0 <_printf_i+0x148>
 8005946:	6833      	ldr	r3, [r6, #0]
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	6032      	str	r2, [r6, #0]
 800594c:	681e      	ldr	r6, [r3, #0]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	2100      	movs	r1, #0
 8005952:	4630      	mov	r0, r6
 8005954:	f7fa fc44 	bl	80001e0 <memchr>
 8005958:	b108      	cbz	r0, 800595e <_printf_i+0x1e6>
 800595a:	1b80      	subs	r0, r0, r6
 800595c:	6060      	str	r0, [r4, #4]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005968:	e7aa      	b.n	80058c0 <_printf_i+0x148>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	4632      	mov	r2, r6
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	47d0      	blx	sl
 8005974:	3001      	adds	r0, #1
 8005976:	d0ad      	beq.n	80058d4 <_printf_i+0x15c>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	d413      	bmi.n	80059a6 <_printf_i+0x22e>
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	4298      	cmp	r0, r3
 8005984:	bfb8      	it	lt
 8005986:	4618      	movlt	r0, r3
 8005988:	e7a6      	b.n	80058d8 <_printf_i+0x160>
 800598a:	2301      	movs	r3, #1
 800598c:	4632      	mov	r2, r6
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d09d      	beq.n	80058d4 <_printf_i+0x15c>
 8005998:	3501      	adds	r5, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	9903      	ldr	r1, [sp, #12]
 800599e:	1a5b      	subs	r3, r3, r1
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dcf2      	bgt.n	800598a <_printf_i+0x212>
 80059a4:	e7eb      	b.n	800597e <_printf_i+0x206>
 80059a6:	2500      	movs	r5, #0
 80059a8:	f104 0619 	add.w	r6, r4, #25
 80059ac:	e7f5      	b.n	800599a <_printf_i+0x222>
 80059ae:	bf00      	nop
 80059b0:	08005ef9 	.word	0x08005ef9
 80059b4:	08005f0a 	.word	0x08005f0a

080059b8 <__sflush_r>:
 80059b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c0:	0716      	lsls	r6, r2, #28
 80059c2:	4605      	mov	r5, r0
 80059c4:	460c      	mov	r4, r1
 80059c6:	d454      	bmi.n	8005a72 <__sflush_r+0xba>
 80059c8:	684b      	ldr	r3, [r1, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dc02      	bgt.n	80059d4 <__sflush_r+0x1c>
 80059ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dd48      	ble.n	8005a66 <__sflush_r+0xae>
 80059d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	d045      	beq.n	8005a66 <__sflush_r+0xae>
 80059da:	2300      	movs	r3, #0
 80059dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059e0:	682f      	ldr	r7, [r5, #0]
 80059e2:	6a21      	ldr	r1, [r4, #32]
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	d030      	beq.n	8005a4a <__sflush_r+0x92>
 80059e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	0759      	lsls	r1, r3, #29
 80059ee:	d505      	bpl.n	80059fc <__sflush_r+0x44>
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	1ad2      	subs	r2, r2, r3
 80059f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059f6:	b10b      	cbz	r3, 80059fc <__sflush_r+0x44>
 80059f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059fa:	1ad2      	subs	r2, r2, r3
 80059fc:	2300      	movs	r3, #0
 80059fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a00:	6a21      	ldr	r1, [r4, #32]
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b0      	blx	r6
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	d106      	bne.n	8005a1a <__sflush_r+0x62>
 8005a0c:	6829      	ldr	r1, [r5, #0]
 8005a0e:	291d      	cmp	r1, #29
 8005a10:	d82b      	bhi.n	8005a6a <__sflush_r+0xb2>
 8005a12:	4a2a      	ldr	r2, [pc, #168]	@ (8005abc <__sflush_r+0x104>)
 8005a14:	410a      	asrs	r2, r1
 8005a16:	07d6      	lsls	r6, r2, #31
 8005a18:	d427      	bmi.n	8005a6a <__sflush_r+0xb2>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	6062      	str	r2, [r4, #4]
 8005a1e:	04d9      	lsls	r1, r3, #19
 8005a20:	6922      	ldr	r2, [r4, #16]
 8005a22:	6022      	str	r2, [r4, #0]
 8005a24:	d504      	bpl.n	8005a30 <__sflush_r+0x78>
 8005a26:	1c42      	adds	r2, r0, #1
 8005a28:	d101      	bne.n	8005a2e <__sflush_r+0x76>
 8005a2a:	682b      	ldr	r3, [r5, #0]
 8005a2c:	b903      	cbnz	r3, 8005a30 <__sflush_r+0x78>
 8005a2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a32:	602f      	str	r7, [r5, #0]
 8005a34:	b1b9      	cbz	r1, 8005a66 <__sflush_r+0xae>
 8005a36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	d002      	beq.n	8005a44 <__sflush_r+0x8c>
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f7ff fa9a 	bl	8004f78 <_free_r>
 8005a44:	2300      	movs	r3, #0
 8005a46:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a48:	e00d      	b.n	8005a66 <__sflush_r+0xae>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	47b0      	blx	r6
 8005a50:	4602      	mov	r2, r0
 8005a52:	1c50      	adds	r0, r2, #1
 8005a54:	d1c9      	bne.n	80059ea <__sflush_r+0x32>
 8005a56:	682b      	ldr	r3, [r5, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0c6      	beq.n	80059ea <__sflush_r+0x32>
 8005a5c:	2b1d      	cmp	r3, #29
 8005a5e:	d001      	beq.n	8005a64 <__sflush_r+0xac>
 8005a60:	2b16      	cmp	r3, #22
 8005a62:	d11e      	bne.n	8005aa2 <__sflush_r+0xea>
 8005a64:	602f      	str	r7, [r5, #0]
 8005a66:	2000      	movs	r0, #0
 8005a68:	e022      	b.n	8005ab0 <__sflush_r+0xf8>
 8005a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a6e:	b21b      	sxth	r3, r3
 8005a70:	e01b      	b.n	8005aaa <__sflush_r+0xf2>
 8005a72:	690f      	ldr	r7, [r1, #16]
 8005a74:	2f00      	cmp	r7, #0
 8005a76:	d0f6      	beq.n	8005a66 <__sflush_r+0xae>
 8005a78:	0793      	lsls	r3, r2, #30
 8005a7a:	680e      	ldr	r6, [r1, #0]
 8005a7c:	bf08      	it	eq
 8005a7e:	694b      	ldreq	r3, [r1, #20]
 8005a80:	600f      	str	r7, [r1, #0]
 8005a82:	bf18      	it	ne
 8005a84:	2300      	movne	r3, #0
 8005a86:	eba6 0807 	sub.w	r8, r6, r7
 8005a8a:	608b      	str	r3, [r1, #8]
 8005a8c:	f1b8 0f00 	cmp.w	r8, #0
 8005a90:	dde9      	ble.n	8005a66 <__sflush_r+0xae>
 8005a92:	6a21      	ldr	r1, [r4, #32]
 8005a94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a96:	4643      	mov	r3, r8
 8005a98:	463a      	mov	r2, r7
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	47b0      	blx	r6
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	dc08      	bgt.n	8005ab4 <__sflush_r+0xfc>
 8005aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab4:	4407      	add	r7, r0
 8005ab6:	eba8 0800 	sub.w	r8, r8, r0
 8005aba:	e7e7      	b.n	8005a8c <__sflush_r+0xd4>
 8005abc:	dfbffffe 	.word	0xdfbffffe

08005ac0 <_fflush_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	690b      	ldr	r3, [r1, #16]
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	b913      	cbnz	r3, 8005ad0 <_fflush_r+0x10>
 8005aca:	2500      	movs	r5, #0
 8005acc:	4628      	mov	r0, r5
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	b118      	cbz	r0, 8005ada <_fflush_r+0x1a>
 8005ad2:	6a03      	ldr	r3, [r0, #32]
 8005ad4:	b90b      	cbnz	r3, 8005ada <_fflush_r+0x1a>
 8005ad6:	f7ff f913 	bl	8004d00 <__sinit>
 8005ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f3      	beq.n	8005aca <_fflush_r+0xa>
 8005ae2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ae4:	07d0      	lsls	r0, r2, #31
 8005ae6:	d404      	bmi.n	8005af2 <_fflush_r+0x32>
 8005ae8:	0599      	lsls	r1, r3, #22
 8005aea:	d402      	bmi.n	8005af2 <_fflush_r+0x32>
 8005aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aee:	f7ff fa40 	bl	8004f72 <__retarget_lock_acquire_recursive>
 8005af2:	4628      	mov	r0, r5
 8005af4:	4621      	mov	r1, r4
 8005af6:	f7ff ff5f 	bl	80059b8 <__sflush_r>
 8005afa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005afc:	07da      	lsls	r2, r3, #31
 8005afe:	4605      	mov	r5, r0
 8005b00:	d4e4      	bmi.n	8005acc <_fflush_r+0xc>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	059b      	lsls	r3, r3, #22
 8005b06:	d4e1      	bmi.n	8005acc <_fflush_r+0xc>
 8005b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b0a:	f7ff fa33 	bl	8004f74 <__retarget_lock_release_recursive>
 8005b0e:	e7dd      	b.n	8005acc <_fflush_r+0xc>

08005b10 <__swbuf_r>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	460e      	mov	r6, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	4605      	mov	r5, r0
 8005b18:	b118      	cbz	r0, 8005b22 <__swbuf_r+0x12>
 8005b1a:	6a03      	ldr	r3, [r0, #32]
 8005b1c:	b90b      	cbnz	r3, 8005b22 <__swbuf_r+0x12>
 8005b1e:	f7ff f8ef 	bl	8004d00 <__sinit>
 8005b22:	69a3      	ldr	r3, [r4, #24]
 8005b24:	60a3      	str	r3, [r4, #8]
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	071a      	lsls	r2, r3, #28
 8005b2a:	d501      	bpl.n	8005b30 <__swbuf_r+0x20>
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	b943      	cbnz	r3, 8005b42 <__swbuf_r+0x32>
 8005b30:	4621      	mov	r1, r4
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 f82a 	bl	8005b8c <__swsetup_r>
 8005b38:	b118      	cbz	r0, 8005b42 <__swbuf_r+0x32>
 8005b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b3e:	4638      	mov	r0, r7
 8005b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6922      	ldr	r2, [r4, #16]
 8005b46:	1a98      	subs	r0, r3, r2
 8005b48:	6963      	ldr	r3, [r4, #20]
 8005b4a:	b2f6      	uxtb	r6, r6
 8005b4c:	4283      	cmp	r3, r0
 8005b4e:	4637      	mov	r7, r6
 8005b50:	dc05      	bgt.n	8005b5e <__swbuf_r+0x4e>
 8005b52:	4621      	mov	r1, r4
 8005b54:	4628      	mov	r0, r5
 8005b56:	f7ff ffb3 	bl	8005ac0 <_fflush_r>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d1ed      	bne.n	8005b3a <__swbuf_r+0x2a>
 8005b5e:	68a3      	ldr	r3, [r4, #8]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60a3      	str	r3, [r4, #8]
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	6022      	str	r2, [r4, #0]
 8005b6a:	701e      	strb	r6, [r3, #0]
 8005b6c:	6962      	ldr	r2, [r4, #20]
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d004      	beq.n	8005b7e <__swbuf_r+0x6e>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	07db      	lsls	r3, r3, #31
 8005b78:	d5e1      	bpl.n	8005b3e <__swbuf_r+0x2e>
 8005b7a:	2e0a      	cmp	r6, #10
 8005b7c:	d1df      	bne.n	8005b3e <__swbuf_r+0x2e>
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4628      	mov	r0, r5
 8005b82:	f7ff ff9d 	bl	8005ac0 <_fflush_r>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d0d9      	beq.n	8005b3e <__swbuf_r+0x2e>
 8005b8a:	e7d6      	b.n	8005b3a <__swbuf_r+0x2a>

08005b8c <__swsetup_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4b29      	ldr	r3, [pc, #164]	@ (8005c34 <__swsetup_r+0xa8>)
 8005b90:	4605      	mov	r5, r0
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	460c      	mov	r4, r1
 8005b96:	b118      	cbz	r0, 8005ba0 <__swsetup_r+0x14>
 8005b98:	6a03      	ldr	r3, [r0, #32]
 8005b9a:	b90b      	cbnz	r3, 8005ba0 <__swsetup_r+0x14>
 8005b9c:	f7ff f8b0 	bl	8004d00 <__sinit>
 8005ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba4:	0719      	lsls	r1, r3, #28
 8005ba6:	d422      	bmi.n	8005bee <__swsetup_r+0x62>
 8005ba8:	06da      	lsls	r2, r3, #27
 8005baa:	d407      	bmi.n	8005bbc <__swsetup_r+0x30>
 8005bac:	2209      	movs	r2, #9
 8005bae:	602a      	str	r2, [r5, #0]
 8005bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bba:	e033      	b.n	8005c24 <__swsetup_r+0x98>
 8005bbc:	0758      	lsls	r0, r3, #29
 8005bbe:	d512      	bpl.n	8005be6 <__swsetup_r+0x5a>
 8005bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bc2:	b141      	cbz	r1, 8005bd6 <__swsetup_r+0x4a>
 8005bc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	d002      	beq.n	8005bd2 <__swsetup_r+0x46>
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7ff f9d3 	bl	8004f78 <_free_r>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	2300      	movs	r3, #0
 8005be0:	6063      	str	r3, [r4, #4]
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f043 0308 	orr.w	r3, r3, #8
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	b94b      	cbnz	r3, 8005c06 <__swsetup_r+0x7a>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bfc:	d003      	beq.n	8005c06 <__swsetup_r+0x7a>
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 f8a5 	bl	8005d50 <__smakebuf_r>
 8005c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c0a:	f013 0201 	ands.w	r2, r3, #1
 8005c0e:	d00a      	beq.n	8005c26 <__swsetup_r+0x9a>
 8005c10:	2200      	movs	r2, #0
 8005c12:	60a2      	str	r2, [r4, #8]
 8005c14:	6962      	ldr	r2, [r4, #20]
 8005c16:	4252      	negs	r2, r2
 8005c18:	61a2      	str	r2, [r4, #24]
 8005c1a:	6922      	ldr	r2, [r4, #16]
 8005c1c:	b942      	cbnz	r2, 8005c30 <__swsetup_r+0xa4>
 8005c1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c22:	d1c5      	bne.n	8005bb0 <__swsetup_r+0x24>
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	0799      	lsls	r1, r3, #30
 8005c28:	bf58      	it	pl
 8005c2a:	6962      	ldrpl	r2, [r4, #20]
 8005c2c:	60a2      	str	r2, [r4, #8]
 8005c2e:	e7f4      	b.n	8005c1a <__swsetup_r+0x8e>
 8005c30:	2000      	movs	r0, #0
 8005c32:	e7f7      	b.n	8005c24 <__swsetup_r+0x98>
 8005c34:	20000018 	.word	0x20000018

08005c38 <memmove>:
 8005c38:	4288      	cmp	r0, r1
 8005c3a:	b510      	push	{r4, lr}
 8005c3c:	eb01 0402 	add.w	r4, r1, r2
 8005c40:	d902      	bls.n	8005c48 <memmove+0x10>
 8005c42:	4284      	cmp	r4, r0
 8005c44:	4623      	mov	r3, r4
 8005c46:	d807      	bhi.n	8005c58 <memmove+0x20>
 8005c48:	1e43      	subs	r3, r0, #1
 8005c4a:	42a1      	cmp	r1, r4
 8005c4c:	d008      	beq.n	8005c60 <memmove+0x28>
 8005c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c56:	e7f8      	b.n	8005c4a <memmove+0x12>
 8005c58:	4402      	add	r2, r0
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	428a      	cmp	r2, r1
 8005c5e:	d100      	bne.n	8005c62 <memmove+0x2a>
 8005c60:	bd10      	pop	{r4, pc}
 8005c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c6a:	e7f7      	b.n	8005c5c <memmove+0x24>

08005c6c <_sbrk_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	@ (8005c88 <_sbrk_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fb fd50 	bl	800171c <_sbrk>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_sbrk_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_sbrk_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	200002ac 	.word	0x200002ac

08005c8c <memcpy>:
 8005c8c:	440a      	add	r2, r1
 8005c8e:	4291      	cmp	r1, r2
 8005c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c94:	d100      	bne.n	8005c98 <memcpy+0xc>
 8005c96:	4770      	bx	lr
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca2:	4291      	cmp	r1, r2
 8005ca4:	d1f9      	bne.n	8005c9a <memcpy+0xe>
 8005ca6:	bd10      	pop	{r4, pc}

08005ca8 <_realloc_r>:
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	4680      	mov	r8, r0
 8005cae:	4615      	mov	r5, r2
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	b921      	cbnz	r1, 8005cbe <_realloc_r+0x16>
 8005cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb8:	4611      	mov	r1, r2
 8005cba:	f7ff b9c9 	b.w	8005050 <_malloc_r>
 8005cbe:	b92a      	cbnz	r2, 8005ccc <_realloc_r+0x24>
 8005cc0:	f7ff f95a 	bl	8004f78 <_free_r>
 8005cc4:	2400      	movs	r4, #0
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ccc:	f000 f89e 	bl	8005e0c <_malloc_usable_size_r>
 8005cd0:	4285      	cmp	r5, r0
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	d802      	bhi.n	8005cdc <_realloc_r+0x34>
 8005cd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005cda:	d8f4      	bhi.n	8005cc6 <_realloc_r+0x1e>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4640      	mov	r0, r8
 8005ce0:	f7ff f9b6 	bl	8005050 <_malloc_r>
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d0ec      	beq.n	8005cc4 <_realloc_r+0x1c>
 8005cea:	42b5      	cmp	r5, r6
 8005cec:	462a      	mov	r2, r5
 8005cee:	4621      	mov	r1, r4
 8005cf0:	bf28      	it	cs
 8005cf2:	4632      	movcs	r2, r6
 8005cf4:	f7ff ffca 	bl	8005c8c <memcpy>
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	f7ff f93c 	bl	8004f78 <_free_r>
 8005d00:	463c      	mov	r4, r7
 8005d02:	e7e0      	b.n	8005cc6 <_realloc_r+0x1e>

08005d04 <__swhatbuf_r>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	460c      	mov	r4, r1
 8005d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	b096      	sub	sp, #88	@ 0x58
 8005d10:	4615      	mov	r5, r2
 8005d12:	461e      	mov	r6, r3
 8005d14:	da0d      	bge.n	8005d32 <__swhatbuf_r+0x2e>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d1c:	f04f 0100 	mov.w	r1, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2340      	movne	r3, #64	@ 0x40
 8005d24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d28:	2000      	movs	r0, #0
 8005d2a:	6031      	str	r1, [r6, #0]
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	b016      	add	sp, #88	@ 0x58
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	466a      	mov	r2, sp
 8005d34:	f000 f848 	bl	8005dc8 <_fstat_r>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	dbec      	blt.n	8005d16 <__swhatbuf_r+0x12>
 8005d3c:	9901      	ldr	r1, [sp, #4]
 8005d3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d46:	4259      	negs	r1, r3
 8005d48:	4159      	adcs	r1, r3
 8005d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d4e:	e7eb      	b.n	8005d28 <__swhatbuf_r+0x24>

08005d50 <__smakebuf_r>:
 8005d50:	898b      	ldrh	r3, [r1, #12]
 8005d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d54:	079d      	lsls	r5, r3, #30
 8005d56:	4606      	mov	r6, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	d507      	bpl.n	8005d6c <__smakebuf_r+0x1c>
 8005d5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	2301      	movs	r3, #1
 8005d66:	6163      	str	r3, [r4, #20]
 8005d68:	b003      	add	sp, #12
 8005d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6c:	ab01      	add	r3, sp, #4
 8005d6e:	466a      	mov	r2, sp
 8005d70:	f7ff ffc8 	bl	8005d04 <__swhatbuf_r>
 8005d74:	9f00      	ldr	r7, [sp, #0]
 8005d76:	4605      	mov	r5, r0
 8005d78:	4639      	mov	r1, r7
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f7ff f968 	bl	8005050 <_malloc_r>
 8005d80:	b948      	cbnz	r0, 8005d96 <__smakebuf_r+0x46>
 8005d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d86:	059a      	lsls	r2, r3, #22
 8005d88:	d4ee      	bmi.n	8005d68 <__smakebuf_r+0x18>
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	f043 0302 	orr.w	r3, r3, #2
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	e7e2      	b.n	8005d5c <__smakebuf_r+0xc>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	6020      	str	r0, [r4, #0]
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	9b01      	ldr	r3, [sp, #4]
 8005da2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005da6:	b15b      	cbz	r3, 8005dc0 <__smakebuf_r+0x70>
 8005da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dac:	4630      	mov	r0, r6
 8005dae:	f000 f81d 	bl	8005dec <_isatty_r>
 8005db2:	b128      	cbz	r0, 8005dc0 <__smakebuf_r+0x70>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	81a3      	strh	r3, [r4, #12]
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	431d      	orrs	r5, r3
 8005dc4:	81a5      	strh	r5, [r4, #12]
 8005dc6:	e7cf      	b.n	8005d68 <__smakebuf_r+0x18>

08005dc8 <_fstat_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d07      	ldr	r5, [pc, #28]	@ (8005de8 <_fstat_r+0x20>)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	602b      	str	r3, [r5, #0]
 8005dd6:	f7fb fc79 	bl	80016cc <_fstat>
 8005dda:	1c43      	adds	r3, r0, #1
 8005ddc:	d102      	bne.n	8005de4 <_fstat_r+0x1c>
 8005dde:	682b      	ldr	r3, [r5, #0]
 8005de0:	b103      	cbz	r3, 8005de4 <_fstat_r+0x1c>
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	bd38      	pop	{r3, r4, r5, pc}
 8005de6:	bf00      	nop
 8005de8:	200002ac 	.word	0x200002ac

08005dec <_isatty_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d06      	ldr	r5, [pc, #24]	@ (8005e08 <_isatty_r+0x1c>)
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fb fc78 	bl	80016ec <_isatty>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_isatty_r+0x1a>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_isatty_r+0x1a>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	200002ac 	.word	0x200002ac

08005e0c <_malloc_usable_size_r>:
 8005e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e10:	1f18      	subs	r0, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bfbc      	itt	lt
 8005e16:	580b      	ldrlt	r3, [r1, r0]
 8005e18:	18c0      	addlt	r0, r0, r3
 8005e1a:	4770      	bx	lr

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
