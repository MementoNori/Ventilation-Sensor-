
iot_project_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e24  08002e24  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e24  08002e24  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002e38  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002e38  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009689  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b28  00000000  00000000  0000d6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0000f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c7  00000000  00000000  0000fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a5d  00000000  00000000  000103ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c013  00000000  00000000  00034e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0862  00000000  00000000  00040e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001216d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002898  00000000  00000000  00121714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00123fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002da8 	.word	0x08002da8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002da8 	.word	0x08002da8

080001c8 <LCD_setReg>:


#define I2C_RGB_ADDR  0xC4
#define I2C_LCD_ADDR  0x7C

static void LCD_setReg(unsigned char reg, unsigned char val){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {reg, val};
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	733b      	strb	r3, [r7, #12]
 80001dc:	79bb      	ldrb	r3, [r7, #6]
 80001de:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_RGB_ADDR, (uint8_t*)data, 2, 1000);
 80001e0:	f107 020c 	add.w	r2, r7, #12
 80001e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2302      	movs	r3, #2
 80001ec:	21c4      	movs	r1, #196	@ 0xc4
 80001ee:	4803      	ldr	r0, [pc, #12]	@ (80001fc <LCD_setReg+0x34>)
 80001f0:	f000 fefc 	bl	8000fec <HAL_I2C_Master_Transmit>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000030 	.word	0x20000030

08000200 <i2c_send_byteS>:
 *	->	as shown above (if required)
 *
*/
/*************************************************************************/
static void i2c_send_byteS(uint8_t *data, uint32_t len)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_LCD_ADDR, (uint8_t*)data, len, 1000);
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	b29b      	uxth	r3, r3
 800020e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000212:	9200      	str	r2, [sp, #0]
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	217c      	movs	r1, #124	@ 0x7c
 8000218:	4803      	ldr	r0, [pc, #12]	@ (8000228 <i2c_send_byteS+0x28>)
 800021a:	f000 fee7 	bl	8000fec <HAL_I2C_Master_Transmit>
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000030 	.word	0x20000030

0800022c <LCD_begin>:
 *					function with MCU related delay function.
 *
*/
/*************************************************************************/

void LCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize){
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
 8000236:	460b      	mov	r3, r1
 8000238:	71bb      	strb	r3, [r7, #6]
 800023a:	4613      	mov	r3, r2
 800023c:	717b      	strb	r3, [r7, #5]
	if (lines > 1) {
 800023e:	79bb      	ldrb	r3, [r7, #6]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d906      	bls.n	8000252 <LCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8000244:	4b33      	ldr	r3, [pc, #204]	@ (8000314 <LCD_begin+0xe8>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b31      	ldr	r3, [pc, #196]	@ (8000314 <LCD_begin+0xe8>)
 8000250:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8000252:	4a31      	ldr	r2, [pc, #196]	@ (8000318 <LCD_begin+0xec>)
 8000254:	79bb      	ldrb	r3, [r7, #6]
 8000256:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8000258:	4b30      	ldr	r3, [pc, #192]	@ (800031c <LCD_begin+0xf0>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 800025e:	797b      	ldrb	r3, [r7, #5]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d009      	beq.n	8000278 <LCD_begin+0x4c>
 8000264:	79bb      	ldrb	r3, [r7, #6]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d106      	bne.n	8000278 <LCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 800026a:	4b2a      	ldr	r3, [pc, #168]	@ (8000314 <LCD_begin+0xe8>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4b27      	ldr	r3, [pc, #156]	@ (8000314 <LCD_begin+0xe8>)
 8000276:	701a      	strb	r2, [r3, #0]

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50 msec

    HAL_Delay(50);	// 50-msec delay
 8000278:	2032      	movs	r0, #50	@ 0x32
 800027a:	f000 fb67 	bl	800094c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 800027e:	4b25      	ldr	r3, [pc, #148]	@ (8000314 <LCD_begin+0xe8>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	b2db      	uxtb	r3, r3
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f8bd 	bl	8000408 <LCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800028e:	2005      	movs	r0, #5
 8000290:	f000 fb5c 	bl	800094c <HAL_Delay>

    // second try
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 8000294:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <LCD_begin+0xe8>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f043 0320 	orr.w	r3, r3, #32
 800029c:	b2db      	uxtb	r3, r3
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 f8b2 	bl	8000408 <LCD_command>
    HAL_Delay(1);
 80002a4:	2001      	movs	r0, #1
 80002a6:	f000 fb51 	bl	800094c <HAL_Delay>

    // third go
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 80002aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <LCD_begin+0xe8>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f8a7 	bl	8000408 <LCD_command>


    // finally, set # lines, font size, etc.
    LCD_command(LCD_FUNCTIONSET | _displayfunction);
 80002ba:	4b16      	ldr	r3, [pc, #88]	@ (8000314 <LCD_begin+0xe8>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f89f 	bl	8000408 <LCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <LCD_begin+0xf4>)
 80002cc:	2204      	movs	r2, #4
 80002ce:	701a      	strb	r2, [r3, #0]
    LCD_display();
 80002d0:	f000 f834 	bl	800033c <LCD_display>

    // clear it off
    LCD_clear();
 80002d4:	f000 f828 	bl	8000328 <LCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <LCD_begin+0xf8>)
 80002da:	2202      	movs	r2, #2
 80002dc:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    LCD_command(LCD_ENTRYMODESET | _displaymode);
 80002de:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <LCD_begin+0xf8>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f88d 	bl	8000408 <LCD_command>

    // backlight init
    LCD_setReg(0, 0);
 80002ee:	2100      	movs	r1, #0
 80002f0:	2000      	movs	r0, #0
 80002f2:	f7ff ff69 	bl	80001c8 <LCD_setReg>
    LCD_setReg(1, 0);
 80002f6:	2100      	movs	r1, #0
 80002f8:	2001      	movs	r0, #1
 80002fa:	f7ff ff65 	bl	80001c8 <LCD_setReg>
    LCD_setReg(0x08, 0xAA);     // all led control by pwm
 80002fe:	21aa      	movs	r1, #170	@ 0xaa
 8000300:	2008      	movs	r0, #8
 8000302:	f7ff ff61 	bl	80001c8 <LCD_setReg>

    LCD_setColorWhite();
 8000306:	f000 f8d9 	bl	80004bc <LCD_setColorWhite>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000028 	.word	0x20000028
 8000318:	2000002b 	.word	0x2000002b
 800031c:	2000002c 	.word	0x2000002c
 8000320:	20000029 	.word	0x20000029
 8000324:	2000002a 	.word	0x2000002a

08000328 <LCD_clear>:

void LCD_clear(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	LCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 800032c:	2001      	movs	r0, #1
 800032e:	f000 f86b 	bl	8000408 <LCD_command>
	HAL_Delay(2); // this command takes a long time!
 8000332:	2002      	movs	r0, #2
 8000334:	f000 fb0a 	bl	800094c <HAL_Delay>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <LCD_display>:

void LCD_noDisplay(void){
    _displaycontrol &= ~LCD_DISPLAYON;
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <LCD_display+0x28>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <LCD_display+0x28>)
 800034c:	701a      	strb	r2, [r3, #0]
    LCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 800034e:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <LCD_display+0x28>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f855 	bl	8000408 <LCD_command>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000029 	.word	0x20000029

08000368 <LCD_setCursor>:
    {
        dta[i+1] = charmap[i];
    }
    i2c_send_byteS(dta, 9);
}
void LCD_setCursor(uint8_t col, uint8_t row){
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d104      	bne.n	8000388 <LCD_setCursor+0x20>
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000384:	b2db      	uxtb	r3, r3
 8000386:	e003      	b.n	8000390 <LCD_setCursor+0x28>
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800038e:	b2db      	uxtb	r3, r3
 8000390:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8000392:	2380      	movs	r3, #128	@ 0x80
 8000394:	733b      	strb	r3, [r7, #12]
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	2102      	movs	r1, #2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff2d 	bl	8000200 <i2c_send_byteS>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <LCD_write>:

void LCD_write(uint8_t value){
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	4603      	mov	r3, r0
 80003b6:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 80003b8:	2340      	movs	r3, #64	@ 0x40
 80003ba:	733b      	strb	r3, [r7, #12]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	2102      	movs	r1, #2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff1a 	bl	8000200 <i2c_send_byteS>
}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <LCD_print>:

void LCD_print(char* data, uint8_t size){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	460b      	mov	r3, r1
 80003de:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 80003e0:	e00a      	b.n	80003f8 <LCD_print+0x24>
		LCD_write(data[0]);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ffe1 	bl	80003ae <LCD_write>
		data++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3301      	adds	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
		size--;
 80003f2:	78fb      	ldrb	r3, [r7, #3]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	70fb      	strb	r3, [r7, #3]
	while(size>0){
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1f1      	bne.n	80003e2 <LCD_print+0xe>
	}
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <LCD_command>:

void LCD_command(uint8_t value){
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 8000412:	2380      	movs	r3, #128	@ 0x80
 8000414:	733b      	strb	r3, [r7, #12]
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800041a:	f107 030c 	add.w	r3, r7, #12
 800041e:	2102      	movs	r1, #2
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff feed 	bl	8000200 <i2c_send_byteS>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <LCD_setRGB>:

// color control
void LCD_setRGB(unsigned char r, unsigned char g, unsigned char b){
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	460b      	mov	r3, r1
 800043a:	71bb      	strb	r3, [r7, #6]
 800043c:	4613      	mov	r3, r2
 800043e:	717b      	strb	r3, [r7, #5]
	LCD_setReg(REG_RED, r);
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	4619      	mov	r1, r3
 8000444:	2004      	movs	r0, #4
 8000446:	f7ff febf 	bl	80001c8 <LCD_setReg>
    LCD_setReg(REG_GREEN, g);
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	4619      	mov	r1, r3
 800044e:	2003      	movs	r0, #3
 8000450:	f7ff feba 	bl	80001c8 <LCD_setReg>
    LCD_setReg(REG_BLUE, b);
 8000454:	797b      	ldrb	r3, [r7, #5]
 8000456:	4619      	mov	r1, r3
 8000458:	2002      	movs	r0, #2
 800045a:	f7ff feb5 	bl	80001c8 <LCD_setReg>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <LCD_setColor>:
    {255, 0, 0},                // red
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};

void LCD_setColor(unsigned char color){
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d81a      	bhi.n	80004ae <LCD_setColor+0x46>
    LCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 8000478:	79fa      	ldrb	r2, [r7, #7]
 800047a:	490f      	ldr	r1, [pc, #60]	@ (80004b8 <LCD_setColor+0x50>)
 800047c:	4613      	mov	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	4413      	add	r3, r2
 8000482:	440b      	add	r3, r1
 8000484:	7818      	ldrb	r0, [r3, #0]
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	490b      	ldr	r1, [pc, #44]	@ (80004b8 <LCD_setColor+0x50>)
 800048a:	4613      	mov	r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	4413      	add	r3, r2
 8000490:	440b      	add	r3, r1
 8000492:	3301      	adds	r3, #1
 8000494:	7819      	ldrb	r1, [r3, #0]
 8000496:	79fa      	ldrb	r2, [r7, #7]
 8000498:	4c07      	ldr	r4, [pc, #28]	@ (80004b8 <LCD_setColor+0x50>)
 800049a:	4613      	mov	r3, r2
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	4413      	add	r3, r2
 80004a0:	4423      	add	r3, r4
 80004a2:	3302      	adds	r3, #2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	461a      	mov	r2, r3
 80004a8:	f7ff ffc1 	bl	800042e <LCD_setRGB>
 80004ac:	e000      	b.n	80004b0 <LCD_setColor+0x48>
    if(color > 3)return ;
 80004ae:	bf00      	nop
}
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	08002dd8 	.word	0x08002dd8

080004bc <LCD_setColorWhite>:

void LCD_setColorAll(void){
	LCD_setRGB(0, 0, 0);
}

void LCD_setColorWhite(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	LCD_setRGB(255, 255, 255);
 80004c0:	22ff      	movs	r2, #255	@ 0xff
 80004c2:	21ff      	movs	r1, #255	@ 0xff
 80004c4:	20ff      	movs	r0, #255	@ 0xff
 80004c6:	f7ff ffb2 	bl	800042e <LCD_setRGB>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9c5 	bl	8000862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f826 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b6 	bl	800064c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f874 	bl	80005cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // LCD initialisieren (16 Zeichen, 2 Zeilen, Standard-Fontgröße)
  LCD_begin(16, 2, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2102      	movs	r1, #2
 80004e8:	2010      	movs	r0, #16
 80004ea:	f7ff fe9f 	bl	800022c <LCD_begin>

  // Farbe des Backlights setzen (0 = weiß, 1 = rot, 2 = grün, 3 = blau)
  LCD_setColor(2);
 80004ee:	2002      	movs	r0, #2
 80004f0:	f7ff ffba 	bl	8000468 <LCD_setColor>

  // Cursor setzen (Spalte 0, Zeile 0)
  LCD_setCursor(0,0);
 80004f4:	2100      	movs	r1, #0
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff ff36 	bl	8000368 <LCD_setCursor>

  // Text schreiben (String, Länge)
      LCD_print("STM32 sagt:", 11);
 80004fc:	210b      	movs	r1, #11
 80004fe:	4808      	ldr	r0, [pc, #32]	@ (8000520 <main+0x50>)
 8000500:	f7ff ff68 	bl	80003d4 <LCD_print>

  // Nächste Zeile
      LCD_setCursor(0, 1);
 8000504:	2101      	movs	r1, #1
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ff2e 	bl	8000368 <LCD_setCursor>
      LCD_print("Hallo Welt!", 11);
 800050c:	210b      	movs	r1, #11
 800050e:	4805      	ldr	r0, [pc, #20]	@ (8000524 <main+0x54>)
 8000510:	f7ff ff60 	bl	80003d4 <LCD_print>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000518:	f000 fa18 	bl	800094c <HAL_Delay>
 800051c:	e7fa      	b.n	8000514 <main+0x44>
 800051e:	bf00      	nop
 8000520:	08002dc0 	.word	0x08002dc0
 8000524:	08002dcc 	.word	0x08002dcc

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	@ 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	@ 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fc0a 	bl	8002d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800054e:	f001 f925 	bl	800179c <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f890 	bl	800067c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800055c:	2310      	movs	r3, #16
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	@ 0x60
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000578:	2328      	movs	r3, #40	@ 0x28
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f95b 	bl	8001848 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000598:	f000 f870 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2104      	movs	r1, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fd23 	bl	8002000 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f85c 	bl	800067c <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3758      	adds	r7, #88	@ 0x58
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000644 <MX_I2C1_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <MX_I2C1_Init+0x7c>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000606:	480e      	ldr	r0, [pc, #56]	@ (8000640 <MX_I2C1_Init+0x74>)
 8000608:	f000 fc54 	bl	8000eb4 <HAL_I2C_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000612:	f000 f833 	bl	800067c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <MX_I2C1_Init+0x74>)
 800061a:	f001 f819 	bl	8001650 <HAL_I2CEx_ConfigAnalogFilter>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000624:	f000 f82a 	bl	800067c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_I2C1_Init+0x74>)
 800062c:	f001 f85b 	bl	80016e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 f821 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000030 	.word	0x20000030
 8000644:	40005400 	.word	0x40005400
 8000648:	10d19ce4 	.word	0x10d19ce4

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_GPIO_Init+0x2c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <MX_GPIO_Init+0x2c>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_GPIO_Init+0x2c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <Error_Handler+0x8>

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <HAL_MspInit+0x44>)
 8000690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000692:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <HAL_MspInit+0x44>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6613      	str	r3, [r2, #96]	@ 0x60
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <HAL_MspInit+0x44>)
 800069c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x44>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006aa:	4a08      	ldr	r2, [pc, #32]	@ (80006cc <HAL_MspInit+0x44>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HAL_MspInit+0x44>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0ac      	sub	sp, #176	@ 0xb0
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2288      	movs	r2, #136	@ 0x88
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fb2d 	bl	8002d50 <memset>
  if(hi2c->Instance==I2C1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a21      	ldr	r2, [pc, #132]	@ (8000780 <HAL_I2C_MspInit+0xb0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d13b      	bne.n	8000778 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000704:	2300      	movs	r3, #0
 8000706:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fe63 	bl	80023d8 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000718:	f7ff ffb0 	bl	800067c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <HAL_I2C_MspInit+0xb4>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000720:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <HAL_I2C_MspInit+0xb4>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <HAL_I2C_MspInit+0xb4>)
 800072a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000734:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074e:	2304      	movs	r3, #4
 8000750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	@ (8000788 <HAL_I2C_MspInit+0xb8>)
 800075c:	f000 fa00 	bl	8000b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_I2C_MspInit+0xb4>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <HAL_I2C_MspInit+0xb4>)
 8000766:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800076a:	6593      	str	r3, [r2, #88]	@ 0x58
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <HAL_I2C_MspInit+0xb4>)
 800076e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000778:	bf00      	nop
 800077a:	37b0      	adds	r7, #176	@ 0xb0
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40005400 	.word	0x40005400
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <NMI_Handler+0x4>

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <MemManage_Handler+0x4>

080007a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f000 f893 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <SystemInit+0x20>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <SystemInit+0x20>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000848 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000814:	f7ff ffea 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <LoopForever+0x6>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	@ (8000850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <LoopForever+0xe>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	@ (800085c <LoopForever+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083e:	f002 fa8f 	bl	8002d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000842:	f7ff fe45 	bl	80004d0 <main>

08000846 <LoopForever>:

LoopForever:
    b LoopForever
 8000846:	e7fe      	b.n	8000846 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000848:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000854:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 8000858:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800085c:	20000088 	.word	0x20000088

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>

08000862 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000868:	2300      	movs	r3, #0
 800086a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f943 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f80e 	bl	8000894 <HAL_InitTick>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	e001      	b.n	8000888 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000884:	f7ff ff00 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000888:	79fb      	ldrb	r3, [r7, #7]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_InitTick+0x6c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d023      	beq.n	80008f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <HAL_InitTick+0x70>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <HAL_InitTick+0x6c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f941 	bl	8000b46 <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10f      	bne.n	80008ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d809      	bhi.n	80008e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f000 f919 	bl	8000b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_InitTick+0x74>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	e007      	b.n	80008f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	e004      	b.n	80008f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e001      	b.n	80008f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20000084 	.word	0x20000084

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000084 	.word	0x20000084

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff47 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5c 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb0 	bl	8000ab4 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e17f      	b.n	8000e70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8171 	beq.w	8000e6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d118      	bne.n	8000c40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c14:	2201      	movs	r2, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	f003 0201 	and.w	r2, r3, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d017      	beq.n	8000c7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d123      	bne.n	8000cd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	6939      	ldr	r1, [r7, #16]
 8000ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0203 	and.w	r2, r3, #3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80ac 	beq.w	8000e6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b5f      	ldr	r3, [pc, #380]	@ (8000e90 <HAL_GPIO_Init+0x330>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	4a5e      	ldr	r2, [pc, #376]	@ (8000e90 <HAL_GPIO_Init+0x330>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000e90 <HAL_GPIO_Init+0x330>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d2a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e94 <HAL_GPIO_Init+0x334>)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d54:	d025      	beq.n	8000da2 <HAL_GPIO_Init+0x242>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4f      	ldr	r2, [pc, #316]	@ (8000e98 <HAL_GPIO_Init+0x338>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d01f      	beq.n	8000d9e <HAL_GPIO_Init+0x23e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4e      	ldr	r2, [pc, #312]	@ (8000e9c <HAL_GPIO_Init+0x33c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d019      	beq.n	8000d9a <HAL_GPIO_Init+0x23a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4d      	ldr	r2, [pc, #308]	@ (8000ea0 <HAL_GPIO_Init+0x340>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d013      	beq.n	8000d96 <HAL_GPIO_Init+0x236>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea4 <HAL_GPIO_Init+0x344>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00d      	beq.n	8000d92 <HAL_GPIO_Init+0x232>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea8 <HAL_GPIO_Init+0x348>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x22e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4a      	ldr	r2, [pc, #296]	@ (8000eac <HAL_GPIO_Init+0x34c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_GPIO_Init+0x22a>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e00c      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	e00a      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d8e:	2305      	movs	r3, #5
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000da2:	2300      	movs	r3, #0
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000db4:	4937      	ldr	r1, [pc, #220]	@ (8000e94 <HAL_GPIO_Init+0x334>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000de6:	4a32      	ldr	r2, [pc, #200]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dec:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e10:	4a27      	ldr	r2, [pc, #156]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f47f ae78 	bne.w	8000b70 <HAL_GPIO_Init+0x10>
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	48000800 	.word	0x48000800
 8000ea0:	48000c00 	.word	0x48000c00
 8000ea4:	48001000 	.word	0x48001000
 8000ea8:	48001400 	.word	0x48001400
 8000eac:	48001800 	.word	0x48001800
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e08d      	b.n	8000fe2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fbf8 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2224      	movs	r2, #36	@ 0x24
 8000ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0201 	bic.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d107      	bne.n	8000f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	e006      	b.n	8000f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d108      	bne.n	8000f56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	e007      	b.n	8000f66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69d9      	ldr	r1, [r3, #28]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a1a      	ldr	r2, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	817b      	strh	r3, [r7, #10]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b20      	cmp	r3, #32
 800100a:	f040 80fd 	bne.w	8001208 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_I2C_Master_Transmit+0x30>
 8001018:	2302      	movs	r3, #2
 800101a:	e0f6      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001024:	f7ff fc86 	bl	8000934 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2319      	movs	r3, #25
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 f914 	bl	8001264 <I2C_WaitOnFlagUntilTimeout>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0e1      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2221      	movs	r2, #33	@ 0x21
 800104a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2210      	movs	r2, #16
 8001052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	893a      	ldrh	r2, [r7, #8]
 8001066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001072:	b29b      	uxth	r3, r3
 8001074:	2bff      	cmp	r3, #255	@ 0xff
 8001076:	d906      	bls.n	8001086 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	22ff      	movs	r2, #255	@ 0xff
 800107c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800107e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e007      	b.n	8001096 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800108a:	b29a      	uxth	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001090:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001094:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800109a:	2b00      	cmp	r3, #0
 800109c:	d024      	beq.n	80010e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	8979      	ldrh	r1, [r7, #10]
 80010da:	4b4e      	ldr	r3, [pc, #312]	@ (8001214 <HAL_I2C_Master_Transmit+0x228>)
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 fa83 	bl	80015ec <I2C_TransferConfig>
 80010e6:	e066      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	8979      	ldrh	r1, [r7, #10]
 80010f0:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <HAL_I2C_Master_Transmit+0x228>)
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 fa78 	bl	80015ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010fc:	e05b      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	6a39      	ldr	r1, [r7, #32]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 f907 	bl	8001316 <I2C_WaitOnTXISFlagUntilTimeout>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e07b      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800112c:	b29b      	uxth	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800113a:	3b01      	subs	r3, #1
 800113c:	b29a      	uxth	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001146:	b29b      	uxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d034      	beq.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001150:	2b00      	cmp	r3, #0
 8001152:	d130      	bne.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	2200      	movs	r2, #0
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f880 	bl	8001264 <I2C_WaitOnFlagUntilTimeout>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e04d      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001172:	b29b      	uxth	r3, r3
 8001174:	2bff      	cmp	r3, #255	@ 0xff
 8001176:	d90e      	bls.n	8001196 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	22ff      	movs	r2, #255	@ 0xff
 800117c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001182:	b2da      	uxtb	r2, r3
 8001184:	8979      	ldrh	r1, [r7, #10]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 fa2c 	bl	80015ec <I2C_TransferConfig>
 8001194:	e00f      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800119a:	b29a      	uxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	8979      	ldrh	r1, [r7, #10]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 fa1b 	bl	80015ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d19e      	bne.n	80010fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	6a39      	ldr	r1, [r7, #32]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f8ed 	bl	80013a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e01a      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2220      	movs	r2, #32
 80011da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6859      	ldr	r1, [r3, #4]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_I2C_Master_Transmit+0x22c>)
 80011e8:	400b      	ands	r3, r1
 80011ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2220      	movs	r2, #32
 80011f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001208:	2302      	movs	r3, #2
  }
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	80002000 	.word	0x80002000
 8001218:	fe00e800 	.word	0xfe00e800

0800121c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b02      	cmp	r3, #2
 8001230:	d103      	bne.n	800123a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d007      	beq.n	8001258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	619a      	str	r2, [r3, #24]
  }
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001274:	e03b      	b.n	80012ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f8d6 	bl	800142c <I2C_IsErrorOccurred>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e041      	b.n	800130e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d02d      	beq.n	80012ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001292:	f7ff fb4f 	bl	8000934 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d302      	bcc.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d122      	bne.n	80012ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4013      	ands	r3, r2
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d113      	bne.n	80012ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f043 0220 	orr.w	r2, r3, #32
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2220      	movs	r2, #32
 80012d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4013      	ands	r3, r2
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	bf0c      	ite	eq
 80012fe:	2301      	moveq	r3, #1
 8001300:	2300      	movne	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	429a      	cmp	r2, r3
 800130a:	d0b4      	beq.n	8001276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001322:	e033      	b.n	800138c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f87f 	bl	800142c <I2C_IsErrorOccurred>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e031      	b.n	800139c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133e:	d025      	beq.n	800138c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001340:	f7ff faf8 	bl	8000934 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	429a      	cmp	r2, r3
 800134e:	d302      	bcc.n	8001356 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11a      	bne.n	800138c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b02      	cmp	r3, #2
 8001362:	d013      	beq.n	800138c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2220      	movs	r2, #32
 8001374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e007      	b.n	800139c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b02      	cmp	r3, #2
 8001398:	d1c4      	bne.n	8001324 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013b0:	e02f      	b.n	8001412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f838 	bl	800142c <I2C_IsErrorOccurred>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e02d      	b.n	8001422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c6:	f7ff fab5 	bl	8000934 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d302      	bcc.n	80013dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d11a      	bne.n	8001412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d013      	beq.n	8001412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f043 0220 	orr.w	r2, r3, #32
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e007      	b.n	8001422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b20      	cmp	r3, #32
 800141e:	d1c8      	bne.n	80013b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d068      	beq.n	800152a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2210      	movs	r2, #16
 800145e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001460:	e049      	b.n	80014f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d045      	beq.n	80014f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800146a:	f7ff fa63 	bl	8000934 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	429a      	cmp	r2, r3
 8001478:	d302      	bcc.n	8001480 <I2C_IsErrorOccurred+0x54>
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d13a      	bne.n	80014f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800149e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014a2:	d121      	bne.n	80014e8 <I2C_IsErrorOccurred+0xbc>
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014aa:	d01d      	beq.n	80014e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80014ac:	7cfb      	ldrb	r3, [r7, #19]
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d01a      	beq.n	80014e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80014c2:	f7ff fa37 	bl	8000934 <HAL_GetTick>
 80014c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014c8:	e00e      	b.n	80014e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80014ca:	f7ff fa33 	bl	8000934 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b19      	cmp	r3, #25
 80014d6:	d907      	bls.n	80014e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80014e6:	e006      	b.n	80014f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d1e9      	bne.n	80014ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	2b20      	cmp	r3, #32
 8001502:	d003      	beq.n	800150c <I2C_IsErrorOccurred+0xe0>
 8001504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0aa      	beq.n	8001462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2220      	movs	r2, #32
 800151a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01c      	beq.n	80015da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff fe3b 	bl	800121c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <I2C_IsErrorOccurred+0x1bc>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	431a      	orrs	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2220      	movs	r2, #32
 80015c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80015da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	fe00e800 	.word	0xfe00e800

080015ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	817b      	strh	r3, [r7, #10]
 80015fa:	4613      	mov	r3, r2
 80015fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015fe:	897b      	ldrh	r3, [r7, #10]
 8001600:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001604:	7a7b      	ldrb	r3, [r7, #9]
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800160c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	4313      	orrs	r3, r2
 8001616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800161a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	0d5b      	lsrs	r3, r3, #21
 8001626:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <I2C_TransferConfig+0x60>)
 800162c:	430b      	orrs	r3, r1
 800162e:	43db      	mvns	r3, r3
 8001630:	ea02 0103 	and.w	r1, r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	03ff63ff 	.word	0x03ff63ff

08001650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b20      	cmp	r3, #32
 8001664:	d138      	bne.n	80016d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001670:	2302      	movs	r3, #2
 8001672:	e032      	b.n	80016da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	@ 0x24
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016d8:	2302      	movs	r3, #2
  }
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d139      	bne.n	8001770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001706:	2302      	movs	r3, #2
 8001708:	e033      	b.n	8001772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2224      	movs	r2, #36	@ 0x24
 8001716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2220      	movs	r2, #32
 8001760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	e000      	b.n	8001772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001770:	2302      	movs	r3, #2
  }
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <HAL_PWREx_GetVoltageRange+0x18>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000

0800179c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017aa:	d130      	bne.n	800180e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017b8:	d038      	beq.n	800182c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017c2:	4a1e      	ldr	r2, [pc, #120]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2232      	movs	r2, #50	@ 0x32
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0c9b      	lsrs	r3, r3, #18
 80017dc:	3301      	adds	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e0:	e002      	b.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f4:	d102      	bne.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f2      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001808:	d110      	bne.n	800182c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e00f      	b.n	800182e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800181a:	d007      	beq.n	800182c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001824:	4a05      	ldr	r2, [pc, #20]	@ (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40007000 	.word	0x40007000
 8001840:	20000000 	.word	0x20000000
 8001844:	431bde83 	.word	0x431bde83

08001848 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e3ca      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185a:	4b97      	ldr	r3, [pc, #604]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001864:	4b94      	ldr	r3, [pc, #592]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80e4 	beq.w	8001a44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <HAL_RCC_OscConfig+0x4a>
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b0c      	cmp	r3, #12
 8001886:	f040 808b 	bne.w	80019a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b01      	cmp	r3, #1
 800188e:	f040 8087 	bne.w	80019a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001892:	4b89      	ldr	r3, [pc, #548]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x62>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e3a2      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1a      	ldr	r2, [r3, #32]
 80018ae:	4b82      	ldr	r3, [pc, #520]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_RCC_OscConfig+0x7c>
 80018ba:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018c2:	e005      	b.n	80018d0 <HAL_RCC_OscConfig+0x88>
 80018c4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d223      	bcs.n	800191c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fd1d 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e383      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e8:	4b73      	ldr	r3, [pc, #460]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a72      	ldr	r2, [pc, #456]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b70      	ldr	r3, [pc, #448]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	496d      	ldr	r1, [pc, #436]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001906:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4968      	ldr	r1, [pc, #416]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
 800191a:	e025      	b.n	8001968 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191c:	4b66      	ldr	r3, [pc, #408]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a65      	ldr	r2, [pc, #404]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b63      	ldr	r3, [pc, #396]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4960      	ldr	r1, [pc, #384]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	495b      	ldr	r1, [pc, #364]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fcdd 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e343      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001968:	f000 fc4a 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b52      	ldr	r3, [pc, #328]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	4950      	ldr	r1, [pc, #320]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac0 <HAL_RCC_OscConfig+0x278>)
 8001986:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001988:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe ff81 	bl	8000894 <HAL_InitTick>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d052      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	e327      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d032      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019a8:	4b43      	ldr	r3, [pc, #268]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a42      	ldr	r2, [pc, #264]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019b4:	f7fe ffbe 	bl	8000934 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019bc:	f7fe ffba 	bl	8000934 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e310      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019da:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a36      	ldr	r2, [pc, #216]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4931      	ldr	r1, [pc, #196]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	492c      	ldr	r1, [pc, #176]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
 8001a0c:	e01a      	b.n	8001a44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a1a:	f7fe ff8b 	bl	8000934 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a22:	f7fe ff87 	bl	8000934 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e2dd      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a34:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x1da>
 8001a40:	e000      	b.n	8001a44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d074      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x21a>
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d10e      	bne.n	8001a7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d10b      	bne.n	8001a7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d064      	beq.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d160      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e2ba      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x24a>
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e026      	b.n	8001ae0 <HAL_RCC_OscConfig+0x298>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a9a:	d115      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x280>
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a02      	ldr	r2, [pc, #8]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x298>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08002de4 	.word	0x08002de4
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	4ba0      	ldr	r3, [pc, #640]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a9f      	ldr	r2, [pc, #636]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7fe ff24 	bl	8000934 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7fe ff20 	bl	8000934 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	@ 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e276      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b02:	4b92      	ldr	r3, [pc, #584]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2a8>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7fe ff10 	bl	8000934 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7fe ff0c 	bl	8000934 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	@ 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e262      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2a:	4b88      	ldr	r3, [pc, #544]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2d0>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d060      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x310>
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d116      	bne.n	8001b86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b58:	4b7c      	ldr	r3, [pc, #496]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x328>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e23f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b76      	ldr	r3, [pc, #472]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	4973      	ldr	r1, [pc, #460]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	e040      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d023      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6e      	ldr	r2, [pc, #440]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fecb 	bl	8000934 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7fe fec7 	bl	8000934 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e21d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	4b65      	ldr	r3, [pc, #404]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b62      	ldr	r3, [pc, #392]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	495f      	ldr	r1, [pc, #380]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e018      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7fe fea7 	bl	8000934 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7fe fea3 	bl	8000934 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1f9      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bfc:	4b53      	ldr	r3, [pc, #332]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c22:	4a4a      	ldr	r2, [pc, #296]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7fe fe82 	bl	8000934 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c34:	f7fe fe7e 	bl	8000934 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1d4      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c46:	4b41      	ldr	r3, [pc, #260]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ef      	beq.n	8001c34 <HAL_RCC_OscConfig+0x3ec>
 8001c54:	e01b      	b.n	8001c8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c56:	4b3d      	ldr	r3, [pc, #244]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7fe fe65 	bl	8000934 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7fe fe61 	bl	8000934 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1b7      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c80:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ef      	bne.n	8001c6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80a6 	beq.w	8001de8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10d      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	4a26      	ldr	r2, [pc, #152]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d118      	bne.n	8001d06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce0:	f7fe fe28 	bl	8000934 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7fe fe24 	bl	8000934 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e17a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4d8>
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d1e:	e029      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_OscConfig+0x50c>
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2e:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3e:	4a03      	ldr	r2, [pc, #12]	@ (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000
 8001d54:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5a:	4a9b      	ldr	r2, [pc, #620]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d64:	4b98      	ldr	r3, [pc, #608]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6a:	4a97      	ldr	r2, [pc, #604]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d016      	beq.n	8001daa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7fe fdda 	bl	8000934 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7fe fdd6 	bl	8000934 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e12a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ed      	beq.n	8001d84 <HAL_RCC_OscConfig+0x53c>
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7fe fdc3 	bl	8000934 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7fe fdbf 	bl	8000934 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e113      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ed      	bne.n	8001db2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	4a79      	ldr	r2, [pc, #484]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80fe 	beq.w	8001fee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	f040 80d0 	bne.w	8001f9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dfc:	4b72      	ldr	r3, [pc, #456]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d130      	bne.n	8001e72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d127      	bne.n	8001e72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d11f      	bne.n	8001e72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e3c:	2a07      	cmp	r2, #7
 8001e3e:	bf14      	ite	ne
 8001e40:	2201      	movne	r2, #1
 8001e42:	2200      	moveq	r2, #0
 8001e44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d113      	bne.n	8001e72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	3b01      	subs	r3, #1
 8001e58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d06e      	beq.n	8001f50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d069      	beq.n	8001f4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e78:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e84:	4b50      	ldr	r3, [pc, #320]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0ad      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e94:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea0:	f7fe fd48 	bl	8000934 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe fd44 	bl	8000934 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e09a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eba:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec6:	4b40      	ldr	r3, [pc, #256]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b40      	ldr	r3, [pc, #256]	@ (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ee0:	0212      	lsls	r2, r2, #8
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ee8:	0852      	lsrs	r2, r2, #1
 8001eea:	3a01      	subs	r2, #1
 8001eec:	0552      	lsls	r2, r2, #21
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ef4:	0852      	lsrs	r2, r2, #1
 8001ef6:	3a01      	subs	r2, #1
 8001ef8:	0652      	lsls	r2, r2, #25
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f00:	0912      	lsrs	r2, r2, #4
 8001f02:	0452      	lsls	r2, r2, #17
 8001f04:	430a      	orrs	r2, r1
 8001f06:	4930      	ldr	r1, [pc, #192]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f18:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f24:	f7fe fd06 	bl	8000934 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe fd02 	bl	8000934 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e058      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3e:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f4a:	e050      	b.n	8001fee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e04f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f50:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d148      	bne.n	8001fee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f68:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a16      	ldr	r2, [pc, #88]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f74:	f7fe fcde 	bl	8000934 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe fcda 	bl	8000934 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e030      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x734>
 8001f9a:	e028      	b.n	8001fee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d023      	beq.n	8001fea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <HAL_RCC_OscConfig+0x780>)
 8001fa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7fe fcc1 	bl	8000934 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	e00c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7fe fcbd 	bl	8000934 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d905      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e013      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_RCC_OscConfig+0x7b0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ec      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_RCC_OscConfig+0x7b0>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4905      	ldr	r1, [pc, #20]	@ (8001ff8 <HAL_RCC_OscConfig+0x7b0>)
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_RCC_OscConfig+0x7b4>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
 8001fe8:	e001      	b.n	8001fee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	feeefffc 	.word	0xfeeefffc

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0e7      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b75      	ldr	r3, [pc, #468]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b72      	ldr	r3, [pc, #456]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4970      	ldr	r1, [pc, #448]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b6e      	ldr	r3, [pc, #440]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0cf      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4b66      	ldr	r3, [pc, #408]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800205c:	429a      	cmp	r2, r3
 800205e:	d908      	bls.n	8002072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b63      	ldr	r3, [pc, #396]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4960      	ldr	r1, [pc, #384]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d04c      	beq.n	8002118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b5a      	ldr	r3, [pc, #360]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0a6      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209e:	4b54      	ldr	r3, [pc, #336]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d115      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e09a      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b6:	4b4e      	ldr	r3, [pc, #312]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e08e      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c6:	4b4a      	ldr	r3, [pc, #296]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e086      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b46      	ldr	r3, [pc, #280]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4943      	ldr	r1, [pc, #268]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e8:	f7fe fc24 	bl	8000934 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7fe fc20 	bl	8000934 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e06e      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002130:	429a      	cmp	r2, r3
 8002132:	d208      	bcs.n	8002146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b2e      	ldr	r3, [pc, #184]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	492b      	ldr	r1, [pc, #172]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002146:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d210      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 0207 	bic.w	r2, r3, #7
 800215c:	4923      	ldr	r1, [pc, #140]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e036      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4918      	ldr	r1, [pc, #96]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a0:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4910      	ldr	r1, [pc, #64]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021b4:	f000 f824 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	490b      	ldr	r1, [pc, #44]	@ (80021f4 <HAL_RCC_ClockConfig+0x1f4>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
 80021d0:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <HAL_RCC_ClockConfig+0x1f8>)
 80021d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_ClockConfig+0x1fc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fb5b 	bl	8000894 <HAL_InitTick>
 80021de:	4603      	mov	r3, r0
 80021e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08002de4 	.word	0x08002de4
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	@ 0x24
 8002204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220e:	4b3e      	ldr	r3, [pc, #248]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002218:	4b3b      	ldr	r3, [pc, #236]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d121      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d11e      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002240:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e005      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002250:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800225c:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <HAL_RCC_GetSysClockFreq+0x10c>)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10d      	bne.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d102      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x110>)
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	e004      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d101      	bne.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x114>)
 8002286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d134      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800228e:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d003      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0xac>
 80022a4:	e005      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x110>)
 80022a8:	617b      	str	r3, [r7, #20]
      break;
 80022aa:	e005      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ae:	617b      	str	r3, [r7, #20]
      break;
 80022b0:	e002      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	617b      	str	r3, [r7, #20]
      break;
 80022b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	3301      	adds	r3, #1
 80022c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	fb03 f202 	mul.w	r2, r3, r2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	0e5b      	lsrs	r3, r3, #25
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	3301      	adds	r3, #1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f8:	69bb      	ldr	r3, [r7, #24]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	@ 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	08002df4 	.word	0x08002df4
 8002310:	00f42400 	.word	0x00f42400
 8002314:	007a1200 	.word	0x007a1200

08002318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002324:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002330:	f7ff fa26 	bl	8001780 <HAL_PWREx_GetVoltageRange>
 8002334:	6178      	str	r0, [r7, #20]
 8002336:	e014      	b.n	8002362 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	4b25      	ldr	r3, [pc, #148]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	4a24      	ldr	r2, [pc, #144]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002342:	6593      	str	r3, [r2, #88]	@ 0x58
 8002344:	4b22      	ldr	r3, [pc, #136]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002350:	f7ff fa16 	bl	8001780 <HAL_PWREx_GetVoltageRange>
 8002354:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	4a1d      	ldr	r2, [pc, #116]	@ (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002360:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002368:	d10b      	bne.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b80      	cmp	r3, #128	@ 0x80
 800236e:	d919      	bls.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2ba0      	cmp	r3, #160	@ 0xa0
 8002374:	d902      	bls.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002376:	2302      	movs	r3, #2
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	e013      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e010      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b80      	cmp	r3, #128	@ 0x80
 8002386:	d902      	bls.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002388:	2303      	movs	r3, #3
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e00a      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b80      	cmp	r3, #128	@ 0x80
 8002392:	d102      	bne.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002394:	2302      	movs	r3, #2
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	e004      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b70      	cmp	r3, #112	@ 0x70
 800239e:	d101      	bne.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a0:	2301      	movs	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 0207 	bic.w	r2, r3, #7
 80023ac:	4909      	ldr	r1, [pc, #36]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023b4:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40022000 	.word	0x40022000

080023d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e0:	2300      	movs	r3, #0
 80023e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e4:	2300      	movs	r3, #0
 80023e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d041      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023fc:	d02a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002402:	d824      	bhi.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002404:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002408:	d008      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800240a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800240e:	d81e      	bhi.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002418:	d010      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800241a:	e018      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800241c:	4b86      	ldr	r3, [pc, #536]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a85      	ldr	r2, [pc, #532]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002426:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002428:	e015      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fabb 	bl	80029ac <RCCEx_PLLSAI1_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800243a:	e00c      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3320      	adds	r3, #32
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fba6 	bl	8002b94 <RCCEx_PLLSAI2_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800244c:	e003      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	74fb      	strb	r3, [r7, #19]
      break;
 8002452:	e000      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800245c:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800246a:	4973      	ldr	r1, [pc, #460]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002472:	e001      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d041      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002488:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800248c:	d02a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800248e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002492:	d824      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002498:	d008      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800249a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800249e:	d81e      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a8:	d010      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024aa:	e018      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024ac:	4b62      	ldr	r3, [pc, #392]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a61      	ldr	r2, [pc, #388]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024b8:	e015      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fa73 	bl	80029ac <RCCEx_PLLSAI1_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ca:	e00c      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3320      	adds	r3, #32
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fb5e 	bl	8002b94 <RCCEx_PLLSAI2_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024dc:	e003      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	74fb      	strb	r3, [r7, #19]
      break;
 80024e2:	e000      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ec:	4b52      	ldr	r3, [pc, #328]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024fa:	494f      	ldr	r1, [pc, #316]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002502:	e001      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80a0 	beq.w	8002656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800251a:	4b47      	ldr	r3, [pc, #284]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	4a40      	ldr	r2, [pc, #256]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	@ 0x58
 800253c:	4b3e      	ldr	r3, [pc, #248]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002548:	2301      	movs	r3, #1
 800254a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254c:	4b3b      	ldr	r3, [pc, #236]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a3a      	ldr	r2, [pc, #232]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002558:	f7fe f9ec 	bl	8000934 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800255e:	e009      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7fe f9e8 	bl	8000934 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d902      	bls.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	74fb      	strb	r3, [r7, #19]
        break;
 8002572:	e005      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002574:	4b31      	ldr	r3, [pc, #196]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d15c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002586:	4b2c      	ldr	r3, [pc, #176]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002590:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01f      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d019      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025a4:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025b0:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	4a20      	ldr	r2, [pc, #128]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d0:	4a19      	ldr	r2, [pc, #100]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe f9a7 	bl	8000934 <HAL_GetTick>
 80025e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e8:	e00b      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe f9a3 	bl	8000934 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d902      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002600:	e006      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ec      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002616:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002626:	4904      	ldr	r1, [pc, #16]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800262e:	e009      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	74bb      	strb	r3, [r7, #18]
 8002634:	e006      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002644:	7c7b      	ldrb	r3, [r7, #17]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264a:	4b9e      	ldr	r3, [pc, #632]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	4a9d      	ldr	r2, [pc, #628]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002662:	4b98      	ldr	r3, [pc, #608]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002668:	f023 0203 	bic.w	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002670:	4994      	ldr	r1, [pc, #592]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002684:	4b8f      	ldr	r3, [pc, #572]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	f023 020c 	bic.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002692:	498c      	ldr	r1, [pc, #560]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026a6:	4b87      	ldr	r3, [pc, #540]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	4983      	ldr	r1, [pc, #524]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026c8:	4b7e      	ldr	r3, [pc, #504]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	497b      	ldr	r1, [pc, #492]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026ea:	4b76      	ldr	r3, [pc, #472]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f8:	4972      	ldr	r1, [pc, #456]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800270c:	4b6d      	ldr	r3, [pc, #436]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	496a      	ldr	r1, [pc, #424]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800272e:	4b65      	ldr	r3, [pc, #404]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	4961      	ldr	r1, [pc, #388]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002750:	4b5c      	ldr	r3, [pc, #368]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275e:	4959      	ldr	r1, [pc, #356]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002772:	4b54      	ldr	r3, [pc, #336]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002778:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002780:	4950      	ldr	r1, [pc, #320]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002794:	4b4b      	ldr	r3, [pc, #300]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a2:	4948      	ldr	r1, [pc, #288]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027b6:	4b43      	ldr	r3, [pc, #268]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	493f      	ldr	r1, [pc, #252]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d028      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d8:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e6:	4937      	ldr	r1, [pc, #220]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f6:	d106      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a31      	ldr	r2, [pc, #196]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	e011      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800280a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800280e:	d10c      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f8c8 	bl	80029ac <RCCEx_PLLSAI1_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d028      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002836:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	491f      	ldr	r1, [pc, #124]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002854:	d106      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002860:	60d3      	str	r3, [r2, #12]
 8002862:	e011      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f899 	bl	80029ac <RCCEx_PLLSAI1_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d02b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a2:	4908      	ldr	r1, [pc, #32]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028b2:	d109      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b4:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a02      	ldr	r2, [pc, #8]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028be:	60d3      	str	r3, [r2, #12]
 80028c0:	e014      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f867 	bl	80029ac <RCCEx_PLLSAI1_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02f      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028f8:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002906:	4928      	ldr	r1, [pc, #160]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f844 	bl	80029ac <RCCEx_PLLSAI1_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d014      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	74bb      	strb	r3, [r7, #18]
 8002932:	e011      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800293c:	d10c      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3320      	adds	r3, #32
 8002942:	2102      	movs	r1, #2
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f925 	bl	8002b94 <RCCEx_PLLSAI2_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002996:	4904      	ldr	r1, [pc, #16]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800299e:	7cbb      	ldrb	r3, [r7, #18]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000

080029ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ba:	4b75      	ldr	r3, [pc, #468]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d018      	beq.n	80029f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029c6:	4b72      	ldr	r3, [pc, #456]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0203 	and.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10d      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
       ||
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029de:	4b6c      	ldr	r3, [pc, #432]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
       ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d047      	beq.n	8002a82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	e044      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d018      	beq.n	8002a32 <RCCEx_PLLSAI1_Config+0x86>
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d825      	bhi.n	8002a50 <RCCEx_PLLSAI1_Config+0xa4>
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d002      	beq.n	8002a0e <RCCEx_PLLSAI1_Config+0x62>
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d009      	beq.n	8002a20 <RCCEx_PLLSAI1_Config+0x74>
 8002a0c:	e020      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a0e:	4b60      	ldr	r3, [pc, #384]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11d      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1e:	e01a      	b.n	8002a56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a20:	4b5b      	ldr	r3, [pc, #364]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d116      	bne.n	8002a5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a30:	e013      	b.n	8002a5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a32:	4b57      	ldr	r3, [pc, #348]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a3e:	4b54      	ldr	r3, [pc, #336]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a4e:	e006      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      break;
 8002a54:	e004      	b.n	8002a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a66:	4b4a      	ldr	r3, [pc, #296]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	4944      	ldr	r1, [pc, #272]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d17d      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a88:	4b41      	ldr	r3, [pc, #260]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a40      	ldr	r2, [pc, #256]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a94:	f7fd ff4e 	bl	8000934 <HAL_GetTick>
 8002a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a9a:	e009      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a9c:	f7fd ff4a 	bl	8000934 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d902      	bls.n	8002ab0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	73fb      	strb	r3, [r7, #15]
        break;
 8002aae:	e005      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1ef      	bne.n	8002a9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d160      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d111      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac8:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6892      	ldr	r2, [r2, #8]
 8002ad8:	0211      	lsls	r1, r2, #8
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68d2      	ldr	r2, [r2, #12]
 8002ade:	0912      	lsrs	r2, r2, #4
 8002ae0:	0452      	lsls	r2, r2, #17
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	492a      	ldr	r1, [pc, #168]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	610b      	str	r3, [r1, #16]
 8002aea:	e027      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d112      	bne.n	8002b18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af2:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002afa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	0211      	lsls	r1, r2, #8
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6912      	ldr	r2, [r2, #16]
 8002b08:	0852      	lsrs	r2, r2, #1
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0552      	lsls	r2, r2, #21
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	491f      	ldr	r1, [pc, #124]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	610b      	str	r3, [r1, #16]
 8002b16:	e011      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b18:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	0211      	lsls	r1, r2, #8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6952      	ldr	r2, [r2, #20]
 8002b2e:	0852      	lsrs	r2, r2, #1
 8002b30:	3a01      	subs	r2, #1
 8002b32:	0652      	lsls	r2, r2, #25
 8002b34:	430a      	orrs	r2, r1
 8002b36:	4916      	ldr	r1, [pc, #88]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a13      	ldr	r2, [pc, #76]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7fd fef4 	bl	8000934 <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b4e:	e009      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b50:	f7fd fef0 	bl	8000934 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	73fb      	strb	r3, [r7, #15]
          break;
 8002b62:	e005      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b64:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ef      	beq.n	8002b50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	4904      	ldr	r1, [pc, #16]	@ (8002b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000

08002b94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d018      	beq.n	8002be0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bae:	4b67      	ldr	r3, [pc, #412]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0203 	and.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bc6:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d047      	beq.n	8002c6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e044      	b.n	8002c6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d018      	beq.n	8002c1a <RCCEx_PLLSAI2_Config+0x86>
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d825      	bhi.n	8002c38 <RCCEx_PLLSAI2_Config+0xa4>
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d002      	beq.n	8002bf6 <RCCEx_PLLSAI2_Config+0x62>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d009      	beq.n	8002c08 <RCCEx_PLLSAI2_Config+0x74>
 8002bf4:	e020      	b.n	8002c38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bf6:	4b55      	ldr	r3, [pc, #340]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d11d      	bne.n	8002c3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c06:	e01a      	b.n	8002c3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c08:	4b50      	ldr	r3, [pc, #320]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e013      	b.n	8002c42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c26:	4b49      	ldr	r3, [pc, #292]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c36:	e006      	b.n	8002c46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e004      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	430b      	orrs	r3, r1
 8002c64:	4939      	ldr	r1, [pc, #228]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d167      	bne.n	8002d40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c70:	4b36      	ldr	r3, [pc, #216]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a35      	ldr	r2, [pc, #212]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fd fe5a 	bl	8000934 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c82:	e009      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c84:	f7fd fe56 	bl	8000934 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	73fb      	strb	r3, [r7, #15]
        break;
 8002c96:	e005      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c98:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ef      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d14a      	bne.n	8002d40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb0:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	0211      	lsls	r1, r2, #8
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	0912      	lsrs	r2, r2, #4
 8002cc8:	0452      	lsls	r2, r2, #17
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	491f      	ldr	r1, [pc, #124]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	614b      	str	r3, [r1, #20]
 8002cd2:	e011      	b.n	8002cf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6892      	ldr	r2, [r2, #8]
 8002ce4:	0211      	lsls	r1, r2, #8
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6912      	ldr	r2, [r2, #16]
 8002cea:	0852      	lsrs	r2, r2, #1
 8002cec:	3a01      	subs	r2, #1
 8002cee:	0652      	lsls	r2, r2, #25
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	4916      	ldr	r1, [pc, #88]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cf8:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fd fe16 	bl	8000934 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d0a:	e009      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d0c:	f7fd fe12 	bl	8000934 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d902      	bls.n	8002d20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d1e:	e005      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d20:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ef      	beq.n	8002d0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4904      	ldr	r1, [pc, #16]	@ (8002d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000

08002d50 <memset>:
 8002d50:	4402      	add	r2, r0
 8002d52:	4603      	mov	r3, r0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d100      	bne.n	8002d5a <memset+0xa>
 8002d58:	4770      	bx	lr
 8002d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5e:	e7f9      	b.n	8002d54 <memset+0x4>

08002d60 <__libc_init_array>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	4d0d      	ldr	r5, [pc, #52]	@ (8002d98 <__libc_init_array+0x38>)
 8002d64:	4c0d      	ldr	r4, [pc, #52]	@ (8002d9c <__libc_init_array+0x3c>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	42a6      	cmp	r6, r4
 8002d6e:	d109      	bne.n	8002d84 <__libc_init_array+0x24>
 8002d70:	4d0b      	ldr	r5, [pc, #44]	@ (8002da0 <__libc_init_array+0x40>)
 8002d72:	4c0c      	ldr	r4, [pc, #48]	@ (8002da4 <__libc_init_array+0x44>)
 8002d74:	f000 f818 	bl	8002da8 <_init>
 8002d78:	1b64      	subs	r4, r4, r5
 8002d7a:	10a4      	asrs	r4, r4, #2
 8002d7c:	2600      	movs	r6, #0
 8002d7e:	42a6      	cmp	r6, r4
 8002d80:	d105      	bne.n	8002d8e <__libc_init_array+0x2e>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d88:	4798      	blx	r3
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7ee      	b.n	8002d6c <__libc_init_array+0xc>
 8002d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d92:	4798      	blx	r3
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7f2      	b.n	8002d7e <__libc_init_array+0x1e>
 8002d98:	08002e24 	.word	0x08002e24
 8002d9c:	08002e24 	.word	0x08002e24
 8002da0:	08002e24 	.word	0x08002e24
 8002da4:	08002e28 	.word	0x08002e28

08002da8 <_init>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr

08002db4 <_fini>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr
